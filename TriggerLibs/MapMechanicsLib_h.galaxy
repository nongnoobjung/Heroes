include "TriggerLibs/HeroesLib_h"

//--------------------------------------------------------------------------------------------------
// Library: Maps
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libMapM_ge_JungleCampDefenderTypes_Custom = 0;
const int libMapM_ge_JungleCampDefenderTypes_SiegeGiants = 1;
const int libMapM_ge_JungleCampDefenderTypes_Knights = 2;
const int libMapM_ge_JungleCampDefenderTypes_GraveGolem = 3;
const int libMapM_ge_JungleCampDefenderTypes_Doubloons = 4;
const int libMapM_ge_JungleCampMercTypes_Custom = 0;
const int libMapM_ge_JungleCampMercTypes_SiegeGiants = 1;
const int libMapM_ge_JungleCampMercTypes_Ogres = 2;
const int libMapM_ge_JungleCampMercTypes_GraveGolem = 3;
const int libMapM_ge_JungleCampMercTypes_AshenvaleAncients = 4;
const int libMapM_ge_JungleCampTypes_MercCamp = 0;
const int libMapM_ge_JungleCampTypes_DoubloonCamp = 1;
const int libMapM_ge_JungleCampTypes_DoubloonSmallCamp = 2;
const int libMapM_ge_JungleCampTypes_AshenvaleForestGuardians = 3;
const int libMapM_ge_JungleCampTextTagTypes_Helper = 0;
const int libMapM_ge_JungleCampTextTagTypes_Respawn = 1;
const int libMapM_ge_JungleCampTextTagTypes_Special = 2;
const int libMapM_ge_JungleCampStates_Idle = 0;
const int libMapM_ge_JungleCampStates_Busy = 1;
const int libMapM_ge_JungleCampStates_Dead = 2;
const int libMapM_ge_JungleCampStates_Paused = 3;
const int libMapM_ge_JungleCampStates_Hibernating = 4;
const int libMapM_ge_JungleCampStates_HibernatingReadyToRespawn = 5;
string libMapM_ge_JungleCampStates_Ident (int lp_val);
const int libMapM_ge_MapMechanicType_None = 0;
const int libMapM_ge_MapMechanicType_CurseofRavenLord = 1;
const int libMapM_ge_MapMechanicType_Cannonballs = 2;
const int libMapM_ge_MapMechanicType_GardensDragon = 3;
const int libMapM_ge_MapMechanicType_Underworld = 4;
const int libMapM_ge_MapMechanicType_HauntedWoods = 5;
const int libMapM_ge_MapMechanicType_CapturePoints = 6;
const int libMapM_ge_MapMechanicType_SoulCages = 7;
const int libMapM_ge_MapMechanicType_TowerPush = 8;
const int libMapM_ge_MapMechanicAnnouncementAllyOptions_Neutral = 0;
const int libMapM_ge_MapMechanicAnnouncementAllyOptions_Ally = 1;
const int libMapM_ge_MapMechanicAnnouncementAllyOptions_Enemy = 2;
const int libMapM_ge_MMRavenCurseState_Starting = 0;
const int libMapM_ge_MMRavenCurseState_TributeSpawning = 1;
const int libMapM_ge_MMRavenCurseState_TributeSpawned = 2;
const int libMapM_ge_MMRavenCurseState_NoActivity = 3;
const int libMapM_ge_MMRavenCurseState_Cursed = 4;
const int libMapM_ge_MMRavenCurseState_Lifted = 5;
const int libMapM_ge_MMCannonballsState_Starting = 0;
const int libMapM_ge_MMCannonballsState_Paying = 1;
const int libMapM_ge_MMCannonballsState_Shooting = 2;
const int libMapM_ge_MMGardensDragonState_Idle = 0;
const int libMapM_ge_MMGardensDragonState_ObelisksWarning = 1;
const int libMapM_ge_MMGardensDragonState_ObelisksAvailable = 2;
const int libMapM_ge_MMGardensDragonState_DragonRampaging = 3;
const int libMapM_ge_MMUnderworldGroundPlane_None = 0;
const int libMapM_ge_MMUnderworldGroundPlane_AboveGround = 1;
const int libMapM_ge_MMUnderworldGroundPlane_UnderGround = 2;
const int libMapM_ge_MMUnderworldState_Idle = 0;
const int libMapM_ge_MMUnderworldState_Preparing = 1;
const int libMapM_ge_MMUnderworldState_CollectingSkulls = 2;
const int libMapM_ge_MMUnderworldState_BossSummoned = 3;

// Constants
const fixed libMapM_gv_bALJungleCampCaptureTime = 1.5;
const fixed libMapM_gv_bALJungleCampCaptureRadius = 3.0;
const int libMapM_gv_dataJungleMaxNumberOfDefenderTypes = 6;
const int libMapM_gv_dataJungleMaxNumberOfDefendersPerCamp = 10;
const int libMapM_gv_dataJungleMaxNumberOfMercTypes = 6;
const int libMapM_gv_dataJungleMaxNumberOfMercsSpawned = 10;
const int libMapM_gv_jungleMaxCamps = 15;
const int libMapM_gv_mapMechanicsMaxCount_C = 4;
const int libMapM_gv_mMRavenTributeSpawnPointsCountMax_C = 50;
const fixed libMapM_gv_mMRavenStartTime_C = 150.0;
const fixed libMapM_gv_mMRavenRevealRadius_C = 4.5;
const fixed libMapM_gv_mMRavenSpawnWarningTimerTime_C = 15.0;
const fixed libMapM_gv_mMRavenTributeSpawnTimeFirst_C = 17.0;
const fixed libMapM_gv_mMRavenTributeSpawnTime_C = 70.0;
const int libMapM_gv_mMRavenTributeSpawnTimeVariance = 20;
const fixed libMapM_gv_mMRavenTributePostCurseWaitTime_C = 70.0;
const int libMapM_gv_mMRavenTributeThreshold_C = 3;
const fixed libMapM_gv_mMRavenCurseDuration_C = 70.0;
const fixed libMapM_gv_mMCannonballsGhostShipSpawnTimer = 70.0;
const int libMapM_gv_mMCannonballsStartInBattleship_C = 0;
const int libMapM_gv_mMCannonballsBallsSubmitMax_C = 10;
const int libMapM_gv_mMCannonballsBallsSubmitMaxInc_C = 2;
const int libMapM_gv_mMCannonballsStockedInBattleship_C = 12;
const int libMapM_gv_mMShotsPerBarrage_C = 3;
const int libMapM_gv_mMCannonballsHeroStatusBarIconVisibleThreadhold_C = 1;
const fixed libMapM_gv_mMCannonballsTreasureChestFirstTimerDur_C = 50.0;
const fixed libMapM_gv_mMCannonballsTreasureChestTimerMin_C = 150.0;
const fixed libMapM_gv_mMCannonballsTreasureChestTimerMax_C = 210.0;
const int libMapM_gv_mMCannonballsGhostChestCoinsDrop_C = 5;
const int libMapM_gv_mMCannonballsTreasureChestMaxCount_C = 2;
const fixed libMapM_gv_mMCannonballsTreasureChestPingTimerTime = 15.0;
const int libMapM_gv_mMGardensDragonDragonTowerObeliskCount_C = 2;
const int libMapM_gv_mMGardensDragonDragonTowerMaxCount = 10;
const fixed libMapM_gv_mMGardensDragonWarningTime_C = 30.0;
const fixed libMapM_gv_mMGardensDragonDragonTowerStartTime_C = 45.0;
const fixed libMapM_gv_mMGardensDragonDragonTowerRespawnTime_C = 90.0;
const fixed libMapM_gv_mMGardensDragonDragonKnightStartingTime_C = 50.0;
const fixed libMapM_gv_mMGardensDragonDragonTowerCaptureTime_C = 4.0;
const fixed libMapM_gv_mMGardensDragonDragonTowerOverCaptureTime_C = 0.0;
const fixed libMapM_gv_mMGardensDragonDragonballTowerCaptureRadius_C = 4.0;
const fixed libMapM_gv_mMGardensDragonDragonStatueReminderTimerTime_C = 15.0;
const fixed libMapM_gv_mMGardensDragonDragonStatueChannelTime_C = 3.0;
const fixed libMapM_gv_mMGardensDragonDragonStatueHelperTextTagHeightOffset_C = -2.5;
const fixed libMapM_gv_mMUnderworldBossBuffHPPercentPerSkull_C = 0.05;
const fixed libMapM_gv_mMUnderworldBossBuffDmgPercentPerSkull_C = 0.05;
const fixed libMapM_gv_mMUnderworldEventCooldown_C = 90.0;
const fixed libMapM_gv_mMUnderworldSummonedBossDuration_C = 30.0;
const int libMapM_gv_mMUnderworldTotalSkulls_C = 100;
const int libMapM_gv_mMUnderworldDropSkullsBossFinalDrop_C = 12;
const int libMapM_gv_mMUnderworldDropSkullsBossStartHPPercent_C = 75;
const fixed libMapM_gv_mMUnderworldDropSkullsBossPerHPPercent_C = 25.0;
const int libMapM_gv_mMUnderworldDropSkullsBossPerHPDrop_C = 6;
const int libMapM_gv_mMUnderworldDropSkullsMinion = 2;
const int libMapM_gv_mMUnderworldSummonedBossMaxScalingTicks = 45;
const fixed libMapM_gv_mMUnderworldStartTime_C = 90.0;
const fixed libMapM_gv_mMUnderworldPrepDuration_C = 30.0;
const fixed libMapM_gv_mMUnderworldOpenDuration_C = 180.0;
const int libMapM_gv_mMHoCLivingTreesMaximumNumberofLivingTrees = 511;
const int libMapM_gv_mMHoCForestMaximumNumberofAncients = 7;
const int libMapM_gv_mMHoCForestMaximumNumberForests = 31;
const fixed libMapM_gv_mMHoCForestRegrowthWarningTime = 5.0;

// Structures
struct libMapM_gs_JungleCampDefenderData {
    bool lv_campIsSoloable;
    fixed lv_respawnTime;
    int lv_numberOfCreeps;
    string[libMapM_gv_dataJungleMaxNumberOfDefendersPerCamp + 1] lv_creepUnitTypes;
    fixed lv_xPAwardForCapture;
    int lv_numberOfRanks;
    int[libCore_gv_dataScalingMaxScalingTicks + 1] lv_campLevel;
    int[libCore_gv_dataScalingMaxScalingTicks + 1] lv_xPBuffAmount;
};

struct libMapM_gs_JungleCampMercData {
    int lv_numberOfMinionsSpawned;
    string[libMapM_gv_dataJungleMaxNumberOfMercsSpawned + 1] lv_spawnedMinionUnitTypes;
    int lv_numberOfRanks;
    int[libCore_gv_dataScalingMaxScalingTicks + 1] lv_xPBuffAmount;
};

struct libMapM_gs_JungleCreepCamps {
    int lv_mapDataCampType;
    int lv_mapDataCampDefenderType;
    point lv_mapDataCampCaptainSpawnPoint;
    point[libMapM_gv_dataJungleMaxNumberOfDefendersPerCamp + 1] lv_mapDataDefenderSpawnPoints;
    region lv_mapDataDefenderLeashRegion;
    int lv_mapDataMercSpawnType;
    point[libCore_gv_bALMaxTeams + 1] lv_mapDataMercMinionRallyPoint;
    int lv_mapDataBattleshipSpawnType;
    unit lv_mapDataCampBuildingBuilding;
    bool lv_defenderCampIsSoloable;
    int lv_defenderCount;
    string[libMapM_gv_dataJungleMaxNumberOfDefendersPerCamp + 1] lv_defenderUnitTypes;
    fixed lv_defenderRespawnTime;
    int lv_defenderNumberOfRanks;
    int[libCore_gv_dataScalingMaxScalingTicks + 1] lv_defenderCampLevel;
    fixed lv_defenderCaptureXPValue;
    int lv_mercNumberOfMinionsSpawned;
    string[libMapM_gv_dataJungleMaxNumberOfMercsSpawned + 1] lv_mercSpawnedMinionUnitType;
    int lv_mercNumberOfRanks;
    int[libCore_gv_bALMaxTeams + 1] lv_mercSpawnLane;
    int[libCore_gv_bALMaxTeams + 1] lv_mercSpawnFirstWaypointIndex;
    int lv_piratesNumberOfRanks;
    unit lv_campIconUnit;
    unit lv_campOwnershipFlagUnit;
    int lv_campHelperTextTag;
    int lv_campRespawnTextTag;
    int lv_campSpecialTextTag;
    int lv_campTextTagType;
    timer lv_stateCreepRespawnTimer;
    timer lv_stateCreepActiveTimer;
    int lv_stateCurrentDefenderScalingTicks;
    int lv_stateCurrentMercScalingTicks;
    int lv_aIState;
    int lv_aIDefenderAIIndex;
    region lv_captureCaptureRegion;
    unit lv_captureCircleOfPowerUnit;
    bool lv_captureCaptureEnabled;
    int lv_captureCaptureCounter;
    int lv_captureCapturePointIndex;
    int lv_statTrackingOrderCaptures;
    int lv_statTrackingChaosCaptures;
};

struct libMapM_gs_MapMechanicUsedTracker {
    bool lv_healingFountainUsed;
    bool lv_docksDoubloonsChest;
    bool lv_docksTurnInPoint;
    bool lv_dragonShrine;
    bool lv_dragonStatue;
    bool lv_minesEntrance;
    bool lv_minesExit;
    bool lv_ravenTribute;
};

struct libMapM_gs_RavenCurseTeamStats {
    int lv_triburteCollected;
    bool lv_cursed;
};

struct libMapM_gs_MMGardensDragonDragonballTowers {
    unit lv_shrineUnit;
    region lv_captureRegion;
    bool lv_enabled;
    int lv_captureBeaconIndex;
    int lv_helperText;
    unit lv_shrineBeamTargetUnit;
};

struct libMapM_gs_UnderworldMinionGroup {
    point[16] lv_positions;
    string[16] lv_minionType;
    int lv_minionCount;
    unitgroup lv_units;
    region lv_area;
    int lv_regenGlobeCount;
    bool lv_regenGlobeDropped;
    unit lv_iconUnit;
    int lv_defenderIndex;
};

struct libMapM_gs_MMHoCLivingTree {
    point lv_location;
    unit lv_treeUnit;
    string lv_treeType;
    fixed lv_facing;
};

struct libMapM_gs_MMHoCForest {
    string[libMapM_gv_mMHoCForestMaximumNumberofAncients + 1] lv_ancientsUnitTypes;
    point[libMapM_gv_mMHoCForestMaximumNumberofAncients + 1] lv_ancientsPoints;
    fixed[libMapM_gv_mMHoCForestMaximumNumberofAncients + 1] lv_ancientsFacings;
    actor lv_actorRegion;
    region lv_mapDataRegion;
    point lv_mapDataLaneAggroPointOrder;
    point lv_mapDataLaneAggroPointChaos;
    unit[libMapM_gv_mMHoCForestMaximumNumberofAncients + 1] lv_mapDataAncients;
    int lv_mapDataNumberofAncients;
    int lv_orderAggroLane;
    int lv_orderAggroWaypointIndex;
    int lv_chaosAggroLane;
    int lv_chaosAggroWaypointIndex;
};

// Variable Declarations
fixed libMapM_gv_bALJungleLeashRespawnTime;
fixed libMapM_gv_bALJungleCampScalingTimerDuration;
fixed libMapM_gv_bALJungleOgreMageAuraAbilityPowerPercentage;
libMapM_gs_JungleCampDefenderData[libMapM_gv_dataJungleMaxNumberOfDefenderTypes + 1] libMapM_gv_dataJungleCampDefenderData;
libMapM_gs_JungleCampMercData[libMapM_gv_dataJungleMaxNumberOfMercTypes + 1] libMapM_gv_dataJungleCampMercData;
libMapM_gs_JungleCreepCamps[libMapM_gv_jungleMaxCamps + 1] libMapM_gv_jungleCreepCamps;
int libMapM_gv_jungleNumberOfCreepCamps;
unitgroup[libMapM_gv_jungleMaxCamps + 1] libMapM_gv_jungleMiniMapIconGroup;
unit[libMapM_gv_jungleMaxCamps + 1] libMapM_gv_jungleMiniMapLeader;
int[libMapM_gv_jungleMaxCamps + 1] libMapM_gv_jungleMiniMapOrderPath;
int[libMapM_gv_jungleMaxCamps + 1] libMapM_gv_jungleMiniMapChaosPath;
int[libMapM_gv_jungleMaxCamps + 1] libMapM_gv_jungleMiniMapObserverPath;
bool libMapM_gv_jungleCampsShouldBeHibernating;
actor libMapM_gv_mapMechanicControllerActor;
int[libMapM_gv_mapMechanicsMaxCount_C + 1] libMapM_gv_mapMechanics;
int libMapM_gv_mapMechanicsCount;
trigger[libMapM_gv_mapMechanicsMaxCount_C + 1] libMapM_gv_mapMechanicsInitCallbacks;
libMapM_gs_MapMechanicUsedTracker[libCore_gv_bALMaxPlayers + 1] libMapM_gv_mapMechanicUsedTracker;
int[libCore_gv_bALMaxEnginePlayerCount + 1] libMapM_gv_mMIntroCutscene;
int libMapM_gv_mMIntroCutscenePlayer;
bool[libCore_gv_bALMaxEnginePlayerCount + 1] libMapM_gv_mMIntroCutsceneCompleted;
bool[libCore_gv_bALMaxEnginePlayerCount + 1] libMapM_gv_mMIntroCutsceneFinished;
int libMapM_gv_mMAnnouncementDialog;
point[libMapM_gv_mMRavenTributeSpawnPointsCountMax_C + 1] libMapM_gv_mMRavenTributeSpawnPoints;
int libMapM_gv_mMRavenTributeSpawnPointsCount;
revealer libMapM_gv_mMRavenOrderRevealer;
revealer libMapM_gv_mMRavenChaosRevealer;
unitgroup libMapM_gv_mMRavenTributes;
unit libMapM_gv_mMRavenTributeWarning;
libMapM_gs_RavenCurseTeamStats[libCore_gv_bALMaxTeams + 1] libMapM_gv_mMRavenTeamStats;
timer libMapM_gv_mMRavenStartTimer;
timer libMapM_gv_mMRavenWarningTimer;
timer libMapM_gv_mMRavenTributeSpawnTimer;
int libMapM_gv_mMRavenLastTributeSpawnIndex1;
int libMapM_gv_mMRavenLastTributeSpawnIndex2;
int libMapM_gv_mMRavenTributeSpawnGroupIndex;
timer libMapM_gv_mMRavenCurseTimer;
bool libMapM_gv_mMRavenCurseLifted;
sound libMapM_gv_mMRavenCurseSound;
bool libMapM_gv_mMRavenEventFirstTime;
point libMapM_gv_mMCannonballsGhostShipLoc;
point libMapM_gv_mMCannonballsGhostShipBeaconLoc;
int[3] libMapM_gv_mMCannonballsBallsSubmitMaxCurrent;
unit libMapM_gv_mMCannonballsGhostShip;
int libMapM_gv_mMCannonballsGhostShipTotalAmmo;
int[3] libMapM_gv_mMCannonballsGhostShipTargetTownIndex;
int[3][21] libMapM_gv_mMCannonballsGhostShipTargetTownOrders;
int[3] libMapM_gv_mMCannonballsGhostShipTargetTownOrdersCount;
unit libMapM_gv_mMCannonballsGhostShipMissile;
int libMapM_gv_mMCannonballsGhostShipMissileTargetPing;
bool libMapM_gv_mMCannonballsGhostShipShooting;
unit libMapM_gv_mMCannonballsGhostShipBeacon;
unit libMapM_gv_mMCannonballsGhostShipCaptain;
point libMapM_gv_mMCannonballsGhostShipCaptainWorkPoint;
region libMapM_gv_mMCannonballsGhostShipPlayerDetectorRegion;
int[3] libMapM_gv_mMCannonballsBallsSubmitted;
int libMapM_gv_mMCannonballsGhostShipLastTeam;
point[libMapM_gv_mMCannonballsTreasureChestMaxCount_C + 1] libMapM_gv_mMCannonballsGhostChestLocations;
timer libMapM_gv_mMCannonballsTreasureChestTimer;
unit[libMapM_gv_mMCannonballsTreasureChestMaxCount_C + 1] libMapM_gv_mMCannonballsTreasureChestChests;
timer libMapM_gv_mMCannonballsTreasureChestPingTimer;
bool libMapM_gv_mMCannonballsTreasureChestIsFirstChest;
bool libMapM_gv_mMCannonballsTrasmissionPlaying;
int libMapM_gv_mMCannonballsTransmissionFiringIndex;
int libMapM_gv_mMCannonballsTransmissionFiringRandomness;
text libMapM_gv_mMGardensDragonDragonballKnightNameC;
text libMapM_gv_mMGardensDragonDragonballShrineNameC;
unit libMapM_gv_mMGardensDragonTowerMoon;
unit libMapM_gv_mMGardensDragonTowerStar;
sound libMapM_gv_mMGardensDragonAmbientSound;
unit libMapM_gv_mMGardensDragonUnit;
unit libMapM_gv_mMGardensDragonStatue;
int libMapM_gv_mMGardensDragonStatueTextTag;
int libMapM_gv_mMGardensDragonStatueTextTagAllyOwned;
int libMapM_gv_mMGardensDragonStatueTextTagEnemyOwned;
timer libMapM_gv_mMGardensDragonDragonKnightLifeTimer;
point libMapM_gv_mMGardensDragonDragonKnightRespawnPoint;
int libMapM_gv_mMGardensDragonCurrentState;
bool libMapM_gv_mMGardensDragonSpawnFirstTime;
timer libMapM_gv_mMGardensDragonDragonTowerStartTimer;
timer libMapM_gv_mMGardensDragonDragonTowerRespawnTimer;
timer libMapM_gv_mMGardensDragonDragonTowerWarningTimer;
timer libMapM_gv_mMGardensDragonDragonStatueActiveReminderTimer;
int libMapM_gv_mMGardensDragonDragonTowerCount;
libMapM_gs_MMGardensDragonDragonballTowers[libMapM_gv_mMGardensDragonDragonTowerMaxCount + 1] libMapM_gv_mMGardensDragonDragonTowers;
actor libMapM_gv_mMGardensDragonSoundRegionActor;
region libMapM_gv_mMGardensDragonSoundRegion;
bool libMapM_gv_mMDragonballsTransmissionShrinesRechargeFirstTime;
region libMapM_gv_mMUnderworldAboveGroundPlayable;
region libMapM_gv_mMUnderworldAboveGroundCamera;
region libMapM_gv_mMUnderworldUnderGroundPlayable;
region libMapM_gv_mMUnderworldFullWorldCamera;
unitgroup libMapM_gv_mMUnderworldGatesAbove;
unitgroup libMapM_gv_mMUnderworldGatesBelow;
int[libCore_gv_bALMaxEnginePlayerCount + 1] libMapM_gv_mMUnderworldEnterGateIndex;
int[libCore_gv_bALMaxEnginePlayerCount + 1] libMapM_gv_mMUnderworldPlayerPlane;
unit[libCore_gv_bALMaxPlayers + 1] libMapM_gv_mMUnderworldCurrentHole;
string[33] libMapM_gv_mMUnderworldAmbience;
libMapM_gs_UnderworldMinionGroup[31] libMapM_gv_mMUnderworldMinionGroups;
int libMapM_gv_mMUnderworldMinionGroupCount;
unit[31] libMapM_gv_mMUnderworldMinionGroupIcon;
int libMapM_gv_mMUnderworldSkullTotal;
unit libMapM_gv_mMUnderworldBoss;
unit libMapM_gv_mMUnderworldBossIconUnit;
region libMapM_gv_mMUnderworldBossRegion;
point libMapM_gv_mMUnderworldBossLocation;
int libMapM_gv_mMUnderworldBossSkullDroppedIndex;
int libMapM_gv_mMUnderworldBossGlobeDroppedIndex;
unit libMapM_gv_mMUnderworldBossIconTeamColor;
unit libMapM_gv_mMUnderworldBossIconNoTeamColor;
unitgroup libMapM_gv_mMUnderworldSkulls;
fixed libMapM_gv_mMUnderworldSummonedBossHP;
fixed libMapM_gv_mMUnderworldSummonedBossDamage;
fixed libMapM_gv_mMUnderworldSummonedBossDamageStun;
fixed libMapM_gv_mMUnderworldSummonedBossDamageRootImpact;
fixed libMapM_gv_mMUnderworldSummonedBossDamageRootSustain;
unit[3] libMapM_gv_mMUnderworldSummonedBoss;
point[3] libMapM_gv_mMUnderworldSummonedBossLocation;
unit[3] libMapM_gv_mMUnderworldSummonedBossBody;
bool libMapM_gv_mMUnderworldSummonedBossRevive;
bool libMapM_gv_mMUnderworldOpenFirstTime;
timer libMapM_gv_mMUnderworldPrepTimer;
int libMapM_gv_mMUnderworldMineOpenTimes;
int[3] libMapM_gv_mMUnderworldSkullCollected;
bool libMapM_gv_mMUnderworldOpened;
int libMapM_gv_mMUnderworldMinimapSplit;
bool libMapM_gv_mMUnderworldTransmissionUnderworldOpenFirstTime;
libMapM_gs_MMHoCLivingTree[libMapM_gv_mMHoCLivingTreesMaximumNumberofLivingTrees + 1] libMapM_gv_mMHoCLivingTrees;
int libMapM_gv_mMHoCLivingTreesNumberofLivingTrees;
int libMapM_gv_mMHoCForestNumberofForests;
libMapM_gs_MMHoCForest[libMapM_gv_mMHoCForestMaximumNumberForests + 1] libMapM_gv_mMHoCForests;
unitgroup libMapM_gv_mMHoCForestActiveAncients;
int libMapM_gv_mMHoCForestJungleCamp;

// Function Declarations
void libMapM_gf_DataInitializeScalingDataForDefender (int lp_defenderType, string lp_scalingBehavior);
void libMapM_gf_DataInitializeScalingDataForMerc (int lp_mercType, string lp_scalingBehavior);
void libMapM_gf_JungleInitializeDefenderData (int lp_camp);
void libMapM_gf_JungleInitializeMercCampData (int lp_camp);
void libMapM_gf_JungleInitializeDoubloonCampData (int lp_camp);
void libMapM_gf_JungleInitializeDoubloonSmallCampData (int lp_camp);
void libMapM_gf_JungleInitializeAshenvaleForestCampData (int lp_camp);
void libMapM_gf_JungleInitializeCreepCamp (int lp_camp);
int libMapM_gf_JungleGetJungleCampForUnit (unit lp_unit);
string libMapM_gf_JungleGetCurrentIconForJungleCamp (int lp_camp, bool lp_alive);
string libMapM_gf_JungleGetPortraitForJungleCamp (int lp_camp);
string libMapM_gf_JungleGetPortraitForUnitType (string lp_unitType);
text libMapM_gf_JungleGetNameTextForJungleCamp (int lp_camp);
unit libMapM_gf_JungleGetRandomEnemyHeroInRangeOfMinionWithMinimumRangeRequirements (unit lp_creep, point lp_position, fixed lp_minimumRange, fixed lp_maximumRange, unit lp_restrictedUnit);
int libMapM_gf_JungleGetCampIndexFromDefenderIndex (int lp_defenderIndex);
void libMapM_gf_JungleUpdateTextTagForCamp (int lp_camp, int lp_type);
void libMapM_gf_JungleSwitchToTextTagForCamp (int lp_camp, int lp_type);
void libMapM_gf_JungleUpdateMinimapTooltipForCamp (int lp_camp);
void libMapM_gf_JungleRespawnCreepsForCamp (int lp_camp);
void libMapM_gf_JungleTransitionCampIntoState (int lp_camp, int lp_state);
void libMapM_gf_JungleHibernateCampDefender (unit lp_defender);
void libMapM_gf_JungleStopHibernatingCampDefender (unit lp_defender, point lp_location);
void libMapM_gf_JungleStartHibernateCamps ();
void libMapM_gf_JungleStopHibernateCamps ();
void libMapM_gf_JungleTurnOnCampCaptureBeacon (int lp_camp);
void libMapM_gf_JungleTurnOffCampCaptureBeacon (int lp_camp, int lp_owner);
void libMapM_gf_JungleTransitionCampCaptureBeacontoHidden (int lp_camp);
void libMapM_gf_JungleGrantCaptureRewards (int lp_camp, int lp_owner, bool lp_hasMercLordTalent);
void libMapM_gf_JungleMercCampCapturedAnnouncement (int lp_camp, int lp_owner);
void libMapM_gf_JungleSpawnMercMinions (int lp_camp, int lp_owner, bool lp_hasMercLordTalent);
void libMapM_gf_JungleSetMiniMapIconForMercMinions (int lp_camp, string lp_mercUnitMiniMapModel, unitgroup lp_mercUnitGroup);
void libMapM_gf_JungleCreateMercPath (unit lp_mercLeader, bool lp_newPath);
void libMapM_gf_MapMechanicAdd (int lp_mechanic, trigger lp_initializeCallback);
int libMapM_gf_MapMechanicIndex (int lp_mechanic);
bool libMapM_gf_MapMechanicExistsOnMap (int lp_mechanic);
int libMapM_gf_PrimaryMapMechanic ();
void libMapM_gf_PlayMapMechanicIntroForPlayer (int lp_player, string lp_cutscene);
bool libMapM_gf_MapMechanicIntroFinished (int lp_player);
void libMapM_gf_MapMechanicDisplayAnnouncement (text lp_announcement, bool lp_writeOut, fixed lp_writeOutDuration, fixed lp_duration, int lp_allyOption, playergroup lp_players);
void libMapM_gf_MMRavenCurseAddTributeSpawnLocation (point lp_spawnLocation);
bool libMapM_gf_MMRavenCurseStarted ();
void libMapM_gf_MMRavenCurseInit ();
fixed libMapM_gf_MMRavenStartTime ();
fixed libMapM_gf_MMRavenTributeSpawnTime ();
int libMapM_gf_MMRavenTributeThresholdAmount ();
string libMapM_gf_MMRavenTributeUnitType ();
point libMapM_gf_MMRavenRandomSpawnPoint ();
int libMapM_gf_MMRavenSpawnPointSide (int lp_index);
void libMapM_gf_MMRavenStartSpawnTimer5090 ();
void libMapM_gf_MMRavenTributeCollectionThresholdReached (int lp_winningTeam);
void libMapM_gf_MMRavenCurseStart (int lp_cursedPlayer);
void libMapM_gf_MMRavenApplyCurseEffectOnMinion (unit lp_unit);
void libMapM_gf_MMRavenRemoveCurseEffectOnMinion (unit lp_minion);
void libMapM_gf_MMRavenPlayCurseSound (int lp_cursedTeam);
void libMapM_gf_MMRavenObjectiveUIUpdateText ();
void libMapM_gf_MMRavenTransmissionEventStartQ (playergroup lp_players);
void libMapM_gf_MMRavenTransmissionTributeAboutToSpawnQ (playergroup lp_players);
void libMapM_gf_MMRavenTransmissionEnemyCursedQ (playergroup lp_players);
void libMapM_gf_MMRavenTransmissionAlliedCursedQ (playergroup lp_players);
void libMapM_gf_MMRavenTransmissionObserverCursedQ ();
void libMapM_gf_MMRavenTransmissionEnemyCurseEndsQ (playergroup lp_players);
void libMapM_gf_MMRavenTransmissionAlliedCurseEndsQ (playergroup lp_players);
void libMapM_gf_MMRavenTransmissionObserverCurseEndsQ ();
void libMapM_gf_MMCannonballsInitGhostshipInfo (point lp_shipLoc, point lp_beaconLoc);
void libMapM_gf_MMCannonballsInitTreasureChestInfo (point lp_chestLocation1, point lp_chestLocation2);
int libMapM_gf_MMCannonballsHeroCannonballsCount (int lp_player, unit lp_heroUnit);
int libMapM_gf_MMCannonballsPirateShipCost (int lp_team);
void libMapM_gf_MMCannonballsAddGhostShipTargetOrder (int lp_team, int lp_townIndex);
void libMapM_gf_MMCannonballsInit ();
int libMapM_gf_MMCannonballsTeamCannonballsCount (int lp_team);
void libMapM_gf_MMCannonballsSubmitReqIncrease (int lp_team);
void libMapM_gf_MMCannonballsSetHeroCannonballsCount (int lp_player, unit lp_heroUnit, int lp_count);
void libMapM_gf_MMCannonballsModifyHeroCannonballsCount (int lp_player, unit lp_heroUnit, int lp_count);
void libMapM_gf_MMCannonballsCreepRewards (int lp_camp);
void libMapM_gf_MMCannonballsObjectiveUIUpdateText ();
void libMapM_gf_MMCannonballsGhostShipWakeUp (int lp_team, bool lp_new);
void libMapM_gf_MMCannonballsDisableBeacon ();
void libMapM_gf_MMCannonballsBattleshipBehavior ();
int libMapM_gf_MMCannonballsBattleshipAmmoLeft ();
unit libMapM_gf_MMCannonballsBattleshipNextTarget ();
bool libMapM_gf_MMCannonballsTownAlive (int lp_town, int lp_player);
void libMapM_gf_MMCannonballsBattleshipShooting (unit lp_target);
void libMapM_gf_MMCannonballsBattleshipShootingShakingCamera (point lp_targetLocation);
text libMapM_gf_MMCannonballsTreasureSetTextTagHelp ();
text libMapM_gf_MMCannonballsTreasureSetTextTagDoubloonCount (int lp_coins);
void libMapM_gf_MMCannonballsTreasureTheFirstTimer ();
void libMapM_gf_MMCannonballsTreasureStartTimer ();
void libMapM_gf_MMCannonballsTransmissionSpawningQ (playergroup lp_players);
void libMapM_gf_MMCannonballsTransmissionSummonedQ (playergroup lp_players);
void libMapM_gf_MMCannonballsTransmissionSummonedObserversQ (playergroup lp_players);
void libMapM_gf_MMCannonballsTransmissionSummonedForEnemyQ (playergroup lp_players);
void libMapM_gf_MMCannonballsTransmissionSummonedContinueAAQ (playergroup lp_players);
void libMapM_gf_MMCannonballsTransmissionSummonedContinueABQ (playergroup lp_players);
void libMapM_gf_MMCannonballsTransmissionSummonedContinueBAQ (playergroup lp_players);
void libMapM_gf_MMCannonballsTransmissionSummonedContinueBBQ (playergroup lp_players);
void libMapM_gf_MMCannonballsTransmissionFiringQ (playergroup lp_players);
void libMapM_gf_MMCannonballsTransmissionLeavingQ (playergroup lp_players);
void libMapM_gf_MMCannonballsTransmissionChestSpawningQ (playergroup lp_players);
void libMapM_gf_MMCannonballsTransmissionChestSpawningFirstTimeQ (playergroup lp_players);
void libMapM_gf_MMCannonballsTransmissionChestDespawnedQ (playergroup lp_players);
void libMapM_gf_MMGardensDragonInitTowers (unit lp_towerMoon, unit lp_towerStar);
void libMapM_gf_MMGardensDragonInit ();
int libMapM_gf_MMGardensDragonObeliskCountForTeam (int lp_team);
void libMapM_gf_MMGardensDragonChangeDragonballTowerOwnership (int lp_dragonballTowerIndex, int lp_newOwner, playergroup lp_capturingPlayers);
void libMapM_gf_MMGardensDragonDeactivateStatue (int lp_team);
void libMapM_gf_MMGardensDragonActivateStatueForTeam (int lp_team);
fixed libMapM_gf_MMGardensDragonDragonDuration ();
bool libMapM_gf_MMGardensDragonObeliskFullyCaptured (unit lp_obeliskUnit);
void libMapM_gf_MMGardensDragonDragonHasEnteredArtHooks ();
void libMapM_gf_MMGardensDragonDragonHasLeftArtHooks ();
void libMapM_gf_MMDragonballsTransmissionObelisksOpenWarningQ (playergroup lp_players);
void libMapM_gf_MMDragonballsTransmissionObelisksSpawnQ (playergroup lp_players);
void libMapM_gf_MMDragonballsTransmissionObelisksRepawnQ (playergroup lp_players);
void libMapM_gf_MMDragonballsTransmissionObelisksAllyCap1Q (playergroup lp_players);
void libMapM_gf_MMDragonballsTransmissionObelisksAllyCap2Q (playergroup lp_players);
void libMapM_gf_MMDragonballsTransmissionObelisksEnemyCap1Q (playergroup lp_players);
void libMapM_gf_MMDragonballsTransmissionObelisksEnemyCap2Q (playergroup lp_players);
void libMapM_gf_MMDragonballsTransmissionObelisksObserverCap2Q ();
void libMapM_gf_MMDragonballsTransmissionAllyDragonQ (playergroup lp_players);
void libMapM_gf_MMDragonballsTransmissionEnemyDragonQ (playergroup lp_players);
void libMapM_gf_MMDragonballsTransmissionObserverDragonQ ();
void libMapM_gf_MMDragonballsTransmissionDragonExpireQ (playergroup lp_players);
void libMapM_gf_MMUnderworldInitWorld (region lp_aboveGroundPlayable, region lp_aboveGroundCamera, region lp_underGroundPlayable, region lp_fullWorldCamera, point lp_summonPos_Order, point lp_summonPos_Chaos);
unit libMapM_gf_MMUnderworldPlayerHeroUnit (int lp_player);
unitgroup libMapM_gf_MMUnderworldPlayerHeroUnitGroup (int lp_player);
unit libMapM_gf_MMUnderworldGroundHole (unit lp_gate);
unit libMapM_gf_MMUnderworldGroundHoleVision (unit lp_hole);
unit libMapM_gf_MMUnderworldGroundHoleCamera (unit lp_hole);
unit libMapM_gf_MMUnderworldUndergroundLadder (unit lp_gate);
unit libMapM_gf_MMUnderworldUndergroundEntranceLight (unit lp_gate, int lp_team);
point libMapM_gf_MMUnderworldGateEnteringSpawnPoint (unit lp_gate);
region libMapM_gf_HauntedMinePlayableRegion (int lp_plane);
void libMapM_gf_MMUnderworldChangePlaneForPlayer (int lp_player);
void libMapM_gf_MMUnderworldChangePlaneForUnit (unit lp_heroUnit, int lp_groundPlane);
void libMapM_gf_MMUnderworldUpdateHeroUnitLighting (unit lp_heroUnit);
void libMapM_gf_MMUnderworldTurnGroundHoleLightOnOff (bool lp_onOff);
void libMapM_gf_MMUnderworldChangeAmbience (string lp_ambience, string lp_reverb, playergroup lp_players);
void libMapM_gf_MMUnderworldUpdateAmbience (int lp_player);
void libMapM_gf_MapMechanicUnderworldAddMinionGroup (region lp_groupArea);
void libMapM_gf_MapMechanicUnderworldAddBoss (region lp_bossRegion);
int libMapM_gf_MMUnderworldBossSkullDropCount ();
int libMapM_gf_MMUnderworldMineMinionGroupIndex (unit lp_minion);
void libMapM_gf_MMUnderworldSpawnMonsters ();
void libMapM_gf_MMUnderworldBossDroppingSkulls ();
void libMapM_gf_MMUnderworldBossDropsSkulls ();
void libMapM_gf_MMUnderworldDropSkulls (point lp_location, int lp_count, bool lp_forBoss);
bool libMapM_gf_MMUnderworldCleared ();
void libMapM_gf_MMUnderworldSetScalingValue (int lp_scalingType, int lp_minuteMark, int lp_hPFlatPerMinute, int lp_hPPercentPerMinute, int lp_dmgFlatPerMinute, int lp_dmgPercentPerMinute, fixed lp_xPPerMinute);
void libMapM_gf_MMUnderworldApplySummonedBossScaling (int lp_team, bool lp_displayNumber);
bool libMapM_gf_MMUnderworldSummonedBossBetter (int lp_team);
void libMapM_gf_MMUnderworldSummonBoss ();
void libMapM_gf_MMUnderworldSummonBossForTeam (int lp_team);
void libMapM_gf_MMUnderworldSummonBossForTeamSound (int lp_team);
void libMapM_gf_MMUnderworldInit ();
void libMapM_gf_MMUnderworldPrepare ();
void libMapM_gf_MMUnderworldStart ();
void libMapM_gf_MMUnderworldObjectiveUIUpdateText ();
void libMapM_gf_MMUnderworldShowHideMinimapSplit (bool lp_showHide, playergroup lp_players);
void libMapM_gf_MMUnderworldHookupMinimapSplit ();
void libMapM_gf_MMUnderworldTransmissionUnderworldOpenQ (playergroup lp_players);
void libMapM_gf_MMUnderworldTransmissionUnderworldStartQ (playergroup lp_players);
void libMapM_gf_MMUnderworldTransmissionUnderworldClearedQ (playergroup lp_players);
void libMapM_gf_MMUnderworldTransmissionGolemSummonedStrongerQ (playergroup lp_players);
void libMapM_gf_MMUnderworldTransmissionGolemRevivedStrongerQ (playergroup lp_players);
void libMapM_gf_MMUnderworldTransmissionGolemSummonedWeakerQ (playergroup lp_players);
void libMapM_gf_MMUnderworldTransmissionGolemSummonedObserverQ ();
void libMapM_gf_MMUnderworldTransmissionGolemRevivedWeakerQ (playergroup lp_players);
void libMapM_gf_MMUnderworldTransmissionGolemSummonedSameQ (playergroup lp_players);
void libMapM_gf_MMUnderworldTransmissionGolemRevivedSameQ (playergroup lp_players);
void libMapM_gf_MMUnderworldTransmissionGolemReviveObserverQ ();
void libMapM_gf_MMUnderworldTransmissionOurGolemDefeatedQ (playergroup lp_players);
void libMapM_gf_MMUnderworldTransmissionEnemyGolemDefeatedQ (playergroup lp_players);
void libMapM_gf_MMHoCLivingTreesInitializeLivingTreesArray ();
void libMapM_gf_MMHoCForestInitializeForestsArray ();
void libMapM_gf_MMHoCLivingTreesRemoveAlltheTrees ();
void libMapM_gf_MMHoCForestRegrowth ();
void libMapM_gf_MMHoCLivingTreesRegrowthWarning ();
void libMapM_gf_MMHoCLivingTreesClearOuttheForestAreas ();
void libMapM_gf_MMHoCLivingTreesRemaketheTreesandAncients ();
void libMapM_gf_MMHoCForestActivated (int lp_camp, int lp_owner);
void libMapM_gf_MMHoCForestDestroyForestsTrees (int lp_forest);
void libMapM_gf_MMHoCForestActivateAncientsforForest (int lp_camp, int lp_owner, int lp_forest);

// Trigger Declarations
trigger libMapM_gt_IncludeMapMechanics;
trigger libMapM_gt_DataJungleCampDefenderData;
trigger libMapM_gt_DataJungleCampDefenderSiegeGiants;
trigger libMapM_gt_DataJungleCampDefenderKnights;
trigger libMapM_gt_DataJungleCampDefenderGraveGolem;
trigger libMapM_gt_DataJungleCampDefenderDoubloons;
trigger libMapM_gt_DataJungleCampMercData;
trigger libMapM_gt_DataJungleCampMercSiegeGiants;
trigger libMapM_gt_DataJungleCampMercOgres;
trigger libMapM_gt_DataJungleCampMercGraveGolem;
trigger libMapM_gt_InitializeJungleCamps;
trigger libMapM_gt_JungleTurnOnCreepCamps;
trigger libMapM_gt_JungleTurnOnGraveGolemCamps;
trigger libMapM_gt_JungleCreepCampRespawnTimerExpires;
trigger libMapM_gt_JungleRespawnTimerTextTagCountdown;
trigger libMapM_gt_JungleDefendersBeginFighting;
trigger libMapM_gt_JungleDefendersEndFighting;
trigger libMapM_gt_JungleAllDefendersKilled;
trigger libMapM_gt_JungleHibernateCampsStart;
trigger libMapM_gt_JungleHibernateCampsEnd;
trigger libMapM_gt_JungleCampOwnershipChange;
trigger libMapM_gt_JungleMercLeaderDies;
trigger libMapM_gt_JungleMercOgreShieldUsedOgre;
trigger libMapM_gt_JungleMercOgreShieldUsedHero;
trigger libMapM_gt_InitializeMapMechanics;
trigger libMapM_gt_MMHelpbuttonClicked;
trigger libMapM_gt_MMIntroSkippable;
trigger libMapM_gt_MMRavenCurseGateOpen;
trigger libMapM_gt_MMRavenStartSpawning;
trigger libMapM_gt_MMRavenSpawnTribute;
trigger libMapM_gt_MMRavenTributeCollectStarted;
trigger libMapM_gt_MMRavenTributeCollectCanceled;
trigger libMapM_gt_MMRavenTributeCollectInterrupted;
trigger libMapM_gt_MMRavenTributeObtained;
trigger libMapM_gt_MMRavenCurseStartLightTransition;
trigger libMapM_gt_MMRavenCurseFinished;
trigger libMapM_gt_MMRavenObjectiveUIHandler;
trigger libMapM_gt_MMRavenIntroCallback;
trigger libMapM_gt_MMRavenDebugStartElunees;
trigger libMapM_gt_MMRavenDebugStartNexten;
trigger libMapM_gt_MMRavenDebugStartCurseec;
trigger libMapM_gt_MMCannonballsHeroSpawned;
trigger libMapM_gt_MMCannonballsHeroMapMechanicStatusSetup;
trigger libMapM_gt_MMCannonballsHeroDies;
trigger libMapM_gt_MMCannonballsHeroRespawns;
trigger libMapM_gt_MMCannonballsDetectHero;
trigger libMapM_gt_MMCannonballsGatesAreOpenComplete;
trigger libMapM_gt_MMCannonballsCampSpawned;
trigger libMapM_gt_MMCannonballsEventStart;
trigger libMapM_gt_MMCannonballsHeroPickup;
trigger libMapM_gt_MMCannonballsBallsHandedIn;
trigger libMapM_gt_MMCannonballsObjectiveUIHandler;
trigger libMapM_gt_MMCannonballsDoubloonDropped;
trigger libMapM_gt_MMCannonballsOpenChestUponRespawn;
trigger libMapM_gt_MMCannonballsBattleshipShootingMissileCreated;
trigger libMapM_gt_MMCannonballsBattleshipKilledATown;
trigger libMapM_gt_MMCannonballsTreasureSpawnChests;
trigger libMapM_gt_MMCannonballsTreasureChestSpawnsDoubloon;
trigger libMapM_gt_MMCannonballsTreasureChestPingTimerExpires;
trigger libMapM_gt_MMCannonballsTreasureAChestDies;
trigger libMapM_gt_MMCannonballsTreasureChestsAreDead;
trigger libMapM_gt_MMCannonballsTreasureChestAttacked;
trigger libMapM_gt_MMCannonballsShootingStart;
trigger libMapM_gt_MMCannonballsShootingEnd;
trigger libMapM_gt_MMCannonballsIntroCallback;
trigger libMapM_gt_MMCannonballsDebugEventStart;
trigger libMapM_gt_MMCannonballsDebugModify;
trigger libMapM_gt_MMGardensDragonGateOpen;
trigger libMapM_gt_MMGardensDragonWarningTimerStart;
trigger libMapM_gt_MMGardensDragonWarningTimerExpires;
trigger libMapM_gt_MMGardensDragonDragonEventStarts;
trigger libMapM_gt_MMGardensDragonDragonEventEnds;
trigger libMapM_gt_MMGardensDragonTurnOnDragonTowersFirstTime;
trigger libMapM_gt_MMGardensDragonTurnOnDragonTowersAgain;
trigger libMapM_gt_MMGardensDragonDragonTowerChangeOwnershipEventFires;
trigger libMapM_gt_MMGardensDragonDragonTowerCheckObeliskStatus;
trigger libMapM_gt_MMGardensDragonTransformChannelStart;
trigger libMapM_gt_MMGardensDragonTransformChannelFinish;
trigger libMapM_gt_MMGardensDragonTakeDragonReminderTimerExpires;
trigger libMapM_gt_MMGardensDragonMercCampHibernatorDetectorLeashed;
trigger libMapM_gt_MMGardensDragonMercCampHibernatorDetectorSpawned;
trigger libMapM_gt_MMGardensDragonDragonKnightDiesorExpires;
trigger libMapM_gt_MMGardensDragonObjectiveUIHandler;
trigger libMapM_gt_MMGardensDragonDebugCheatStartObelisksso;
trigger libMapM_gt_MMUnderworldStartToEnterGates;
trigger libMapM_gt_MMUnderworldEnteringGates;
trigger libMapM_gt_MMUnderworldCameraPanned;
trigger libMapM_gt_MMUnderworldPlayerHeroLocationTracking;
trigger libMapM_gt_MMUnderworldGroundHoleVision;
trigger libMapM_gt_MMUnderworldPlayerMovesCamera;
trigger libMapM_gt_MMUnderworldUntargetableAcrossPlane;
trigger libMapM_gt_MMUnderworldMonstersDies;
trigger libMapM_gt_MMUnderworldSkullDropped;
trigger libMapM_gt_MMUnderworldSkullPickup;
trigger libMapM_gt_MMUnderworldScaling;
trigger libMapM_gt_MMUnderworldSummonedBossPingVisibility;
trigger libMapM_gt_MMUnderworldSummonedBossesDied;
trigger libMapM_gt_MMUnderworldOpenGatesTimerStarted;
trigger libMapM_gt_MMUnderworldGatesOpened;
trigger libMapM_gt_MMUnderworldUnderworldOpened;
trigger libMapM_gt_MMUnderworldGatesPingHelper;
trigger libMapM_gt_MMUnderworldCleared;
trigger libMapM_gt_MMUnderworldObjectiveUIHandler;
trigger libMapM_gt_MMUnderworldSummonedBossUIBar;
trigger libMapM_gt_MMUnderworldDebugStart;
trigger libMapM_gt_MMUnderworldDebugStart1;
trigger libMapM_gt_MMUnderworldDebugUnderworldClear;
trigger libMapM_gt_MMUnderworldDebugSummonBossScaling;
trigger libMapM_gt_MMUnderworldDebugPushEffect;
trigger libMapM_gt_MMHoCForestAncientDies;

// Library Initialization
void libMapM_InitVariables ();

