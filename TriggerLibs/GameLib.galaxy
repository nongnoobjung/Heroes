include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib_h"
include "TriggerLibs/MapMechanicsLib_h"
include "TriggerLibs/AILib_h"
include "TriggerLibs/UILib_h"
include "TriggerLibs/StartingExperienceLib_h"
include "TriggerLibs/SoundLib_h"
include "TriggerLibs/GameDataHelperLib_h"
include "TriggerLibs/SupportLib_h"

include "TriggerLibs/GameLib_h"

//--------------------------------------------------------------------------------------------------
// Library: Game
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libGame_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libMapM_InitVariables();
    libAIAI_InitVariables();
    libUIUI_InitVariables();
    libStEx_InitVariables();
    libSond_InitVariables();
    libGDHL_InitVariables();
    libSprt_InitVariables();
}

// Variable Initialization
bool libGame_InitVariables_completed = false;

void libGame_InitVariables () {
    int init_i;
    int init_i1;
    int init_j1;
    int init_i3;

    if (libGame_InitVariables_completed) {
        return;
    }

    libGame_InitVariables_completed = true;

    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libGame_gv_teams[init_i].lv_teamLevel = 1;
        libGame_gv_teams[init_i].lv_teamPlayerGroup = PlayerGroupEmpty();
        libGame_gv_teams[init_i].lv_teamPlayerGroupNoNPCPlayers = PlayerGroupEmpty();
        libGame_gv_teams[init_i].lv_multikillTimer = TimerCreate();
        libGame_gv_teams[init_i].lv_abandonedTheGameTimer = TimerCreate();
    }
    libGame_gv_firstBloodAvailable = true;
    libGame_gv_xPTrickleEnabled = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libGame_gv_xPTrickleModifier[init_i] = 1.0;
    }
    libGame_gv_totalTime = TimerCreate();
    libGame_gv_gameTimer = TimerCreate();
    libGame_gv_gobalTimer = TimerCreate();
    libGame_gv_xPTrickleStartTimer = TimerCreate();
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGame_gv_afk_PlayerAfkWarningTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGame_gv_afk_PlayerAfkKickTimer[init_i] = TimerCreate();
    }
    libGame_gv_announcement_SystemEnabled = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_announcementQueue[init_i].lv_messageTimer = TimerCreate();
        for (init_i1 = 0; init_i1 <= libGame_gv_announcement_QueueMaxCount_C; init_i1 += 1) {
            libGame_gv_announcementQueue[init_i].lv_announcerVOEvent[init_i1] = libCore_ge_AnnouncerVOEvents_Null;
        }
        for (init_i1 = 0; init_i1 <= libGame_gv_announcement_QueueMaxCount_C; init_i1 += 1) {
            libGame_gv_announcementQueue[init_i].lv_animName[init_i1] = "";
        }
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_cameraFollowForced[init_i] = true;
    }
    for (init_i = 0; init_i <= libGame_gv_capturePointMaxCount_C; init_i += 1) {
        libGame_gv_capturePoints[init_i].lv_captureProgressBar = c_invalidDialogControlId;
    }
    libGame_gv_capturePointLastCreatedCapturePointIndex_C = "CapturePointLastCreatedCapturePointIndex";
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGame_gv_encouragement_TimeSpentAliveTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGame_gv_encouragement_DeathTipData[init_i].lv_inCombatDurationTimer = TimerCreate();
        libGame_gv_encouragement_DeathTipData[init_i].lv_inCombatTimeoutTimer = TimerCreate();
        libGame_gv_encouragement_DeathTipData[init_i].lv_alliedHeroesNearby = true;
        libGame_gv_encouragement_DeathTipData[init_i].lv_timeWithNoAlliedHeroesNearby = TimerCreate();
        libGame_gv_encouragement_DeathTipData[init_i].lv_alliedMinionsNearby = true;
        libGame_gv_encouragement_DeathTipData[init_i].lv_timeWithNoAlliedMinionsNearby = TimerCreate();
        libGame_gv_encouragement_DeathTipData[init_i].lv_recentHeroKillTimer = TimerCreate();
        libGame_gv_encouragement_DeathTipData[init_i].lv_recentStructureDamageTimer = TimerCreate();
    }
    libGame_gv_minionSpawnStartTimer = TimerCreate();
    libGame_gv_openTheGatesTimer = TimerCreate();
    libGame_gv_jungleCampStartTimer = TimerCreate();
    libGame_gv_graveGolemCampStartTimer = TimerCreate();
    libGame_gv_jungleWatchTowerStartTimer = TimerCreate();
    libGame_gv_heroSpawnReady = true;
    libGame_gv_gateTimerReady = true;
    for (init_i = 0; init_i <= libCore_gv_dataHeroesMaxHeroCount; init_i += 1) {
        for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxAbilitiesPerHero; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j1 += 1) {
                libGame_gv_dataHeroesVehicleLevelUpData[init_i].lv_catalog[init_i1][init_j1] = c_gameCatalogUnit;
            }
        }
        for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxAbilitiesPerHero; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j1 += 1) {
                libGame_gv_dataHeroesVehicleLevelUpData[init_i].lv_entry[init_i1][init_j1] = "";
            }
        }
        for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxAbilitiesPerHero; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j1 += 1) {
                libGame_gv_dataHeroesVehicleLevelUpData[init_i].lv_field[init_i1][init_j1] = "";
            }
        }
        for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxAbilitiesPerHero; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j1 += 1) {
                libGame_gv_dataHeroesVehicleLevelUpData[init_i].lv_affectedByAbilityPower[init_i1][init_j1] = true;
            }
        }
        for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxAbilitiesPerHero; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j1 += 1) {
                libGame_gv_dataHeroesVehicleLevelUpData[init_i].lv_affectedByOverdrive[init_i1][init_j1] = true;
            }
        }
    }
    libGame_gv_heroDeath_UpdateStats = true;
    libGame_gv_heroDeath_RespawnMounted = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
            libGame_gv_heroDeathKillStingerQueue[init_i].lv_killStingerTimer[init_i1] = TimerCreate();
        }
        for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
            libGame_gv_heroDeathKillStingerQueue[init_i].lv_nextPlayIndex[init_i1] = 1;
        }
        for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxPlayersOnATeam; init_j1 += 1) {
                libGame_gv_heroDeathKillStingerQueue[init_i].lv_soundQueue[init_i1][init_j1] = SoundLink("EditorDefaultSound", -1);
            }
        }
    }
    for (init_i = 0; init_i <= libGame_gv_laneMaxCount; init_i += 1) {
        for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
            libGame_gv_laneData[init_i].lv_bruiserMinionLevel[init_i1] = 1;
        }
        libGame_gv_laneData[init_i].lv_minionSpawningEnabled = true;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_stormMapHeroDeathOverlay[init_i] = c_invalidDialogControlId;
    }
    libGame_gv_minionSpawningEnabled = true;
    libGame_gv_minionScalingEnabled = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_players[init_i].lv_playerStatus = libGame_ge_PlayerStatusStorm_Unused;
        libGame_gv_players[init_i].lv_victoryDefeat = c_gameOverTie;
        libGame_gv_players[init_i].lv_heroUnitGroup = UnitGroupEmpty();
        libGame_gv_players[init_i].lv_gravestoneTextTag = c_textTagNone;
        for (init_i1 = 0; init_i1 <= libCore_gv_talentsBucket_MaxTiers_C; init_i1 += 1) {
            for (init_i3 = 0; init_i3 <= libCore_gv_talents_MaxABChoiceButtonCount_DEBUG_C; init_i3 += 1) {
                libGame_gv_players[init_i].lv_talentsBucketABChoices[init_i1].lv_talentChoiceData.lv_enabled[init_i3] = true;
            }
        }
        libGame_gv_players[init_i].lv_talentsBucketMaxButtonsPerABChoice = libCore_gv_talentsBucket_MaxTalentsPerTier_C;
        libGame_gv_players[init_i].lv_cameraPlayerUnitGroupToFocusOn = UnitGroupEmpty();
        libGame_gv_players[init_i].lv_cameraCurrentTargetGroup = UnitGroupEmpty();
        libGame_gv_players[init_i].lv_cameraPlayerHasControl = true;
        libGame_gv_players[init_i].lv_selectedMount = 1;
        libGame_gv_players[init_i].lv_selectedSkin = 1;
        libGame_gv_players[init_i].lv_respawnTimer = TimerCreate();
        libGame_gv_players[init_i].lv_respawnSoundCueTimer = TimerCreate();
        libGame_gv_players[init_i].lv_downedStateTimer = TimerCreate();
        libGame_gv_players[init_i].lv_recentDamageResetTimer = TimerCreate();
        libGame_gv_players[init_i].lv_multikillTimer = TimerCreate();
        libGame_gv_players[init_i].lv_heroSpawnReady = true;
    }
    libGame_gv_heroes = UnitGroupEmpty();
    libGame_gv_scalingTimer = TimerCreate();
    libGame_gv_bALScalingTimerDuration = 60.0;
    libGame_gv_towerTeamOrderCoreAlertTimer = TimerCreate();
    libGame_gv_towerTeamChaosCoreAlertTimer = TimerCreate();
    for (init_i = 0; init_i <= libGame_gv_townMaxTownCount; init_i += 1) {
        libGame_gv_townTownData[init_i].lv_townHallIndex = -1;
        for (init_i1 = 0; init_i1 <= libGame_gv_townMaxStructureCount; init_i1 += 1) {
            libGame_gv_townTownData[init_i].lv_militaRespawnTextTag[init_i1] = c_textTagNone;
        }
        libGame_gv_townTownData[init_i].lv_vehiclePadUnitGroup = UnitGroupEmpty();
        for (init_i1 = 0; init_i1 <= libCore_gv_data_Vehicles_MaxVehicleSpawnPoints_C; init_i1 += 1) {
            libGame_gv_townTownData[init_i].lv_vehicleType[init_i1] = libCore_ge_VehicleUnitTypes_None;
        }
        libGame_gv_townTownData[init_i].lv_vehicleUnitGroup = UnitGroupEmpty();
        for (init_i1 = 0; init_i1 <= libCore_gv_data_Vehicles_MaxVehicleSpawnPoints_C; init_i1 += 1) {
            libGame_gv_townTownData[init_i].lv_vehicleRespawnTimer[init_i1] = TimerCreate();
        }
        for (init_i1 = 0; init_i1 <= libCore_gv_data_Vehicles_MaxVehicleSpawnPoints_C; init_i1 += 1) {
            libGame_gv_townTownData[init_i].lv_vehicleStatusTextTag[init_i1] = c_textTagNone;
        }
    }
    libGame_gv_baseRepulserFieldLaunchDistance = 12.0;
    libGame_gv_baseRepulserFieldLaunchCutoffDistance = -1.0;
    libGame_gv_vehiclesNumberOfVehicles = ((libCore_ge_VehicleUnitTypes_VehicleCount) - 1);
    libGame_gv_vehicleDragonKnightBullRushLaunchDistance = -30.0;
    libGame_gv_vehicleDragonKnightBullRushCutoffDistance = -1.0;
    for (init_i = 0; init_i <= libGame_gv_watchTowersMaxCount; init_i += 1) {
        libGame_gv_watchTowers[init_i].lv_enabled = true;
    }
}

// Presets
string libGame_ge_BehaviorCategoriesStorm_Ident (int lp_val) {
         if (lp_val == c_behaviorCategoryPermanent) { return "CategoryPermanent"; }
    else if (lp_val == c_behaviorCategoryRestorable) { return "CategoryRestorable"; }
    else if (lp_val == c_behaviorCategoryTemporary) { return "CategoryTemporary"; }
    else if (lp_val == c_behaviorCategoryCloak) { return "BuffCloak"; }
    else if (lp_val == c_behaviorCategoryInvulnerable) { return "BuffInvulnerable"; }
    else if (lp_val == c_behaviorCategorySlow) { return "DebuffMovementSpeed"; }
    else if (lp_val == c_behaviorCategoryFast) { return "BuffMovementSpeed"; }
    else if (lp_val == c_behaviorCategoryStun) { return "DebuffStun"; }
    else if (lp_val == c_behaviorCategoryReveal) { return "DebuffRevealed"; }
    else if (lp_val == c_behaviorCategoryUser1) { return "BuffUnstoppable"; }
    else if (lp_val == c_behaviorCategoryUser2) { return "BuffResistant"; }
    else if (lp_val == c_behaviorCategoryUser3) { return "BuffAutoattackDPS"; }
    else if (lp_val == c_behaviorCategoryUser4) { return "BuffAbilityPower"; }
    else if (lp_val == c_behaviorCategoryUser5) { return "DebuffRoot"; }
    else if (lp_val == c_behaviorCategoryUser6) { return "DebuffStasis"; }
    else if (lp_val == c_behaviorCategoryUser7) { return "DebuffSilence"; }
    else if (lp_val == c_behaviorCategoryUser8) { return "DebuffBlind"; }
    else if (lp_val == c_behaviorCategoryUser9) { return "DebuffVulnerable"; }
    else if (lp_val == c_behaviorCategoryUser10) { return "DebuffAutoattackDPS"; }
    else if (lp_val == c_behaviorCategoryUser11) { return "BuffTemporaryMaxHealthIncrease"; }
    else if (lp_val == c_behaviorCategoryUser12) { return "BuffPermanentMaxHealthIncrease"; }
    else if (lp_val == c_behaviorCategoryUser13) { return "User13"; }
    else if (lp_val == c_behaviorCategoryUser14) { return "User14"; }
    else if (lp_val == c_behaviorCategoryUser15) { return "User15"; }
    else if (lp_val == c_behaviorCategoryUser15+1) { return "Any"; }
    return null;
}

string libGame_ge_EncouragementStatCallouts_Ident (int lp_val) {
         if (lp_val == libGame_ge_EncouragementStatCallouts_Null) { return "Null"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_TimeSpentAlive) { return "TimeSpentAlive"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_PercentOfTeamsXPGathered) { return "PercentOfTeamsXPGathered"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_Takedowns) { return "Takedowns"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_DamageDoneToHeroes) { return "DamageDoneToHeroes"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_HealingDoneToHeroes) { return "HealingDoneToHeroes"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_MapTributesCollected) { return "MapTributesCollected"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_MapDoubloonsTurnedIn) { return "MapDoubloonsTurnedIn"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_MapDragonShrineCaptures) { return "MapDragonShrineCaptures"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_MapSkullsCollected) { return "MapSkullsCollected"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_MercCampsCaptured) { return "MercCampsCaptured"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_DamageDoneToTowns) { return "DamageDoneToTowns"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_ShieldingDoneToHeroes) { return "ShieldingDoneToHeroes"; }
    else if (lp_val == libGame_ge_EncouragementStatCallouts_Count) { return "Count"; }
    return null;
}

string libGame_ge_EncouragementDeathTipsNames_Ident (int lp_val) {
         if (lp_val == libGame_ge_EncouragementDeathTipsNames_Null) { return "Null"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_Gangups) { return "Gangups"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_FollowMinions) { return "FollowMinions"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_MinionsvsTowns) { return "MinionsvsTowns"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_UseYourAbilities) { return "UseYourAbilities"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_Moonwell) { return "Moonwell"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_Retreat) { return "Retreat"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_TrainTalents) { return "TrainTalents"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_Mount) { return "Mount"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_EnemyFountainDeath) { return "EnemyFountainDeath"; }
    else if (lp_val == libGame_ge_EncouragementDeathTipsNames_Count) { return "Count"; }
    return null;
}

// Functions
playergroup libGame_gf_PlayersOnTeamHeroes (int lp_team, bool lp_nPCOption) {
    // Implementation
    if (((lp_team < 1) || (lp_team > 2))) {
        TextExpressionSetToken("Param/Expression/lib_Game_5BFD415E", "A", IntToText(lp_team));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Game_5BFD415E"));
        return PlayerGroupEmpty();
    }
    else {
    }
    if ((lp_nPCOption == true)) {
        return libGame_gv_teams[lp_team].lv_teamPlayerGroup;
    }
    else {
        return libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers;
    }
}

void libGame_gf_ModifyTeamXPTrickle (int lp_team) {
    int auto3747A5AE_ae;
    int auto3747A5AE_ai;

    // Variable Declarations
    fixed lv_levelDifference;
    int lv_i;
    int lv_enemyTeam;

    // Variable Initialization
    lv_enemyTeam = (3 - lp_team);

    // Implementation
    auto3747A5AE_ae = libCore_gv_bALMaxTeams;
    auto3747A5AE_ai = 1;
    lv_i = 1;
    for ( ; ( (auto3747A5AE_ai >= 0 && lv_i <= auto3747A5AE_ae) || (auto3747A5AE_ai <= 0 && lv_i >= auto3747A5AE_ae) ) ; lv_i += auto3747A5AE_ai ) {
        lv_levelDifference = (IntToFixed(libGame_gv_teams[lv_i].lv_teamLevel) - IntToFixed(libGame_gv_teams[(3 - lv_i)].lv_teamLevel));
        if ((lv_levelDifference <= -4.0)) {
            libGame_gv_xPTrickleModifier[lv_i] = 1.0;
        }
        else {
            if ((lv_levelDifference == -3.0)) {
                libGame_gv_xPTrickleModifier[lv_i] = 1.0;
            }
            else {
                libGame_gv_xPTrickleModifier[lv_i] = 1.0;
            }
        }
    }
}

trigger auto_libGame_gf_AfkStartAfkWarningSystem_Trigger = null;

void libGame_gf_AfkStartAfkWarningSystem () {
    if (auto_libGame_gf_AfkStartAfkWarningSystem_Trigger == null) {
        auto_libGame_gf_AfkStartAfkWarningSystem_Trigger = TriggerCreate("auto_libGame_gf_AfkStartAfkWarningSystem_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_AfkStartAfkWarningSystem_Trigger, false, false);
}

bool auto_libGame_gf_AfkStartAfkWarningSystem_TriggerFunc (bool testConds, bool runActions) {
    int auto4A9D701E_ae;
    int auto4A9D701E_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    if ((GameIsMatchmade() == false)) {
        return true;
    }
    else {
    }
    Wait(libGame_gv_afk_AfkInitialTimerStartDelay_C, c_timeGame);
    libGame_gv_afk_AfkDetectionSystemEnabled = true;
    TriggerEnable(libGame_gt_AfkCheckPlayerScoreValuesForActivity, true);
    auto4A9D701E_ae = libCore_gv_bALMaxPlayers;
    auto4A9D701E_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto4A9D701E_ai >= 0 && lv_itPlayer <= auto4A9D701E_ae) || (auto4A9D701E_ai <= 0 && lv_itPlayer >= auto4A9D701E_ae) ) ; lv_itPlayer += auto4A9D701E_ai ) {
        libGame_gf_AfkResetWarningTimerForPlayer(lv_itPlayer);
    }
    return true;
}

void libGame_gf_AfkResetWarningTimerForPlayer (int lp_player) {
    // Implementation
    if (((libGame_gv_players[lp_player].lv_isDead == true) || (libGame_gv_afk_AfkDetectionSystemEnabled == false))) {
        return ;
    }
    else {
    }
    TimerStart(libGame_gv_afk_PlayerAfkWarningTimer[lp_player], libGame_gv_afk_AfkWarningTimerDuration_C, false, c_timeGame);
    TimerPause(libGame_gv_afk_PlayerAfkKickTimer[lp_player], true);
}

void libGame_gf_AfkPauseWarningTimerForPlayer (int lp_player) {
    // Implementation
    TimerPause(libGame_gv_afk_PlayerAfkWarningTimer[lp_player], true);
    TimerPause(libGame_gv_afk_PlayerAfkKickTimer[lp_player], true);
}

void libGame_gf_AfkResumeWarningTimerForPlayer (int lp_player) {
    // Implementation
    if ((TimerGetRemaining(libGame_gv_afk_PlayerAfkWarningTimer[lp_player]) > 0.0)) {
        TimerStart(libGame_gv_afk_PlayerAfkWarningTimer[lp_player], (libGame_gv_afk_AfkWarningTimerDuration_C + libGame_gv_afk_AfkReviveTimerResumeDelay_C), false, c_timeGame);
    }
    else {
    }
}

void libGame_gf_AfkKickPlayer (int lp_player) {
    // Implementation
    if ((libCore_gv_dEBUGDebuggingEnabled == false)) {
        KickFromGame(libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
    }
}

void libGame_gf_AnnouncementAddItemForPlayerGroup (playergroup lp_playerGroup, int lp_priority, int lp_vOEvent, string lp_animName, text lp_textParam1, text lp_textParam2, text lp_textParam3, text lp_textParam4, fixed lp_duration, bool lp_isKillAnnouncement) {
    playergroup autoE0D6CA2B_g;
    int autoE0D6CA2B_p;
    int auto52665968_ae;
    int auto52665968_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itQueuePosition;
    int lv_priorityInt;
    int lv_desiredPosition;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_announcement_SystemEnabled == false)) {
        return ;
    }
    else {
    }
    autoE0D6CA2B_g = lp_playerGroup; 
    autoE0D6CA2B_p = 1;
    for ( ; autoE0D6CA2B_p <= PlayerGroupCount(autoE0D6CA2B_g) ; autoE0D6CA2B_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(autoE0D6CA2B_g, autoE0D6CA2B_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoE0D6CA2B_g, autoE0D6CA2B_p);
        if (((lv_itPlayer <= libCore_gv_bALMaxPlayers) || (lv_itPlayer == libCore_gv_oBSERVER_ObserverUIPlayer))) {
            if ((libGame_gv_announcementQueue[lv_itPlayer].lv_numberOfItemsInQueue >= libGame_gv_announcement_QueueMaxCount_C)) {
                TextExpressionSetToken("Param/Expression/lib_Game_23567997", "A", IntToText(lv_itPlayer));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_23567997"), true);
                continue;
            }
            else {
            }
            lv_priorityInt = (lp_priority);
            lv_desiredPosition = 0;
            if ((libGame_gv_announcementQueue[lv_itPlayer].lv_numberOfItemsInQueue == 0)) {
                lv_desiredPosition = 1;
            }
            else {
                auto52665968_ae = libGame_gv_announcementQueue[lv_itPlayer].lv_numberOfItemsInQueue;
                auto52665968_ai = 1;
                lv_itQueuePosition = 1;
                for ( ; ( (auto52665968_ai >= 0 && lv_itQueuePosition <= auto52665968_ae) || (auto52665968_ai <= 0 && lv_itQueuePosition >= auto52665968_ae) ) ; lv_itQueuePosition += auto52665968_ai ) {
                    if ((libGame_gv_announcementQueue[lv_itPlayer].lv_priority[lv_itQueuePosition] > lv_priorityInt)) {
                        lv_desiredPosition = lv_itQueuePosition;
                        break;
                    }
                    else {
                    }
                }
                if ((lv_desiredPosition == 0)) {
                    lv_desiredPosition = (libGame_gv_announcementQueue[lv_itPlayer].lv_numberOfItemsInQueue + 1);
                }
                else {
                }
            }
            libGame_gf_AnnouncementInsertItemIntoQueueForPlayer(lv_itPlayer, lp_priority, lp_vOEvent, lp_animName, lp_textParam1, lp_textParam2, lp_textParam3, lp_textParam4, lp_duration, lv_desiredPosition, lp_isKillAnnouncement);
            if ((TimerGetRemaining(libGame_gv_announcementQueue[lv_itPlayer].lv_messageTimer) <= 0.0)) {
                libGame_gf_AnnouncementPlayNextItemForPlayer(lv_itPlayer);
            }
            else {
                if ((lp_isKillAnnouncement == true) && (TimerGetRemaining(libGame_gv_announcementQueue[lv_itPlayer].lv_messageTimer) > libGame_gv_announcement_KillAnnouncementTimerThreshold_C)) {
                    TimerStart(libGame_gv_announcementQueue[lv_itPlayer].lv_messageTimer, libGame_gv_announcement_KillAnnouncementTimerThreshold_C, false, c_timeGame);
                }
                else {
                }
            }
        }
        else {
        }
    }
}

void libGame_gf_AnnouncementClearQueueForPlayer (int lp_player) {
    // Variable Declarations
    int lv_itAnnouncement;
    fixed lv_duration;

    // Variable Initialization

    // Implementation
    libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue = 0;
}

void libGame_gf_AnnouncementInsertItemIntoQueueForPlayer (int lp_player, int lp_priority, int lp_vOEvent, string lp_animName, text lp_textParam1, text lp_textParam2, text lp_textParam3, text lp_textParam4, fixed lp_duration, int lp_desiredInsertPosition, bool lp_isKillAnnouncement) {
    int autoE8F74CBA_ae;
    int autoE8F74CBA_ai;

    // Variable Declarations
    int lv_itQueuePosition;
    int lv_insertPosition;

    // Variable Initialization

    // Implementation
    if ((lp_desiredInsertPosition > libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue)) {
        libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue += 1;
        lv_insertPosition = libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue;
    }
    else {
        autoE8F74CBA_ae = lp_desiredInsertPosition;
        autoE8F74CBA_ai = -1;
        lv_itQueuePosition = libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue;
        for ( ; ( (autoE8F74CBA_ai >= 0 && lv_itQueuePosition <= autoE8F74CBA_ae) || (autoE8F74CBA_ai <= 0 && lv_itQueuePosition >= autoE8F74CBA_ae) ) ; lv_itQueuePosition += autoE8F74CBA_ai ) {
            libGame_gv_announcementQueue[lp_player].lv_priority[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_priority[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_animName[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_animName[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_textParam1[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_textParam1[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_textParam2[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_textParam2[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_textParam3[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_textParam3[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_textParam4[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_textParam4[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_duration[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_duration[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_isKillAnnouncement[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_isKillAnnouncement[lv_itQueuePosition];
        }
        libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue += 1;
        lv_insertPosition = lp_desiredInsertPosition;
    }
    libGame_gv_announcementQueue[lp_player].lv_priority[lv_insertPosition] = (lp_priority);
    libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[lv_insertPosition] = lp_vOEvent;
    libGame_gv_announcementQueue[lp_player].lv_animName[lv_insertPosition] = lp_animName;
    libGame_gv_announcementQueue[lp_player].lv_textParam1[lv_insertPosition] = lp_textParam1;
    libGame_gv_announcementQueue[lp_player].lv_textParam2[lv_insertPosition] = lp_textParam2;
    libGame_gv_announcementQueue[lp_player].lv_textParam3[lv_insertPosition] = lp_textParam3;
    libGame_gv_announcementQueue[lp_player].lv_textParam4[lv_insertPosition] = lp_textParam4;
    libGame_gv_announcementQueue[lp_player].lv_duration[lv_insertPosition] = lp_duration;
    libGame_gv_announcementQueue[lp_player].lv_isKillAnnouncement[lv_insertPosition] = lp_isKillAnnouncement;
}

void libGame_gf_AnnouncementSetTextOnAnnouncementFrameLabelsForPlayer (int lp_player, string lp_animName, text lp_textParam1, text lp_textParam2, text lp_textParam3, text lp_textParam4) {
    string auto8A8FE4F2_val;

    // Implementation
    auto8A8FE4F2_val = lp_animName;
    if (auto8A8FE4F2_val == "ShowStandardNotification") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_standardNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_standardNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (auto8A8FE4F2_val == "ShowEnemyNotification") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_enemyNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_enemyNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (auto8A8FE4F2_val == "ShowTutorialNotification") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_tutorialNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_tutorialNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (auto8A8FE4F2_val == "ShowTimedNotification_Tier1") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_doubleKillNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_doubleKillNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (auto8A8FE4F2_val == "ShowTimedNotification_Tier2") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_tripleKillNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_tripleKillNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (auto8A8FE4F2_val == "ShowTimedNotification_Tier3") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_quadKillNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_quadKillNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (auto8A8FE4F2_val == "ShowTimedNotification_Tier4") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_pentaKillNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_pentaKillNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
    }
}

void libGame_gf_AnnouncementPlayNextItemForPlayer (int lp_player) {
    int auto50705A80_ae;
    int auto50705A80_ai;

    // Variable Declarations
    int lv_itAnnouncement;
    fixed lv_duration;
    string lv_animName;

    // Variable Initialization
    lv_animName = "";

    // Implementation
    if ((libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue > 0)) {
        lv_duration = libGame_gv_announcementQueue[lp_player].lv_duration[1];
        if ((libGame_gv_announcementQueue[lp_player].lv_isKillAnnouncement[1] == true)) {
            libSond_gf_HeroVOStartHeroTakedownVOTimerForPlayer(lp_player, (lv_duration + libGame_gv_announcement_HeroTakedownVODelay_C));
        }
        else {
        }
        lv_animName = libGame_gv_announcementQueue[lp_player].lv_animName[1];
        if ((lv_animName != "")) {
            libGame_gf_AnnouncementSetTextOnAnnouncementFrameLabelsForPlayer(lp_player, lv_animName, libGame_gv_announcementQueue[lp_player].lv_textParam1[1], libGame_gv_announcementQueue[lp_player].lv_textParam2[1], libGame_gv_announcementQueue[lp_player].lv_textParam3[1], libGame_gv_announcementQueue[lp_player].lv_textParam4[1]);
            DialogControlSendAnimationEvent(libUIUI_gv_notificationDisplay.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], lv_animName);
        }
        else {
        }
        if ((libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[1] != libCore_ge_AnnouncerVOEvents_Null)) {
            libSond_gf_SoundAnnouncerVOPlayAnnouncerVOForPlayer(libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[1], lp_player);
        }
        else {
        }
        if ((libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue > 1)) {
            auto50705A80_ae = (libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue - 1);
            auto50705A80_ai = 1;
            lv_itAnnouncement = 1;
            for ( ; ( (auto50705A80_ai >= 0 && lv_itAnnouncement <= auto50705A80_ae) || (auto50705A80_ai <= 0 && lv_itAnnouncement >= auto50705A80_ae) ) ; lv_itAnnouncement += auto50705A80_ai ) {
                libGame_gv_announcementQueue[lp_player].lv_priority[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_priority[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_animName[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_animName[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_textParam1[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_textParam1[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_textParam2[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_textParam2[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_textParam3[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_textParam3[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_textParam4[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_textParam4[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_duration[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_duration[(lv_itAnnouncement + 1)];
            }
        }
        else {
        }
        libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue -= 1;
        TimerStart(libGame_gv_announcementQueue[lp_player].lv_messageTimer, lv_duration, false, c_timeGame);
    }
    else {
    }
}

void libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary (int lp_player, point lp_point, fixed lp_duration, fixed lp_initialVelocity, fixed lp_decelerate, bool lp_smart) {
    int autoC1BCE068_ae;
    int autoC1BCE068_ai;

    // Variable Declarations
    int lv_itBound;
    fixed lv_actualDuration;

    // Variable Initialization

    // Implementation
    lv_actualDuration = lp_duration;
    autoC1BCE068_ae = libGame_gv_cameraBound_Count;
    autoC1BCE068_ai = 1;
    lv_itBound = 1;
    for ( ; ( (autoC1BCE068_ai >= 0 && lv_itBound <= autoC1BCE068_ae) || (autoC1BCE068_ai <= 0 && lv_itBound >= autoC1BCE068_ae) ) ; lv_itBound += autoC1BCE068_ai ) {
        if ((RegionContainsPoint(libGame_gv_cameraBound_Regions[lv_itBound], lp_point) == true)) {
            if ((libGame_gv_cameraBound_CurrentCameraBoundForPlayer[lp_player] != lv_itBound)) {
                libGame_gf_SetCameraBoundStormIndexForPlayer(lp_player, lv_itBound);
                lv_actualDuration = 0.0;
            }
            else {
            }
            break;
        }
        else {
        }
    }
    CameraPan(lp_player, lp_point, lv_actualDuration, lp_initialVelocity, lp_decelerate, lp_smart);
    libGame_gf_SendEventCameraPannedFromScript(lp_player, lp_point);
}

void libGame_gf_CameraTrackNextAliveAllyForPlayer (int lp_player) {
    int autoC0514DC3_ae;
    int autoC0514DC3_ai;
    int auto52B09AF4_ae;
    int auto52B09AF4_ai;

    // Variable Declarations
    int lv_i;
    int lv_playerFaction;
    bool lv_valueSet;

    // Variable Initialization

    // Implementation
    lv_playerFaction = libGame_gv_players[lp_player].lv_faction;
    if ((libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack < libCore_gv_bALMaxPlayers)) {
        autoC0514DC3_ae = libCore_gv_bALMaxPlayers;
        autoC0514DC3_ai = 1;
        lv_i = (libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack + 1);
        for ( ; ( (autoC0514DC3_ai >= 0 && lv_i <= autoC0514DC3_ae) || (autoC0514DC3_ai <= 0 && lv_i >= autoC0514DC3_ae) ) ; lv_i += autoC0514DC3_ai ) {
            if ((libGame_gv_players[lv_i].lv_faction == lv_playerFaction) && (libGame_gv_players[lv_i].lv_isDead == false)) {
                libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = lv_i;
                lv_valueSet = true;
                break;
            }
            else {
            }
        }
    }
    else {
    }
    if ((lv_valueSet == false)) {
        auto52B09AF4_ae = libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack;
        auto52B09AF4_ai = 1;
        lv_i = 1;
        for ( ; ( (auto52B09AF4_ai >= 0 && lv_i <= auto52B09AF4_ae) || (auto52B09AF4_ai <= 0 && lv_i >= auto52B09AF4_ae) ) ; lv_i += auto52B09AF4_ai ) {
            if ((libGame_gv_players[lv_i].lv_faction == lv_playerFaction) && (libGame_gv_players[lv_i].lv_isDead == false)) {
                libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = lv_i;
                lv_valueSet = true;
                break;
            }
            else {
            }
        }
    }
    else {
    }
    if ((lv_valueSet == false)) {
        libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = 0;
    }
    else {
    }
}

void libGame_gf_CameraTrackPreviousAliveAllyForPlayer (int lp_player) {
    int autoB8719CED_ae;
    int autoB8719CED_ai;
    int auto24F24019_ae;
    int auto24F24019_ai;

    // Variable Declarations
    int lv_i;
    int lv_playerFaction;
    bool lv_valueSet;

    // Variable Initialization

    // Implementation
    lv_playerFaction = libGame_gv_players[lp_player].lv_faction;
    if ((libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack > 1)) {
        autoB8719CED_ae = 1;
        autoB8719CED_ai = -1;
        lv_i = (libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack - 1);
        for ( ; ( (autoB8719CED_ai >= 0 && lv_i <= autoB8719CED_ae) || (autoB8719CED_ai <= 0 && lv_i >= autoB8719CED_ae) ) ; lv_i += autoB8719CED_ai ) {
            if ((libGame_gv_players[lv_i].lv_faction == lv_playerFaction) && (libGame_gv_players[lv_i].lv_isDead == false)) {
                libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = lv_i;
                lv_valueSet = true;
                break;
            }
            else {
            }
        }
    }
    else {
    }
    if ((lv_valueSet == false)) {
        auto24F24019_ae = libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack;
        auto24F24019_ai = -1;
        lv_i = libCore_gv_bALMaxPlayers;
        for ( ; ( (auto24F24019_ai >= 0 && lv_i <= auto24F24019_ae) || (auto24F24019_ai <= 0 && lv_i >= auto24F24019_ae) ) ; lv_i += auto24F24019_ai ) {
            if ((libGame_gv_players[lv_i].lv_faction == lv_playerFaction) && (libGame_gv_players[lv_i].lv_isDead == false)) {
                libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = lv_i;
                lv_valueSet = true;
                break;
            }
            else {
            }
        }
    }
    else {
    }
    if ((lv_valueSet == false)) {
        libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = 0;
    }
    else {
    }
}

trigger auto_libGame_gf_CameraUpdateCameraForPlayer_Trigger = null;
int auto_libGame_gf_CameraUpdateCameraForPlayer_lp_player;

void libGame_gf_CameraUpdateCameraForPlayer (int lp_player) {
    auto_libGame_gf_CameraUpdateCameraForPlayer_lp_player = lp_player;

    if (auto_libGame_gf_CameraUpdateCameraForPlayer_Trigger == null) {
        auto_libGame_gf_CameraUpdateCameraForPlayer_Trigger = TriggerCreate("auto_libGame_gf_CameraUpdateCameraForPlayer_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_CameraUpdateCameraForPlayer_Trigger, false, false);
}

bool auto_libGame_gf_CameraUpdateCameraForPlayer_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libGame_gf_CameraUpdateCameraForPlayer_lp_player;

    // Variable Declarations
    int lv_playerBeingTracked;

    // Variable Initialization

    // Implementation
    lv_playerBeingTracked = libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack;
    if ((libGame_gv_cameraFollowForced[lp_player] == true)) {
        libGame_gv_cameraFollowForced[lp_player] = false;
        CameraForceFollowUnitGroup(lp_player, false);
    }
    else {
    }
    if ((libCore_gv_sYSGameMode != libCore_ge_GameModes_Tutorial1)) {
        PlayerOptionOverride(lp_player, "camerafollow", null);
    }
    else {
        libStEx_gf_RestoreTutorialCameraLockSetting();
    }
    if ((libGame_gv_players[lp_player].lv_cameraForcedLock == true) && (libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn != null)) {
        libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn;
        CameraFollowUnitGroup(lp_player, CameraFollowUnitGroupGet(lp_player), false, false);
        CameraFollowUnitGroup(lp_player, libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup, true, false);
        if ((libCore_gv_sYSGameMode != libCore_ge_GameModes_Tutorial1)) {
            PlayerOptionOverride(lp_player, "camerafollow", "1");
        }
        else {
        }
    }
    else {
        if ((lv_playerBeingTracked != 0) && (libGame_gv_players[lv_playerBeingTracked].lv_cameraPlayerUnitGroupToFocusOn != null)) {
            libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = libGame_gv_players[lv_playerBeingTracked].lv_cameraPlayerUnitGroupToFocusOn;
            libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lp_player, UnitGroupCenterOfGroup(libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup), 0.0, -1, 0.0, false);
            CameraFollowUnitGroup(lp_player, CameraFollowUnitGroupGet(lp_player), false, false);
            CameraFollowUnitGroup(lp_player, libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup, true, false);
            PlayerOptionOverride(lp_player, "camerafollow", "1");
        }
        else {
            if ((libGame_gv_players[lp_player].lv_isDead == false) && (libGame_gv_players[lp_player].lv_cameraPlayerHasControl == false) && (libGame_gv_players[lp_player].lv_cameraCameraLockInterrupt == false) && (libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn != null)) {
                libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn;
                libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lp_player, UnitGroupCenterOfGroup(libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup), 0.0, -1, 0.0, false);
                CameraFollowUnitGroup(lp_player, CameraFollowUnitGroupGet(lp_player), false, false);
                CameraFollowUnitGroup(lp_player, libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup, true, false);
                PlayerOptionOverride(lp_player, "camerafollow", "1");
            }
            else {
                if (((libGame_gv_players[lp_player].lv_isDead == true) || (libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn == null))) {
                    libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = null;
                    PlayerOptionOverride(lp_player, "camerafollow", "0");
                    CameraFollowUnitGroup(lp_player, CameraFollowUnitGroupGet(lp_player), false, false);
                }
                else {
                    libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn;
                    CameraFollowUnitGroup(lp_player, CameraFollowUnitGroupGet(lp_player), false, false);
                    CameraFollowUnitGroup(lp_player, libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup, true, false);
                }
            }
        }
    }
    if ((libGame_gv_players[lp_player].lv_cameraPlayerHasControl == true)) {
        CameraLockInput(lp_player, false);
    }
    else {
        CameraLockInput(lp_player, true);
    }
    return true;
}

int libGame_gf_CameraBoundStormIndex (region lp_bound) {
    int autoF3AAFE09_ae;
    int autoF3AAFE09_ai;

    // Variable Declarations
    int lv_itIndex;

    // Variable Initialization

    // Implementation
    autoF3AAFE09_ae = libGame_gv_cameraBound_Count;
    autoF3AAFE09_ai = 1;
    lv_itIndex = 1;
    for ( ; ( (autoF3AAFE09_ai >= 0 && lv_itIndex <= autoF3AAFE09_ae) || (autoF3AAFE09_ai <= 0 && lv_itIndex >= autoF3AAFE09_ae) ) ; lv_itIndex += autoF3AAFE09_ai ) {
        if ((PointGetX(RegionGetBoundsMax(lp_bound)) == PointGetX(RegionGetBoundsMax(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetY(RegionGetBoundsMax(lp_bound)) == PointGetY(RegionGetBoundsMax(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetX(RegionGetBoundsMin(lp_bound)) == PointGetX(RegionGetBoundsMin(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetY(RegionGetBoundsMin(lp_bound)) == PointGetY(RegionGetBoundsMin(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetX(RegionGetCenter(lp_bound)) == PointGetX(RegionGetCenter(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetY(RegionGetCenter(lp_bound)) == PointGetY(RegionGetCenter(libGame_gv_cameraBound_Regions[lv_itIndex])))) {
            return lv_itIndex;
        }
        else {
        }
    }
    return -1;
}

void libGame_gf_AddCameraBoundsStorm (region lp_bounds) {
    // Implementation
    if ((libGame_gv_cameraBound_Count >= libGame_gv_cameraBound_MaxCount_C)) {
        TextExpressionSetToken("Param/Expression/lib_Game_3078A309", "A", IntToText(libGame_gv_cameraBound_MaxCount_C));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_3078A309"), true);
        return ;
    }
    else {
    }
    libGame_gv_cameraBound_Count += 1;
    libGame_gv_cameraBound_Regions[libGame_gv_cameraBound_Count] = lp_bounds;
}

void libGame_gf_SetCameraBoundsStorm (int lp_index, region lp_bounds) {
    // Implementation
    if ((lp_index > libGame_gv_cameraBound_Count) && (lp_index < 1)) {
        return ;
    }
    else {
    }
    libGame_gv_cameraBound_Regions[lp_index] = lp_bounds;
}

void libGame_gf_SetCameraBoundStormIndexForPlayer (int lp_player, int lp_boundsIndex) {
    // Implementation
    libGame_gv_cameraBound_CurrentCameraBoundForPlayer[lp_player] = lp_boundsIndex;
    CameraSetBounds(libCore_gv_playerGroupFromPlayer[lp_player], libGame_gv_cameraBound_Regions[lp_boundsIndex], true);
}

void libGame_gf_SetCameraBoundStormForPlayer (int lp_player, region lp_bound) {
    // Variable Declarations
    int lv_boundsIndex;

    // Variable Initialization

    // Implementation
    lv_boundsIndex = libGame_gf_CameraBoundStormIndex(lp_bound);
    if ((lv_boundsIndex <= 0)) {
        libGame_gf_AddCameraBoundsStorm(lp_bound);
        lv_boundsIndex = libGame_gv_cameraBound_Count;
    }
    else {
    }
    libGame_gv_cameraBound_CurrentCameraBoundForPlayer[lp_player] = lv_boundsIndex;
    CameraSetBounds(libCore_gv_playerGroupFromPlayer[lp_player], lp_bound, true);
}

void libGame_gf_CapturePointChangeOwnership (int lp_capturePointIndex, int lp_newOwner, playergroup lp_capturingPlayers, bool lp_hasMercLordTalent) {
    // Variable Declarations
    int lv_currentOwner;

    // Variable Initialization

    // Implementation
    lv_currentOwner = UnitGetOwner(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit);
    if ((lp_newOwner == lv_currentOwner)) {
        return ;
    }
    else {
    }
    UnitSetOwner(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit, lp_newOwner, true);
    libGame_gf_SendEventCapturePointChangesOwner(lp_capturePointIndex, lp_newOwner, lp_capturingPlayers, lp_hasMercLordTalent);
}

void libGame_gf_CapturePointCreate (unit lp_beaconUnit, fixed lp_captureRadius, fixed lp_captureTime, fixed lp_overCaptureTime, bool lp_decayToOwner, bool lp_rememberLastOwner) {
    // Implementation
    if ((libGame_gv_capturePointCurrentCount == libGame_gv_capturePointMaxCount_C)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_29EF6B64"), true);
        return ;
    }
    else {
    }
    libGame_gv_capturePointCurrentCount += 1;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_enabled = false;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureBeaconUnit = lp_beaconUnit;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureRegion = RegionCircle(UnitGetPosition(lp_beaconUnit), lp_captureRadius);
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureCounter = 0;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_pointsNeededToCapture = FixedToInt((lp_captureTime * 16.0));
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_maximumPoints = FixedToInt(((lp_captureTime + lp_overCaptureTime) * 16.0));
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_decayToOwner = lp_decayToOwner;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_rememberLastOwner = lp_rememberLastOwner;
    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "CaptureProgressBar", lp_beaconUnit);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), (libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_maximumPoints * 2.0), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/CaptureBar_Fill", libGame_gv_teams[1].lv_teamPlayerGroup);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/CaptureBar_Fill_Red", libGame_gv_teams[2].lv_teamPlayerGroup);
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureProgressBar = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "CaptureProgressBGImage", lp_beaconUnit);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/CaptureBar_Fill_Red", libGame_gv_teams[1].lv_teamPlayerGroup);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/CaptureBar_Fill", libGame_gv_teams[2].lv_teamPlayerGroup);
    UnitStatusBarOverride(lp_beaconUnit, c_unitStatusGroupAll);
    libGame_gf_CapturePointEnable(libGame_gv_capturePointCurrentCount);
    if ((TriggerIsEnabled(libGame_gt_CapturePointLogic) == false)) {
        TriggerEnable(libGame_gt_CapturePointLogic, true);
    }
    else {
    }
    DataTableSetInt(false, libGame_gv_capturePointLastCreatedCapturePointIndex_C, libGame_gv_capturePointCurrentCount);
}

void libGame_gf_CapturePointEnable (int lp_capturePointIndex) {
    // Implementation
    if (((lp_capturePointIndex > libGame_gv_capturePointCurrentCount) || (libGame_gv_capturePoints[lp_capturePointIndex].lv_enabled == true))) {
        return ;
    }
    else {
    }
    libGame_gv_capturePoints[lp_capturePointIndex].lv_enabled = true;
    UnitSetOwner(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit, libCore_gv_cOMPUTER_Neutral, true);
    ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit), "Signal Show");
    libGame_gv_capturePoints[lp_capturePointIndex].lv_captureCounter = 0;
    libGame_gv_capturePoints[lp_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_Neutral;
}

trigger auto_libGame_gf_CapturePointDisable_Trigger = null;
int auto_libGame_gf_CapturePointDisable_lp_capturePointIndex;

void libGame_gf_CapturePointDisable (int lp_capturePointIndex) {
    auto_libGame_gf_CapturePointDisable_lp_capturePointIndex = lp_capturePointIndex;

    if (auto_libGame_gf_CapturePointDisable_Trigger == null) {
        auto_libGame_gf_CapturePointDisable_Trigger = TriggerCreate("auto_libGame_gf_CapturePointDisable_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_CapturePointDisable_Trigger, false, false);
}

bool auto_libGame_gf_CapturePointDisable_TriggerFunc (bool testConds, bool runActions) {
    int lp_capturePointIndex = auto_libGame_gf_CapturePointDisable_lp_capturePointIndex;

    // Implementation
    if (((lp_capturePointIndex > libGame_gv_capturePointCurrentCount) || (libGame_gv_capturePoints[lp_capturePointIndex].lv_enabled == false))) {
        return true;
    }
    else {
    }
    libGame_gv_capturePoints[lp_capturePointIndex].lv_enabled = false;
    ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit), "Signal Hide");
    Wait(1.0, c_timeGame);
    UnitSetOwner(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit, libCore_gv_cOMPUTER_Neutral, true);
    return true;
}

void libGame_gf_CapturePointSetAlwaysDecay (int lp_index, bool lp_always) {
    // Implementation
    libGame_gv_capturePoints[lp_index].lv_alwaysDecay = lp_always;
}

int libGame_gf_LastCreatedCapturePoint () {
    // Implementation
    return DataTableGetInt(false, libGame_gv_capturePointLastCreatedCapturePointIndex_C);
}

bool libGame_gf_CapturePointFullyCaptured (int lp_capturePointIndex) {
    // Implementation
    if ((lp_capturePointIndex > libGame_gv_capturePointCurrentCount)) {
        return false;
    }
    else {
    }
    if (((libGame_gv_capturePoints[lp_capturePointIndex].lv_captureCounter == libGame_gv_capturePoints[lp_capturePointIndex].lv_maximumPoints) || (libGame_gv_capturePoints[lp_capturePointIndex].lv_captureCounter == (libGame_gv_capturePoints[lp_capturePointIndex].lv_maximumPoints * -1)))) {
        return true;
    }
    else {
        return false;
    }
}

int libGame_gf_CapturePointCounter (int lp_capturePointIndex) {
    // Implementation
    if ((lp_capturePointIndex > libGame_gv_capturePointCurrentCount)) {
        return 0;
    }
    else {
    }
    return libGame_gv_capturePoints[lp_capturePointIndex].lv_captureCounter;
}

int libGame_gf_CapturePointCounterMax (int lp_capturePointIndex) {
    // Implementation
    if ((lp_capturePointIndex > libGame_gv_capturePointCurrentCount)) {
        return 0;
    }
    else {
    }
    return libGame_gv_capturePoints[lp_capturePointIndex].lv_pointsNeededToCapture;
}

bool libGame_gf_CapturePointContested (int lp_capturePointIndex) {
    // Implementation
    if ((lp_capturePointIndex > libGame_gv_capturePointCurrentCount)) {
        return false;
    }
    else {
    }
    return libGame_gv_capturePoints[lp_capturePointIndex].lv_contested;
}

void libGame_gf_CCRecognitionCCReduction (unit lp_unit, string lp_cCBehavior) {
    // Variable Declarations
    fixed lv_behaviorDuration;
    fixed lv_reducedDuration;
    fixed lv_percentReduction;

    // Variable Initialization

    // Implementation
    lv_behaviorDuration = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, lp_cCBehavior, "Duration", UnitBehaviorEffectPlayer(lp_unit, lp_cCBehavior, c_effectPlayerCaster, 0)));
    if (((UnitBehaviorCount(lp_unit, "75PercentCCReduction") == 1) || ((UnitBehaviorCount(lp_unit, "SiegeMode") == 1) && (UnitBehaviorCount(lp_unit, "SgtHammerResistantCarryBehavior") == 1)) || ((UnitBehaviorCount(lp_unit, "MuradinAvatarHealthBuff") == 1) && (UnitBehaviorCount(lp_unit, "AvatarUnstoppableForceCarryBehavior") == 1)) || ((UnitBehaviorCount(lp_unit, "BarbarianWrathoftheBerserkerBase") == 1) && (UnitBehaviorCount(lp_unit, "BarbarianWrathoftheBerserkerAngerManagementCarryBehavior") == 1)))) {
        lv_percentReduction = libCore_gv_talents_RelentlessCCReduction75_C;
    }
    else {
        if ((UnitBehaviorCount(lp_unit, "RelentlessCCReduction60") == 1)) {
            lv_percentReduction = libCore_gv_talents_RelentlessCCReduction60_C;
        }
        else {
            if (((UnitBehaviorCount(lp_unit, "TychusOdin") == 1) || (UnitBehaviorCount(lp_unit, "TinkerRoboGoblin") == 1) || (UnitBehaviorCount(lp_unit, "50PercentCCReduction") == 1) || (UnitBehaviorCount(lp_unit, "BarbarianWrathoftheBerserkerBase") == 1) || ((UnitBehaviorCount(lp_unit, "IllidanMetamorphosis") == 1) && (UnitBehaviorCount(lp_unit, "IllidanMetamorphosisDemonicFormCarryBehavior") == 1)))) {
                lv_percentReduction = libCore_gv_bAL5PercentCCReduction;
            }
            else {
                if ((UnitBehaviorCount(lp_unit, "RelentlessCCReduction40") == 1)) {
                    lv_percentReduction = libCore_gv_talents_RelentlessCCReduction40_C;
                }
                else {
                    if ((UnitBehaviorCount(lp_unit, "33PercentCCReduction") == 1)) {
                        lv_percentReduction = libCore_gv_bAL33PercentCCReduction;
                    }
                    else {
                        if ((UnitBehaviorCount(lp_unit, "RelentlessCCReduction20") == 1)) {
                            lv_percentReduction = libCore_gv_talents_RelentlessCCReduction20_C;
                        }
                        else {
                        }
                    }
                }
            }
        }
    }
    lv_percentReduction += libGame_gv_players[UnitGetOwner(lp_unit)].lv_artifacts_CCReduction;
    lv_reducedDuration = (lv_behaviorDuration * (1.0 - MinF(lv_percentReduction, 0.9)));
    UnitBehaviorSetDuration(lp_unit, lp_cCBehavior, lv_reducedDuration);
}

text libGame_gf_EncouragementFormatStatCalloutText (int lp_calloutStatIndex, int lp_thresholdIndex, fixed lp_statValue) {
    int auto25163E25_val;
    int auto8F4017C0_val;

    // Variable Declarations
    text lv_formattedText;
    text lv_fontStyle;

    // Variable Initialization

    // Implementation
    auto25163E25_val = lp_calloutStatIndex;
    if (auto25163E25_val == (libGame_ge_EncouragementStatCallouts_TimeSpentAlive)) {
        TextExpressionSetToken("Param/Expression/lib_Game_FDE12D48", "A", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(lp_statValue)));
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_FDE12D48");
    }
    else if (auto25163E25_val == (libGame_ge_EncouragementStatCallouts_PercentOfTeamsXPGathered)) {
        TextExpressionSetToken("Param/Expression/lib_Game_A7D108DC", "A", FixedToText((lp_statValue * 100.0), 1));
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_A7D108DC");
    }
    else if (auto25163E25_val == (libGame_ge_EncouragementStatCallouts_Takedowns)) {
        TextExpressionSetToken("Param/Expression/lib_Game_3DEA1C09", "A", FixedToText(lp_statValue, 0));
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_3DEA1C09");
    }
    else if (auto25163E25_val == (libGame_ge_EncouragementStatCallouts_DamageDoneToHeroes)) {
        TextExpressionSetToken("Param/Expression/lib_Game_C6A57A7B", "A", FixedToText(lp_statValue, 0));
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_C6A57A7B");
    }
    else if (auto25163E25_val == (libGame_ge_EncouragementStatCallouts_HealingDoneToHeroes)) {
        TextExpressionSetToken("Param/Expression/lib_Game_317D878F", "A", FixedToText(lp_statValue, 0));
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_317D878F");
    }
    else if (auto25163E25_val == (libGame_ge_EncouragementStatCallouts_MapTributesCollected)) {
        if ((lp_statValue == 1)) {
            TextExpressionSetToken("Param/Expression/lib_Game_0C2F8347", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_0C2F8347");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Game_7AA54D2E", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_7AA54D2E");
        }
    }
    else if (auto25163E25_val == (libGame_ge_EncouragementStatCallouts_MapDoubloonsTurnedIn)) {
        if ((lp_statValue == 1)) {
            TextExpressionSetToken("Param/Expression/lib_Game_FD77B75E", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_FD77B75E");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Game_B2BA9EF0", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_B2BA9EF0");
        }
    }
    else if (auto25163E25_val == (libGame_ge_EncouragementStatCallouts_MapDragonShrineCaptures)) {
        if ((lp_statValue == 1)) {
            TextExpressionSetToken("Param/Expression/lib_Game_E2E6DF60", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_E2E6DF60");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Game_FE7B0F1B", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_FE7B0F1B");
        }
    }
    else if (auto25163E25_val == (libGame_ge_EncouragementStatCallouts_MapSkullsCollected)) {
        if ((lp_statValue == 1)) {
            TextExpressionSetToken("Param/Expression/lib_Game_83E75106", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_83E75106");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Game_CAA82BA4", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_CAA82BA4");
        }
    }
    else if (auto25163E25_val == (libGame_ge_EncouragementStatCallouts_MercCampsCaptured)) {
        if ((lp_statValue == 1)) {
            TextExpressionSetToken("Param/Expression/lib_Game_FC056CBA", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_FC056CBA");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Game_218E4739", "A", FixedToText(lp_statValue, 0));
            lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_218E4739");
        }
    }
    else if (auto25163E25_val == (libGame_ge_EncouragementStatCallouts_DamageDoneToTowns)) {
        TextExpressionSetToken("Param/Expression/lib_Game_008354F0", "A", FixedToText(lp_statValue, 0));
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_008354F0");
    }
    else if (auto25163E25_val == (libGame_ge_EncouragementStatCallouts_ShieldingDoneToHeroes)) {
        TextExpressionSetToken("Param/Expression/lib_Game_0436D8E5", "A", FixedToText(lp_statValue, 0));
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_0436D8E5");
    }
    else {
    }
    auto8F4017C0_val = lp_thresholdIndex;
    if (auto8F4017C0_val == (libGame_ge_EncouragementStatCalloutThresholds_Display)) {
        lv_fontStyle = StringExternal("Param/Value/lib_Game_BF832136");
    }
    else if (auto8F4017C0_val == (libGame_ge_EncouragementStatCalloutThresholds_GreatJob)) {
        lv_fontStyle = StringExternal("Param/Value/lib_Game_8C4BA33C");
        TextExpressionSetToken("Param/Expression/lib_Game_A57B5225", "A", lv_formattedText);
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_A57B5225");
    }
    else if (auto8F4017C0_val == (libGame_ge_EncouragementStatCalloutThresholds_Amazing)) {
        lv_fontStyle = StringExternal("Param/Value/lib_Game_56D07AF7");
        TextExpressionSetToken("Param/Expression/lib_Game_73C79E0C", "A", lv_formattedText);
        lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_73C79E0C");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_Game_019E5C6C", "A", lv_fontStyle);
    TextExpressionSetToken("Param/Expression/lib_Game_019E5C6C", "B", lv_formattedText);
    lv_formattedText = TextExpressionAssemble("Param/Expression/lib_Game_019E5C6C");
    return lv_formattedText;
}

void libGame_gf_EncouragementDataTrackingResetCalloutValuesForPlayer (int lp_player) {
    int autoFBCEAD38_ae;
    int autoFBCEAD38_ai;
    int auto519D5A2F_ae;
    int auto519D5A2F_ai;

    // Variable Declarations
    int lv_itStat;
    int lv_heroIndex;
    fixed lv_statValue;

    // Variable Initialization

    // Implementation
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    autoFBCEAD38_ae = libGame_gv_encouragement_NumberOfStatCallouts_C;
    autoFBCEAD38_ai = 1;
    lv_itStat = 1;
    for ( ; ( (autoFBCEAD38_ai >= 0 && lv_itStat <= autoFBCEAD38_ae) || (autoFBCEAD38_ai <= 0 && lv_itStat >= autoFBCEAD38_ae) ) ; lv_itStat += autoFBCEAD38_ai ) {
        lv_statValue = libGame_gv_encouragement_CalloutStatTracking[lp_player][lv_itStat];
        if (((lv_statValue > 0.0) || ((libGame_ge_EncouragementStatCallouts_Takedowns) == lv_itStat))) {
            TextExpressionSetToken("Param/Expression/lib_Game_25A114BE", "A", libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_name);
            TextExpressionSetToken("Param/Expression/lib_Game_25A114BE", "B", FixedToText(TimerGetElapsed(libGame_gv_gameTimer), 0));
            TextExpressionSetToken("Param/Expression/lib_Game_25A114BE", "C", StringToText(libGame_ge_EncouragementStatCallouts_Ident(lv_itStat)));
            TextExpressionSetToken("Param/Expression/lib_Game_25A114BE", "D", FixedToText(lv_statValue, 2));
            TriggerDebugOutput(3, TextExpressionAssemble("Param/Expression/lib_Game_25A114BE"), false);
        }
        else {
        }
    }
    TriggerDebugOutput(3, TextExpressionAssemble("Param/Expression/lib_Game_15C50068"), false);
    TimerStart(libGame_gv_encouragement_TimeSpentAliveTimer[lp_player], c_timerDurationInfinite, false, c_timeGame);
    libGame_gv_encouragement_XPGathered[lp_player] = 0.0;
    libGame_gv_encouragement_TotalTeamXPGathered[lp_player] = 0.0;
    auto519D5A2F_ae = libGame_gv_encouragement_NumberOfStatCallouts_C;
    auto519D5A2F_ai = 1;
    lv_itStat = 1;
    for ( ; ( (auto519D5A2F_ai >= 0 && lv_itStat <= auto519D5A2F_ae) || (auto519D5A2F_ai <= 0 && lv_itStat >= auto519D5A2F_ae) ) ; lv_itStat += auto519D5A2F_ai ) {
        libGame_gv_encouragement_CalloutStatTracking[lp_player][lv_itStat] = 0.0;
    }
}

int libGame_gf_EncouragementConvertIntegerToDeathTipNamePreset (int lp_int) {
    int autoC61B2051_val;

    // Implementation
    autoC61B2051_val = lp_int;
    if (autoC61B2051_val == (libGame_ge_EncouragementDeathTipsNames_EnemyFountainDeath)) {
        return libGame_ge_EncouragementDeathTipsNames_EnemyFountainDeath;
    }
    else if (autoC61B2051_val == (libGame_ge_EncouragementDeathTipsNames_FollowMinions)) {
        return libGame_ge_EncouragementDeathTipsNames_FollowMinions;
    }
    else if (autoC61B2051_val == (libGame_ge_EncouragementDeathTipsNames_Gangups)) {
        return libGame_ge_EncouragementDeathTipsNames_Gangups;
    }
    else if (autoC61B2051_val == (libGame_ge_EncouragementDeathTipsNames_Retreat)) {
        return libGame_ge_EncouragementDeathTipsNames_Retreat;
    }
    else if (autoC61B2051_val == (libGame_ge_EncouragementDeathTipsNames_MinionsvsTowns)) {
        return libGame_ge_EncouragementDeathTipsNames_MinionsvsTowns;
    }
    else if (autoC61B2051_val == (libGame_ge_EncouragementDeathTipsNames_Moonwell)) {
        return libGame_ge_EncouragementDeathTipsNames_Moonwell;
    }
    else if (autoC61B2051_val == (libGame_ge_EncouragementDeathTipsNames_Mount)) {
        return libGame_ge_EncouragementDeathTipsNames_Mount;
    }
    else if (autoC61B2051_val == (libGame_ge_EncouragementDeathTipsNames_TrainTalents)) {
        return libGame_ge_EncouragementDeathTipsNames_TrainTalents;
    }
    else if (autoC61B2051_val == (libGame_ge_EncouragementDeathTipsNames_UseYourAbilities)) {
        return libGame_ge_EncouragementDeathTipsNames_UseYourAbilities;
    }
    else {
    }
    return libGame_ge_EncouragementDeathTipsNames_Null;
}

text libGame_gf_EncouragementGetDeathTipText (int lp_deathTip) {
    int auto275AE6DC_val;

    // Implementation
    auto275AE6DC_val = lp_deathTip;
    if (auto275AE6DC_val == libGame_ge_EncouragementDeathTipsNames_EnemyFountainDeath) {
        return StringExternal("Param/Value/lib_Game_1415EA4F");
    }
    else if (auto275AE6DC_val == libGame_ge_EncouragementDeathTipsNames_FollowMinions) {
        return StringExternal("Param/Value/lib_Game_71259F7B");
    }
    else if (auto275AE6DC_val == libGame_ge_EncouragementDeathTipsNames_Gangups) {
        return StringExternal("Param/Value/lib_Game_A69A1666");
    }
    else if (auto275AE6DC_val == libGame_ge_EncouragementDeathTipsNames_MinionsvsTowns) {
        return StringExternal("Param/Value/lib_Game_35AB5147");
    }
    else if (auto275AE6DC_val == libGame_ge_EncouragementDeathTipsNames_Moonwell) {
        return StringExternal("Param/Value/lib_Game_57E4FBE9");
    }
    else if (auto275AE6DC_val == libGame_ge_EncouragementDeathTipsNames_Mount) {
        return StringExternal("Param/Value/lib_Game_C267F6C9");
    }
    else if (auto275AE6DC_val == libGame_ge_EncouragementDeathTipsNames_Retreat) {
        return StringExternal("Param/Value/lib_Game_95971880");
    }
    else if (auto275AE6DC_val == libGame_ge_EncouragementDeathTipsNames_TrainTalents) {
        return StringExternal("Param/Value/lib_Game_B8C5E298");
    }
    else if (auto275AE6DC_val == libGame_ge_EncouragementDeathTipsNames_UseYourAbilities) {
        return StringExternal("Param/Value/lib_Game_2DDD6965");
    }
    else {
    }
    return StringToText("");
}

void libGame_gf_EncouragementRegisterDeathTipForPlayer (int lp_player, int lp_tip) {
    // Variable Declarations
    int lv_tipIndex;

    // Variable Initialization

    // Implementation
    lv_tipIndex = (lp_tip);
    if ((libGame_gv_players[lp_player].lv_bankData.lv_deathTipDisplayCount[lv_tipIndex] < libGame_gv_encouragement_DeathTipMaxDisplayCount_C) && (libGame_gv_players[lp_player].lv_bankData.lv_totalPlayCount <= libGame_gv_encouragement_DeathTipGamesPlayedThreshold_C)) {
        libGame_gv_encouragement_RegisteredDeathTips[lp_player][lv_tipIndex].lv_isRegistered = true;
        libGame_gv_encouragement_RegisteredDeathTips[lp_player][lv_tipIndex].lv_registerTime = GameGetMissionTime();
    }
    else {
    }
}

void libGame_gf_EncouragementRegisterDeathTipsOnPlayerDeath (int lp_player) {
    // Variable Declarations
    unit lv_heroUnit;
    point lv_positionOfHeroUnit;
    bool lv_multipleEnemyHeroesNearby;
    fixed lv_minionDamageHPPercent;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_players[lp_player].lv_bankData.lv_totalPlayCount > libGame_gv_encouragement_DeathTipGamesPlayedThreshold_C)) {
        return ;
    }
    else {
    }
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    lv_positionOfHeroUnit = UnitGetPosition(lv_heroUnit);
    libGame_gv_encouragement_DeathTipData[lp_player].lv_timeSpentAlive = TimerGetElapsed(libGame_gv_encouragement_TimeSpentAliveTimer[lp_player]);
    if ((libGame_gv_players[lp_player].lv_bankData.lv_deathTipDisplayCount[(libGame_ge_EncouragementDeathTipsNames_FollowMinions)] < libGame_gv_encouragement_DeathTipMaxDisplayCount_C) && (libGame_gv_encouragement_DeathTipData[lp_player].lv_alliedMinionsNearby == false) && (TimerGetElapsed(libGame_gv_encouragement_DeathTipData[lp_player].lv_timeWithNoAlliedMinionsNearby) >= libGame_gv_encouragement_DeathTipNearbyMinionsTimeThreshold_C)) {
        lv_minionDamageHPPercent = (libGame_gv_encouragement_DeathTipData[lp_player].lv_enemyMinionDamageTaken / UnitGetPropertyFixed(lv_heroUnit, c_unitPropLifeMax, c_unitPropCurrent));
        if ((lv_minionDamageHPPercent >= libGame_gv_encouragement_DeathTipEnemyMinionPercentDamageThreshold_C)) {
            libGame_gf_EncouragementRegisterDeathTipForPlayer(lp_player, libGame_ge_EncouragementDeathTipsNames_FollowMinions);
            return ;
        }
        else {
        }
    }
    else {
    }
    if ((libGame_gv_players[lp_player].lv_bankData.lv_deathTipDisplayCount[(libGame_ge_EncouragementDeathTipsNames_MinionsvsTowns)] < libGame_gv_encouragement_DeathTipMaxDisplayCount_C) && (libGame_gv_encouragement_DeathTipData[lp_player].lv_recentStructureDamageTaken == true) && (libGame_gv_encouragement_DeathTipData[lp_player].lv_recentHeroKills == 0)) {
        libGame_gf_EncouragementRegisterDeathTipForPlayer(lp_player, libGame_ge_EncouragementDeathTipsNames_MinionsvsTowns);
        return ;
    }
    else {
    }
    if ((libGame_gv_players[lp_player].lv_bankData.lv_deathTipDisplayCount[(libGame_ge_EncouragementDeathTipsNames_UseYourAbilities)] < libGame_gv_encouragement_DeathTipMaxDisplayCount_C) && (libGame_gv_encouragement_DeathTipData[lp_player].lv_usedAnAbility == false) && (TimerGetElapsed(libGame_gv_encouragement_TimeSpentAliveTimer[lp_player]) >= 150.0)) {
        libGame_gf_EncouragementRegisterDeathTipForPlayer(lp_player, libGame_ge_EncouragementDeathTipsNames_UseYourAbilities);
        return ;
    }
    else {
    }
    if ((libGame_gv_players[lp_player].lv_bankData.lv_deathTipDisplayCount[(libGame_ge_EncouragementDeathTipsNames_Moonwell)] < libGame_gv_encouragement_DeathTipMaxDisplayCount_C) && (libGame_gv_encouragement_DeathTipData[lp_player].lv_usedAMoonwell == false) && ((libGame_gv_encouragement_DeathTipData[lp_player].lv_timeSpentBelowLowHealthThreshold >= 15.0) || ((UnitHasBehavior2(lv_heroUnit, "NotManaUserDummy") == false) && (libGame_gv_encouragement_DeathTipData[lp_player].lv_timeSpentBelowLowManaThreshold >= 15.0)))) {
        libGame_gf_EncouragementRegisterDeathTipForPlayer(lp_player, libGame_ge_EncouragementDeathTipsNames_Moonwell);
        return ;
    }
    else {
    }
    if ((libGame_gv_players[lp_player].lv_bankData.lv_deathTipDisplayCount[(libGame_ge_EncouragementDeathTipsNames_Retreat)] < libGame_gv_encouragement_DeathTipMaxDisplayCount_C) && (libGame_gv_encouragement_DeathTipData[lp_player].lv_timeSpentBelowSuperLowHealthThresholdWithoutUsableMoonwellNearby >= 10.0)) {
        libGame_gf_EncouragementRegisterDeathTipForPlayer(lp_player, libGame_ge_EncouragementDeathTipsNames_Retreat);
        return ;
    }
    else {
    }
    if ((libGame_gv_players[lp_player].lv_bankData.lv_deathTipDisplayCount[(libGame_ge_EncouragementDeathTipsNames_TrainTalents)] < libGame_gv_encouragement_DeathTipMaxDisplayCount_C) && (libGame_gv_players[lp_player].lv_talentsBucketABChoices[1].lv_selection == 0)) {
        libGame_gf_EncouragementRegisterDeathTipForPlayer(lp_player, libGame_ge_EncouragementDeathTipsNames_TrainTalents);
        return ;
    }
    else {
    }
    if ((libGame_gv_players[lp_player].lv_bankData.lv_deathTipDisplayCount[(libGame_ge_EncouragementDeathTipsNames_EnemyFountainDeath)] < libGame_gv_encouragement_DeathTipMaxDisplayCount_C) && (UnitHasBehavior2(lv_heroUnit, "BaseRepulserFieldPunted") == true)) {
        libGame_gf_EncouragementRegisterDeathTipForPlayer(lp_player, libGame_ge_EncouragementDeathTipsNames_EnemyFountainDeath);
        return ;
    }
    else {
    }
}

void libGame_gf_EncouragementClearRegisteredDeathTipsForPlayer (int lp_player) {
    int autoC17FD681_ae;
    int autoC17FD681_ai;

    // Variable Declarations
    int lv_itTip;

    // Variable Initialization

    // Implementation
    autoC17FD681_ae = libGame_gv_encouragement_NumberOfDeathTips_C;
    autoC17FD681_ai = 1;
    lv_itTip = 1;
    for ( ; ( (autoC17FD681_ai >= 0 && lv_itTip <= autoC17FD681_ae) || (autoC17FD681_ai <= 0 && lv_itTip >= autoC17FD681_ae) ) ; lv_itTip += autoC17FD681_ai ) {
        libGame_gv_encouragement_RegisteredDeathTips[lp_player][lv_itTip].lv_isRegistered = false;
        libGame_gv_encouragement_RegisteredDeathTips[lp_player][lv_itTip].lv_registerTime = 0.0;
    }
}

void libGame_gf_EncouragementDataTrackingRegisterMinionDamageForPlayer (int lp_player, fixed lp_damage) {
    // Implementation
    libGame_gv_encouragement_DeathTipData[lp_player].lv_enemyMinionDamageTaken += lp_damage;
}

void libGame_gf_EncouragementDataTrackingRegisterRecentHeroKillForPlayer (int lp_player) {
    // Implementation
    libGame_gv_encouragement_DeathTipData[lp_player].lv_recentHeroKills += 1;
    TimerStart(libGame_gv_encouragement_DeathTipData[lp_player].lv_recentHeroKillTimer, libGame_gv_encouragement_DeathTipRecentHeroKillTimeout_C, false, c_timeGame);
}

void libGame_gf_EncouragementDataTrackingRegisterRecentStructureDamageForPlayer (int lp_player) {
    // Implementation
    libGame_gv_encouragement_DeathTipData[lp_player].lv_recentStructureDamageTaken = true;
    TimerStart(libGame_gv_encouragement_DeathTipData[lp_player].lv_recentStructureDamageTimer, libGame_gv_encouragement_DeathTipRecentStructureDamageTimeout_C, false, c_timeGame);
}

void libGame_gf_CameraPannedFromScript (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_CameraPannedFromScript_C);
}

void libGame_gf_SendEventCameraPannedFromScript (int lp_player, point lp_point) {
    // Implementation
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_CameraPannedFromScript_C, libGame_gv_eventParam_CameraPannedFromScript_Point_C), lp_point);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CameraPannedFromScript_C, libGame_gv_eventParam_CameraPannedFromScript_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_CameraPannedFromScript_C);
}

point libGame_gf_CameraPannedFromScriptPoint () {
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_CameraPannedFromScript_C, libGame_gv_eventParam_CameraPannedFromScript_Point_C));
}

int libGame_gf_CameraPannedFromScriptPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CameraPannedFromScript_C, libGame_gv_eventParam_CameraPannedFromScript_Player_C));
}

void libGame_gf_CapturePointChangesOwner (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_CapturePointChangesOwner_C);
}

void libGame_gf_SendEventCapturePointChangesOwner (int lp_capturePointIndex, int lp_owner, playergroup lp_capturingPlayers, bool lp_hasMercLordTalent) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_CapturePointIndex_C), lp_capturePointIndex);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_Owner_C), lp_owner);
    DataTableSetPlayerGroup(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_CapturingPlayers_C), lp_capturingPlayers);
    DataTableSetBool(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_HasMercLordTalent_C), lp_hasMercLordTalent);
    TriggerSendEvent(libGame_gv_eventID_CapturePointChangesOwner_C);
}

int libGame_gf_CapturePointChangesOwnerCapturePointIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_CapturePointIndex_C));
}

int libGame_gf_CapturePointChangesOwnerOwner () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_Owner_C));
}

playergroup libGame_gf_CapturePointChangesOwnerCapturingPlayers () {
    // Implementation
    return DataTableGetPlayerGroup(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_CapturingPlayers_C));
}

bool libGame_gf_CapturePointChangesOwnerHasMercLordTalent () {
    // Implementation
    return DataTableGetBool(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_HasMercLordTalent_C));
}

void libGame_gf_CapturePointBecomesFullyOverCaptured (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_CapturePointBecomesFullyOverCaptured_C);
}

void libGame_gf_SendEventCapturePointBecomesFullyOverCaptured (int lp_capturePointIndex) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointBecomesFullyOverCaptured_C, libGame_gv_eventParam_CapturePointBecomesFullyOverCaptured_CapturePointIndex_C), lp_capturePointIndex);
    TriggerSendEvent(libGame_gv_eventID_CapturePointBecomesFullyOverCaptured_C);
}

int libGame_gf_CapturePointBecomesFullyOverCapturedCapturePointIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointBecomesFullyOverCaptured_C, libGame_gv_eventParam_CapturePointBecomesFullyOverCaptured_CapturePointIndex_C));
}

void libGame_gf_DebugHeroSwapped (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_DebugHeroSwapped_C);
}

void libGame_gf_SendEventDebugHeroSwapped (int lp_player) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_DebugHeroSwapped_C, libGame_gv_eventParam_DebugHeroSwapped_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_DebugHeroSwapped_C);
}

int libGame_gf_DebugHeroSwappedPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_DebugHeroSwapped_C, libGame_gv_eventParam_DebugHeroSwapped_Player_C));
}

void libGame_gf_JungleDefenderAIDefendersBeginFighting (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleDefenderAIDefendersBeginFighting_C);
}

void libGame_gf_SendEventJungleDefenderAIDefendersBeginFighting (int lp_defenderAIIndex) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefendersBeginFighting_C, libGame_gv_eventParam_JungleDefenderAIDefendersBeginFighting_Index_C), lp_defenderAIIndex);
    TriggerSendEvent(libGame_gv_eventID_JungleDefenderAIDefendersBeginFighting_C);
}

int libGame_gf_JungleDefenderAIDefendersBeginFightingIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefendersBeginFighting_C, libGame_gv_eventParam_JungleDefenderAIDefendersBeginFighting_Index_C));
}

void libGame_gf_JungleDefenderAIDefendersEndFighting (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleDefenderAIDefendersEndFighting_C);
}

void libGame_gf_SendEventJungleDefenderAIDefendersEndFighting (int lp_defenderAIIndex) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefendersEndFighting_C, libGame_gv_eventParam_JungleDefenderAIDefendersEndFighting_Index_C), lp_defenderAIIndex);
    TriggerSendEvent(libGame_gv_eventID_JungleDefenderAIDefendersEndFighting_C);
}

int libGame_gf_JungleDefenderAIDefendersEndFightingIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefendersEndFighting_C, libGame_gv_eventParam_JungleDefenderAIDefendersEndFighting_Index_C));
}

void libGame_gf_JungleDefenderAIDefenderKilled (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleDefenderAIDefenderKilled_C);
}

void libGame_gf_SendEventJungleDefenderAIDefenderKilled (int lp_defenderAIIndex, unit lp_unit, int lp_killingPlayer) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Index_C), lp_defenderAIIndex);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Unit_C), lp_unit);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_KillingPlayer_C), lp_killingPlayer);
    TriggerSendEvent(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C);
}

int libGame_gf_JungleDefenderAIDefenderKilledIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Index_C));
}

unit libGame_gf_JungleDefenderAIDefenderKilledUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Unit_C));
}

int libGame_gf_JungleDefenderAIDefenderKilledKillingPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_KillingPlayer_C));
}

void libGame_gf_JungleDefenderAIAllDefendersKilled (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C);
}

void libGame_gf_SendEventJungleDefenderAIAllDefendersKilled (int lp_defenderAIIndex, int lp_killingPlayer) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C, libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_Index_C), lp_defenderAIIndex);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C, libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_KillingPlayer_C), lp_killingPlayer);
    TriggerSendEvent(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C);
}

int libGame_gf_JungleDefenderAIAllDefendersKilledIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C, libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_Index_C));
}

int libGame_gf_JungleDefenderAIAllDefendersKilledKillingPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C, libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_KillingPlayer_C));
}

void libGame_gf_GameOpenTimerStarted (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_GateOpenTimerStarted_C);
}

void libGame_gf_SendEventGameOpenTimerStarted () {
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_GateOpenTimerStarted_C);
}

void libGame_gf_TownDataInitialized (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_TownDataInitialized_C);
}

void libGame_gf_SendEventTownDataInitialized () {
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_TownDataInitialized_C);
}

void libGame_gf_HeroAIStartingCampAttack (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroAIStartingCampAttack_C);
}

void libGame_gf_SendEventHeroAIStartingCampAttack (int lp_teamIndex, int lp_campIndex) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroAIStartingCampAttack_C, libGame_gv_eventParam_HeroAIStartingCampAttack_TeamIndex_C), lp_teamIndex);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroAIStartingCampAttack_C, libGame_gv_eventParam_HeroAIStartingCampAttack_CampIndex_C), lp_campIndex);
    TriggerSendEvent(libGame_gv_eventID_HeroAIStartingCampAttack_C);
}

int libGame_gf_HeroAIStartingCampAttackTeamIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroAIStartingCampAttack_C, libGame_gv_eventParam_HeroAIStartingCampAttack_TeamIndex_C));
}

int libGame_gf_HeroAIStartingCampAttackCampIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroAIStartingCampAttack_C, libGame_gv_eventParam_HeroAIStartingCampAttack_CampIndex_C));
}

void libGame_gf_HeroAIEndingCampAttack (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroAIEndingCampAttack_C);
}

void libGame_gf_SendEventHeroAIEndingCampAttack (int lp_teamIndex, int lp_campIndex, bool lp_success) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroAIEndingCampAttack_C, libGame_gv_eventParam_HeroAIEndingCampAttack_TeamIndex_C), lp_teamIndex);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroAIEndingCampAttack_C, libGame_gv_eventParam_HeroAIEndingCampAttack_CampIndex_C), lp_campIndex);
    DataTableSetBool(false, TriggerEventParamName(libGame_gv_eventID_HeroAIEndingCampAttack_C, libGame_gv_eventParam_HeroAIEndingCampAttack_Success_C), lp_success);
    TriggerSendEvent(libGame_gv_eventID_HeroAIEndingCampAttack_C);
}

int libGame_gf_HeroAIEndingCampAttackTeamIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroAIEndingCampAttack_C, libGame_gv_eventParam_HeroAIEndingCampAttack_TeamIndex_C));
}

int libGame_gf_HeroAIEndingCampAttackCampIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroAIEndingCampAttack_C, libGame_gv_eventParam_HeroAIEndingCampAttack_CampIndex_C));
}

bool libGame_gf_HeroAIEndingCampAttackSuccess () {
    // Implementation
    return DataTableGetBool(false, TriggerEventParamName(libGame_gv_eventID_HeroAIEndingCampAttack_C, libGame_gv_eventParam_HeroAIEndingCampAttack_Success_C));
}

void libGame_gf_HeroLevelUp (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroLevelUp_C);
}

void libGame_gf_SendEventHeroLevelUp (int lp_player) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroLevelUp_C, libGame_gv_eventParam_HeroLevelUp_Player), lp_player);
    TriggerSendEvent(libGame_gv_eventID_HeroLevelUp_C);
}

int libGame_gf_HeroLevelUpPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroLevelUp_C, libGame_gv_eventParam_HeroLevelUp_Player));
}

void libGame_gf_HeroSpecialCaseMounting (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroSpecialCaseMounting_C);
}

void libGame_gf_SendEventHeroSpecialCaseMounting (int lp_player) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroSpecialCaseMounting_C, libGame_gv_eventParam_HeroSpecialCaseMounting_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_HeroSpecialCaseMounting_C);
}

int libGame_gf_HeroSpecialCaseMountingPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroSpecialCaseMounting_C, libGame_gv_eventParam_HeroSpecialCaseMounting_Player_C));
}

void libGame_gf_HeroPortedBackToTown (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroPortedBackToTown_C);
}

void libGame_gf_SendEventHeroPortedBackToTown (int lp_player) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroPortedBackToTown_C, libGame_gv_eventParam_HeroPortedBackToTown_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_HeroPortedBackToTown_C);
}

int libGame_gf_HeroPortedBackToTownPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroPortedBackToTown_C, libGame_gv_eventParam_HeroPortedBackToTown_Player_C));
}

void libGame_gf_HeroParticipatedInNPCTakedown (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroParticipatedInNPCTakedown_C);
}

void libGame_gf_SendEventHeroParticipatedInNPCTakedown (int lp_player, unit lp_unit) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInNPCTakedown_C, libGame_gv_eventParam_HeroParticipatedInNPCTakedown_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInNPCTakedown_C, libGame_gv_eventParam_HeroParticipatedInNPCTakedown_NPC_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_HeroParticipatedInNPCTakedown_C);
}

int libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInNPCTakedown_C, libGame_gv_eventParam_HeroParticipatedInNPCTakedown_Player_C));
}

unit libGame_gf_HeroParticipatedInNPCTakedownMinion () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInNPCTakedown_C, libGame_gv_eventParam_HeroParticipatedInNPCTakedown_NPC_C));
}

void libGame_gf_SpecialCaseParticipatedInNPCTakedown (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C);
}

void libGame_gf_SendEventSpecialCaseUnitParticipatedInNPCTakedown (int lp_player, unit lp_unit) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C, libGame_gv_eventParam_SpecialCaseUnitParticipatedInNPCTakedown_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C, libGame_gv_eventParam_SpecialCaseUnitParticipatedInNPCTakedown_NPC_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C);
}

int libGame_gf_SpecialCaseUnitParticipatedInNPCTakedownPlayerParticipant () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C, libGame_gv_eventParam_SpecialCaseUnitParticipatedInNPCTakedown_Player_C));
}

unit libGame_gf_SpecialCaseUnitParticipatedInNPCTakedownMinion () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C, libGame_gv_eventParam_SpecialCaseUnitParticipatedInNPCTakedown_NPC_C));
}

void libGame_gf_HeroParticipatedInTakedown (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroParticipatedInTakedown_C);
}

void libGame_gf_SendEventHeroParticipatedInTakedown (int lp_playerKilling, int lp_playerKilled, unit lp_heroKilled) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_PlayerKilling_C), lp_playerKilling);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_PlayerKilled_C), lp_playerKilled);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_HeroKilled_C), lp_heroKilled);
    TriggerSendEvent(libGame_gv_eventID_HeroParticipatedInTakedown_C);
}

int libGame_gf_HeroParticipatedInTakedownKillingPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_PlayerKilling_C));
}

int libGame_gf_HeroParticipatedInTakedownKilledPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_PlayerKilled_C));
}

unit libGame_gf_HeroParticipatedInTakedownKilledHero () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_HeroKilled_C));
}

void libGame_gf_HeroKilled (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroKilled_C);
}

void libGame_gf_SendEventHeroKilled (int lp_playerKilling, unit lp_killedUnit) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_PlayerKilling_C), lp_playerKilling);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_KilledUnit_C), lp_killedUnit);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_PlayerKilled_C), UnitGetOwner(lp_killedUnit));
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_Location_C), UnitGetPosition(lp_killedUnit));
    TriggerSendEvent(libGame_gv_eventID_HeroKilled_C);
}

int libGame_gf_HeroKilledKillingPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_PlayerKilling_C));
}

int libGame_gf_HeroKilledPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_PlayerKilled_C));
}

point libGame_gf_HeroKilledLocaiton () {
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_Location_C));
}

unit libGame_gf_HeroKilledUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_KilledUnit_C));
}

void libGame_gf_HeroRespawn (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroRespawn_C);
}

void libGame_gf_SendEventHeroRespawn (int lp_player) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroRespawn_C, libGame_gv_eventParam_HeroRespawn_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_HeroRespawn_C);
}

int libGame_gf_HeroRespawnPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroRespawn_C, libGame_gv_eventParam_HeroRespawn_Player_C));
}

void libGame_gf_HeroGainTalent (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroGainTalent_C);
}

void libGame_gf_SendEventHeroGainTalent (int lp_player) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroGainTalent_C, libGame_gv_eventParam_HeroGainTalent_Player), lp_player);
    TriggerSendEvent(libGame_gv_eventID_HeroGainTalent_C);
}

int libGame_gf_HeroGainTalentPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroGainTalent_C, libGame_gv_eventParam_HeroGainTalent_Player));
}

void libGame_gf_JungleCampSpawned (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleCampSpawned_C);
}

void libGame_gf_SendEventJungleCampSpawned (int lp_camp) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleCampSpawned_C, libGame_gv_eventParam_JungleCampSpawned_Camp_C), lp_camp);
    TriggerSendEvent(libGame_gv_eventID_JungleCampSpawned_C);
}

int libGame_gf_JungleCampSpawnedIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleCampSpawned_C, libGame_gv_eventParam_JungleCampSpawned_Camp_C));
}

void libGame_gf_JungleCampDefenderCreated (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleCampDefenderCreated_C);
}

void libGame_gf_SendEventJungleCampDefenderCreated (unit lp_unit) {
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleCampDefenderCreated_C, libGame_gv_eventParam_JungleCampDefenderCreated_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_JungleCampDefenderCreated_C);
}

unit libGame_gf_JungleCampDefenderUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleCampDefenderCreated_C, libGame_gv_eventParam_JungleCampDefenderCreated_C));
}

void libGame_gf_JungleCampLanerCreated (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleCampLanerCreated_C);
}

void libGame_gf_SendEventJungleCampLanerCreated (unit lp_unit) {
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleCampLanerCreated_C, libGame_gv_eventParam_JungleCampLanerCreated_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_JungleCampLanerCreated_C);
}

unit libGame_gf_JungleCampLanerUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleCampLanerCreated_C, libGame_gv_eventParam_JungleCampLanerCreated_C));
}

void libGame_gf_MercCampCaptured (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MercCampCaptured_C);
}

void libGame_gf_SendEventMercCampCaptured (int lp_camp, int lp_owner, playergroup lp_capturingPlayers) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_Index_C), lp_camp);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_Owner_C), lp_owner);
    DataTableSetPlayerGroup(false, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_CapturingPlayers_C), lp_capturingPlayers);
    TriggerSendEvent(libGame_gv_eventID_MercCampCaptured_C);
}

int libGame_gf_MercCampCapturedIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_Index_C));
}

int libGame_gf_MercCampCapturedOwner () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_Owner_C));
}

playergroup libGame_gf_MercCampCapturedCapturingPlayers () {
    // Implementation
    return DataTableGetPlayerGroup(false, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_Index_C));
}

void libGame_gf_MapMechanicInitialization (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapMechanicInit_C);
}

void libGame_gf_SendEventMapMechanicInitialization (int lp_mechanic) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapMechanicInit_C, libGame_gv_eventParam_MapMechanicInit_Mechanic_C), (lp_mechanic));
    TriggerSendEvent(libGame_gv_eventID_MapMechanicInit_C);
}

int libGame_gf_MapMechanicInitializationMechanicType () {
    // Variable Declarations
    int lv_value;

    // Variable Initialization

    // Implementation
    lv_value = DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapMechanicInit_C, libGame_gv_eventParam_MapMechanicInit_Mechanic_C));
    return lv_value;
}

void libGame_gf_MapRavenLordTributeWarning (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapTributeWarning_C);
}

void libGame_gf_SendEventMapTributeWarning (point lp_position) {
    // Implementation
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapTributeWarning_C, libGame_gv_eventParam_MapTributeWarning_Position_C), lp_position);
    TriggerSendEvent(libGame_gv_eventID_MapTributeWarning_C);
}

point libGame_gf_MapTributeWarningPosition () {
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapTributeWarning_C, libGame_gv_eventParam_MapTributeWarning_Position_C));
}

void libGame_gf_MapRavenLordTributeSpawned (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapTributeSpawned_C);
}

void libGame_gf_SendEventMapTributeSpawned (unit lp_tribute) {
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapTributeSpawned_C, libGame_gv_eventParam_MapTributeSpawned_Tribute_C), lp_tribute);
    TriggerSendEvent(libGame_gv_eventID_MapTributeSpawned_C);
}

unit libGame_gf_MapTributeSpawnedUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapTributeSpawned_C, libGame_gv_eventParam_MapTributeSpawned_Tribute_C));
}

void libGame_gf_MapRavenLordTributePickedUp (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapTributePickedup_C);
}

void libGame_gf_SendEventMapTributePickedUp (int lp_player, point lp_positioin) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapTributePickedup_C, libGame_gv_eventParam_MapTributePickedup_Player_C), lp_player);
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapTributePickedup_C, libGame_gv_eventParam_MapTributePickedup_Position_C), lp_positioin);
    TriggerSendEvent(libGame_gv_eventID_MapTributePickedup_C);
}

int libGame_gf_MapTributePickedUpPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapTributePickedup_C, libGame_gv_eventParam_MapTributePickedup_Player_C));
}

point libGame_gf_MapTributePickedUpPosition () {
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapTributePickedup_C, libGame_gv_eventParam_MapTributePickedup_Position_C));
}

void libGame_gf_MapRavenLordCurseStarts (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapRavenCurseStarts_C);
}

void libGame_gf_SendEventMapRavenLordCurseStarts (int lp_team) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapRavenCurseStarts_C, libGame_gv_eventParam_MapRavenCurseStarts_Team_C), lp_team);
    TriggerSendEvent(libGame_gv_eventID_MapRavenCurseStarts_C);
}

int libGame_gf_MapRavenLordCurseActivatedTeam () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapRavenCurseStarts_C, libGame_gv_eventParam_MapRavenCurseStarts_Team_C));
}

void libGame_gf_MapRavenLordCurseEnds (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapRavenCurseEnds_C);
}

void libGame_gf_SendEventMapRavenLordCurseEnds () {
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_MapRavenCurseEnds_C);
}

void libGame_gf_MapDoubloonChestSpawned (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapChestSpawned_C);
}

void libGame_gf_SendEventMapChestSpawned (unit lp_chest) {
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapChestSpawned_C, libGame_gv_eventParam_MapChestSpawned_Tribute_C), lp_chest);
    TriggerSendEvent(libGame_gv_eventID_MapChestSpawned_C);
}

unit libGame_gf_MapChestSpawnedUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapChestSpawned_C, libGame_gv_eventParam_MapChestSpawned_Tribute_C));
}

void libGame_gf_MapDoubloonsGhostShipShowsUp (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapDoubloonsGhostShipShowsUp_C);
}

void libGame_gf_SendEventDoubloonsGhostShipShowsUp (unit lp_ship) {
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapDoubloonsGhostShipShowsUp_C, libGame_gv_eventParam_MapDoubloonsGhostShipShowsUp_Ship_C), lp_ship);
    TriggerSendEvent(libGame_gv_eventID_MapDoubloonsGhostShipShowsUp_C);
}

unit libGame_gf_MapDoubloonsGhostShipShowsUpShip () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapDoubloonsGhostShipShowsUp_C, libGame_gv_eventParam_MapDoubloonsGhostShipShowsUp_Ship_C));
}

void libGame_gf_MapDoubloonsGhostShipShootingStart (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapDoubloonsGhostShipShootingStart_C);
}

void libGame_gf_SendEventDoubloonsGhostShipShootingStart (int lp_forPlayer) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapDoubloonsGhostShipShootingStart_C, libGame_gv_eventParam_MapDoubloonsGhostShipShootingStart_ForPlayer_C), lp_forPlayer);
    TriggerSendEvent(libGame_gv_eventID_MapDoubloonsGhostShipShootingStart_C);
}

int libGame_gf_MapDoubloonsGhostShipShootingStartPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapDoubloonsGhostShipShootingStart_C, libGame_gv_eventParam_MapDoubloonsGhostShipShootingStart_ForPlayer_C));
}

void libGame_gf_MapDoubloonsGhostShipShootingEnd (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapDoubloonsGhostShipShootingEnd_C);
}

void libGame_gf_SendEventDoubloonsGhostShipShootingEnd () {
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_MapDoubloonsGhostShipShootingEnd_C);
}

void libGame_gf_MapDoubloonsDoubloonCollected (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapDoubloonsDoubloonCollected_C);
}

void libGame_gf_SendEventDoubloonsDoubloonCollected (int lp_player) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapDoubloonsDoubloonCollected_C, libGame_gv_eventParam_MapDoubloonsDoubloonCollected_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_MapDoubloonsDoubloonCollected_C);
}

int libGame_gf_MapDoubloonsDoubloonCollectedPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapDoubloonsDoubloonCollected_C, libGame_gv_eventParam_MapDoubloonsDoubloonCollected_Player_C));
}

void libGame_gf_MapDoubloonsDoubloonsDropped (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapDoubloonsDoubloonsDropped_C);
}

void libGame_gf_SendEventDoubloonsDoubloonsDropped (int lp_player, int lp_count) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapDoubloonsDoubloonsDropped_C, libGame_gv_eventParam_MapDoubloonsDoubloonsDropped_Player_C), lp_player);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapDoubloonsDoubloonsDropped_C, libGame_gv_eventParam_MapDoubloonsDoubloonsDropped_Count_C), lp_count);
    TriggerSendEvent(libGame_gv_eventID_MapDoubloonsDoubloonsDropped_C);
}

int libGame_gf_MapDoubloonsDoubloonsDroppedPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapDoubloonsDoubloonsDropped_C, libGame_gv_eventParam_MapDoubloonsDoubloonsDropped_Player_C));
}

int libGame_gf_MapDoubloonsDoubloonsDroppedCount () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapDoubloonsDoubloonsDropped_C, libGame_gv_eventParam_MapDoubloonsDoubloonsDropped_Count_C));
}

void libGame_gf_MapDoubloonsDoubloonsTurnedIn (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapDoubloonsDoubloonsTurnedIn_C);
}

void libGame_gf_SendEventDoubloonsDoubloonsTurnedIn (int lp_player, int lp_count) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapDoubloonsDoubloonsTurnedIn_C, libGame_gv_eventParam_MapDoubloonsDoubloonsTurnedIn_Player_C), lp_player);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapDoubloonsDoubloonsTurnedIn_C, libGame_gv_eventParam_MapDoubloonsDoubloonsTurnedIn_Count_C), lp_count);
    TriggerSendEvent(libGame_gv_eventID_MapDoubloonsDoubloonsTurnedIn_C);
}

int libGame_gf_MapDoubloonsDoubloonsTurnedInPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapDoubloonsDoubloonsTurnedIn_C, libGame_gv_eventParam_MapDoubloonsDoubloonsTurnedIn_Player_C));
}

int libGame_gf_MapDoubloonsDoubloonsTurnedInCount () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapDoubloonsDoubloonsTurnedIn_C, libGame_gv_eventParam_MapDoubloonsDoubloonsTurnedIn_Count_C));
}

void libGame_gf_MapUnderworldUndeadSpawned (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapUnderworldOpen_C);
}

void libGame_gf_SendEventMapUnderworldUndeadSpawned (unitgroup lp_entrances, region lp_underworld, int lp_totalSkull) {
    // Implementation
    DataTableSetUnitGroup(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldOpen_C, libGame_gv_eventParam_MapUnderworldOpen_Entrances_C), lp_entrances);
    DataTableSetRegion(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldOpen_C, libGame_gv_eventParam_MapUnderworldOpen_Underworld_C), lp_underworld);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldOpen_C, libGame_gv_eventParam_MapUnderworldOpen_TotalSkull_C), lp_totalSkull);
    TriggerSendEvent(libGame_gv_eventID_MapUnderworldOpen_C);
}

unitgroup libGame_gf_MapUnderworldUndeadSpawnedEntrances () {
    // Implementation
    return DataTableGetUnitGroup(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldOpen_C, libGame_gv_eventParam_MapUnderworldOpen_Entrances_C));
}

region libGame_gf_MapUnderworldUndeadSpawnedUnderworldRegion () {
    // Implementation
    return DataTableGetRegion(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldOpen_C, libGame_gv_eventParam_MapUnderworldOpen_Underworld_C));
}

int libGame_gf_MapUnderworldUndeadSpawnedTotalSkull () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldOpen_C, libGame_gv_eventParam_MapUnderworldOpen_TotalSkull_C));
}

void libGame_gf_MapUnderworldSkullCollected (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapUnderworldSkullCollected_C);
}

void libGame_gf_SendEventMapUnderworldSkullCollected (int lp_team1, int lp_team2, int lp_collectingPlayer) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldSkullCollected_C, libGame_gv_eventParam_MapUnderworldSkullCollected_Team1Skulls_C), lp_team1);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldSkullCollected_C, libGame_gv_eventParam_MapUnderworldSkullCollected_Team2Skulls_C), lp_team2);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldSkullCollected_C, libGame_gv_eventParam_MapUnderworldSkullCollected_CollectingPlayer_C), lp_collectingPlayer);
    TriggerSendEvent(libGame_gv_eventID_MapUnderworldSkullCollected_C);
}

int libGame_gf_MapUnderworldSkullCollectedTeam1Skulls () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldSkullCollected_C, libGame_gv_eventParam_MapUnderworldSkullCollected_Team1Skulls_C));
}

int libGame_gf_MapUnderworldSkullCollectedTeam2Skulls () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldSkullCollected_C, libGame_gv_eventParam_MapUnderworldSkullCollected_Team2Skulls_C));
}

int libGame_gf_MapUnderworldSkullCollectedCollectingPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldSkullCollected_C, libGame_gv_eventParam_MapUnderworldSkullCollected_CollectingPlayer_C));
}

void libGame_gf_MapUnderworldCleared (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapUnderworldCleared_C);
}

void libGame_gf_SendEventMapUnderworldCleared () {
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_MapUnderworldCleared_C);
}

void libGame_gf_MapUnderworldBossStartSummoning (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapUnderworldBossStartSummoning_C);
}

void libGame_gf_SendEventMapUnderworldBossStartSummoning (int lp_team, point lp_location, int lp_lane) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldBossStartSummoning_C, libGame_gv_eventParam_MapUnderworldBossStartSummoning_Team_C), lp_team);
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldBossStartSummoning_C, libGame_gv_eventParam_MapUnderworldBossStartSummoning_Location_C), lp_location);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldBossStartSummoning_C, libGame_gv_eventParam_MapUnderworldBossStartSummoning_Lane_C), lp_lane);
    TriggerSendEvent(libGame_gv_eventID_MapUnderworldBossStartSummoning_C);
}

int libGame_gf_MapUnderworldBossStartSummoningTeam () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldBossStartSummoning_C, libGame_gv_eventParam_MapUnderworldBossStartSummoning_Team_C));
}

point libGame_gf_MapUnderworldBossStartSummoningLocation () {
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldBossStartSummoning_C, libGame_gv_eventParam_MapUnderworldBossStartSummoning_Location_C));
}

int libGame_gf_MapUnderworldBossStartSummoningLane () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldBossStartSummoning_C, libGame_gv_eventParam_MapUnderworldBossStartSummoning_Lane_C));
}

void libGame_gf_MapUnderworldBossSummoned (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapUnderworldBossSummoned_C);
}

void libGame_gf_SendEventMapUnderworldBossSummoned (unit lp_boss) {
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldBossSummoned_C, libGame_gv_eventParam_MapUnderworldBossSummoned_Boss_C), lp_boss);
    TriggerSendEvent(libGame_gv_eventID_MapUnderworldBossSummoned_C);
}

unit libGame_gf_MapUnderworldBossSummonedBoss () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldBossSummoned_C, libGame_gv_eventParam_MapUnderworldBossSummoned_Boss_C));
}

void libGame_gf_MapUnderworldPlayerUsesGate (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapUnderworldPlayerUsesGate_C);
}

void libGame_gf_SendEventMapUnderworldPlayerUsesGate (int lp_player, unit lp_heroUnit) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldPlayerUsesGate_C, libGame_gv_eventParam_MapUnderworldPlayerUsesGate_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldPlayerUsesGate_C, libGame_gv_eventParam_MapUnderworldPlayerUsesGate_HeroUnit_C), lp_heroUnit);
    TriggerSendEvent(libGame_gv_eventID_MapUnderworldPlayerUsesGate_C);
}

int libGame_gf_MapUnderworldPlayerUsesGatePlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldPlayerUsesGate_C, libGame_gv_eventParam_MapUnderworldPlayerUsesGate_Player_C));
}

unit libGame_gf_MapUnderworldPlayerUsesGateHeroUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldPlayerUsesGate_C, libGame_gv_eventParam_MapUnderworldPlayerUsesGate_HeroUnit_C));
}

void libGame_gf_MapDragonShireObeliskSpawned (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapObeliskSpawned_C);
}

void libGame_gf_SendEventMapObeliskSpawned (unit lp_obelisk) {
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapObeliskSpawned_C, libGame_gv_eventParam_MapObeliskSpawned_Obelisk_C), lp_obelisk);
    TriggerSendEvent(libGame_gv_eventID_MapObeliskSpawned_C);
}

unit libGame_gf_MapObeliskSpawnedUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapObeliskSpawned_C, libGame_gv_eventParam_MapObeliskSpawned_Obelisk_C));
}

void libGame_gf_MapDragonShireObeliskOwnershipChange (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapObeliskOwnershipChange_C);
}

void libGame_gf_SendEventMapDragonShireObeliskOwnershipChange (int lp_team, unit lp_obelisk, playergroup lp_capturingPlayers) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapObeliskOwnershipChange_C, libGame_gv_eventParam_MapObeliskOwnershipChange_Team_C), lp_team);
    DataTableSetUnit(true, TriggerEventParamName(libGame_gv_eventID_MapObeliskOwnershipChange_C, libGame_gv_eventParam_MapObeliskOwnershipChange_Obelisk_C), lp_obelisk);
    DataTableSetPlayerGroup(false, TriggerEventParamName(libGame_gv_eventID_MapObeliskOwnershipChange_C, libGame_gv_eventParam_MapObeliskOwnershipChange_CapturingPlayers_C), lp_capturingPlayers);
    TriggerSendEvent(libGame_gv_eventID_MapObeliskOwnershipChange_C);
}

int libGame_gf_MapDragonShireObeliskOwnershipChangeTeam () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapObeliskOwnershipChange_C, libGame_gv_eventParam_MapObeliskOwnershipChange_Team_C));
}

unit libGame_gf_MapDragonShireObeliskOwnershipChangeObelisk () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapObeliskOwnershipChange_C, libGame_gv_eventParam_MapObeliskOwnershipChange_Obelisk_C));
}

playergroup libGame_gf_MapDragonShireObeliskOwnershipChangeCapturingPlayers () {
    // Implementation
    return DataTableGetPlayerGroup(false, TriggerEventParamName(libGame_gv_eventID_MapObeliskOwnershipChange_C, libGame_gv_eventParam_MapObeliskOwnershipChange_CapturingPlayers_C));
}

void libGame_gf_MapDragonShireDragonActivated (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapDragonActivated_C);
}

void libGame_gf_SendEventMapDragonActivated (unit lp_dragon, int lp_activatingPlayer) {
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapDragonActivated_C, libGame_gv_eventParam_MapDragonActivated_Dragon_C), lp_dragon);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapDragonActivated_C, libGame_gv_eventParam_MapDragonActivated_Player_C), lp_activatingPlayer);
    TriggerSendEvent(libGame_gv_eventID_MapDragonActivated_C);
}

unit libGame_gf_MapDragonActivatedDragonUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapDragonActivated_C, libGame_gv_eventParam_MapDragonActivated_Dragon_C));
}

int libGame_gf_MapDragonActivatedDragonPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapDragonActivated_C, libGame_gv_eventParam_MapDragonActivated_Player_C));
}

void libGame_gf_MapDragonShireDragonEnds (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapDragonShireDragonEnds_C);
}

void libGame_gf_SendEventMapDragonShireDragonEnds () {
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_MapDragonShireDragonEnds_C);
}

void libGame_gf_MapHauntedWoodsNightStarts (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapHauntedWoodsNightStarts_C);
}

void libGame_gf_SendEventMapHauntedWoodsNightStarts () {
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_MapHauntedWoodsNightStarts_C);
}

void libGame_gf_MapHauntedWoodsNightEnds (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapHauntedWoodsNightEnds_C);
}

void libGame_gf_SendEventMapHauntedWoodsNightEnds () {
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_MapHauntedWoodsNightEnds_C);
}

void libGame_gf_MapGardensSeedsCollected (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapGardensSeedCollected_C);
}

void libGame_gf_SendEventMapGardensSeedsCollected (int lp_collectingPlayer) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapGardensSeedCollected_C, libGame_gv_eventParam_MapGardensSeedCollected_CollectingPlayer_C), lp_collectingPlayer);
    TriggerSendEvent(libGame_gv_eventID_MapGardensSeedCollected_C);
}

int libGame_gf_MapGardensSeedsCollectedCollectingPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapGardensSeedCollected_C, libGame_gv_eventParam_MapGardensSeedCollected_CollectingPlayer_C));
}

void libGame_gf_MapSoulCagesSoulCollected (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapSoulCagesSoulCollected_C);
}

void libGame_gf_SendEventMapSoulCagesSoulCollected (int lp_collectingPlayer, int lp_count) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapSoulCagesSoulCollected_C, libGame_gv_eventParam_MapSoulCagesSoulCollected_CollectingPlayer_C), lp_collectingPlayer);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapSoulCagesSoulCollected_C, libGame_gv_eventParam_MapSoulCagesSoulCollected_Count_C), lp_count);
    TriggerSendEvent(libGame_gv_eventID_MapSoulCagesSoulCollected_C);
}

int libGame_gf_MapSoulCagesSoulCollectedCollectingPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapSoulCagesSoulCollected_C, libGame_gv_eventParam_MapSoulCagesSoulCollected_CollectingPlayer_C));
}

int libGame_gf_MapSoulCagesSoulCollectedCount () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapSoulCagesSoulCollected_C, libGame_gv_eventParam_MapSoulCagesSoulCollected_Count_C));
}

void libGame_gf_MinionGroupCreated (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MinionGroupCreated_C);
}

void libGame_gf_SendEventMinionGroupCreated (unitgroup lp_unitGroup) {
    // Implementation
    DataTableSetUnitGroup(false, TriggerEventParamName(libGame_gv_eventID_MinionGroupCreated_C, libGame_gv_eventParam_MinionGroupCreated_C), lp_unitGroup);
    TriggerSendEvent(libGame_gv_eventID_MinionGroupCreated_C);
}

unitgroup libGame_gf_MinionUnitGroup () {
    // Implementation
    return DataTableGetUnitGroup(false, TriggerEventParamName(libGame_gv_eventID_MinionGroupCreated_C, libGame_gv_eventParam_MinionGroupCreated_C));
}

void libGame_gf_TalentPanelVisibilityChanged (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_TalentPanelVisibilityChanged_C);
}

void libGame_gf_SendEventTalentPanelVisibilityChanged (int lp_player, bool lp_visible) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_TalentPanelVisibilityChanged_C, libGame_gv_eventParam_TalentPanelVisibilityChanged_Player_C), lp_player);
    DataTableSetBool(false, TriggerEventParamName(libGame_gv_eventID_TalentPanelVisibilityChanged_C, libGame_gv_eventParam_TalentPanelVisibilityChanged_Visibility_C), lp_visible);
    TriggerSendEvent(libGame_gv_eventID_TalentPanelVisibilityChanged_C);
}

int libGame_gf_TalentPanelVisibilityChangedPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_TalentPanelVisibilityChanged_C, libGame_gv_eventParam_TalentPanelVisibilityChanged_Player_C));
}

bool libGame_gf_TalentPanelVisibilityChangedVisible () {
    // Implementation
    return DataTableGetBool(false, TriggerEventParamName(libGame_gv_eventID_TalentPanelVisibilityChanged_C, libGame_gv_eventParam_TalentPanelVisibilityChanged_Visibility_C));
}

void libGame_gf_GameOver (int lp_winningTeam) {
    playergroup auto06C7D5AE_g;
    int auto06C7D5AE_p;
    playergroup auto0404A1D9_g;
    int auto0404A1D9_p;
    playergroup auto58EC5D3D_g;
    int auto58EC5D3D_p;
    playergroup auto36E85141_g;
    int auto36E85141_p;
    playergroup auto75136350_g;
    int auto75136350_p;

    // Variable Declarations
    int lv_itPlayer;
    int lv_losingTeam;
    const fixed lv_endGameTimeDelay = 1.0;

    // Variable Initialization

    // Implementation
    UnitPauseAll(true);
    libNtve_gf_ChangeUnitDamage(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libAIAI_gf_MinionAIPauseUnpauseMinionAISystem(true);
    if ((lp_winningTeam == 0)) {
        auto06C7D5AE_g = libCore_gv_activeHumanPlayers; 
        auto06C7D5AE_p = 1;
        for ( ; auto06C7D5AE_p <= PlayerGroupCount(auto06C7D5AE_g) ; auto06C7D5AE_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto06C7D5AE_g, auto06C7D5AE_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto06C7D5AE_g, auto06C7D5AE_p);
            if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
                CameraLockInput(lv_itPlayer, true);
                libGame_gv_players[lv_itPlayer].lv_victoryDefeat = c_gameOverTie;
            }
            else {
            }
        }
    }
    else {
        lv_losingTeam = (3 - lp_winningTeam);
        auto0404A1D9_g = libGame_gf_PlayersOnTeamHeroes(lp_winningTeam, false); 
        auto0404A1D9_p = 1;
        for ( ; auto0404A1D9_p <= PlayerGroupCount(auto0404A1D9_g) ; auto0404A1D9_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto0404A1D9_g, auto0404A1D9_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto0404A1D9_g, auto0404A1D9_p);
            if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
                CameraLockInput(lv_itPlayer, true);
                libGame_gv_players[lv_itPlayer].lv_victoryDefeat = c_gameOverVictory;
            }
            else {
            }
        }
        auto58EC5D3D_g = libGame_gf_PlayersOnTeamHeroes(lv_losingTeam, false); 
        auto58EC5D3D_p = 1;
        for ( ; auto58EC5D3D_p <= PlayerGroupCount(auto58EC5D3D_g) ; auto58EC5D3D_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto58EC5D3D_g, auto58EC5D3D_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto58EC5D3D_g, auto58EC5D3D_p);
            if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
                CameraLockInput(lv_itPlayer, true);
                libGame_gv_players[lv_itPlayer].lv_victoryDefeat = c_gameOverDefeat;
            }
            else {
            }
        }
    }
    TriggerEnable(libGame_gt_XPTrickle, false);
    libSprt_gf_DataMiningSendEndOfGameDigests();
    auto36E85141_g = libCore_gv_activeHumanPlayers; 
    auto36E85141_p = 1;
    for ( ; auto36E85141_p <= PlayerGroupCount(auto36E85141_g) ; auto36E85141_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto36E85141_g, auto36E85141_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto36E85141_g, auto36E85141_p);
        libUIUI_gf_UITargetInfoPanelClearTargetForPlayer(lv_itPlayer);
        libUIUI_gf_UIHeroConsoleShowHideForPlayer(false, lv_itPlayer);
        UISetMode(libCore_gv_playerGroupFromPlayer[lv_itPlayer], c_uiModeFullscreen, c_transitionDurationImmediate);
        DialogControlSetVisible(libUIUI_gv_uIGameUIHandles.lv_talentsButton, libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
        UISetFrameVisible(libCore_gv_playerGroupFromPlayer[lv_itPlayer], c_syncFrameTypeMinimapPanel, false);
        libUIUI_gf_UIHeroTrackerArrowShowHideForPlayer(false, lv_itPlayer);
        libUIUI_gf_UIGameUIShowHideConsolePanelForPlayer(false, lv_itPlayer);
        libUIUI_gf_TopBarPanelShowHideForPlayer(false, lv_itPlayer);
        libUIUI_gf_DeathTimerPanelShowHideTeamsPanelForPlayer(false, libGame_gv_teamOrderIndex_C, lv_itPlayer);
        libUIUI_gf_DeathTimerPanelShowHideTeamsPanelForPlayer(false, libGame_gv_teamChaosIndex_C, lv_itPlayer);
    }
    libUIUI_gf_UITargetInfoPanelEnableDisable(false);
    if ((libGame_gv_gameOverCallback != null)) {
        TriggerExecute(libGame_gv_gameOverCallback, true, true);
    }
    else {
    }
    libUIUI_gf_GameOverSplashDisplayForAllPlayers(lp_winningTeam);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeStatusUI, false);
    Wait(lv_endGameTimeDelay, c_timeGame);
    auto75136350_g = PlayerGroupAll(); 
    auto75136350_p = 1;
    for ( ; auto75136350_p <= PlayerGroupCount(auto75136350_g) ; auto75136350_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto75136350_g, auto75136350_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto75136350_g, auto75136350_p);
        if ((lv_itPlayer > 0) && (lv_itPlayer <= libCore_gv_bALMaxPlayers) && (PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
            libGame_gf_EndGameForPlayerStorm(lv_itPlayer);
        }
        else {
        }
    }
}

bool libGame_gf_UnitTypeIsTownGate (string lp_unitType) {
    // Implementation
    return (libGame_gf_TownGetTownStructurePresetFromUnitID(lp_unitType) == libGame_ge_TownStructureTypes_Gate);
}

fixed libGame_gf_GetAbilityPowerMultiplierForHero (unit lp_hero) {
    int auto572E941B_ae;
    int auto572E941B_ai;

    // Variable Declarations
    fixed lv_abilityPowerMultiplier;
    int lv_itChoice;
    int lv_player;
    int lv_buttonIndex;

    // Variable Initialization
    lv_abilityPowerMultiplier = 1.0;

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    auto572E941B_ae = libCore_gv_talentsBucket_NumberOfABChoices;
    auto572E941B_ai = 1;
    lv_itChoice = 1;
    for ( ; ( (auto572E941B_ai >= 0 && lv_itChoice <= auto572E941B_ae) || (auto572E941B_ai <= 0 && lv_itChoice >= auto572E941B_ae) ) ; lv_itChoice += auto572E941B_ai ) {
        lv_buttonIndex = libGame_gv_players[lv_player].lv_talentsBucketABChoices[lv_itChoice].lv_selection;
        if ((lv_buttonIndex > 0)) {
            lv_abilityPowerMultiplier += libCore_gv_talents_TalentData[libGame_gv_players[lv_player].lv_talentsBucketABChoices[lv_itChoice].lv_talentIndexArray[lv_buttonIndex]].lv_rankData.lv_abilityPower;
        }
        else {
        }
    }
    return lv_abilityPowerMultiplier;
}

fixed libGame_gf_GetCDRMultiplierForHero (unit lp_hero) {
    int auto6AEA1AE1_ae;
    int auto6AEA1AE1_ai;

    // Variable Declarations
    fixed lv_cooldownReduction;
    int lv_itChoice;
    int lv_player;
    int lv_buttonIndex;

    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    auto6AEA1AE1_ae = libCore_gv_talentsBucket_NumberOfABChoices;
    auto6AEA1AE1_ai = 1;
    lv_itChoice = 1;
    for ( ; ( (auto6AEA1AE1_ai >= 0 && lv_itChoice <= auto6AEA1AE1_ae) || (auto6AEA1AE1_ai <= 0 && lv_itChoice >= auto6AEA1AE1_ae) ) ; lv_itChoice += auto6AEA1AE1_ai ) {
        lv_buttonIndex = libGame_gv_players[lv_player].lv_talentsBucketABChoices[lv_itChoice].lv_selection;
        if ((lv_buttonIndex > 0)) {
            lv_cooldownReduction += libCore_gv_talents_TalentData[libGame_gv_players[lv_player].lv_talentsBucketABChoices[lv_itChoice].lv_talentIndexArray[lv_buttonIndex]].lv_rankData.lv_cooldownReduction;
        }
        else {
        }
    }
    return lv_cooldownReduction;
}

int libGame_gf_GetShieldsByTalentsForHero (unit lp_hero) {
    int autoE5D2E0CA_ae;
    int autoE5D2E0CA_ai;

    // Variable Declarations
    fixed lv_talentShields;
    int lv_itChoice;
    int lv_player;
    int lv_buttonIndex;

    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    autoE5D2E0CA_ae = libCore_gv_talentsBucket_NumberOfABChoices;
    autoE5D2E0CA_ai = 1;
    lv_itChoice = 1;
    for ( ; ( (autoE5D2E0CA_ai >= 0 && lv_itChoice <= autoE5D2E0CA_ae) || (autoE5D2E0CA_ai <= 0 && lv_itChoice >= autoE5D2E0CA_ae) ) ; lv_itChoice += autoE5D2E0CA_ai ) {
        lv_buttonIndex = libGame_gv_players[lv_player].lv_talentsBucketABChoices[lv_itChoice].lv_selection;
        if ((lv_buttonIndex > 0)) {
            lv_talentShields += libCore_gv_talents_TalentData[libGame_gv_players[lv_player].lv_talentsBucketABChoices[lv_itChoice].lv_talentIndexArray[lv_buttonIndex]].lv_rankData.lv_shields;
        }
        else {
        }
    }
    return FixedToInt(lv_talentShields);
}

void libGame_gf_ApplyAbilityModificationsForPlayerAtTalent (int lp_player, int lp_talentIndex) {
    int autoD91FE29A_ae;
    int autoD91FE29A_ai;
    int auto7132775B_ae;
    int auto7132775B_ai;

    // Variable Declarations
    int lv_itAbilityMod;
    int lv_itAbilityModChange;
    int lv_catalog;
    string lv_entry;
    string lv_field;
    fixed lv_baseValue;
    fixed lv_newValue;
    string lv_offsetString;
    string lv_xOffset;
    string lv_yOffset;
    string lv_zOffset;
    fixed lv_yOffsetReal;
    string lv_replaceFrom;
    string lv_changeTo;

    // Variable Initialization
    lv_catalog = c_gameCatalogUnit;
    lv_entry = "";
    lv_field = "";
    lv_offsetString = "";
    lv_xOffset = "";
    lv_yOffset = "";
    lv_zOffset = "";
    lv_replaceFrom = "";
    lv_changeTo = "";

    // Implementation
    autoD91FE29A_ae = libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModifications;
    autoD91FE29A_ai = 1;
    lv_itAbilityMod = 1;
    for ( ; ( (autoD91FE29A_ai >= 0 && lv_itAbilityMod <= autoD91FE29A_ae) || (autoD91FE29A_ai <= 0 && lv_itAbilityMod >= autoD91FE29A_ae) ) ; lv_itAbilityMod += autoD91FE29A_ai ) {
        auto7132775B_ae = libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_numberOfFieldChanges[lv_itAbilityMod];
        auto7132775B_ai = 1;
        lv_itAbilityModChange = 1;
        for ( ; ( (auto7132775B_ai >= 0 && lv_itAbilityModChange <= auto7132775B_ae) || (auto7132775B_ai <= 0 && lv_itAbilityModChange >= auto7132775B_ae) ) ; lv_itAbilityModChange += auto7132775B_ai ) {
            if ((libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_changeType[lv_itAbilityMod][lv_itAbilityModChange] == c_talentModificationFlatModification )) {
                lv_catalog = libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_catalog[lv_itAbilityMod][lv_itAbilityModChange];
                lv_entry = libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_entry[lv_itAbilityMod][lv_itAbilityModChange];
                lv_field = libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_field[lv_itAbilityMod][lv_itAbilityModChange];
                if (((lv_field == "InitialOffset") || (lv_field == "ExpireOffset") || (lv_field == "FinalOffset") || (lv_field == "PeriodicOffsetArray[0]") || (lv_field == "PeriodicOffsetArray[1]"))) {
                    lv_offsetString = CatalogFieldValueGet(lv_catalog, lv_entry, lv_field, lp_player);
                    lv_offsetString = StringReplaceWord(lv_offsetString, ",", " ", c_stringReplaceAll, c_stringCase);
                    lv_xOffset = StringWord(lv_offsetString, 1);
                    lv_yOffset = StringWord(lv_offsetString, 2);
                    lv_zOffset = StringWord(lv_offsetString, 3);
                    lv_yOffsetReal = StringToFixed(lv_yOffset);
                    lv_yOffsetReal += libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_value[lv_itAbilityMod][lv_itAbilityModChange];
                    lv_yOffset = FixedToString(lv_yOffsetReal, 2);
                    lv_offsetString = (lv_xOffset + "," + lv_yOffset + "," + lv_zOffset);
                    CatalogFieldValueSet(lv_catalog, lv_entry, lv_field, lp_player, lv_offsetString);
                }
                else {
                    lv_baseValue = StringToFixed(CatalogFieldValueGet(lv_catalog, lv_entry, lv_field, lp_player));
                    lv_newValue = (lv_baseValue + libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_value[lv_itAbilityMod][lv_itAbilityModChange]);
                    if ((libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_fieldIsInteger[lv_itAbilityMod][lv_itAbilityModChange] == true)) {
                        CatalogFieldValueModify(lv_catalog, lv_entry, lv_field, lp_player, IntToString(FixedToInt(lv_newValue)), c_upgradeOperationSet);
                    }
                    else {
                        CatalogFieldValueModify(lv_catalog, lv_entry, lv_field, lp_player, FixedToString(lv_newValue, 4), c_upgradeOperationSet);
                    }
                }
            }
            else {
            }
            if ((libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_changeType[lv_itAbilityMod][lv_itAbilityModChange] == c_talentModificationMultiplyLevelModification)) {
                lv_catalog = libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_catalog[lv_itAbilityMod][lv_itAbilityModChange];
                lv_entry = libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_entry[lv_itAbilityMod][lv_itAbilityModChange];
                lv_field = libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_field[lv_itAbilityMod][lv_itAbilityModChange];
                lv_baseValue = StringToFixed(CatalogFieldValueGet(lv_catalog, lv_entry, lv_field, lp_player));
                lv_newValue = (lv_baseValue * libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_value[lv_itAbilityMod][lv_itAbilityModChange]);
                if ((libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_fieldIsInteger[lv_itAbilityMod][lv_itAbilityModChange] == true)) {
                    CatalogFieldValueModify(lv_catalog, lv_entry, lv_field, lp_player, IntToString(FixedToInt(lv_newValue)), c_upgradeOperationSet);
                }
                else {
                    CatalogFieldValueModify(lv_catalog, lv_entry, lv_field, lp_player, FixedToString(lv_newValue, 4), c_upgradeOperationSet);
                }
            }
            else {
            }
            if ((libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_changeType[lv_itAbilityMod][lv_itAbilityModChange] == c_talentModificationStringReplacement) && (libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_catalog[lv_itAbilityMod][lv_itAbilityModChange] != c_gameCatalogButton)) {
                lv_catalog = libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_catalog[lv_itAbilityMod][lv_itAbilityModChange];
                lv_entry = libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_entry[lv_itAbilityMod][lv_itAbilityModChange];
                lv_field = libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_field[lv_itAbilityMod][lv_itAbilityModChange];
                CatalogFieldValueSet(lv_catalog, lv_entry, lv_field, lp_player, libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_stringReplacementValue[lv_itAbilityMod][lv_itAbilityModChange]);
            }
            else {
            }
            if ((libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_changeType[lv_itAbilityMod][lv_itAbilityModChange] == c_talentModificationCatalogReplacement)) {
                lv_catalog = libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_catalog[lv_itAbilityMod][lv_itAbilityModChange];
                lv_replaceFrom = libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_catalogReplaceFrom[lv_itAbilityMod][lv_itAbilityModChange];
                lv_changeTo = libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_catalogChangeTo[lv_itAbilityMod][lv_itAbilityModChange];
                CatalogLinkReplace(lp_player, lv_catalog, lv_replaceFrom, lv_changeTo);
            }
            else {
            }
        }
    }
}

void libGame_gf_RemoveTalentAbilityModificationsForPlayerAtTalent (int lp_player, int lp_talentIndex) {
    int auto1EF455F2_ae;
    int auto1EF455F2_ai;
    int auto8742A6A8_ae;
    int auto8742A6A8_ai;

    // Variable Declarations
    int lv_itAbilityMod;
    int lv_itAbilityModChange;
    int lv_catalog;
    string lv_entry;
    string lv_field;
    fixed lv_baseValue;
    fixed lv_newValue;
    string lv_offsetString;
    string lv_xOffset;
    string lv_yOffset;
    string lv_zOffset;
    fixed lv_yOffsetReal;
    string lv_replaceFrom;
    string lv_changeTo;

    // Variable Initialization
    lv_catalog = c_gameCatalogUnit;
    lv_entry = "";
    lv_field = "";
    lv_offsetString = "";
    lv_xOffset = "";
    lv_yOffset = "";
    lv_zOffset = "";
    lv_replaceFrom = "";
    lv_changeTo = "";

    // Implementation
    auto1EF455F2_ae = libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModifications;
    auto1EF455F2_ai = 1;
    lv_itAbilityMod = 1;
    for ( ; ( (auto1EF455F2_ai >= 0 && lv_itAbilityMod <= auto1EF455F2_ae) || (auto1EF455F2_ai <= 0 && lv_itAbilityMod >= auto1EF455F2_ae) ) ; lv_itAbilityMod += auto1EF455F2_ai ) {
        auto8742A6A8_ae = libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_numberOfFieldChanges[lv_itAbilityMod];
        auto8742A6A8_ai = 1;
        lv_itAbilityModChange = 1;
        for ( ; ( (auto8742A6A8_ai >= 0 && lv_itAbilityModChange <= auto8742A6A8_ae) || (auto8742A6A8_ai <= 0 && lv_itAbilityModChange >= auto8742A6A8_ae) ) ; lv_itAbilityModChange += auto8742A6A8_ai ) {
            if (((libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_changeType[lv_itAbilityMod][lv_itAbilityModChange] == c_talentModificationFlatModification ) || (libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_changeType[lv_itAbilityMod][lv_itAbilityModChange] == c_talentModificationMultiplyLevelModification) || (libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_changeType[lv_itAbilityMod][lv_itAbilityModChange] == c_talentModificationStringReplacement))) {
                lv_catalog = libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_catalog[lv_itAbilityMod][lv_itAbilityModChange];
                lv_entry = libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_entry[lv_itAbilityMod][lv_itAbilityModChange];
                lv_field = libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_field[lv_itAbilityMod][lv_itAbilityModChange];
                CatalogFieldValueSet(lv_catalog, lv_entry, lv_field, lp_player, CatalogFieldValueGet(lv_catalog, lv_entry, lv_field, 0));
            }
            else {
            }
            if ((libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_changeType[lv_itAbilityMod][lv_itAbilityModChange] == c_talentModificationCatalogReplacement)) {
                lv_catalog = libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_catalog[lv_itAbilityMod][lv_itAbilityModChange];
                lv_replaceFrom = libCore_gv_talents_TalentData[lp_talentIndex].lv_abilityModificationData.lv_catalogReplaceFrom[lv_itAbilityMod][lv_itAbilityModChange];
                CatalogLinkReplace(lp_player, lv_catalog, lv_replaceFrom, lv_replaceFrom);
            }
            else {
            }
        }
    }
}

void libGame_gf_ApplyAbilityPowerModificationsForPlayerAtTalent (int lp_player, int lp_talentIndex) {
    int auto8775A1F6_ae;
    int auto8775A1F6_ai;
    int auto07F6B3A9_ae;
    int auto07F6B3A9_ai;

    // Variable Declarations
    int lv_itAbilityMod;
    int lv_itAbilityModChange;
    fixed lv_abilityPowerMultiplier;
    int lv_catalog;
    string lv_entry;
    string lv_field;
    fixed lv_newValue;
    fixed lv_currentValue;
    int lv_abilityindex;
    int lv_changeindex;
    int lv_heroIndex;

    // Variable Initialization
    lv_catalog = c_gameCatalogUnit;
    lv_entry = "";
    lv_field = "";

    // Implementation
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_abilityPowerMultiplier += libCore_gv_talents_TalentData[lp_talentIndex].lv_rankData.lv_abilityPower;
    if ((lv_abilityPowerMultiplier == 1)) {
        return ;
    }
    else {
    }
    auto8775A1F6_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpAbilitiesCount;
    auto8775A1F6_ai = 1;
    lv_abilityindex = 0;
    for ( ; ( (auto8775A1F6_ai >= 0 && lv_abilityindex <= auto8775A1F6_ae) || (auto8775A1F6_ai <= 0 && lv_abilityindex >= auto8775A1F6_ae) ) ; lv_abilityindex += auto8775A1F6_ai ) {
        auto07F6B3A9_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_numberOfFieldChanges[lv_abilityindex];
        auto07F6B3A9_ai = 1;
        lv_changeindex = 1;
        for ( ; ( (auto07F6B3A9_ai >= 0 && lv_changeindex <= auto07F6B3A9_ae) || (auto07F6B3A9_ai <= 0 && lv_changeindex >= auto07F6B3A9_ae) ) ; lv_changeindex += auto07F6B3A9_ai ) {
            lv_catalog = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_catalog[lv_abilityindex][lv_changeindex];
            lv_entry = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_entry[lv_abilityindex][lv_changeindex];
            lv_field = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_field[lv_abilityindex][lv_changeindex];
            lv_newValue = StringToFixed(CatalogFieldValueGet(lv_catalog, lv_entry, lv_field, 0));
            if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_affectedByAbilityPower[lv_abilityindex][lv_changeindex] == true)) {
                lv_currentValue = (UnitLevel(libGame_gv_players[lp_player].lv_heroUnit) * libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_valueAddedPerLevel[lv_abilityindex][lv_changeindex]);
                lv_newValue += lv_currentValue;
                lv_newValue *= libGame_gf_GetAbilityPowerMultiplierForHero(libGame_gv_players[lp_player].lv_heroUnit);
                if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_fieldIsInteger[lv_abilityindex][lv_changeindex] == true)) {
                    CatalogFieldValueModify(lv_catalog, lv_entry, lv_field, lp_player, IntToString(FixedToInt(Ceiling(lv_newValue))), c_upgradeOperationSet);
                }
                else {
                    CatalogFieldValueModify(lv_catalog, lv_entry, lv_field, lp_player, FixedToString(Ceiling(lv_newValue), 2), c_upgradeOperationSet);
                }
            }
            else {
            }
        }
    }
}

void libGame_gf_RemoveAbilityPowerModificationsForPlayer (int lp_player) {
    int auto7BBE039A_ae;
    int auto7BBE039A_ai;
    int auto827A9FB9_ae;
    int auto827A9FB9_ai;

    // Variable Declarations
    int lv_itAbilityMod;
    int lv_itAbilityModChange;
    fixed lv_abilityPowerMultiplier;
    int lv_catalog;
    string lv_entry;
    string lv_field;
    fixed lv_newValue;
    int lv_abilityindex;
    int lv_changeindex;
    int lv_heroIndex;

    // Variable Initialization
    lv_abilityPowerMultiplier = 1.0;
    lv_catalog = c_gameCatalogUnit;
    lv_entry = "";
    lv_field = "";

    // Implementation
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    auto7BBE039A_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpAbilitiesCount;
    auto7BBE039A_ai = 1;
    lv_abilityindex = 0;
    for ( ; ( (auto7BBE039A_ai >= 0 && lv_abilityindex <= auto7BBE039A_ae) || (auto7BBE039A_ai <= 0 && lv_abilityindex >= auto7BBE039A_ae) ) ; lv_abilityindex += auto7BBE039A_ai ) {
        auto827A9FB9_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_numberOfFieldChanges[lv_abilityindex];
        auto827A9FB9_ai = 1;
        lv_changeindex = 1;
        for ( ; ( (auto827A9FB9_ai >= 0 && lv_changeindex <= auto827A9FB9_ae) || (auto827A9FB9_ai <= 0 && lv_changeindex >= auto827A9FB9_ae) ) ; lv_changeindex += auto827A9FB9_ai ) {
            lv_catalog = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_catalog[lv_abilityindex][lv_changeindex];
            lv_entry = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_entry[lv_abilityindex][lv_changeindex];
            lv_field = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_field[lv_abilityindex][lv_changeindex];
            lv_newValue = StringToFixed(CatalogFieldValueGet(lv_catalog, lv_entry, lv_field, 0));
            lv_newValue += (libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_valueAddedPerLevel[lv_abilityindex][lv_changeindex] * IntToFixed(UnitLevel(libGame_gv_players[lp_player].lv_heroUnit)));
            if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_fieldIsInteger[lv_abilityindex][lv_changeindex] == true)) {
                CatalogFieldValueModify(lv_catalog, lv_entry, lv_field, lp_player, IntToString(FixedToInt(lv_newValue)), c_upgradeOperationSet);
            }
            else {
                CatalogFieldValueModify(lv_catalog, lv_entry, lv_field, lp_player, FixedToString(lv_newValue, 2), c_upgradeOperationSet);
            }
        }
    }
}

void libGame_gf_ApplyLevelUpHeroStatsForHero (unit lp_hero) {
    int auto0340DA41_ae;
    int auto0340DA41_ai;
    int auto31280D42_ae;
    int auto31280D42_ai;

    // Variable Declarations
    int lv_abilityindex;
    int lv_changeindex;
    int lv_player;
    int lv_heroLevel;
    int lv_heroIndex;
    fixed lv_currentDamageAmount;
    fixed lv_abilityPowerMultiplier;
    fixed lv_healingPowerMultiplier;
    fixed lv_valueMultiplier;
    int lv_catalog;
    string lv_entry;
    string lv_field;
    fixed lv_baseValue;
    fixed lv_newValue;
    fixed lv_currentValue;
    int lv_hPPercent;
    string lv_offsetString;
    string lv_xOffset;
    string lv_yOffset;
    string lv_zOffset;
    fixed lv_yOffsetReal;
    fixed lv_currentShieldAmount;

    // Variable Initialization
    lv_abilityPowerMultiplier = 1.0;
    lv_healingPowerMultiplier = 1.0;
    lv_catalog = c_gameCatalogUnit;
    lv_entry = "";
    lv_field = "";
    lv_offsetString = "";
    lv_xOffset = "";
    lv_yOffset = "";
    lv_zOffset = "";

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    if ((lp_hero != libGame_gv_players[lv_player].lv_heroUnit) && (lp_hero != libGame_gv_players[lv_player].lv_activeVehicle)) {
        return ;
    }
    else {
    }
    lv_heroIndex = libCore_gf_GetHeroIndexForUnitType(UnitGetType(lp_hero));
    if ((lp_hero == libGame_gv_players[lv_player].lv_activeVehicle) && (UnitHasBehavior2(lp_hero, "UltimateEvolutionBuff") == true)) {
        lv_heroLevel = UnitBehaviorCount(lp_hero, "Level");
    }
    else {
        lv_heroLevel = UnitLevel(lp_hero);
    }
    lv_valueMultiplier = lv_heroLevel;
    lv_currentDamageAmount = libCore_gf_GetWeaponDamageForUnit(lp_hero);
    auto0340DA41_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpAbilitiesCount;
    auto0340DA41_ai = 1;
    lv_abilityindex = 0;
    for ( ; ( (auto0340DA41_ai >= 0 && lv_abilityindex <= auto0340DA41_ae) || (auto0340DA41_ai <= 0 && lv_abilityindex >= auto0340DA41_ae) ) ; lv_abilityindex += auto0340DA41_ai ) {
        auto31280D42_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_numberOfFieldChanges[lv_abilityindex];
        auto31280D42_ai = 1;
        lv_changeindex = 1;
        for ( ; ( (auto31280D42_ai >= 0 && lv_changeindex <= auto31280D42_ae) || (auto31280D42_ai <= 0 && lv_changeindex >= auto31280D42_ae) ) ; lv_changeindex += auto31280D42_ai ) {
            lv_catalog = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_catalog[lv_abilityindex][lv_changeindex];
            lv_entry = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_entry[lv_abilityindex][lv_changeindex];
            lv_field = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_field[lv_abilityindex][lv_changeindex];
            if (((lv_field == "InitialOffset") || (lv_field == "ExpireOffset") || (lv_field == "FinalOffset") || (lv_field == "PeriodicOffsetArray[0]"))) {
                lv_offsetString = CatalogFieldValueGet(lv_catalog, lv_entry, lv_field, lv_player);
                lv_offsetString = StringReplaceWord(lv_offsetString, ",", " ", c_stringReplaceAll, c_stringCase);
                lv_xOffset = StringWord(lv_offsetString, 1);
                lv_yOffset = StringWord(lv_offsetString, 2);
                lv_zOffset = StringWord(lv_offsetString, 3);
                lv_yOffsetReal = StringToFixed(lv_yOffset);
                lv_yOffsetReal += (libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_valueAddedPerLevel[lv_abilityindex][lv_changeindex] * lv_valueMultiplier);
                lv_yOffset = FixedToString(lv_yOffsetReal, 2);
                lv_offsetString = (lv_xOffset + "," + lv_yOffset + "," + lv_zOffset);
                CatalogFieldValueSet(lv_catalog, lv_entry, lv_field, lv_player, lv_offsetString);
            }
            else {
                lv_newValue = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_valueAddedPerLevel[lv_abilityindex][lv_changeindex];
                if ((lp_hero == libGame_gv_players[lv_player].lv_activeVehicle) && (UnitHasBehavior2(lp_hero, "UltimateEvolutionBuff") == true)) {
                    lv_newValue *= lv_heroLevel;
                    lv_newValue += StringToFixed(CatalogFieldValueGet(lv_catalog, lv_entry, lv_field, 0));
                    if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_fieldIsInteger[lv_abilityindex][lv_changeindex] == true)) {
                        CatalogFieldValueModify(lv_catalog, lv_entry, lv_field, lv_player, IntToString(FixedToInt(lv_newValue)), c_upgradeOperationSet);
                    }
                    else {
                        CatalogFieldValueModify(lv_catalog, lv_entry, lv_field, lv_player, FixedToString(lv_newValue, 2), c_upgradeOperationSet);
                    }
                }
                else {
                    if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_fieldIsInteger[lv_abilityindex][lv_changeindex] == true)) {
                        CatalogFieldValueModify(lv_catalog, lv_entry, lv_field, lv_player, IntToString(FixedToInt(lv_newValue)), c_upgradeOperationAdd);
                    }
                    else {
                        CatalogFieldValueModify(lv_catalog, lv_entry, lv_field, lv_player, FixedToString(lv_newValue, 2), c_upgradeOperationAdd);
                    }
                }
            }
        }
    }
    if ((libCore_gv_sYSArtifactsOn == true)) {
        libGame_gf_UpdateArtifactPercentLifeStatsForHero(lp_hero);
    }
    else {
    }
    libGame_gf_UpdateHeroStatsSpecialCasesForHero(lp_hero);
    libUIUI_gf_UIUpdateEventPlayerStatsChange(lv_player);
}

void libGame_gf_RemoveLevelUpHeroStatsForPlayer (int lp_player) {
    int autoCE4C1B3C_ae;
    int autoCE4C1B3C_ai;
    int auto14530F63_ae;
    int auto14530F63_ai;

    // Variable Declarations
    int lv_itAbilityMod;
    int lv_itAbilityModChange;
    int lv_heroIndex;
    int lv_catalog;
    string lv_entry;
    string lv_field;

    // Variable Initialization
    lv_catalog = c_gameCatalogUnit;
    lv_entry = "";
    lv_field = "";

    // Implementation
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    autoCE4C1B3C_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpAbilitiesCount;
    autoCE4C1B3C_ai = 1;
    lv_itAbilityMod = 0;
    for ( ; ( (autoCE4C1B3C_ai >= 0 && lv_itAbilityMod <= autoCE4C1B3C_ae) || (autoCE4C1B3C_ai <= 0 && lv_itAbilityMod >= autoCE4C1B3C_ae) ) ; lv_itAbilityMod += autoCE4C1B3C_ai ) {
        auto14530F63_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_numberOfFieldChanges[lv_itAbilityMod];
        auto14530F63_ai = 1;
        lv_itAbilityModChange = 1;
        for ( ; ( (auto14530F63_ai >= 0 && lv_itAbilityModChange <= auto14530F63_ae) || (auto14530F63_ai <= 0 && lv_itAbilityModChange >= auto14530F63_ae) ) ; lv_itAbilityModChange += auto14530F63_ai ) {
            lv_catalog = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_catalog[lv_itAbilityMod][lv_itAbilityModChange];
            lv_entry = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_entry[lv_itAbilityMod][lv_itAbilityModChange];
            lv_field = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_levelUpModificationData.lv_field[lv_itAbilityMod][lv_itAbilityModChange];
            CatalogFieldValueSet(lv_catalog, lv_entry, lv_field, lp_player, CatalogFieldValueGet(lv_catalog, lv_entry, lv_field, 0));
        }
    }
}

void libGame_gf_UpdateArtifactPercentLifeStatsForHero (unit lp_hero) {
    int auto4F2936CD_ae;
    int auto4F2936CD_ai;
    int autoB03E05BF_ae;
    int autoB03E05BF_ai;
    int auto4599B304_ae;
    int auto4599B304_ai;
    string auto4A190A70_val;

    // Variable Declarations
    int lv_player;
    fixed lv_maxLife;
    int lv_itBehavior;
    int lv_itArtifact;
    int lv_behaviorFlags;
    fixed lv_hPRStatModifier;
    fixed lv_shieldStatModifier;
    fixed lv_shieldRegen;
    bool lv_needsUpdate;

    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    auto4F2936CD_ae = libCore_gv_artifacts_MaxArtifactsPerPlayer_C;
    auto4F2936CD_ai = 1;
    lv_itArtifact = 1;
    for ( ; ( (auto4F2936CD_ai >= 0 && lv_itArtifact <= auto4F2936CD_ae) || (auto4F2936CD_ai <= 0 && lv_itArtifact >= auto4F2936CD_ae) ) ; lv_itArtifact += auto4F2936CD_ai ) {
        if (((libGame_gv_players[lv_player].lv_artifacts[lv_itArtifact].lv_artifact == "HealthRegenWarriorsResolve") || (libGame_gv_players[lv_player].lv_artifacts[lv_itArtifact].lv_artifact == "ShieldsNexusSapphire"))) {
            lv_needsUpdate = true;
        }
        else {
        }
    }
    if ((lv_needsUpdate == false)) {
        return ;
    }
    else {
    }
    lv_maxLife = UnitGetPropertyFixed(lp_hero, c_unitPropLifeMax, c_unitPropCurrent);
    autoB03E05BF_ae = UnitBehaviorCountAll(lp_hero);
    autoB03E05BF_ai = 1;
    lv_itBehavior = 1;
    for ( ; ( (autoB03E05BF_ai >= 0 && lv_itBehavior <= autoB03E05BF_ae) || (autoB03E05BF_ai <= 0 && lv_itBehavior >= autoB03E05BF_ae) ) ; lv_itBehavior += autoB03E05BF_ai ) {
        lv_behaviorFlags = CatalogFieldValueGetFlagsAsInt(c_gameCatalogBehavior, UnitBehaviorGet(lp_hero, lv_itBehavior), "BehaviorCategories", 0);
        if (((lv_behaviorFlags & libGame_gv_behaviorCategoryBitFlagValues[(c_behaviorCategoryUser11)]) != 0)) {
            lv_maxLife -= StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, UnitBehaviorGet(lp_hero, lv_itBehavior), "Modification.VitalMaxArray[" + IntToString(0) + "]", lv_player));
        }
        else {
        }
    }
    auto4599B304_ae = libCore_gv_artifacts_MaxArtifactsPerPlayer_C;
    auto4599B304_ai = 1;
    lv_itArtifact = 1;
    for ( ; ( (auto4599B304_ai >= 0 && lv_itArtifact <= auto4599B304_ae) || (auto4599B304_ai <= 0 && lv_itArtifact >= auto4599B304_ae) ) ; lv_itArtifact += auto4599B304_ai ) {
        if ((libGame_gv_players[lv_player].lv_artifacts[lv_itArtifact].lv_artifact != null) && (libGame_gv_players[lv_player].lv_artifacts[lv_itArtifact].lv_rank != 0)) {
            auto4A190A70_val = libGame_gv_players[lv_player].lv_artifacts[lv_itArtifact].lv_artifact;
            if (auto4A190A70_val == "ShieldsNexusSapphire") {
                lv_shieldStatModifier = (libCore_gv_artifacts_ArtifactData[libCore_gf_ArtifactsIndexFromArtifactLink("ShieldsNexusSapphire")].lv_rankData[libGame_gv_players[lv_player].lv_artifacts[lv_itArtifact].lv_rank].lv_shields * lv_maxLife);
                lv_shieldRegen = (lv_shieldStatModifier / 4.0);
                CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(lp_hero), "ShieldsMax", lv_player, FixedToString(lv_shieldStatModifier, 3), c_upgradeOperationSet);
                CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(lp_hero), "ShieldRegenRate", lv_player, FixedToString(lv_shieldRegen, 3), c_upgradeOperationSet);
            }
            else if (auto4A190A70_val == "HealthRegenWarriorsResolve") {
                lv_hPRStatModifier = (libCore_gv_artifacts_ArtifactData[libCore_gf_ArtifactsIndexFromArtifactLink("HealthRegenWarriorsResolve")].lv_rankData[libGame_gv_players[lv_player].lv_artifacts[lv_itArtifact].lv_rank].lv_hitPointRegenFraction * lv_maxLife);
                lv_hPRStatModifier /= 100.0;
                lv_hPRStatModifier += StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_hero), "LifeRegenRate", 0));
                CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(lp_hero), "LifeRegenRate", lv_player, FixedToString(lv_hPRStatModifier, 3), c_upgradeOperationSet);
            }
            else {
            }
        }
        else {
        }
    }
}

void libGame_gf_UpdateHeroStatsSpecialCasesForHero (unit lp_hero) {
    string auto86BCAEA2_val;

    // Variable Declarations
    int lv_abilityindex;
    int lv_changeindex;
    int lv_player;
    int lv_heroLevel;
    int lv_heroIndex;
    fixed lv_currentDamageAmount;
    fixed lv_abilityPowerMultiplier;
    fixed lv_healingPowerMultiplier;
    fixed lv_valueMultiplier;
    int lv_catalog;
    string lv_entry;
    string lv_field;
    fixed lv_baseValue;
    fixed lv_newValue;
    int lv_hPPercent;
    string lv_offsetString;
    string lv_xOffset;
    string lv_yOffset;
    string lv_zOffset;
    fixed lv_yOffsetReal;
    fixed lv_currentShieldAmount;

    // Variable Initialization
    lv_abilityPowerMultiplier = 1.0;
    lv_healingPowerMultiplier = 1.0;
    lv_catalog = c_gameCatalogUnit;
    lv_entry = "";
    lv_field = "";
    lv_offsetString = "";
    lv_xOffset = "";
    lv_yOffset = "";
    lv_zOffset = "";

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    if ((lp_hero != libGame_gv_players[lv_player].lv_heroUnit) && (lp_hero != libGame_gv_players[lv_player].lv_activeVehicle)) {
        return ;
    }
    else {
    }
    auto86BCAEA2_val = UnitGetType(lp_hero);
    if (auto86BCAEA2_val == "HeroTassadar") {
        libCore_gf_UpdateTassadarAbilityStats(lv_player);
    }
    else {
    }
}

void libGame_gf_UpdateHeroWeaponStats (unit lp_hero) {
    string autoFD806D5D_val;

    // Variable Declarations
    int lv_player;
    int lv_heroLevel;
    int lv_heroIndex;

    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    if (((lv_player < 1) || (lv_player > libCore_gv_bALMaxPlayers))) {
        return ;
    }
    else {
    }
    lv_heroLevel = UnitLevel(lp_hero);
    lv_heroIndex = libGame_gv_players[lv_player].lv_heroIndex;
    autoFD806D5D_val = UnitGetType(lp_hero);
    if (autoFD806D5D_val == "HeroLiLi") {
        PlayerScoreValueSetFromInt(lv_player, "LiLiCloudSerpentDamageCorrected", FixedToInt((libCore_gf_GetWeaponDamageForUnit(lp_hero) * StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "CloudSerpentMinionBehavior", "DamageResponse.ModifyFraction", 0)))));
    }
    else if (autoFD806D5D_val == "HeroTychus") {
        PlayerScoreValueSetFromInt(lv_player, "TychusOverkillTargetedDamageCorrected", FixedToInt(((libCore_gf_GetWeaponDamageForUnit(lp_hero) * (1.0 + StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "OverkillTargetedDamage", "AttributeFactor[" + IntToString(0) + "]", 0)))) * (StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "TychusOverkillTargetedActive", "Duration", 0)) / StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "OverkillTargetedCreatePersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", 0))))));
    }
    else {
    }
}

void libGame_gf_UpdateHeroManaCosts (unit lp_unit) {
    int autoB4FFC150_ae;
    int autoB4FFC150_ai;

    // Variable Declarations
    int lv_itAbility;
    int lv_player;
    unit lv_hero;
    int lv_heroIndex;
    fixed lv_flatModifier;
    fixed lv_percentageModifier;
    string lv_entry;
    fixed lv_baseValue;
    fixed lv_baseMultiplierValue;
    fixed lv_newValue;

    // Variable Initialization
    lv_percentageModifier = 1.0;
    lv_entry = "";

    // Implementation
    lv_player = UnitGetOwner(lp_unit);
    if (((lv_player == 0) || (lv_player > libCore_gv_bALMaxPlayers))) {
        return ;
    }
    else {
    }
    lv_hero = libGame_gv_players[lv_player].lv_heroUnit;
    lv_heroIndex = libGame_gv_players[lv_player].lv_heroIndex;
    if ((UnitBehaviorCount(lv_hero, "BucketOverdrive") == 1)) {
        lv_percentageModifier += libCore_gv_talents_BucketOverdriveManaCostIncreasePercent_C;
    }
    else {
    }
    if ((UnitBehaviorCount(lv_hero, "0ManaCostBuff") == 1)) {
        lv_percentageModifier -= libCore_gv_talents_0ManaCostBuffMod_C;
    }
    else {
    }
    if (((UnitBehaviorCount(lv_hero, "SpiritOfRedemptionSpiritFormBuff") == 1) || (UnitBehaviorCount(lv_hero, "SpiritOfRedemptionSpiritFormBuffImproved") == 1))) {
        lv_percentageModifier -= libGDHL_gv_bALHeroUtherSpiritofRedemptionManaCostReduction;
    }
    else {
    }
    if ((UnitBehaviorCount(lv_hero, "DruidsGiftAuraImproved") == 1)) {
        lv_percentageModifier -= libGDHL_gv_bALHeroMalfurionDruidsGiftImprovedManaCostReduction;
    }
    else {
        if ((UnitBehaviorCount(lv_hero, "DruidsGiftAura") == 1)) {
            lv_percentageModifier -= libGDHL_gv_bALHeroMalfurionDruidsGiftManaCostReduction;
        }
        else {
        }
    }
    autoB4FFC150_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_numberOfAbilities;
    autoB4FFC150_ai = 1;
    lv_itAbility = 1;
    for ( ; ( (autoB4FFC150_ai >= 0 && lv_itAbility <= autoB4FFC150_ae) || (autoB4FFC150_ai <= 0 && lv_itAbility >= autoB4FFC150_ae) ) ; lv_itAbility += autoB4FFC150_ai ) {
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilities[lv_itAbility].lv_isAffectedByOverdrive == true) && (libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilities[lv_itAbility].lv_ability != null)) {
            lv_entry = (libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilities[lv_itAbility].lv_ability);
            lv_baseValue = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, lv_entry, "Cost[0].Vital[Energy]", 0));
            lv_baseMultiplierValue = (lv_baseValue * lv_percentageModifier);
            lv_newValue = (lv_baseMultiplierValue - lv_flatModifier);
            if ((lv_newValue < 0.0)) {
                lv_newValue = 0.0;
            }
            else {
            }
            CatalogFieldValueSet(c_gameCatalogAbil, lv_entry, "Cost[0].Vital[Energy]", lv_player, FixedToString(lv_newValue, 2));
        }
        else {
        }
    }
}

void libGame_gf_UpdateVehicleStats (unit lp_hero) {
    int auto4742B7A6_ae;
    int auto4742B7A6_ai;
    int autoDC2CCD32_ae;
    int autoDC2CCD32_ai;

    // Variable Declarations
    int lv_vehicleIndex;
    int lv_abilityindex;
    int lv_changeindex;
    int lv_player;
    fixed lv_valueMultiplier;
    int lv_catalog;
    string lv_entry;
    string lv_field;
    fixed lv_baseValue;
    fixed lv_newValue;
    int lv_hPPercent;
    string lv_offsetString;
    string lv_xOffset;
    string lv_yOffset;
    string lv_zOffset;
    fixed lv_yOffsetReal;

    // Variable Initialization
    lv_catalog = c_gameCatalogUnit;
    lv_entry = "";
    lv_field = "";
    lv_offsetString = "";
    lv_xOffset = "";
    lv_yOffset = "";
    lv_zOffset = "";

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    lv_valueMultiplier = libGame_gv_scalingTicks;
    lv_abilityindex = 0;
    auto4742B7A6_ae = libGame_gv_vehiclesNumberOfVehicles;
    auto4742B7A6_ai = 1;
    lv_vehicleIndex = 1;
    for ( ; ( (auto4742B7A6_ai >= 0 && lv_vehicleIndex <= auto4742B7A6_ae) || (auto4742B7A6_ai <= 0 && lv_vehicleIndex >= auto4742B7A6_ae) ) ; lv_vehicleIndex += auto4742B7A6_ai ) {
        autoDC2CCD32_ae = libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_numberOfFieldChanges[lv_abilityindex];
        autoDC2CCD32_ai = 1;
        lv_changeindex = 1;
        for ( ; ( (autoDC2CCD32_ai >= 0 && lv_changeindex <= autoDC2CCD32_ae) || (autoDC2CCD32_ai <= 0 && lv_changeindex >= autoDC2CCD32_ae) ) ; lv_changeindex += autoDC2CCD32_ai ) {
            lv_catalog = libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_catalog[lv_abilityindex][lv_changeindex];
            lv_entry = libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_entry[lv_abilityindex][lv_changeindex];
            lv_field = libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_field[lv_abilityindex][lv_changeindex];
            if (((lv_field == "InitialOffset") || (lv_field == "ExpireOffset") || (lv_field == "FinalOffset") || (lv_field == "PeriodicOffsetArray[0]"))) {
                lv_offsetString = CatalogFieldValueGet(lv_catalog, lv_entry, lv_field, 0);
                lv_offsetString = StringReplaceWord(lv_offsetString, ",", " ", c_stringReplaceAll, c_stringCase);
                lv_xOffset = StringWord(lv_offsetString, 1);
                lv_yOffset = StringWord(lv_offsetString, 2);
                lv_zOffset = StringWord(lv_offsetString, 3);
                lv_yOffsetReal = StringToFixed(lv_yOffset);
                lv_yOffsetReal -= (libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_valueAddedPerLevel[lv_abilityindex][lv_changeindex] * lv_valueMultiplier);
                lv_yOffset = FixedToString(lv_yOffsetReal, 2);
                lv_offsetString = (lv_xOffset + "," + lv_yOffset + "," + lv_zOffset);
                CatalogFieldValueSet(lv_catalog, lv_entry, lv_field, lv_player, lv_offsetString);
            }
            else {
                lv_baseValue = StringToFixed(CatalogFieldValueGet(lv_catalog, lv_entry, lv_field, 0));
                lv_newValue = (lv_baseValue + (libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_valueAddedPerLevel[lv_abilityindex][lv_changeindex] * lv_valueMultiplier));
                if ((libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_fieldIsInteger[lv_abilityindex][lv_changeindex] == true)) {
                    CatalogFieldValueSet(lv_catalog, lv_entry, lv_field, lv_player, IntToString(FixedToInt(lv_newValue)));
                }
                else {
                    CatalogFieldValueSet(lv_catalog, lv_entry, lv_field, lv_player, FixedToString(lv_newValue, 2));
                }
            }
        }
    }
}

bool libGame_gf_ArtifactSlotIsValidForArtifactType (string lp_artifact, int lp_slot) {
    int auto90EE367F_val;

    // Variable Declarations
    int lv_tier;

    // Variable Initialization

    // Implementation
    auto90EE367F_val = lp_slot;
    if (auto90EE367F_val == 1) {
        lv_tier = libCore_ge_ArtifactTier_Gem;
    }
    else if (auto90EE367F_val == 2) {
        lv_tier = libCore_ge_ArtifactTier_Glyph;
    }
    else if (auto90EE367F_val == 3) {
        lv_tier = libCore_ge_ArtifactTier_Trinket;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_8580280A"), true);
        return false;
    }
    if ((libCore_gv_artifacts_ArtifactData[libCore_gf_ArtifactsIndexFromArtifactLink(lp_artifact)].lv_tier == lv_tier)) {
        return true;
    }
    else {
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_A1E750C9"), true);
    return false;
}

void libGame_gf_ArtifactsSetAPBehaviorsToRankForHero (unit lp_hero, int lp_rank) {
    // Variable Declarations
    fixed lv_abilityPower;
    int lv_itChoice;
    int lv_player;
    int lv_buttonIndex;

    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    UnitBehaviorRemove(lp_hero, "Artifact_AP_Base", 1);
    if ((lp_rank <= 0)) {
        CatalogFieldValueModify(c_gameCatalogBehavior, "Artifact_AP_Base", "Modification.DamageDealtFraction[" + IntToString(0) + "]", lv_player, FixedToString(0.0, 3), c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogBehavior, "Artifact_AP_Base", "Modification.HealDealtAdditiveMultiplier", lv_player, FixedToString(lv_abilityPower, 3), c_upgradeOperationSet);
        return ;
    }
    else {
    }
    lv_abilityPower += libCore_gv_artifacts_ArtifactData[libCore_gf_ArtifactsIndexFromArtifactLink("AbilityPowerBrilliantTopaz")].lv_rankData[lp_rank].lv_abilityPower;
    if ((lv_abilityPower != 0.0)) {
        CatalogFieldValueModify(c_gameCatalogBehavior, "Artifact_AP_Base", "Modification.DamageDealtFraction[" + IntToString(0) + "]", lv_player, FixedToString(lv_abilityPower, 3), c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogBehavior, "Artifact_AP_Base", "Modification.HealDealtAdditiveMultiplier", lv_player, FixedToString(lv_abilityPower, 3), c_upgradeOperationSet);
        UnitBehaviorAdd(lp_hero, "Artifact_AP_Base", lp_hero, 1);
    }
    else {
    }
}

void libGame_gf_ArtifactsSetADBehaviorsToRankForHero (unit lp_hero, int lp_rank) {
    // Variable Declarations
    fixed lv_attackDamage;
    int lv_itChoice;
    int lv_player;
    int lv_buttonIndex;

    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    UnitBehaviorRemove(lp_hero, "Artifact_AD_100", 9);
    UnitBehaviorRemove(lp_hero, "Artifact_AD_10", 9);
    UnitBehaviorRemove(lp_hero, "Artifact_AD_1", 9);
    if ((lp_rank <= 0)) {
        return ;
    }
    else {
    }
    lv_attackDamage += libCore_gv_artifacts_ArtifactData[libCore_gf_ArtifactsIndexFromArtifactLink("AttackDamagePrimalRuby")].lv_rankData[lp_rank].lv_attackDamage;
    if ((lv_attackDamage != 0.0)) {
        lv_attackDamage *= 100.0;
        lv_attackDamage = Round(lv_attackDamage);
        UnitBehaviorAdd(lp_hero, "Artifact_AD_100", lp_hero, FixedToInt(ModF(Floor((lv_attackDamage / 100.0)), 10.0)));
        UnitBehaviorAdd(lp_hero, "Artifact_AD_10", lp_hero, FixedToInt(ModF(Floor((lv_attackDamage / 10.0)), 10.0)));
        UnitBehaviorAdd(lp_hero, "Artifact_AD_1", lp_hero, FixedToInt(ModF(lv_attackDamage, 10.0)));
    }
    else {
    }
}

void libGame_gf_ArtifactsSetIASBehaviorsToRankForHero (unit lp_hero, int lp_rank) {
    // Variable Declarations
    fixed lv_increasedAttackSpeed;
    int lv_itChoice;
    int lv_player;
    int lv_buttonIndex;

    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    UnitBehaviorRemove(lp_hero, "Artifact_IAS_1", 9);
    UnitBehaviorRemove(lp_hero, "Artifact_IAS_01", 9);
    UnitBehaviorRemove(lp_hero, "Artifact_IAS_001", 9);
    if ((lp_rank <= 0)) {
        return ;
    }
    else {
    }
    lv_increasedAttackSpeed += libCore_gv_artifacts_ArtifactData[libCore_gf_ArtifactsIndexFromArtifactLink("AttackSpeedSkyfireEmerald")].lv_rankData[lp_rank].lv_increaseAttackSpeed;
    if ((lv_increasedAttackSpeed != 0.0)) {
        lv_increasedAttackSpeed *= 100.0;
        lv_increasedAttackSpeed = Round(lv_increasedAttackSpeed);
        UnitBehaviorAdd(lp_hero, "Artifact_IAS_1", lp_hero, FixedToInt(ModF(Floor((lv_increasedAttackSpeed / 100.0)), 10.0)));
        UnitBehaviorAdd(lp_hero, "Artifact_IAS_01", lp_hero, FixedToInt(ModF(Floor((lv_increasedAttackSpeed / 10.0)), 10.0)));
        UnitBehaviorAdd(lp_hero, "Artifact_IAS_001", lp_hero, FixedToInt(ModF(Floor((lv_increasedAttackSpeed / 1.0)), 10.0)));
    }
    else {
    }
}

void libGame_gf_ArtifactsSetMovespeedBehaviorsToRankForHero (unit lp_hero, int lp_rank) {
    // Variable Declarations
    fixed lv_increasedMovementSpeed;
    int lv_itChoice;
    int lv_player;
    int lv_buttonIndex;

    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    UnitBehaviorRemove(lp_hero, "Artifact_MS_1", 9);
    UnitBehaviorRemove(lp_hero, "Artifact_MS_01", 9);
    UnitBehaviorRemove(lp_hero, "Artifact_MS_001", 9);
    UnitBehaviorRemove(lp_hero, "Artifact_MS_0001", 9);
    if ((lp_rank <= 0)) {
        return ;
    }
    else {
    }
    lv_increasedMovementSpeed += libCore_gv_artifacts_ArtifactData[libCore_gf_ArtifactsIndexFromArtifactLink("MovementSpeedWirtsLeg")].lv_rankData[lp_rank].lv_increaseMovementSpeed;
    if ((lv_increasedMovementSpeed != 0.0)) {
        lv_increasedMovementSpeed *= 1000.0;
        lv_increasedMovementSpeed = Round(lv_increasedMovementSpeed);
        UnitBehaviorAdd(lp_hero, "Artifact_MS_1", lp_hero, FixedToInt(ModF(Floor((lv_increasedMovementSpeed / 1000.0)), 10.0)));
        UnitBehaviorAdd(lp_hero, "Artifact_MS_01", lp_hero, FixedToInt(ModF(Floor((lv_increasedMovementSpeed / 100.0)), 10.0)));
        UnitBehaviorAdd(lp_hero, "Artifact_MS_001", lp_hero, FixedToInt(ModF(Floor((lv_increasedMovementSpeed / 10.0)), 10.0)));
        UnitBehaviorAdd(lp_hero, "Artifact_MS_0001", lp_hero, FixedToInt(ModF(Floor((lv_increasedMovementSpeed / 1.0)), 10.0)));
    }
    else {
    }
}

void libGame_gf_ArtifactsSetSiegeDmgBehaviorsToRankForHero (unit lp_hero, int lp_rank) {
    // Variable Declarations
    fixed lv_siegeDamage;
    int lv_itChoice;
    int lv_player;
    int lv_buttonIndex;

    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    UnitBehaviorRemove(lp_hero, "Artifact_SDMG_1", 9);
    UnitBehaviorRemove(lp_hero, "Artifact_SDMG_01", 9);
    UnitBehaviorRemove(lp_hero, "Artifact_SDMG_001", 9);
    if ((lp_rank <= 0)) {
        return ;
    }
    else {
    }
    lv_siegeDamage += libCore_gv_artifacts_ArtifactData[libCore_gf_ArtifactsIndexFromArtifactLink("SiegeDamageDestroyer")].lv_rankData[lp_rank].lv_siegeDamage;
    if ((lv_siegeDamage != 0.0)) {
        lv_siegeDamage *= 100.0;
        lv_siegeDamage = Round(lv_siegeDamage);
        UnitBehaviorAdd(lp_hero, "Artifact_SDMG_1", lp_hero, FixedToInt(ModF(Floor((lv_siegeDamage / 100.0)), 10.0)));
        UnitBehaviorAdd(lp_hero, "Artifact_SDMG_01", lp_hero, FixedToInt(ModF(Floor((lv_siegeDamage / 10.0)), 10.0)));
        UnitBehaviorAdd(lp_hero, "Artifact_SDMG_001", lp_hero, FixedToInt(ModF(Floor((lv_siegeDamage / 1.0)), 10.0)));
    }
    else {
    }
}

void libGame_gf_ArtifactsSetLifestealBehaviorsToRankForHero (unit lp_hero, int lp_rank) {
    // Variable Declarations
    fixed lv_lifesteal;
    int lv_itChoice;
    int lv_player;
    int lv_buttonIndex;

    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    UnitBehaviorRemove(lp_hero, "Artifact_LS_1", 9);
    UnitBehaviorRemove(lp_hero, "Artifact_LS_01", 9);
    UnitBehaviorRemove(lp_hero, "Artifact_LS_001", 9);
    if ((lp_rank <= 0)) {
        return ;
    }
    else {
    }
    lv_lifesteal += libCore_gv_artifacts_ArtifactData[libCore_gf_ArtifactsIndexFromArtifactLink("LifestealBloodSiphon")].lv_rankData[lp_rank].lv_lifesteal;
    if ((lv_lifesteal != 0.0)) {
        lv_lifesteal *= 100.0;
        lv_lifesteal = Round(lv_lifesteal);
        UnitBehaviorAdd(lp_hero, "Artifact_LS_1", lp_hero, FixedToInt(ModF(Floor((lv_lifesteal / 100.0)), 10.0)));
        UnitBehaviorAdd(lp_hero, "Artifact_LS_01", lp_hero, FixedToInt(ModF(Floor((lv_lifesteal / 10.0)), 10.0)));
        UnitBehaviorAdd(lp_hero, "Artifact_LS_001", lp_hero, FixedToInt(ModF(Floor((lv_lifesteal / 1.0)), 10.0)));
    }
    else {
    }
}

void libGame_gf_ArtifactsSetHPBehaviorsToRankForHero (unit lp_hero, int lp_rank) {
    // Variable Declarations
    fixed lv_hitPoints;
    fixed lv_currentHP;
    int lv_itChoice;
    int lv_player;
    int lv_buttonIndex;

    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    UnitBehaviorRemove(lp_hero, "Artifact_HP_0001", 9);
    UnitBehaviorRemove(lp_hero, "Artifact_HP_001", 9);
    UnitBehaviorRemove(lp_hero, "Artifact_HP_01", 9);
    UnitBehaviorRemove(lp_hero, "Artifact_HP_1", 9);
    if ((lp_rank <= 0)) {
        return ;
    }
    else {
    }
    lv_hitPoints += libCore_gv_artifacts_ArtifactData[libCore_gf_ArtifactsIndexFromArtifactLink("MaxHealthBoldAmethyst")].lv_rankData[lp_rank].lv_hitPoints;
    if ((lv_hitPoints != 0.0)) {
        lv_hitPoints *= 1000.0;
        lv_hitPoints = Round(lv_hitPoints);
        UnitBehaviorAdd(lp_hero, "Artifact_HP_1", lp_hero, FixedToInt(ModF(Floor((lv_hitPoints / 1000.0)), 10.0)));
        UnitBehaviorAdd(lp_hero, "Artifact_HP_01", lp_hero, FixedToInt(ModF(Floor((lv_hitPoints / 100.0)), 10.0)));
        UnitBehaviorAdd(lp_hero, "Artifact_HP_001", lp_hero, FixedToInt(ModF(Floor((lv_hitPoints / 10.0)), 10.0)));
        UnitBehaviorAdd(lp_hero, "Artifact_HP_0001", lp_hero, FixedToInt(ModF(lv_hitPoints, 10.0)));
    }
    else {
    }
}

void libGame_gf_ArtifactsSetMANABehaviorsToRankForHero (unit lp_hero, int lp_rank) {
    // Variable Declarations
    fixed lv_mana;
    fixed lv_currentMana;
    int lv_itChoice;
    int lv_player;
    int lv_buttonIndex;

    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    UnitBehaviorRemove(lp_hero, "Artifact_MANA_001", 9);
    UnitBehaviorRemove(lp_hero, "Artifact_MANA_01", 9);
    UnitBehaviorRemove(lp_hero, "Artifact_MANA_1", 9);
    if ((lp_rank <= 0)) {
        return ;
    }
    else {
    }
    lv_mana += libCore_gv_artifacts_ArtifactData[libCore_gf_ArtifactsIndexFromArtifactLink("MaxManaKhaydarinAmulet")].lv_rankData[lp_rank].lv_mana;
    if ((lv_mana != 0.0)) {
        lv_mana *= 1000.0;
        lv_mana = Round(lv_mana);
        UnitBehaviorAdd(lp_hero, "Artifact_MANA_1", lp_hero, FixedToInt(ModF(Floor((lv_mana / 1000.0)), 10.0)));
        UnitBehaviorAdd(lp_hero, "Artifact_MANA_01", lp_hero, FixedToInt(ModF(Floor((lv_mana / 100.0)), 10.0)));
        UnitBehaviorAdd(lp_hero, "Artifact_MANA_001", lp_hero, FixedToInt(ModF(Floor((lv_mana / 10.0)), 10.0)));
    }
    else {
    }
}

void libGame_gf_ArtifactsSetMRBehaviorsToRankForHero (unit lp_hero, int lp_rank) {
    // Variable Declarations
    fixed lv_manaRegen;
    int lv_itChoice;
    int lv_player;
    int lv_buttonIndex;

    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    UnitBehaviorRemove(lp_hero, "Artifact_MR_001", 9);
    UnitBehaviorRemove(lp_hero, "Artifact_MR_01", 9);
    UnitBehaviorRemove(lp_hero, "Artifact_MR_1", 9);
    if ((lp_rank <= 0)) {
        return ;
    }
    else {
    }
    lv_manaRegen += libCore_gv_artifacts_ArtifactData[libCore_gf_ArtifactsIndexFromArtifactLink("ManaRegenManaInfusion")].lv_rankData[lp_rank].lv_manaRegen;
    if ((lv_manaRegen != 0.0)) {
        lv_manaRegen *= 100.0;
        lv_manaRegen = Round(lv_manaRegen);
        UnitBehaviorAdd(lp_hero, "Artifact_MR_1", lp_hero, FixedToInt(ModF(Floor((lv_manaRegen / 100.0)), 10.0)));
        UnitBehaviorAdd(lp_hero, "Artifact_MR_01", lp_hero, FixedToInt(ModF((lv_manaRegen / 10.0), 10.0)));
        UnitBehaviorAdd(lp_hero, "Artifact_MR_001", lp_hero, FixedToInt(ModF(lv_manaRegen, 10.0)));
    }
    else {
    }
}

void libGame_gf_ArtifactsSetCDRModificationToRankForHero (unit lp_hero, int lp_rank) {
    int auto5B221333_ae;
    int auto5B221333_ai;
    int auto38811086_ae;
    int auto38811086_ai;

    // Variable Declarations
    fixed lv_cooldownReduction;
    int lv_itChoice;
    int lv_player;
    int lv_buttonIndex;
    int lv_heroIndex;
    int lv_itAbility;
    int lv_itFieldChange;
    string lv_field;
    string lv_entry;
    fixed lv_cooldown;
    fixed lv_newCooldown;

    // Variable Initialization
    lv_field = "";
    lv_entry = "";

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    if ((lp_rank > 0)) {
        lv_cooldownReduction += libCore_gv_artifacts_ArtifactData[libCore_gf_ArtifactsIndexFromArtifactLink("CooldownReductionRoyalDiamond")].lv_rankData[lp_rank].lv_cooldownReduction;
    }
    else {
    }
    lv_heroIndex = libCore_gf_GetHeroIndexForUnitType(UnitGetType(lp_hero));
    if ((lv_cooldownReduction != 0.0)) {
        auto38811086_ae = libCore_gv_dataHeroesMaxAbilitiesPerHero;
        auto38811086_ai = 1;
        lv_itAbility = 1;
        for ( ; ( (auto38811086_ai >= 0 && lv_itAbility <= auto38811086_ae) || (auto38811086_ai <= 0 && lv_itAbility >= auto38811086_ae) ) ; lv_itAbility += auto38811086_ai ) {
            if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilities[lv_itAbility].lv_isAffectedByCooldownReduction == true)) {
                lv_entry = (libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilities[lv_itAbility].lv_ability);
                lv_field = "Cost[0].Cooldown.TimeUse";
                lv_cooldown = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, lv_entry, lv_field, 0));
                lv_newCooldown = (lv_cooldown - (lv_cooldown * lv_cooldownReduction));
                CatalogFieldValueModify(c_gameCatalogAbil, lv_entry, lv_field, lv_player, FixedToString(lv_newCooldown, c_fixedPrecisionAny), c_upgradeOperationSet);
                if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilities[lv_itAbility].lv_usesCharges == true)) {
                    lv_field = "Cost[0].Charge.TimeUse";
                    lv_cooldown = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, lv_entry, lv_field, 0));
                    lv_newCooldown = (lv_cooldown - (lv_cooldown * lv_cooldownReduction));
                    CatalogFieldValueModify(c_gameCatalogAbil, lv_entry, lv_field, lv_player, FixedToString(lv_newCooldown, c_fixedPrecisionAny), c_upgradeOperationSet);
                }
                else {
                }
            }
            else {
            }
        }
    }
    else {
        auto5B221333_ae = libCore_gv_dataHeroesMaxAbilitiesPerHero;
        auto5B221333_ai = 1;
        lv_itAbility = 1;
        for ( ; ( (auto5B221333_ai >= 0 && lv_itAbility <= auto5B221333_ae) || (auto5B221333_ai <= 0 && lv_itAbility >= auto5B221333_ae) ) ; lv_itAbility += auto5B221333_ai ) {
            if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilities[lv_itAbility].lv_isAffectedByCooldownReduction == true)) {
                lv_entry = (libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilities[lv_itAbility].lv_ability);
                lv_field = "Cost[0].Cooldown.TimeUse";
                lv_cooldown = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, lv_entry, lv_field, 0));
                CatalogFieldValueModify(c_gameCatalogAbil, lv_entry, lv_field, lv_player, FixedToString(lv_cooldown, c_fixedPrecisionAny), c_upgradeOperationSet);
                if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilities[lv_itAbility].lv_usesCharges == true)) {
                    lv_field = "Cost[0].Charge.TimeUse";
                    lv_cooldown = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, lv_entry, lv_field, 0));
                    lv_newCooldown = (lv_cooldown - (lv_cooldown * lv_cooldownReduction));
                    CatalogFieldValueModify(c_gameCatalogAbil, lv_entry, lv_field, lv_player, FixedToString(lv_newCooldown, c_fixedPrecisionAny), c_upgradeOperationSet);
                }
                else {
                }
            }
            else {
            }
        }
    }
}

void libGame_gf_ArtifactsSetDeathTimeReductionModificationToRankForHero (unit lp_hero, int lp_rank) {
    // Variable Declarations
    fixed lv_deathTimeReduction;
    int lv_player;

    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    if ((lp_rank > 0)) {
        lv_deathTimeReduction += libCore_gv_artifacts_ArtifactData[libCore_gf_ArtifactsIndexFromArtifactLink("DeathTimeReductionSoulstone")].lv_rankData[lp_rank].lv_deathTimeReduction;
    }
    else {
    }
    libGame_gv_players[lv_player].lv_artifacts_DeathTimerReduction = lv_deathTimeReduction;
}

void libGame_gf_ArtifactsSetMountSpeedModificationToRankForHero (unit lp_hero, int lp_rank) {
    // Variable Declarations
    fixed lv_mountSpeed;
    int lv_itChoice;
    int lv_player;
    int lv_buttonIndex;

    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    if ((lp_rank > 0)) {
        lv_mountSpeed += libCore_gv_artifacts_ArtifactData[libCore_gf_ArtifactsIndexFromArtifactLink("MountSpeedRidingCrop")].lv_rankData[lp_rank].lv_increaseMountSpeed;
    }
    else {
    }
    if ((lv_mountSpeed != 0.0)) {
        CatalogFieldValueModify(c_gameCatalogBehavior, "Mounted", "Modification.UnifiedMoveSpeedFactor", lv_player, FixedToString(lv_mountSpeed, 3), c_upgradeOperationAdd);
    }
    else {
        CatalogFieldValueModify(c_gameCatalogBehavior, "Mounted", "Modification.UnifiedMoveSpeedFactor", lv_player, FixedToString(StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "Mounted", "Modification.UnifiedMoveSpeedFactor", 0)), 3), c_upgradeOperationSet);
    }
}

void libGame_gf_ArtifactsUpdateSiegeDamageArtifactForUnit (unit lp_unit) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_unit);
    UnitBehaviorAdd(lp_unit, "Artifact_SDMG_1", libGame_gv_players[lv_player].lv_heroUnit, UnitBehaviorCount(libGame_gv_players[lv_player].lv_heroUnit, "Artifact_SDMG_1"));
    UnitBehaviorAdd(lp_unit, "Artifact_SDMG_01", libGame_gv_players[lv_player].lv_heroUnit, UnitBehaviorCount(libGame_gv_players[lv_player].lv_heroUnit, "Artifact_SDMG_01"));
    UnitBehaviorAdd(lp_unit, "Artifact_SDMG_001", libGame_gv_players[lv_player].lv_heroUnit, UnitBehaviorCount(libGame_gv_players[lv_player].lv_heroUnit, "Artifact_SDMG_001"));
}

void libGame_gf_ArtifactsResetArtifactModificationsForPlayer (int lp_player) {
    unitgroup auto4B068F25_g;
    int auto4B068F25_u;

    // Variable Declarations
    unit lv_itHeroUnit;

    // Variable Initialization

    // Implementation
    TextExpressionSetToken("Param/Expression/lib_Game_385AD053", "A", IntToText(lp_player));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_385AD053"), true);
    auto4B068F25_g = libGame_gv_players[lp_player].lv_heroUnitGroup;
    auto4B068F25_u = 1;
    for ( ; auto4B068F25_u <= UnitGroupCount(auto4B068F25_g, c_unitCountAll) ; auto4B068F25_u += BoolToInt(lv_itHeroUnit == UnitGroupUnit(auto4B068F25_g, auto4B068F25_u)) ) {
        lv_itHeroUnit = UnitGroupUnit(auto4B068F25_g, auto4B068F25_u);
        libGame_gf_ArtifactsSetAPBehaviorsToRankForHero(lv_itHeroUnit, 0);
        libGame_gf_ArtifactsSetADBehaviorsToRankForHero(lv_itHeroUnit, 0);
        libGame_gf_ArtifactsSetIASBehaviorsToRankForHero(lv_itHeroUnit, 0);
        libGame_gf_ArtifactsSetLifestealBehaviorsToRankForHero(lv_itHeroUnit, 0);
        libGame_gf_ArtifactsSetMRBehaviorsToRankForHero(lv_itHeroUnit, 0);
        libGame_gf_ArtifactsSetHPBehaviorsToRankForHero(lv_itHeroUnit, 0);
        libGame_gf_ArtifactsSetMANABehaviorsToRankForHero(lv_itHeroUnit, 0);
        libGame_gf_ArtifactsSetMovespeedBehaviorsToRankForHero(lv_itHeroUnit, 0);
        libGame_gf_ArtifactsSetSiegeDmgBehaviorsToRankForHero(lv_itHeroUnit, 0);
        CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(lv_itHeroUnit), "ShieldsMax", lp_player, FixedToString(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_itHeroUnit), "ShieldsMax", 0)), 3), c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(lv_itHeroUnit), "ShieldRegenRate", lp_player, FixedToString(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_itHeroUnit), "ShieldRegenRate", 0)), 3), c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogUnit, UnitGetType(lv_itHeroUnit), "LifeRegenRate", lp_player, FixedToString(StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_itHeroUnit), "LifeRegenRate", 0)), 3), c_upgradeOperationSet);
    }
    libGame_gf_ArtifactsSetCDRModificationToRankForHero(libGame_gv_players[lp_player].lv_heroUnit, 0);
    libGame_gf_ArtifactsSetDeathTimeReductionModificationToRankForHero(libGame_gv_players[lp_player].lv_heroUnit, 0);
    libGame_gf_ArtifactsSetMountSpeedModificationToRankForHero(libGame_gv_players[lp_player].lv_heroUnit, 0);
}

void libGame_gf_TurnDeathTimerCapOnOff (bool lp_onOff, fixed lp_cap) {
    int auto9D1290D1_ae;
    int auto9D1290D1_ai;

    // Variable Declarations
    int lv_itLevel;

    // Variable Initialization

    // Implementation
    if ((lp_onOff == true) && (lp_cap > 0.0)) {
        libCore_gv_sYSDeathTimerCap = lp_cap;
        auto9D1290D1_ae = libCore_gv_bALMaxLevel;
        auto9D1290D1_ai = 1;
        lv_itLevel = 1;
        for ( ; ( (auto9D1290D1_ai >= 0 && lv_itLevel <= auto9D1290D1_ae) || (auto9D1290D1_ai <= 0 && lv_itLevel >= auto9D1290D1_ae) ) ; lv_itLevel += auto9D1290D1_ai ) {
            libCore_gv_bALDeathTimes[lv_itLevel] = MinF(libCore_gv_bALDeathTimes[lv_itLevel], libCore_gv_sYSDeathTimerCap);
        }
        libCore_gv_bALMaxDeathTime = libCore_gv_bALDeathTimes[libCore_gv_bALMaxLevel];
    }
    else {
        libCore_gv_sYSDeathTimerCap = 0.0;
    }
}

trigger auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_Trigger = null;
unit auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_lp_deadHero;
int auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_lp_killingPlayer;

void libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE (unit lp_deadHero, int lp_killingPlayer) {
    auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_lp_deadHero = lp_deadHero;
    auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_lp_killingPlayer = lp_killingPlayer;

    if (auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_Trigger == null) {
        auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_Trigger = TriggerCreate("auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_Trigger, false, false);
}

bool auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_TriggerFunc (bool testConds, bool runActions) {
    unit lp_deadHero = auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_lp_deadHero;
    int lp_killingPlayer = auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_lp_killingPlayer;

    playergroup autoDBD75236_g;
    int autoDBD75236_p;
    playergroup auto79D4F5E2_g;
    int auto79D4F5E2_p;

    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;
    int lv_deadPlayer;
    int lv_deadPlayerTeam;
    playergroup lv_killingTeamGroup;
    unitgroup lv_nearbyUnits;
    playergroup lv_awardGroup;
    playergroup lv_deadPlayerTeamGroup;
    playergroup lv_killingGroup;
    int lv_killingFaction;

    // Variable Initialization
    lv_killingTeamGroup = PlayerGroupEmpty();
    lv_nearbyUnits = UnitGroupEmpty();
    lv_awardGroup = PlayerGroupEmpty();
    lv_deadPlayerTeamGroup = PlayerGroupEmpty();
    lv_killingGroup = PlayerGroupEmpty();

    // Implementation
    if ((libGame_gv_heroDeath_UpdateStats == false)) {
        return true;
    }
    else {
    }
    lv_deadPlayer = UnitGetOwner(lp_deadHero);
    lv_deadPlayerTeam = libGame_gf_TeamNumberOfPlayer(lv_deadPlayer);
    UIAlert("YourHeroHasDied", lv_deadPlayer, StringToText(""), null);
    lv_deadPlayerTeamGroup = libGame_gf_AlliedPlayerGroupOfPlayer(lv_deadPlayer);
    lv_killingTeamGroup = libGame_gf_EnemyPlayerGroupOfPlayer(lv_deadPlayer);
    if ((lv_deadPlayerTeam == libGame_gv_teamOrderIndex_C)) {
        lv_killingFaction = libGame_ge_Faction_Chaos;
    }
    else {
        lv_killingFaction = libGame_ge_Faction_Order;
    }
    libGame_gf_HeroDeathUpdateTeamStats(lp_deadHero, lv_killingFaction);
    libGame_gf_AfkPauseWarningTimerForPlayer(lv_deadPlayer);
    libGame_gv_scoreValues[lv_deadPlayer].lv_deaths += 1;
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_deadPlayer, "Deaths", libGame_gv_scoreValues[lv_deadPlayer].lv_deaths);
    autoDBD75236_g = lv_killingTeamGroup; 
    autoDBD75236_p = 1;
    for ( ; autoDBD75236_p <= PlayerGroupCount(autoDBD75236_g) ; autoDBD75236_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(autoDBD75236_g, autoDBD75236_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoDBD75236_g, autoDBD75236_p);
        if ((lv_itPlayer != libCore_gv_cOMPUTER_TeamOrder) && (lv_itPlayer != libCore_gv_cOMPUTER_TeamChaos)) {
            PlayerGroupAdd(lv_awardGroup, lv_itPlayer);
        }
        else {
        }
    }
    lv_killingGroup = libGame_gf_HeroDeathGetKillingGroupFromKillingTeamGroupAndDeadUnit(lv_killingTeamGroup, lp_killingPlayer, lp_deadHero);
    libGame_gf_HeroDeathAwardXP(lp_deadHero, lv_awardGroup);
    libGame_gf_HeroDeathUpdatePlayerStats(lp_deadHero, lp_killingPlayer, lv_killingTeamGroup, lv_killingGroup);
    libGame_gf_HeroDeathDeadTeamAnnouncements(lp_deadHero, lv_deadPlayerTeamGroup, lv_killingFaction);
    libGame_gv_players[lv_deadPlayer].lv_killingSpreeCount = 0;
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_deadPlayer, "KillStreak", libGame_gv_players[lv_deadPlayer].lv_killingSpreeCount);
    libUIUI_gf_KillCounterUpdateKillCountForPlayer(lv_deadPlayer);
    if ((libGame_gv_firstBloodAvailable == true)) {
        libGame_gv_firstBloodAvailable = false;
    }
    else {
    }
    StatEventCreate("PlayerDeath");
    StatEventAddDataInt(StatEventLastCreated(), "PlayerID", lv_deadPlayer);
    StatEventAddDataFixed(StatEventLastCreated(), "PositionX", PointGetX(UnitGetPosition(lp_deadHero)));
    StatEventAddDataFixed(StatEventLastCreated(), "PositionY", PointGetY(UnitGetPosition(lp_deadHero)));
    if ((PlayerGroupCount(lv_killingGroup) > 0)) {
        auto79D4F5E2_g = lv_killingGroup; 
        auto79D4F5E2_p = 1;
        for ( ; auto79D4F5E2_p <= PlayerGroupCount(auto79D4F5E2_g) ; auto79D4F5E2_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto79D4F5E2_g, auto79D4F5E2_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto79D4F5E2_g, auto79D4F5E2_p);
            StatEventAddDataInt(StatEventLastCreated(), "KillingPlayer", lv_itPlayer);
            libGame_gf_SendEventHeroParticipatedInTakedown(lv_itPlayer, lv_deadPlayer, lp_deadHero);
        }
    }
    else {
        StatEventAddDataInt(StatEventLastCreated(), "KillingPlayer", 0);
    }
    StatEventSend(StatEventLastCreated());
    return true;
}

playergroup libGame_gf_HeroDeathGetKillingGroupFromKillingTeamGroupAndDeadUnit (playergroup lp_killingTeamGroup, int lp_killingPlayer, unit lp_deadHero) {
    playergroup auto2B5189AC_g;
    int auto2B5189AC_p;
    unitgroup autoF3785464_g;
    int autoF3785464_u;

    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;
    int lv_deadPlayer;
    unitgroup lv_nearbyUnits;
    playergroup lv_killingGroup;

    // Variable Initialization
    lv_nearbyUnits = UnitGroupEmpty();
    lv_killingGroup = PlayerGroupEmpty();

    // Implementation
    lv_deadPlayer = UnitGetOwner(lp_deadHero);
    auto2B5189AC_g = lp_killingTeamGroup; 
    auto2B5189AC_p = 1;
    for ( ; auto2B5189AC_p <= PlayerGroupCount(auto2B5189AC_g) ; auto2B5189AC_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto2B5189AC_g, auto2B5189AC_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto2B5189AC_g, auto2B5189AC_p);
        if ((lv_itPlayer != libCore_gv_cOMPUTER_TeamOrder) && (lv_itPlayer != libCore_gv_cOMPUTER_TeamChaos) && ((lv_itPlayer == lp_killingPlayer) || ((GameGetMissionTime() - libGame_gv_players[lv_deadPlayer].lv_lastTimeHeroWasWithinXPRadius[lv_itPlayer]) <= libCore_gv_bALHeroKillCreditTimeWindow) || (libGame_gv_players[lv_deadPlayer].lv_recentPlayerDamageReceived[lv_itPlayer] > 0.0))) {
            PlayerGroupAdd(lv_killingGroup, lv_itPlayer);
        }
        else {
        }
    }
    if ((lp_killingPlayer > 0) && (lp_killingPlayer <= libCore_gv_bALMaxEnginePlayerCount)) {
        lv_nearbyUnits = UnitGroupSearch(null, lp_killingPlayer, UnitGetPosition(lp_deadHero), libCore_gv_bALHeroKillXPRadius, UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }
    else {
        if ((lv_deadPlayer != libCore_gv_cOMPUTER_Hostile)) {
            lv_nearbyUnits = UnitGroupSearch(null, lv_deadPlayer, UnitGetPosition(lp_deadHero), libCore_gv_bALHeroKillXPRadius, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }
        else {
        }
    }
    autoF3785464_g = lv_nearbyUnits;
    autoF3785464_u = 1;
    for ( ; autoF3785464_u <= UnitGroupCount(autoF3785464_g, c_unitCountAll) ; autoF3785464_u += BoolToInt(lv_itUnit == UnitGroupUnit(autoF3785464_g, autoF3785464_u)) ) {
        lv_itUnit = UnitGroupUnit(autoF3785464_g, autoF3785464_u);
        if ((UnitHasBehavior2(lv_itUnit, "EarnsXP") == true)) {
            PlayerGroupAdd(lv_killingGroup, UnitGetOwner(lv_itUnit));
        }
        else {
        }
    }
    return lv_killingGroup;
}

trigger auto_libGame_gf_HeroDeathUpdateTeamStats_Trigger = null;
unit auto_libGame_gf_HeroDeathUpdateTeamStats_lp_deadHero;
int auto_libGame_gf_HeroDeathUpdateTeamStats_lp_killingFaction;

void libGame_gf_HeroDeathUpdateTeamStats (unit lp_deadHero, int lp_killingFaction) {
    auto_libGame_gf_HeroDeathUpdateTeamStats_lp_deadHero = lp_deadHero;
    auto_libGame_gf_HeroDeathUpdateTeamStats_lp_killingFaction = lp_killingFaction;

    if (auto_libGame_gf_HeroDeathUpdateTeamStats_Trigger == null) {
        auto_libGame_gf_HeroDeathUpdateTeamStats_Trigger = TriggerCreate("auto_libGame_gf_HeroDeathUpdateTeamStats_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_HeroDeathUpdateTeamStats_Trigger, false, false);
}

bool auto_libGame_gf_HeroDeathUpdateTeamStats_TriggerFunc (bool testConds, bool runActions) {
    unit lp_deadHero = auto_libGame_gf_HeroDeathUpdateTeamStats_lp_deadHero;
    int lp_killingFaction = auto_libGame_gf_HeroDeathUpdateTeamStats_lp_killingFaction;

    // Variable Declarations
    int lv_deadPlayer;

    // Variable Initialization

    // Implementation
    lv_deadPlayer = UnitGetOwner(lp_deadHero);
    if ((lp_killingFaction == libGame_ge_Faction_Chaos)) {
        libGame_gv_teams[2].lv_kills += 1;
        libGame_gv_teams[2].lv_multikillStreak += 1;
        TimerStart(libGame_gv_teams[2].lv_multikillTimer, libGame_gv_heroDeathMultikillTimeoutDuration, false, c_timeGame);
    }
    else {
        libGame_gv_teams[1].lv_kills += 1;
        libGame_gv_teams[1].lv_multikillStreak += 1;
        TimerStart(libGame_gv_teams[1].lv_multikillTimer, libGame_gv_heroDeathMultikillTimeoutDuration, false, c_timeGame);
    }
    return true;
}

trigger auto_libGame_gf_HeroDeathUpdatePlayerStats_Trigger = null;
unit auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_deadHero;
int auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingPlayer;
playergroup auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingTeamGroup;
playergroup auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingGroup;

void libGame_gf_HeroDeathUpdatePlayerStats (unit lp_deadHero, int lp_killingPlayer, playergroup lp_killingTeamGroup, playergroup lp_killingGroup) {
    auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_deadHero = lp_deadHero;
    auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingPlayer = lp_killingPlayer;
    auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingTeamGroup = lp_killingTeamGroup;
    auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingGroup = lp_killingGroup;

    if (auto_libGame_gf_HeroDeathUpdatePlayerStats_Trigger == null) {
        auto_libGame_gf_HeroDeathUpdatePlayerStats_Trigger = TriggerCreate("auto_libGame_gf_HeroDeathUpdatePlayerStats_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_HeroDeathUpdatePlayerStats_Trigger, false, false);
}

bool auto_libGame_gf_HeroDeathUpdatePlayerStats_TriggerFunc (bool testConds, bool runActions) {
    unit lp_deadHero = auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_deadHero;
    int lp_killingPlayer = auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingPlayer;
    playergroup lp_killingTeamGroup = auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingTeamGroup;
    playergroup lp_killingGroup = auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingGroup;

    playergroup auto0E9B9C5D_g;
    int auto0E9B9C5D_p;
    playergroup autoE4A14BD9_g;
    int autoE4A14BD9_p;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeamPlayer;
    fixed lv_missionTime;
    int lv_deadPlayer;
    fixed lv_xPGranted;
    int lv_levelGap;

    // Variable Initialization

    // Implementation
    lv_deadPlayer = UnitGetOwner(lp_deadHero);
    lv_missionTime = GameGetMissionTime();
    if ((PlayerGroupCount(lp_killingGroup) >= 1)) {
        lv_xPGranted = libCore_gf_DataXPXPForHero(PlayerGroupPlayer(lp_killingGroup, 1), lp_deadHero);
    }
    else {
    }
    lv_levelGap = (libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_deadPlayer)].lv_teamLevel - libGame_gv_teams[libGame_gf_EnemyTeamNumberOfPlayer(lv_deadPlayer)].lv_teamLevel);
    auto0E9B9C5D_g = lp_killingTeamGroup; 
    auto0E9B9C5D_p = 1;
    for ( ; auto0E9B9C5D_p <= PlayerGroupCount(auto0E9B9C5D_g) ; auto0E9B9C5D_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto0E9B9C5D_g, auto0E9B9C5D_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto0E9B9C5D_g, auto0E9B9C5D_p);
        if ((PlayerGroupHasPlayer(lp_killingGroup, lv_itPlayer) == true)) {
            UIAlert("EnemyHeroKilled", lv_itPlayer, StringToText(""), null);
            libGame_gv_players[lv_itPlayer].lv_multikillStreak += 1;
            libGame_gf_HeroDeathStartMultikillTimerForPlayer(lv_itPlayer);
            libGame_gv_scoreValues[lv_itPlayer].lv_takedowns += 1;
            libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_itPlayer, "Takedowns", libGame_gv_scoreValues[lv_itPlayer].lv_takedowns);
            libGame_gf_EncouragementDataTrackingRegisterRecentHeroKillForPlayer(lv_itPlayer);
            libGame_gv_encouragement_CalloutStatTracking[lv_itPlayer][(libGame_ge_EncouragementStatCallouts_Takedowns)] += 1.0;
            libGame_gf_ScoreValuesRecordXPContributionForPlayer(lv_itPlayer, lv_xPGranted);
            autoE4A14BD9_g = libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_itPlayer)].lv_teamPlayerGroupNoNPCPlayers; 
            autoE4A14BD9_p = 1;
            for ( ; autoE4A14BD9_p <= PlayerGroupCount(autoE4A14BD9_g) ; autoE4A14BD9_p += BoolToInt(lv_itTeamPlayer == PlayerGroupPlayer(autoE4A14BD9_g, autoE4A14BD9_p)) ) {
                lv_itTeamPlayer = PlayerGroupPlayer(autoE4A14BD9_g, autoE4A14BD9_p);
                libGame_gv_encouragement_TotalTeamXPGathered[lv_itTeamPlayer] += lv_xPGranted;
            }
            if ((libGame_gv_players[lv_itPlayer].lv_isDead == false)) {
                libGame_gv_players[lv_itPlayer].lv_killingSpreeCount += 1;
                libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_itPlayer, "KillStreak", libGame_gv_players[lv_itPlayer].lv_killingSpreeCount);
                libUIUI_gf_KillCounterUpdateKillCountForPlayer(lv_itPlayer);
            }
            else {
            }
            if ((lv_itPlayer == lp_killingPlayer)) {
                libGame_gv_scoreValues[lv_itPlayer].lv_kills += 1;
            }
            else {
                libGame_gv_scoreValues[lv_itPlayer].lv_assists += 1;
            }
            libSond_gf_HeroVORegisterHeroTakedownForPlayer(lv_itPlayer, lp_killingGroup, lv_deadPlayer, libGame_gv_players[lv_deadPlayer].lv_killingSpreeCount, lv_levelGap);
            libGame_gf_HeroDeathHeroKilledAnnouncementToKillingTeamPlayer(lv_deadPlayer, lp_deadHero, lv_itPlayer, true, lv_xPGranted);
            libGame_gf_HeroDeathCheckForKillingSpree(lv_itPlayer);
        }
        else {
            libGame_gf_HeroDeathHeroKilledAnnouncementToKillingTeamPlayer(lv_deadPlayer, lp_deadHero, lv_itPlayer, false, 0.0);
        }
    }
    return true;
}

trigger auto_libGame_gf_HeroDeathAwardXP_Trigger = null;
unit auto_libGame_gf_HeroDeathAwardXP_lp_deadHero;
playergroup auto_libGame_gf_HeroDeathAwardXP_lp_awardGroup;

void libGame_gf_HeroDeathAwardXP (unit lp_deadHero, playergroup lp_awardGroup) {
    auto_libGame_gf_HeroDeathAwardXP_lp_deadHero = lp_deadHero;
    auto_libGame_gf_HeroDeathAwardXP_lp_awardGroup = lp_awardGroup;

    if (auto_libGame_gf_HeroDeathAwardXP_Trigger == null) {
        auto_libGame_gf_HeroDeathAwardXP_Trigger = TriggerCreate("auto_libGame_gf_HeroDeathAwardXP_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_HeroDeathAwardXP_Trigger, false, false);
}

bool auto_libGame_gf_HeroDeathAwardXP_TriggerFunc (bool testConds, bool runActions) {
    unit lp_deadHero = auto_libGame_gf_HeroDeathAwardXP_lp_deadHero;
    playergroup lp_awardGroup = auto_libGame_gf_HeroDeathAwardXP_lp_awardGroup;

    playergroup auto44AF96F8_g;
    int auto44AF96F8_p;

    // Variable Declarations
    int lv_itPlayer;
    fixed lv_xPGranted;
    int lv_levelGap;
    int lv_textTagType;
    playergroup lv_killingTeamGroup;

    // Variable Initialization
    lv_killingTeamGroup = PlayerGroupEmpty();

    // Implementation
    auto44AF96F8_g = lp_awardGroup; 
    auto44AF96F8_p = 1;
    for ( ; auto44AF96F8_p <= PlayerGroupCount(auto44AF96F8_g) ; auto44AF96F8_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto44AF96F8_g, auto44AF96F8_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto44AF96F8_g, auto44AF96F8_p);
        lv_levelGap = libCore_gf_DataXPLevelGapBetweenHeroes(lv_itPlayer, lp_deadHero);
        lv_xPGranted = libCore_gf_DataXPXPForHero(lv_itPlayer, lp_deadHero);
        libGame_gf_GrantXPToPlayer(lv_xPGranted, lv_itPlayer, libGame_ge_XPSources_Hero);
        if ((lv_levelGap <= -2)) {
            lv_textTagType = libCore_ge_FloatingTextType_XPSmall;
        }
        else {
            if ((lv_levelGap >= 2)) {
                lv_textTagType = libCore_ge_FloatingTextType_XPLarge;
            }
            else {
                lv_textTagType = libCore_ge_FloatingTextType_XPMedium;
            }
        }
        TextExpressionSetToken("Param/Expression/lib_Game_D44529DC", "A", FixedToText(lv_xPGranted, 0));
        libUIUI_gf_UIFloatingCombatTextXP(lv_itPlayer, lp_deadHero, TextExpressionAssemble("Param/Expression/lib_Game_D44529DC"), lv_textTagType);
    }
    return true;
}

trigger auto_libGame_gf_HeroDeathDeadTeamAnnouncements_Trigger = null;
unit auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadHero;
playergroup auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadPlayerTeamGroup;
int auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_killingFaction;

void libGame_gf_HeroDeathDeadTeamAnnouncements (unit lp_deadHero, playergroup lp_deadPlayerTeamGroup, int lp_killingFaction) {
    auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadHero = lp_deadHero;
    auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadPlayerTeamGroup = lp_deadPlayerTeamGroup;
    auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_killingFaction = lp_killingFaction;

    if (auto_libGame_gf_HeroDeathDeadTeamAnnouncements_Trigger == null) {
        auto_libGame_gf_HeroDeathDeadTeamAnnouncements_Trigger = TriggerCreate("auto_libGame_gf_HeroDeathDeadTeamAnnouncements_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_HeroDeathDeadTeamAnnouncements_Trigger, false, false);
}

bool auto_libGame_gf_HeroDeathDeadTeamAnnouncements_TriggerFunc (bool testConds, bool runActions) {
    unit lp_deadHero = auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadHero;
    playergroup lp_deadPlayerTeamGroup = auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadPlayerTeamGroup;
    int lp_killingFaction = auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_killingFaction;

    // Variable Declarations
    int lv_itPlayer;
    int lv_deadPlayer;
    int lv_deadPlayerTeam;
    playergroup lv_deadPlayerTeamGroupMinusDeadPlayer;
    bool lv_entireTeamDead;
    int lv_enemyTeam;

    // Variable Initialization
    lv_deadPlayerTeamGroupMinusDeadPlayer = PlayerGroupEmpty();
    lv_entireTeamDead = true;

    // Implementation
    lv_deadPlayer = UnitGetOwner(lp_deadHero);
    lv_deadPlayerTeam = libGame_gf_TeamNumberOfPlayer(lv_deadPlayer);
    lv_deadPlayerTeamGroupMinusDeadPlayer = PlayerGroupCopy(lp_deadPlayerTeamGroup);
    PlayerGroupRemove(lv_deadPlayerTeamGroupMinusDeadPlayer, lv_deadPlayer);
    if ((UnitGroupCount(libGame_gv_players[lv_deadPlayer].lv_heroUnitGroup, c_unitCountAlive) < 1)) {
        libGame_gf_HeroDeathYouHaveDiedAnnouncementToDeadPlayer(lv_deadPlayer);
    }
    else {
        libGame_gf_HeroDeathHeroHasDiedAnnouncementToDeadPlayer(lv_deadPlayer, lp_deadHero);
    }
    libGame_gf_HeroDeathHeroDiedAnnouncementToAlliedPlayerGroup(lv_deadPlayer, lp_deadHero, lv_deadPlayerTeamGroupMinusDeadPlayer);
    libGame_gf_HeroDeathHeroKilledAnnouncementToObserver(lv_deadPlayer, lp_deadHero);
    libGame_gf_HeroDeathCheckForTeamDominatedAnnouncement(lv_deadPlayerTeam);
    return true;
}

void libGame_gf_HeroDeathCheckForTeamDominatedAnnouncement (int lp_deadPlayerTeam) {
    playergroup autoF6A7EEAC_g;
    int autoF6A7EEAC_p;
    playergroup autoF76BFC27_g;
    int autoF76BFC27_p;

    // Variable Declarations
    int lv_itPlayer;
    bool lv_entireTeamDead;
    int lv_enemyTeam;

    // Variable Initialization
    lv_entireTeamDead = true;

    // Implementation
    lv_entireTeamDead = true;
    autoF6A7EEAC_g = libGame_gf_PlayersOnTeamHeroes(lp_deadPlayerTeam, false); 
    autoF6A7EEAC_p = 1;
    for ( ; autoF6A7EEAC_p <= PlayerGroupCount(autoF6A7EEAC_g) ; autoF6A7EEAC_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(autoF6A7EEAC_g, autoF6A7EEAC_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoF6A7EEAC_g, autoF6A7EEAC_p);
        if ((libGame_gv_players[lv_itPlayer].lv_isDead == false) && (UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "TyraelArchangelsWrathDeathActiveBuff") == false) && (UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "UtherEternalDevotionRezDelay") == false)) {
            lv_entireTeamDead = false;
            break;
        }
        else {
        }
    }
    if ((lv_entireTeamDead == true)) {
        autoF76BFC27_g = libGame_gf_PlayersOnTeamHeroes(lp_deadPlayerTeam, false); 
        autoF76BFC27_p = 1;
        for ( ; autoF76BFC27_p <= PlayerGroupCount(autoF76BFC27_g) ; autoF76BFC27_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(autoF76BFC27_g, autoF76BFC27_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(autoF76BFC27_g, autoF76BFC27_p);
            libSond_gf_HeroVOStartTeamKilledVOTimerForPlayer(lv_itPlayer, libGame_gv_heroDeathTeamKilledVODelay);
        }
        lv_enemyTeam = (3 - lp_deadPlayerTeam);
        if ((lv_enemyTeam <= libCore_gv_bALMaxTeams)) {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_TeamKill, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, true);
            if ((lp_deadPlayerTeam == libGame_gv_teamOrderIndex_C)) {
                libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_BlueTeamKilled, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            }
            else {
                libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_RedTeamKilled, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            }
        }
        else {
        }
    }
    else {
    }
}

void libGame_gf_HeroDeathStartRespawnTimer (int lp_player) {
    // Variable Declarations
    unit lv_heroUnit;
    int lv_heroLevel;
    fixed lv_respawnTime;
    unit lv_murkyEgg;

    // Variable Initialization

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    lv_heroLevel = UnitLevel(lv_heroUnit);
    UnitSetState(lv_heroUnit, c_unitStateStatusBar, false);
    if ((UnitHasBehavior2(lv_heroUnit, "ResurgenceoftheStormRezController") == true) && (UnitHasBehavior2(lv_heroUnit, "ResurgenceoftheStormCooldown") == false)) {
        lv_respawnTime = libCore_gv_talents_ResurganceOfTheStormDeathTime_C;
        UnitBehaviorAdd(lv_heroUnit, "ResurgenceoftheStormCooldown", lv_heroUnit, 1);
        PlayerCreateEffectPoint(lp_player, "ResurgenceoftheStormVisualDummyEffect", UnitGetPosition(libGame_gv_players[lp_player].lv_heroUnit));
    }
    else {
        lv_respawnTime = libCore_gf_HeroDeathTime(lp_player, lv_heroLevel);
        lv_respawnTime -= (lv_respawnTime * libGame_gv_players[lp_player].lv_artifacts_DeathTimerReduction);
        if ((UnitGetType(lv_heroUnit) == "HeroUther")) {
            if ((UnitHasBehavior2(lv_heroUnit, "HolyDevotionCarryBehavior") == true)) {
                lv_respawnTime -= StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "SpiritOfRedemptionSpiritFormBuffImproved", "Duration", lp_player));
            }
            else {
                lv_respawnTime -= StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "SpiritOfRedemptionSpiritFormBuff", "Duration", lp_player));
            }
            if ((lv_respawnTime < 0.0)) {
                lv_respawnTime = 0.25;
            }
            else {
            }
        }
        else {
        }
        if ((UnitGetType(lv_heroUnit) == "HeroMurky") && (libGame_gv_heroDeathMurkyRespawnEggs[lp_player] != null) && (UnitIsAlive(libGame_gv_heroDeathMurkyRespawnEggs[lp_player]) == true)) {
            UnitBehaviorRemove(libGame_gv_heroDeathMurkyRespawnEggs[lp_player], "Level", libCore_gv_bALMaxLevel);
            UnitBehaviorAdd(libGame_gv_heroDeathMurkyRespawnEggs[lp_player], "Level", libGame_gv_players[lp_player].lv_heroUnit, UnitBehaviorCount(lv_heroUnit, "Level"));
            UnitBehaviorAdd(libGame_gv_heroDeathMurkyRespawnEggs[lp_player], "MurkyEggAnimDelay", libGame_gv_players[lp_player].lv_heroUnit, 1);
            lv_respawnTime = libCore_gv_bALMurkyWithEggDeathTime;
        }
        else {
        }
    }
    libGame_gv_players[lp_player].lv_timeSpentDead += lv_respawnTime;
    TimerStart(libGame_gv_players[lp_player].lv_respawnTimer, lv_respawnTime, false, c_timeGame);
    TimerStart(libGame_gv_players[lp_player].lv_respawnSoundCueTimer, MaxF((lv_respawnTime - libGame_gv_heroDeathRespawnCueSoundTiming), 0.0625), false, c_timeGame);
    libGame_gf_ScoreValuesReportRealValueAndLog(lp_player, "TimeSpentDead", libGame_gv_players[lp_player].lv_timeSpentDead);
}

void libGame_gf_HeroDeathUpdateUIElementsForDeath (int lp_player, int lp_killingPlayer) {
    // Implementation
    libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer(false, lp_player);
    libUIUI_gf_DeathAnnouncementPanelRegisterDeath(lp_player, lp_killingPlayer, libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_player].lv_heroIndex].lv_portrait, libGame_gv_players[lp_player].lv_heroUnit, libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_player].lv_heroIndex].lv_name, libGame_gv_players[lp_player].lv_respawnTimer);
    libUIUI_gf_FullscreenOverlaysShowHideDeathOverlay(true, lp_player);
}

void libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer (bool lp_enableDisable, int lp_player) {
    // Variable Declarations
    fixed lv_deathTimeRemaining;
    fixed lv_soundOffset;

    // Variable Initialization

    // Implementation
    libSond_gf_DigitalSoundEffectsEnableDisableSoundStateForPlayer(lp_enableDisable, lp_player, "Heroes_Lowpass_Death");
    if ((lp_enableDisable == true)) {
        SoundChannelMute(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryAmbient, true);
        lv_deathTimeRemaining = TimerGetRemaining(libGame_gv_players[lp_player].lv_respawnTimer);
        lv_soundOffset = (libCore_gv_bALMaxDeathTime - lv_deathTimeRemaining);
        SoundPlayForPlayer(SoundLink("Gen_Hero_Respawn_Amb", -1), lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, lv_soundOffset);
        libGame_gv_heroDeath_DeathAmbientSound[lp_player] = SoundLastPlayed();
        SoundPlayForPlayer(SoundLink("MX_Dead", -1), lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
        libGame_gv_heroDeath_DeathMusicSound[lp_player] = SoundLastPlayed();
    }
    else {
        SoundStop(libGame_gv_heroDeath_DeathAmbientSound[lp_player], false);
        SoundStop(libGame_gv_heroDeath_DeathMusicSound[lp_player], false);
        SoundChannelMute(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryAmbient, false);
    }
}

void libGame_gf_HeroDeathPortHeroBackAndSetDeathState (int lp_player) {
    int auto25E1F233_ae;
    int auto25E1F233_ai;

    // Variable Declarations
    int lv_i;
    unit lv_heroUnit;

    // Variable Initialization

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    auto25E1F233_ae = libCore_gv_bALMaxPlayers;
    auto25E1F233_ai = 1;
    lv_i = 1;
    for ( ; ( (auto25E1F233_ai >= 0 && lv_i <= auto25E1F233_ae) || (auto25E1F233_ai <= 0 && lv_i >= auto25E1F233_ae) ) ; lv_i += auto25E1F233_ai ) {
        if ((libGame_gv_players[lv_i].lv_cameraAllyPlayerToTrack == lp_player)) {
            if ((libGame_gv_players[lv_i].lv_bankData.lv_settingDeathActionCam == true) && (libGame_gv_players[lv_i].lv_isDead == true)) {
                libGame_gf_CameraTrackNextAliveAllyForPlayer(lv_i);
            }
            else {
                libGame_gv_players[lv_i].lv_cameraAllyPlayerToTrack = 0;
            }
            libGame_gf_CameraUpdateCameraForPlayer(lv_i);
        }
        else {
        }
    }
    libGame_gf_UpdateStormMapLighting(PlayerGroupSingle(lp_player), 0.0);
    UnitSetPropertyFixed(lv_heroUnit, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(lv_heroUnit, c_unitPropEnergyPercent, 100.0);
    UnitBehaviorAdd(lv_heroUnit, "Dead", lv_heroUnit, 1);
    if ((TimerGetDuration(libGame_gv_players[lp_player].lv_respawnTimer) > 0.0)) {
        UnitBehaviorSetDuration(lv_heroUnit, "Dead", TimerGetRemaining(libGame_gv_players[lp_player].lv_respawnTimer));
    }
    else {
        UnitBehaviorSetDuration(lv_heroUnit, "Dead", 0.0);
    }
    libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar("Dead", lv_heroUnit);
    Wait(0.5, c_timeGame);
    UnitSetPosition(lv_heroUnit, libGame_gv_players[lp_player].lv_spawnPoint, false);
    UnitSetFacing(lv_heroUnit, 270.0, 0.0);
    if ((libGame_gv_players[lp_player].lv_bankData.lv_settingDeathActionCam == true)) {
        Wait(libGame_gv_heroDeathActionCamActivationDelay, c_timeGame);
        libGame_gf_CameraTrackNextAliveAllyForPlayer(lp_player);
        libGame_gf_CameraUpdateCameraForPlayer(lp_player);
    }
    else {
    }
}

void libGame_gf_HeroDeathModifyRespawnTimer (int lp_respawningPlayer, fixed lp_modificationAmount) {
    // Variable Declarations
    fixed lv_currentRespawnTimer;
    fixed lv_newRespawnTimer;

    // Variable Initialization

    // Implementation
    lv_currentRespawnTimer = TimerGetRemaining(libGame_gv_players[lp_respawningPlayer].lv_respawnTimer);
    if ((lv_currentRespawnTimer == 0.0)) {
        return ;
    }
    else {
    }
    lv_newRespawnTimer = (lv_currentRespawnTimer + lp_modificationAmount);
    if ((lv_newRespawnTimer < 0.5)) {
        lv_newRespawnTimer = 0.5;
    }
    else {
    }
    libGame_gf_HeroDeathUpdateRespawnTimer(lp_respawningPlayer, lv_newRespawnTimer);
}

void libGame_gf_HeroDeathUpdateRespawnTimer (int lp_respawningPlayer, fixed lp_newRespawnTimerDuration) {
    // Variable Declarations
    fixed lv_currentRespawnTimer;
    fixed lv_soundOffset;

    // Variable Initialization

    // Implementation
    lv_currentRespawnTimer = TimerGetRemaining(libGame_gv_players[lp_respawningPlayer].lv_respawnTimer);
    if ((lv_currentRespawnTimer == 0.0)) {
        return ;
    }
    else {
    }
    UnitBehaviorSetDuration(libGame_gv_players[lp_respawningPlayer].lv_heroUnit, "Dead", lp_newRespawnTimerDuration);
    TimerStart(libGame_gv_players[lp_respawningPlayer].lv_respawnTimer, lp_newRespawnTimerDuration, false, c_timeGame);
    TimerStart(libGame_gv_players[lp_respawningPlayer].lv_respawnSoundCueTimer, MaxF((lp_newRespawnTimerDuration - libGame_gv_heroDeathRespawnCueSoundTiming), 0.0625), false, c_timeGame);
    DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame, libCore_gv_playerGroupFromPlayer[lp_respawningPlayer], false);
    libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar("Dead", libGame_gv_players[lp_respawningPlayer].lv_heroUnit);
    libUIUI_gf_DeathTimerPanelPlayerDeathTimerChanges(lp_respawningPlayer, libGame_gv_players[lp_respawningPlayer].lv_heroUnit);
    SoundStop(libGame_gv_heroDeath_DeathAmbientSound[lp_respawningPlayer], false);
    if ((lp_newRespawnTimerDuration > 0.0)) {
        lv_soundOffset = (libCore_gv_bALMaxDeathTime - lp_newRespawnTimerDuration);
        SoundPlayForPlayer(SoundLink("Gen_Hero_Respawn_Amb", -1), lp_respawningPlayer, libCore_gv_playerGroupFromPlayer[lp_respawningPlayer], 100.0, lv_soundOffset);
    }
    else {
    }
}

void libGame_gf_HeroDeathRespawnHeroforPlayer (int lp_player) {
    int autoA71B999F_ae;
    int autoA71B999F_ai;

    // Variable Declarations
    int lv_i;
    unit lv_heroUnit;

    // Variable Initialization

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    if ((UnitHasBehavior2(lv_heroUnit, "AbnormalRespawn") == true)) {
        return ;
    }
    else {
    }
    libGame_gf_AfkResumeWarningTimerForPlayer(lp_player);
    UnitKill(libGame_gv_players[lp_player].lv_gravestone);
    UnitBehaviorRemove(lv_heroUnit, "Dead", 1);
    if ((UnitGetType(lv_heroUnit) == "HeroMurky")) {
        if ((((libGame_gv_heroDeathMurkyRespawnEggDeathTimeStamp[lp_player] >= (TimerGetElapsed(libGame_gv_gameTimer) - 0.0625)) && (libGame_gv_heroDeathMurkyRespawnEggDeathTimeStamp[lp_player] <= (TimerGetElapsed(libGame_gv_gameTimer) + 0.0625))) || ((libGame_gv_heroDeathMurkyRespawnEggs[lp_player] != null) && (UnitIsAlive(libGame_gv_heroDeathMurkyRespawnEggs[lp_player]) == true)))) {
            UnitSetPosition(lv_heroUnit, libGame_gv_heroDeathMurkyRespawnEggPoint[lp_player], false);
            UnitBehaviorRemove(lv_heroUnit, "HomeShieldProtection", 1);
            if ((UnitBehaviorCount(libGame_gv_players[lp_player].lv_heroUnit, "MurkyHiddenAssaultMasteryCarryBehavior") == 1)) {
                UnitBehaviorAdd(libGame_gv_players[lp_player].lv_heroUnit, "HiddenAssaultCloak", libGame_gv_players[lp_player].lv_heroUnit, 1);
                UnitBehaviorAdd(libGame_gv_players[lp_player].lv_heroUnit, "HiddenAssaultSpeedBoost", libGame_gv_players[lp_player].lv_heroUnit, 1);
            }
            else {
            }
        }
        else {
            UnitSetPosition(lv_heroUnit, libGame_gv_players[lp_player].lv_spawnPoint, false);
        }
        UnitModifyCooldown(lv_heroUnit, "Abil/MurkyRespawnEgg", -60.0, c_cooldownOperationAdd);
    }
    else {
        UnitSetPosition(lv_heroUnit, libGame_gv_players[lp_player].lv_spawnPoint, false);
    }
    UnitRevive(lv_heroUnit);
    UnitSetState(lv_heroUnit, c_unitStateStatusBar, true);
    UnitSetPropertyFixed(lv_heroUnit, c_unitPropLifePercent, 100.0);
    if (((UnitGetType(lv_heroUnit) == "HeroBarbarian"))) {
        UnitSetPropertyFixed(lv_heroUnit, c_unitPropEnergyPercent, 0.0);
    }
    else {
        UnitSetPropertyFixed(lv_heroUnit, c_unitPropEnergyPercent, 100.0);
    }
    libGame_gv_players[lp_player].lv_isDead = false;
    libGame_gf_SendEventHeroRespawn(lp_player);
    libUIUI_gf_FullscreenOverlaysShowHideDeathOverlay(false, lp_player);
    TextTagDestroy(libGame_gv_players[lp_player].lv_gravestoneTextTag);
    UIAlert("YourHeroHasRevived", lp_player, StringToText(""), null);
    libNtve_gf_SendActorMessageToUnit(lv_heroUnit, "Signal Respawn");
    libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(false, lp_player);
    libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_Revive, lp_player, libCore_gv_playerGroupFromPlayer[lp_player]);
    libGame_gv_players[lp_player].lv_cameraCameraLockInterrupt = false;
    libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = 0;
    libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lv_heroUnit);
    libGame_gf_CameraUpdateCameraForPlayer(lp_player);
    if ((libGame_gf_PlayersAliveOnTeam(libGame_gf_TeamNumberOfPlayer(lp_player)) == 1)) {
        autoA71B999F_ae = libCore_gv_bALMaxPlayers;
        autoA71B999F_ai = 1;
        lv_i = 1;
        for ( ; ( (autoA71B999F_ai >= 0 && lv_i <= autoA71B999F_ae) || (autoA71B999F_ai <= 0 && lv_i >= autoA71B999F_ae) ) ; lv_i += autoA71B999F_ai ) {
            if ((libGame_gv_players[lv_i].lv_faction == libGame_gv_players[lp_player].lv_faction) && (libGame_gv_players[lv_i].lv_isDead == true) && (libGame_gv_players[lv_i].lv_bankData.lv_settingDeathActionCam == true)) {
                libGame_gf_CameraTrackNextAliveAllyForPlayer(lv_i);
                libGame_gf_CameraUpdateCameraForPlayer(lv_i);
            }
            else {
            }
        }
    }
    else {
    }
    libUIUI_gf_UIDeathActionCamPanelShowHidePanelForPlayer(false, lp_player);
    libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer(true, lp_player);
    libGame_gf_SendEventHeroSpecialCaseMounting(lp_player);
    if (((UnitGetType(lv_heroUnit) == "HeroMurky") || ((libGame_gv_heroDeath_RespawnMounted == true) && (UnitHasBehavior2(lv_heroUnit, "HomeShieldProtection") == true)))) {
        libGame_gf_ApplyMountBehaviorToHero(lv_heroUnit);
    }
    else {
    }
}

void libGame_gf_HeroDeathHeroKilledAnnouncementToKillingTeamPlayer (int lp_deadPlayer, unit lp_deadHero, int lp_killingTeamPlayer, bool lp_playerWasInvolvedInKill, fixed lp_xPValue) {
    int auto869E4A78_val;

    // Variable Declarations
    int lv_killingTeam;
    int lv_vOEvent;
    soundlink lv_deathStingerSound;
    string lv_animName;
    text lv_titleText;
    fixed lv_duration;

    // Variable Initialization
    lv_vOEvent = libCore_ge_AnnouncerVOEvents_Null;
    lv_deathStingerSound = SoundLink("EditorDefaultSound", -1);
    lv_animName = "";

    // Implementation
    lv_killingTeam = libGame_gf_TeamNumberOfPlayer(lp_killingTeamPlayer);
    if ((lp_playerWasInvolvedInKill == true)) {
        auto869E4A78_val = libGame_gv_players[lp_killingTeamPlayer].lv_multikillStreak;
        if (auto869E4A78_val == 2) {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_DoubleKill;
            if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Double_R", -1);
            }
            else {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Double_L", -1);
            }
            lv_animName = "ShowTimedNotification_Tier1";
            lv_titleText = StringExternal("Param/Value/lib_Game_855DD2B2");
            lv_duration = libGame_gv_announcement_KillAnnouncementDuration_C;
            libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer(lp_killingTeamPlayer, StringExternal("Param/Value/lib_Game_CEE24189"), StringExternal("Param/Value/lib_Game_EA230E99"));
        }
        else if (auto869E4A78_val == 3) {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_TripleKill;
            if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Triple_R", -1);
            }
            else {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Triple_L", -1);
            }
            lv_animName = "ShowTimedNotification_Tier2";
            lv_titleText = StringExternal("Param/Value/lib_Game_B57CA767");
            lv_duration = libGame_gv_announcement_KillAnnouncementDuration_C;
            libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer(lp_killingTeamPlayer, StringExternal("Param/Value/lib_Game_F5B98EFA"), StringExternal("Param/Value/lib_Game_CCDACBD8"));
        }
        else if (auto869E4A78_val == 4) {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_QuadraKill;
            if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Four_R", -1);
            }
            else {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Four_L", -1);
            }
            lv_animName = "ShowTimedNotification_Tier3";
            lv_titleText = StringExternal("Param/Value/lib_Game_4AEEDB15");
            lv_duration = libGame_gv_announcement_KillAnnouncementDuration_C;
            libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer(lp_killingTeamPlayer, StringExternal("Param/Value/lib_Game_F83644E7"), StringExternal("Param/Value/lib_Game_7CC15B43"));
        }
        else if (auto869E4A78_val == 5) {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_PentaKill;
            if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Penta_R", -1);
            }
            else {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_Penta_L", -1);
            }
            lv_animName = "ShowTimedNotification_Tier4";
            lv_titleText = StringExternal("Param/Value/lib_Game_21ABA061");
            lv_duration = libGame_gv_announcement_LongAnnouncementDuration_C;
            libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer(lp_killingTeamPlayer, StringExternal("Param/Value/lib_Game_14443980"), StringExternal("Param/Value/lib_Game_678E76AB"));
        }
        else {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_EnemyKilledParticipants;
            if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_EnemySlain_R", -1);
            }
            else {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_EnemySlain_L", -1);
            }
            lv_animName = "ShowStandardNotification";
            lv_titleText = StringExternal("Param/Value/lib_Game_FC51EB82");
            lv_duration = libGame_gv_announcement_KillAnnouncementDuration_C;
            libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer(lp_killingTeamPlayer, StringExternal("Param/Value/lib_Game_4EDC2964"), StringExternal("Param/Value/lib_Game_A83B9DD0"));
        }
    }
    else {
        if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
            lv_deathStingerSound = SoundLink("Gen_Hero_Death_EnemySlain_Offscreen_R", -1);
        }
        else {
            lv_deathStingerSound = SoundLink("Gen_Hero_Death_EnemySlain_Offscreen_L", -1);
        }
    }
    libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer(lv_deathStingerSound, libGame_ge_HeroDeathKillStingerQueueType_Enemy, lp_killingTeamPlayer);
    if ((libGame_gv_firstBloodAvailable == true)) {
        lv_vOEvent = libCore_ge_AnnouncerVOEvents_AllyFirstBlood;
        lv_titleText = StringExternal("Param/Value/lib_Game_3AA52D1D");
    }
    else {
    }
    if ((lp_playerWasInvolvedInKill == true)) {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_killingTeamPlayer], libGame_ge_AnnouncementPriorities_Critical, lv_vOEvent, lv_animName, lv_titleText, UnitTypeGetName(UnitGetType(lp_deadHero)), null, null, lv_duration, true);
    }
    else {
    }
}

void libGame_gf_HeroDeathHeroKilledAnnouncementToObserver (int lp_deadPlayer, unit lp_deadHero) {
    // Variable Declarations
    int lv_killingTeam;
    text lv_killMessage;
    int lv_vOEvent;

    // Variable Initialization

    // Implementation
    lv_killingTeam = libGame_gf_EnemyTeamNumberOfPlayer(lp_deadPlayer);
    if ((lv_killingTeam == 1)) {
        lv_killMessage = StringExternal("Param/Value/lib_Game_95A823E0");
    }
    else {
        lv_killMessage = StringExternal("Param/Value/lib_Game_DBC9E655");
    }
    if ((libGame_gv_firstBloodAvailable == true)) {
        if ((lv_killingTeam == 1)) {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_BlueTeamFirstBlood;
        }
        else {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_RedTeamFirstBlood;
        }
    }
    else {
        lv_vOEvent = libCore_ge_AnnouncerVOEvents_HeroKilledObserver;
    }
    if ((lv_killingTeam == 1)) {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Critical, lv_vOEvent, "ShowStandardNotification", lv_killMessage, UnitTypeGetName(UnitGetType(lp_deadHero)), null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
    else {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Critical, lv_vOEvent, "ShowEnemyNotification", lv_killMessage, UnitTypeGetName(UnitGetType(lp_deadHero)), null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
}

void libGame_gf_HeroDeathHeroDiedAnnouncementToAlliedPlayerGroup (int lp_deadPlayer, unit lp_deadHero, playergroup lp_alliedPlayerGroup) {
    unitgroup auto6AD73EDD_g;
    int auto6AD73EDD_u;
    playergroup auto400955E7_g;
    int auto400955E7_p;

    // Variable Declarations
    unit lv_itUnit;
    int lv_itPlayer;
    int lv_teamOfDeadPlayer;
    bool[libCore_gv_bALMaxPlayers + 1] lv_playerIsNearDeadPlayer;
    unitgroup lv_nearbyUnits;
    int lv_heroPlayer;
    soundlink lv_deathStingerSound;

    // Variable Initialization
    lv_nearbyUnits = UnitGroupEmpty();
    lv_deathStingerSound = SoundLink("EditorDefaultSound", -1);

    // Implementation
    lv_teamOfDeadPlayer = libGame_gf_TeamNumberOfPlayer(lp_deadPlayer);
    lv_nearbyUnits = UnitGroupSearch(null, lp_deadPlayer, UnitGetPosition(lp_deadHero), libCore_gv_bALHeroKillXPRadius, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6AD73EDD_g = lv_nearbyUnits;
    auto6AD73EDD_u = 1;
    for ( ; auto6AD73EDD_u <= UnitGroupCount(auto6AD73EDD_g, c_unitCountAll) ; auto6AD73EDD_u += BoolToInt(lv_itUnit == UnitGroupUnit(auto6AD73EDD_g, auto6AD73EDD_u)) ) {
        lv_itUnit = UnitGroupUnit(auto6AD73EDD_g, auto6AD73EDD_u);
        lv_heroPlayer = UnitGetOwner(lv_itUnit);
        if (((lv_itUnit == lp_deadHero) || (lv_itUnit == libGame_gv_players[lv_heroPlayer].lv_activeVehicle))) {
            lv_playerIsNearDeadPlayer[lv_heroPlayer] = true;
            continue;
        }
        else {
        }
        if ((UnitHasBehavior2(lv_itUnit, "EarnsXP") == true)) {
            lv_heroPlayer = UnitBehaviorEffectPlayer(lv_itUnit, "EarnsXP", c_effectPlayerOrigin, 0);
            if ((lv_heroPlayer <= libCore_gv_bALMaxPlayers)) {
                lv_playerIsNearDeadPlayer[lv_heroPlayer] = true;
                continue;
            }
            else {
            }
        }
        else {
        }
    }
    auto400955E7_g = lp_alliedPlayerGroup; 
    auto400955E7_p = 1;
    for ( ; auto400955E7_p <= PlayerGroupCount(auto400955E7_g) ; auto400955E7_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto400955E7_g, auto400955E7_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto400955E7_g, auto400955E7_p);
        if ((lv_itPlayer > libCore_gv_bALMaxPlayers)) {
            continue;
        }
        else {
        }
        if ((lv_playerIsNearDeadPlayer[lv_itPlayer] == true)) {
            if ((lv_teamOfDeadPlayer == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_AllySlain_L", -1);
            }
            else {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_AllySlain_R", -1);
            }
        }
        else {
            if ((lv_teamOfDeadPlayer == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_AllySlain_Offscreen_L", -1);
            }
            else {
                lv_deathStingerSound = SoundLink("Gen_Hero_Death_AllySlain_Offscreen_R", -1);
            }
        }
        libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer(lv_deathStingerSound, libGame_ge_HeroDeathKillStingerQueueType_Ally, lv_itPlayer);
    }
}

void libGame_gf_HeroDeathYouHaveDiedAnnouncementToDeadPlayer (int lp_deadPlayer) {
    // Implementation
    if ((libGame_gv_players[lp_deadPlayer].lv_killingSpreeCount >= libCore_gv_killingSpree_KillThresholdBase_C)) {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libGame_ge_AnnouncementPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeEndYou, "ShowEnemyNotification", StringExternal("Param/Value/lib_Game_DC86A45D"), null, null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
    else {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libGame_ge_AnnouncementPriorities_Critical, libCore_ge_AnnouncerVOEvents_YouHaveBeenKilled, "ShowEnemyNotification", StringExternal("Param/Value/lib_Game_A4657A6A"), null, null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
    libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer(SoundLink("Gen_Hero_Death_Self", -1), libGame_ge_HeroDeathKillStingerQueueType_Ally, lp_deadPlayer);
}

void libGame_gf_HeroDeathHeroHasDiedAnnouncementToDeadPlayer (int lp_deadPlayer, unit lp_deadHero) {
    // Variable Declarations
    text lv_heroDiedText;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_players[lp_deadPlayer].lv_killingSpreeCount >= libCore_gv_killingSpree_KillThresholdBase_C)) {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libGame_ge_AnnouncementPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeEndYou, "ShowEnemyNotification", StringExternal("Param/Value/lib_Game_DD74EA80"), null, null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_Game_4F04F9C4", "A", UnitTypeGetName(UnitGetType(lp_deadHero)));
        lv_heroDiedText = TextExpressionAssemble("Param/Expression/lib_Game_4F04F9C4");
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libGame_ge_AnnouncementPriorities_Critical, libCore_ge_AnnouncerVOEvents_YouHaveBeenKilled, "ShowEnemyNotification", lv_heroDiedText, null, null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
    libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer(SoundLink("Gen_Hero_Death_Self", -1), libGame_ge_HeroDeathKillStingerQueueType_Ally, lp_deadPlayer);
}

void libGame_gf_HeroDeathCheckForKillingSpree (int lp_killingPlayer) {
    // Variable Declarations
    int lv_killingSpreeCount;
    playergroup lv_announcementGroup;

    // Variable Initialization
    lv_announcementGroup = PlayerGroupEmpty();

    // Implementation
    lv_killingSpreeCount = libGame_gv_players[lp_killingPlayer].lv_killingSpreeCount;
    lv_announcementGroup = PlayerGroupCopy(libCore_gv_playerGroupFromPlayer[lp_killingPlayer]);
    if ((lv_killingSpreeCount == libCore_gv_killingSpree_KillThresholdBase_C)) {
        libGame_gv_heroDeathKillStreakRegistered[lp_killingPlayer][1] = true;
        return ;
    }
    else {
    }
    if ((lv_killingSpreeCount == libCore_gv_killingSpree_KillThresholdUpgrade1_C)) {
        libGame_gv_heroDeathKillStreakRegistered[lp_killingPlayer][2] = true;
        return ;
    }
    else {
    }
    if ((lv_killingSpreeCount == libCore_gv_killingSpree_KillThresholdUpgrade2_C)) {
        libGame_gv_heroDeathKillStreakRegistered[lp_killingPlayer][3] = true;
        return ;
    }
    else {
    }
    if ((lv_killingSpreeCount == libCore_gv_killingSpree_KillThresholdUpgrade3_C)) {
        libGame_gv_heroDeathKillStreakRegistered[lp_killingPlayer][4] = true;
        return ;
    }
    else {
    }
}

void libGame_gf_HeroDeathDispatchKillingSpreeAnnouncement (int lp_player) {
    int auto6D92A7AF_ae;
    int auto6D92A7AF_ai;
    int autoBF1FB7C4_val;

    // Variable Declarations
    int lv_itThreshold;
    int lv_registeredThreshold;

    // Variable Initialization

    // Implementation
    auto6D92A7AF_ae = libCore_gv_killingSpree_KillThresholdCount_C;
    auto6D92A7AF_ai = 1;
    lv_itThreshold = 1;
    for ( ; ( (auto6D92A7AF_ai >= 0 && lv_itThreshold <= auto6D92A7AF_ae) || (auto6D92A7AF_ai <= 0 && lv_itThreshold >= auto6D92A7AF_ae) ) ; lv_itThreshold += auto6D92A7AF_ai ) {
        if ((libGame_gv_heroDeathKillStreakRegistered[lp_player][lv_itThreshold] == true)) {
            libGame_gv_heroDeathKillStreakRegistered[lp_player][lv_itThreshold] = false;
            lv_registeredThreshold = lv_itThreshold;
            break;
        }
        else {
        }
    }
    autoBF1FB7C4_val = lv_registeredThreshold;
    if (autoBF1FB7C4_val == 1) {
        TextExpressionSetToken("Param/Expression/lib_Game_8825A2A0", "A", IntToText(libCore_gv_killingSpree_KillThresholdBase_C));
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_player], libGame_ge_AnnouncementPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeStart, "ShowStandardNotification", StringExternal("Param/Value/lib_Game_3A39FC5B"), TextExpressionAssemble("Param/Expression/lib_Game_8825A2A0"), StringToText(""), null, libGame_gv_announcement_LongAnnouncementDuration_C, false);
    }
    else if (autoBF1FB7C4_val == 2) {
        TextExpressionSetToken("Param/Expression/lib_Game_6CE64AC3", "A", IntToText(libCore_gv_killingSpree_KillThresholdUpgrade1_C));
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_player], libGame_ge_AnnouncementPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade1Mayhem, "ShowStandardNotification", StringExternal("Param/Value/lib_Game_2D25E4DC"), TextExpressionAssemble("Param/Expression/lib_Game_6CE64AC3"), StringToText(""), null, libGame_gv_announcement_LongAnnouncementDuration_C, false);
    }
    else if (autoBF1FB7C4_val == 3) {
        TextExpressionSetToken("Param/Expression/lib_Game_CC140864", "A", IntToText(libCore_gv_killingSpree_KillThresholdUpgrade2_C));
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_player], libGame_ge_AnnouncementPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade2Untouchable, "ShowStandardNotification", StringExternal("Param/Value/lib_Game_769C1CA0"), TextExpressionAssemble("Param/Expression/lib_Game_CC140864"), StringToText(""), null, libGame_gv_announcement_LongAnnouncementDuration_C, false);
    }
    else if (autoBF1FB7C4_val == 4) {
        TextExpressionSetToken("Param/Expression/lib_Game_162AE324", "A", IntToText(libCore_gv_killingSpree_KillThresholdUpgrade3_C));
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_player], libGame_ge_AnnouncementPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade3HeroOfTheStorm, "ShowStandardNotification", StringExternal("Param/Value/lib_Game_3D367900"), TextExpressionAssemble("Param/Expression/lib_Game_162AE324"), StringToText(""), null, libGame_gv_announcement_LongAnnouncementDuration_C, false);
    }
    else {
    }
}

void libGame_gf_HeroDeathStartMultikillTimerForPlayer (int lp_player) {
    // Implementation
    TimerStart(libGame_gv_players[lp_player].lv_multikillTimer, libGame_gv_heroDeathMultikillTimeoutDuration, false, c_timeGame);
    TriggerEnable(libGame_gt_HeroDeathUpdateMultikillTimerUI, true);
}

void libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer (soundlink lp_sound, int lp_queueType, int lp_player) {
    // Variable Declarations
    int lv_queueTypeInt;
    int lv_currentQueueCount;
    int lv_nextPlayIndex;
    int lv_insertIndex;

    // Variable Initialization

    // Implementation
    lv_queueTypeInt = (lp_queueType);
    lv_currentQueueCount = libGame_gv_heroDeathKillStingerQueue[lp_player].lv_numberOfItemsInQueue[lv_queueTypeInt];
    lv_nextPlayIndex = libGame_gv_heroDeathKillStingerQueue[lp_player].lv_nextPlayIndex[lv_queueTypeInt];
    if ((lv_currentQueueCount >= libCore_gv_bALMaxPlayersOnATeam)) {
        return ;
    }
    else {
    }
    lv_insertIndex = (lv_nextPlayIndex + lv_currentQueueCount);
    if ((lv_insertIndex > libCore_gv_bALMaxPlayersOnATeam)) {
        lv_insertIndex -= libCore_gv_bALMaxPlayersOnATeam;
    }
    else {
    }
    libGame_gv_heroDeathKillStingerQueue[lp_player].lv_soundQueue[lv_queueTypeInt][lv_insertIndex] = lp_sound;
    libGame_gv_heroDeathKillStingerQueue[lp_player].lv_numberOfItemsInQueue[lv_queueTypeInt] += 1;
    if ((TimerGetRemaining(libGame_gv_heroDeathKillStingerQueue[lp_player].lv_killStingerTimer[lv_queueTypeInt]) <= 0.0)) {
        libGame_gf_HeroDeathPlayNextSoundInQueueForPlayer(lp_queueType, lp_player);
    }
    else {
    }
}

void libGame_gf_HeroDeathPlayNextSoundInQueueForPlayer (int lp_queueType, int lp_player) {
    // Variable Declarations
    int lv_queueTypeInt;
    int lv_nextPlayIndex;

    // Variable Initialization

    // Implementation
    lv_queueTypeInt = (lp_queueType);
    if ((libGame_gv_heroDeathKillStingerQueue[lp_player].lv_numberOfItemsInQueue[lv_queueTypeInt] <= 0)) {
        return ;
    }
    else {
    }
    lv_nextPlayIndex = libGame_gv_heroDeathKillStingerQueue[lp_player].lv_nextPlayIndex[lv_queueTypeInt];
    SoundPlayForPlayer(libGame_gv_heroDeathKillStingerQueue[lp_player].lv_soundQueue[lv_queueTypeInt][lv_nextPlayIndex], lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
    libGame_gv_heroDeathKillStingerQueue[lp_player].lv_numberOfItemsInQueue[lv_queueTypeInt] -= 1;
    lv_nextPlayIndex += 1;
    if ((lv_nextPlayIndex > libCore_gv_bALMaxPlayersOnATeam)) {
        lv_nextPlayIndex = 1;
    }
    else {
    }
    libGame_gv_heroDeathKillStingerQueue[lp_player].lv_nextPlayIndex[lv_queueTypeInt] = lv_nextPlayIndex;
    TimerStart(libGame_gv_heroDeathKillStingerQueue[lp_player].lv_killStingerTimer[lv_queueTypeInt], libGame_gv_heroDeathKillStingerQueueTimerDuration, false, c_timeGame);
}

bool libGame_gf_HeroSelectionIsHeroSelectedForAnyPlayer (int lp_heroIndex) {
    int auto7065EDD6_ae;
    int auto7065EDD6_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    auto7065EDD6_ae = libCore_gv_bALMaxPlayers;
    auto7065EDD6_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto7065EDD6_ai >= 0 && lv_itPlayer <= auto7065EDD6_ae) || (auto7065EDD6_ai <= 0 && lv_itPlayer >= auto7065EDD6_ae) ) ; lv_itPlayer += auto7065EDD6_ai ) {
        if ((libGame_gv_players[lv_itPlayer].lv_heroIndex == lp_heroIndex)) {
            return true;
        }
        else {
        }
    }
    return false;
}

bool libGame_gf_HeroSelectionIsHeroSelectedForPlayersTeam (int lp_heroIndex, int lp_player) {
    playergroup auto7E1B80E2_g;
    int auto7E1B80E2_p;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto7E1B80E2_g = libGame_gf_AlliedPlayerGroupOfPlayer(lp_player); 
    auto7E1B80E2_p = 1;
    for ( ; auto7E1B80E2_p <= PlayerGroupCount(auto7E1B80E2_g) ; auto7E1B80E2_p += BoolToInt(lv_i == PlayerGroupPlayer(auto7E1B80E2_g, auto7E1B80E2_p)) ) {
        lv_i = PlayerGroupPlayer(auto7E1B80E2_g, auto7E1B80E2_p);
        if ((lv_i != libCore_gv_cOMPUTER_TeamOrder) && (lv_i != libCore_gv_cOMPUTER_TeamChaos) && (libGame_gv_players[lv_i].lv_heroIndex == lp_heroIndex)) {
            return true;
        }
        else {
        }
    }
    return false;
}

int libGame_gf_HeroSelectionRandomlyPickAnyUnusedHero (int lp_choosingPlayer, bool lp_allowAnyTier, bool lp_ignoreCheck) {
    int init_i;

    int autoDC75D56D_ae;
    int autoDC75D56D_ai;

    // Variable Declarations
    int lv_itHeroIndex;
    int lv_numUnused;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_unusedHeroes;

    // Variable Initialization
    for (init_i = 0; init_i <= libCore_gv_dataHeroesMaxHeroCount; init_i += 1) {
        lv_unusedHeroes[init_i] = 1;
    }

    // Implementation
    autoDC75D56D_ae = libCore_gv_dataHeroesNumberOfHeroes;
    autoDC75D56D_ai = 1;
    lv_itHeroIndex = 1;
    for ( ; ( (autoDC75D56D_ai >= 0 && lv_itHeroIndex <= autoDC75D56D_ae) || (autoDC75D56D_ai <= 0 && lv_itHeroIndex >= autoDC75D56D_ae) ) ; lv_itHeroIndex += autoDC75D56D_ai ) {
        if ((libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_unitType != null) && (libGame_gf_HeroSelectionIsHeroSelectedForPlayersTeam(lv_itHeroIndex, lp_choosingPlayer) == false) && (libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_dEBUGPlayable == true) && ((lp_ignoreCheck == true) || (libCore_gf_MetagameDoesPlayerHaveAccessToHero(lp_choosingPlayer, lv_itHeroIndex) == true)) && ((PlayerType(lp_choosingPlayer) != c_playerTypeComputer) || (libAIAI_gf_HeroAIAIDifficultyLevelShouldUseHero(lp_choosingPlayer, lv_itHeroIndex, lp_allowAnyTier) == true))) {
            lv_numUnused += 1;
            lv_unusedHeroes[lv_numUnused] = lv_itHeroIndex;
        }
        else {
        }
    }
    if ((lv_numUnused == 0)) {
        return 0;
    }
    else {
    }
    return lv_unusedHeroes[RandomInt(1, lv_numUnused)];
}

int libGame_gf_HeroSelectionRandomlyPickUnusedHeroFromClass (int lp_choosingPlayer, int lp_class) {
    int init_i;

    int auto4D57C25B_ae;
    int auto4D57C25B_ai;

    // Variable Declarations
    int lv_itHeroIndex;
    int lv_numUnused;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_unusedHeroes;

    // Variable Initialization
    for (init_i = 0; init_i <= libCore_gv_dataHeroesMaxHeroCount; init_i += 1) {
        lv_unusedHeroes[init_i] = 1;
    }

    // Implementation
    auto4D57C25B_ae = libCore_gv_dataHeroesNumberOfHeroes;
    auto4D57C25B_ai = 1;
    lv_itHeroIndex = 1;
    for ( ; ( (auto4D57C25B_ai >= 0 && lv_itHeroIndex <= auto4D57C25B_ae) || (auto4D57C25B_ai <= 0 && lv_itHeroIndex >= auto4D57C25B_ae) ) ; lv_itHeroIndex += auto4D57C25B_ai ) {
        if ((libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_unitType != null) && (libGame_gf_HeroSelectionIsHeroSelectedForPlayersTeam(lv_itHeroIndex, lp_choosingPlayer) == false) && (libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_dEBUGPlayable == true) && ((PlayerType(lp_choosingPlayer) != c_playerTypeComputer) || (libAIAI_gf_HeroAIAIDifficultyLevelShouldUseHero(lp_choosingPlayer, lv_itHeroIndex, false) == true)) && (libCore_gf_MetagameDoesPlayerHaveAccessToHero(lp_choosingPlayer, lv_itHeroIndex) == true) && (libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_class == lp_class)) {
            lv_numUnused += 1;
            lv_unusedHeroes[lv_numUnused] = lv_itHeroIndex;
        }
        else {
        }
    }
    if ((lv_numUnused == 0)) {
        return 0;
    }
    else {
    }
    return lv_unusedHeroes[RandomInt(1, lv_numUnused)];
}

int libGame_gf_HeroSelectionRandomlyPickUnusedHeroWithFilter (int lp_choosingPlayer, bool lp_allowMelee, bool lp_allowTank, bool lp_allowDamage, bool lp_allowSupport, bool lp_allowSiege) {
    int init_i;

    int auto6771DB47_ae;
    int auto6771DB47_ai;

    // Variable Declarations
    int lv_itHeroIndex;
    int lv_numUnused;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_unusedHeroes;

    // Variable Initialization
    for (init_i = 0; init_i <= libCore_gv_dataHeroesMaxHeroCount; init_i += 1) {
        lv_unusedHeroes[init_i] = 1;
    }

    // Implementation
    auto6771DB47_ae = libCore_gv_dataHeroesNumberOfHeroes;
    auto6771DB47_ai = 1;
    lv_itHeroIndex = 1;
    for ( ; ( (auto6771DB47_ai >= 0 && lv_itHeroIndex <= auto6771DB47_ae) || (auto6771DB47_ai <= 0 && lv_itHeroIndex >= auto6771DB47_ae) ) ; lv_itHeroIndex += auto6771DB47_ai ) {
        if ((libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_unitType != null) && (libGame_gf_HeroSelectionIsHeroSelectedForPlayersTeam(lv_itHeroIndex, lp_choosingPlayer) == false) && (libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_dEBUGPlayable == true) && ((PlayerType(lp_choosingPlayer) != c_playerTypeComputer) || (libAIAI_gf_HeroAIAIDifficultyLevelShouldUseHero(lp_choosingPlayer, lv_itHeroIndex, false) == true)) && (libCore_gf_MetagameDoesPlayerHaveAccessToHero(lp_choosingPlayer, lv_itHeroIndex) == true) && ((libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_isMelee == false) || (lp_allowMelee == true)) && ((libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_class != c_heroRoleWarrior) || (lp_allowTank == true)) && ((libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_class != c_heroRoleDamage) || (lp_allowDamage == true)) && ((libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_class != c_heroRoleSupport) || (lp_allowSupport == true)) && ((libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_class != c_heroRoleSpecialist) || (lp_allowSiege == true))) {
            lv_numUnused += 1;
            lv_unusedHeroes[lv_numUnused] = lv_itHeroIndex;
        }
        else {
        }
    }
    if ((lv_numUnused == 0)) {
        return 0;
    }
    else {
    }
    return lv_unusedHeroes[RandomInt(1, lv_numUnused)];
}

int libGame_gf_HeroSelectionRandomlyPickComplementaryUnusedHero (int lp_choosingPlayer) {
    int auto16ED23D9_ae;
    int auto16ED23D9_ai;

    // Variable Declarations
    int lv_player;
    int[libCore_gv_dataHeroesNumberOfHeroClasses + 1] lv_classCount;
    int lv_meleeHeroCount;
    bool lv_allowMelee;
    bool lv_allowTank;
    bool lv_allowDamage;
    bool lv_allowSupport;
    bool lv_allowSiege;

    // Variable Initialization

    // Implementation
    auto16ED23D9_ae = libCore_gv_bALMaxPlayers;
    auto16ED23D9_ai = 1;
    lv_player = 1;
    for ( ; ( (auto16ED23D9_ai >= 0 && lv_player <= auto16ED23D9_ae) || (auto16ED23D9_ai <= 0 && lv_player >= auto16ED23D9_ae) ) ; lv_player += auto16ED23D9_ai ) {
        if ((PlayerStatus(lv_player) != c_playerStatusUnused) && (libGame_gv_players[lv_player].lv_faction == libGame_gv_players[lp_choosingPlayer].lv_faction) && (libGame_gv_players[lv_player].lv_heroIndex != 0)) {
            if ((libCore_gv_dataHeroesHeroData[libGame_gv_players[lv_player].lv_heroIndex].lv_isMelee == true)) {
                lv_meleeHeroCount += 1;
            }
            else {
            }
            lv_classCount[(libCore_gv_dataHeroesHeroData[libGame_gv_players[lv_player].lv_heroIndex].lv_class)] += 1;
        }
        else {
        }
    }
    if (((lv_classCount[(c_heroRoleWarrior)] == 0) || (lv_classCount[(c_heroRoleDamage)] == 0) || (lv_classCount[(c_heroRoleSupport)] == 0) || (lv_classCount[(c_heroRoleSpecialist)] == 0))) {
        lv_allowTank = (lv_classCount[(c_heroRoleWarrior)] == 0);
        lv_allowDamage = (lv_classCount[(c_heroRoleDamage)] == 0);
        lv_allowSupport = (lv_classCount[(c_heroRoleSupport)] == 0);
        lv_allowSiege = (lv_classCount[(c_heroRoleSpecialist)] == 0);
    }
    else {
        lv_allowTank = true;
        lv_allowDamage = true;
        lv_allowSupport = false;
        lv_allowSiege = true;
    }
    if ((lv_allowTank == true) && (lv_allowDamage == false) && (lv_allowSupport == false) && (lv_allowSiege == false)) {
        lv_allowMelee = true;
    }
    else {
        lv_allowMelee = (lv_meleeHeroCount < 2);
    }
    return libGame_gf_HeroSelectionRandomlyPickUnusedHeroWithFilter(lp_choosingPlayer, lv_allowMelee, lv_allowTank, lv_allowDamage, lv_allowSupport, lv_allowSiege);
}

void libGame_gf_HeroSelectionSetBNetHeroAndSkinSelectionsForAllPlayers () {
    int autoB9931724_ae;
    int autoB9931724_ai;

    // Variable Declarations
    int lv_itPlayer;
    string lv_heroLink;
    int lv_heroIndex;
    string lv_skinLink;
    int lv_skinIndex;

    // Variable Initialization

    // Implementation
    autoB9931724_ae = libCore_gv_bALMaxPlayers;
    autoB9931724_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoB9931724_ai >= 0 && lv_itPlayer <= autoB9931724_ae) || (autoB9931724_ai <= 0 && lv_itPlayer >= autoB9931724_ae) ) ; lv_itPlayer += autoB9931724_ai ) {
        lv_heroLink = PlayerHero(lv_itPlayer);
        if (((lv_heroLink == null) || (lv_heroLink == libCore_gv_heroes_RandomHeroID))) {
            continue;
        }
        else {
        }
        lv_heroIndex = libCore_gf_GetHeroIndexForUnitType((CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "Unit", c_playerAny)));
        if ((GameAreHeroDuplicatesAllowed() == false) && (libGame_gf_HeroSelectionIsHeroSelectedForAnyPlayer(lv_heroIndex) == true)) {
            continue;
        }
        else {
        }
        if ((libCore_gf_MetagameDoesPlayerHaveAccessToHero(lv_itPlayer, lv_heroIndex) == true) && (libGame_gf_HeroSelectionIsHeroSelectedForPlayersTeam(lv_heroIndex, lv_itPlayer) == false)) {
            libGame_gv_players[lv_itPlayer].lv_heroIndex = lv_heroIndex;
            lv_skinLink = PlayerSkin(lv_itPlayer);
            if ((lv_skinLink != null)) {
                lv_skinIndex = libCore_gf_DataSkinsGetSkinIndexFromSkinLink(lv_skinLink);
                if ((libCore_gf_DataSkinsIsSkinValidForHero(lv_heroIndex, lv_skinIndex) == true) && (libCore_gf_MetagameDoesPlayerHaveAccessToSkin(lv_itPlayer, lv_skinIndex) == true)) {
                    libGame_gv_players[lv_itPlayer].lv_selectedSkin = lv_skinIndex;
                }
                else {
                }
            }
            else {
            }
        }
        else {
        }
    }
}

void libGame_gf_HeroSelectionSetBNetMountSelectionsForAllPlayers () {
    int auto56229722_ae;
    int auto56229722_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_heroIndex;
    string lv_mountLink;
    bool lv_defaultFallback;
    int lv_skinIndex;
    int lv_mountIndex;

    // Variable Initialization

    // Implementation
    auto56229722_ae = libCore_gv_bALMaxPlayers;
    auto56229722_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto56229722_ai >= 0 && lv_itPlayer <= auto56229722_ae) || (auto56229722_ai <= 0 && lv_itPlayer >= auto56229722_ae) ) ; lv_itPlayer += auto56229722_ai ) {
        lv_defaultFallback = false;
        lv_heroIndex = libGame_gv_players[lv_itPlayer].lv_heroIndex;
        lv_mountLink = PlayerMount(lv_itPlayer);
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_usesMounts == false)) {
            continue;
        }
        else {
        }
        if ((lv_mountLink != null)) {
            lv_skinIndex = libGame_gv_players[lv_itPlayer].lv_selectedSkin;
            lv_mountIndex = libCore_gf_DataMountGetMountIndexFromMountLink(lv_mountLink);
            if ((libCore_gf_MetagameDoesPlayerHaveAccessToMount(lv_itPlayer, lv_mountIndex) == true) && (libCore_gf_DataMountMountIsValidForHeroSkin(lv_heroIndex, lv_skinIndex, lv_mountIndex) == true)) {
                libGame_gv_players[lv_itPlayer].lv_selectedMount = lv_mountIndex;
            }
            else {
                lv_defaultFallback = true;
            }
        }
        else {
            lv_defaultFallback = true;
        }
        if ((lv_defaultFallback == true)) {
            lv_mountIndex = libCore_gf_DataMountGetMountIndexFromMountLink(libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_defaultMount);
            libGame_gv_players[lv_itPlayer].lv_selectedMount = lv_mountIndex;
        }
        else {
        }
    }
}

void libGame_gf_HeroSelectionComputersRandomlyPickSkinsMounts () {
    int autoD4F61831_ae;
    int autoD4F61831_ai;

    // Variable Declarations
    int lv_itPlayer;
    bool lv_hasPickedRandomAISkinOrder;
    bool lv_hasPickedRandomAIMountOrder;
    bool lv_hasPickedRandomAISkinChaos;
    bool lv_hasPickedRandomAIMountChaos;

    // Variable Initialization

    // Implementation
    autoD4F61831_ae = libCore_gv_bALMaxPlayers;
    autoD4F61831_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoD4F61831_ai >= 0 && lv_itPlayer <= autoD4F61831_ae) || (autoD4F61831_ai <= 0 && lv_itPlayer >= autoD4F61831_ae) ) ; lv_itPlayer += autoD4F61831_ai ) {
        if ((PlayerType(lv_itPlayer) == c_playerTypeComputer) && ((libAIAI_gv_aIHeroes[lv_itPlayer].lv_difficulty == libAIAI_ge_HeroAIDifficulty_HeroAIMedium) || (libAIAI_gv_aIHeroes[lv_itPlayer].lv_difficulty == libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard) || (libAIAI_gv_aIHeroes[lv_itPlayer].lv_difficulty == libAIAI_ge_HeroAIDifficulty_HeroAIElite))) {
            if ((libGame_gv_players[lv_itPlayer].lv_faction == libGame_ge_Faction_Order)) {
                if ((lv_hasPickedRandomAISkinOrder == false)) {
                    libGame_gf_HeroSelectionRandomlyPickSkin(lv_itPlayer);
                    lv_hasPickedRandomAISkinOrder = true;
                }
                else {
                    if ((lv_hasPickedRandomAIMountOrder == false)) {
                        libGame_gf_HeroSelectionRandomlyPickMount(lv_itPlayer);
                        lv_hasPickedRandomAIMountOrder = true;
                    }
                    else {
                    }
                }
            }
            else {
                if ((lv_hasPickedRandomAISkinChaos == false)) {
                    libGame_gf_HeroSelectionRandomlyPickSkin(lv_itPlayer);
                    lv_hasPickedRandomAISkinChaos = true;
                }
                else {
                    if ((lv_hasPickedRandomAIMountChaos == false)) {
                        libGame_gf_HeroSelectionRandomlyPickMount(lv_itPlayer);
                        lv_hasPickedRandomAIMountChaos = true;
                    }
                    else {
                    }
                }
            }
        }
        else {
        }
    }
}

void libGame_gf_HeroSelectionRandomlyPickSkin (int lp_choosingPlayer) {
    // Variable Declarations
    int lv_randomChoice;
    string lv_skinLink;

    // Variable Initialization

    // Implementation
    if ((libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_choosingPlayer].lv_heroIndex].lv_skinCount < 2)) {
        return ;
    }
    else {
    }
    lv_randomChoice = RandomInt(2, libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_choosingPlayer].lv_heroIndex].lv_skinCount);
    lv_skinLink = libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_choosingPlayer].lv_heroIndex].lv_skinArray[lv_randomChoice];
    libGame_gv_players[lp_choosingPlayer].lv_selectedSkin = libCore_gf_DataSkinsGetSkinIndexFromSkinLink(lv_skinLink);
}

void libGame_gf_HeroSelectionRandomlyPickMount (int lp_choosingPlayer) {
    int auto607CAE34_ae;
    int auto607CAE34_ai;

    // Variable Declarations
    int lv_itMount;
    int lv_heroIndex;
    int lv_skinIndex;
    int lv_allowedMountCount;
    int[libCore_gv_dataMountsMaxMountCount + 1] lv_allowedMounts;
    int lv_randomChoiceIndex;

    // Variable Initialization

    // Implementation
    if (((libCore_gv_dataMountsMountCount < 2) || (libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_choosingPlayer].lv_heroIndex].lv_usesMounts == false))) {
        return ;
    }
    else {
    }
    lv_heroIndex = libGame_gv_players[lp_choosingPlayer].lv_heroIndex;
    lv_skinIndex = libGame_gv_players[lp_choosingPlayer].lv_selectedSkin;
    auto607CAE34_ae = libCore_gv_dataMountsMountCount;
    auto607CAE34_ai = 1;
    lv_itMount = 1;
    for ( ; ( (auto607CAE34_ai >= 0 && lv_itMount <= auto607CAE34_ae) || (auto607CAE34_ai <= 0 && lv_itMount >= auto607CAE34_ae) ) ; lv_itMount += auto607CAE34_ai ) {
        if ((libCore_gf_DataMountMountIsValidForHeroSkin(lv_heroIndex, lv_skinIndex, lv_itMount) == true)) {
            lv_allowedMountCount += 1;
            lv_allowedMounts[lv_allowedMountCount] = lv_itMount;
        }
        else {
        }
    }
    lv_randomChoiceIndex = RandomInt(1, lv_allowedMountCount);
    libGame_gv_players[lp_choosingPlayer].lv_selectedMount = lv_allowedMounts[lv_randomChoiceIndex];
}

void libGame_gf_CalculateClosestLaneDataForLane (point lp_testPoint, int lp_curLane) {
    // Variable Declarations

    // Variable Initialization

    // Implementation
    AILaneWaypointCalcClosestDataForLane(lp_curLane, lp_testPoint);
    libGame_gv_closestLaneData.lv_laneData[lp_curLane].lv_closestIndex = AILaneWaypointGetCalcDataClosestWaypointIndex();
    libGame_gv_closestLaneData.lv_laneData[lp_curLane].lv_secondaryIndex = AILaneWaypointGetCalcDataSecondWaypointIndex();
    libGame_gv_closestLaneData.lv_laneData[lp_curLane].lv_closestPoint = AILaneWaypointGetCalcDataClosestPoint();
    libGame_gv_closestLaneData.lv_laneData[lp_curLane].lv_closestDist = AILaneWaypointGetCalcDataClosestDist();
}

void libGame_gf_CalculateClosestLaneData (point lp_testPoint) {
    int auto0EE20048_ae;
    int auto0EE20048_ai;

    // Variable Declarations
    int lv_curLane;
    int lv_curWaypointIndex;
    point lv_curWaypoint;
    fixed lv_curDist;
    fixed lv_tempBestDistance;
    point lv_tempClosestPoint;
    int lv_closestIndex;
    point lv_closestWaypoint;
    int lv_secondaryIndex;
    point lv_secondaryWaypoint;
    point lv_closestPoint;
    fixed lv_finalBestDistanceAnyLane;
    fixed lv_finalBestDistanceMinionLane;

    // Variable Initialization

    // Implementation
    lv_finalBestDistanceAnyLane = 524287.0;
    lv_finalBestDistanceMinionLane = 524287.0;
    libGame_gv_closestLaneData.lv_closestLane = 0;
    libGame_gv_closestLaneData.lv_closestMinionLane = 0;
    auto0EE20048_ae = libGame_gv_laneCount;
    auto0EE20048_ai = 1;
    lv_curLane = 1;
    for ( ; ( (auto0EE20048_ai >= 0 && lv_curLane <= auto0EE20048_ae) || (auto0EE20048_ai <= 0 && lv_curLane >= auto0EE20048_ae) ) ; lv_curLane += auto0EE20048_ai ) {
        libGame_gf_CalculateClosestLaneDataForLane(lp_testPoint, lv_curLane);
        if ((libGame_gv_closestLaneData.lv_laneData[lv_curLane].lv_closestDist < lv_finalBestDistanceAnyLane)) {
            libGame_gv_closestLaneData.lv_closestLane = lv_curLane;
            lv_finalBestDistanceAnyLane = libGame_gv_closestLaneData.lv_laneData[lv_curLane].lv_closestDist;
        }
        else {
        }
        if ((libGame_gv_laneData[lv_curLane].lv_minionSpawningEnabled == true) && (libGame_gv_closestLaneData.lv_laneData[lv_curLane].lv_closestDist < lv_finalBestDistanceMinionLane)) {
            libGame_gv_closestLaneData.lv_closestMinionLane = lv_curLane;
            lv_finalBestDistanceMinionLane = libGame_gv_closestLaneData.lv_laneData[lv_curLane].lv_closestDist;
        }
        else {
        }
    }
}

void libGame_gf_SetStormMapLighting (string lp_lighting, playergroup lp_players, fixed lp_blendtime) {
    playergroup auto5C10B9E8_g;
    int auto5C10B9E8_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    auto5C10B9E8_g = lp_players; 
    auto5C10B9E8_p = 1;
    for ( ; auto5C10B9E8_p <= PlayerGroupCount(auto5C10B9E8_g) ; auto5C10B9E8_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto5C10B9E8_g, auto5C10B9E8_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto5C10B9E8_g, auto5C10B9E8_p);
        if (((lv_itPlayer == libCore_gv_oBSERVER_ObserverUIPlayer) || ((lv_itPlayer >= 1) && (lv_itPlayer <= libCore_gv_bALMaxPlayers)))) {
            if ((lp_lighting == libGame_gv_stormMapLightingCurrent[lv_itPlayer])) {
                continue;
            }
            else {
            }
            libGame_gv_stormMapLightingCurrent[lv_itPlayer] = lp_lighting;
            PlayerSetLighting(lv_itPlayer, lp_lighting, lp_blendtime);
        }
        else {
        }
    }
}

void libGame_gf_UpdateStormMapLighting (playergroup lp_players, fixed lp_blendtime) {
    playergroup autoB63EDD43_g;
    int autoB63EDD43_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    autoB63EDD43_g = lp_players; 
    autoB63EDD43_p = 1;
    for ( ; autoB63EDD43_p <= PlayerGroupCount(autoB63EDD43_g) ; autoB63EDD43_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(autoB63EDD43_g, autoB63EDD43_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoB63EDD43_g, autoB63EDD43_p);
        if (((lv_itPlayer == libCore_gv_oBSERVER_ObserverUIPlayer) || ((lv_itPlayer >= 1) && (lv_itPlayer <= libCore_gv_bALMaxPlayers)))) {
            if ((libGame_gv_stormMapLightingSpecial[lv_itPlayer] != null)) {
                libGame_gf_SetStormMapLighting(libGame_gv_stormMapLightingSpecial[lv_itPlayer], PlayerGroupSingle(lv_itPlayer), lp_blendtime);
            }
            else {
                libGame_gf_SetStormMapLighting(libCore_gv_mAPMapLight, PlayerGroupSingle(lv_itPlayer), lp_blendtime);
            }
        }
        else {
        }
    }
}

void libGame_gf_SpecialLightingEventStart (string lp_lighting, playergroup lp_players, fixed lp_blendtime) {
    playergroup autoA44B11C0_g;
    int autoA44B11C0_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    autoA44B11C0_g = lp_players; 
    autoA44B11C0_p = 1;
    for ( ; autoA44B11C0_p <= PlayerGroupCount(autoA44B11C0_g) ; autoA44B11C0_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(autoA44B11C0_g, autoA44B11C0_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoA44B11C0_g, autoA44B11C0_p);
        if (((lv_itPlayer == libCore_gv_oBSERVER_ObserverUIPlayer) || ((lv_itPlayer >= 1) && (lv_itPlayer <= libCore_gv_bALMaxPlayers)))) {
            libGame_gv_stormMapLightingSpecial[lv_itPlayer] = lp_lighting;
            libGame_gf_UpdateStormMapLighting(PlayerGroupSingle(lv_itPlayer), lp_blendtime);
        }
        else {
        }
    }
}

void libGame_gf_SpecialLightingEventEnd (string lp_lighting, playergroup lp_players, fixed lp_blendtime) {
    playergroup auto08F890C8_g;
    int auto08F890C8_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    auto08F890C8_g = lp_players; 
    auto08F890C8_p = 1;
    for ( ; auto08F890C8_p <= PlayerGroupCount(auto08F890C8_g) ; auto08F890C8_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto08F890C8_g, auto08F890C8_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto08F890C8_g, auto08F890C8_p);
        if (((lv_itPlayer == libCore_gv_oBSERVER_ObserverUIPlayer) || ((lv_itPlayer >= 1) && (lv_itPlayer <= libCore_gv_bALMaxPlayers)))) {
            if ((libGame_gv_stormMapLightingSpecial[lv_itPlayer] == null)) {
                continue;
            }
            else {
            }
            if ((libGame_gv_stormMapLightingSpecial[lv_itPlayer] != lp_lighting)) {
                continue;
            }
            else {
            }
            libGame_gv_stormMapLightingSpecial[lv_itPlayer] = null;
            libGame_gf_UpdateStormMapLighting(PlayerGroupSingle(lv_itPlayer), lp_blendtime);
        }
        else {
        }
    }
}

int libGame_gf_MinionDetermineWaveComposition () {
    int autoA54B58EA_ae;
    int autoA54B58EA_ai;

    // Variable Declarations
    int lv_itComp;
    int[libCore_gv_dataMinionWaveCompositionCount + 1] lv_validWaveCompositions;
    int lv_validCompCount;
    int lv_compArrayIndex;

    // Variable Initialization

    // Implementation
    if ((libUIUI_gv_uIDebugPanelForceMinionWaveComp == true)) {
        return libUIUI_gv_uIDebugPanelForcedMinionWaveCompIndex;
    }
    else {
    }
    autoA54B58EA_ae = libCore_gv_dataMinionWaveCompositionCount;
    autoA54B58EA_ai = 1;
    lv_itComp = 1;
    for ( ; ( (autoA54B58EA_ai >= 0 && lv_itComp <= autoA54B58EA_ae) || (autoA54B58EA_ai <= 0 && lv_itComp >= autoA54B58EA_ae) ) ; lv_itComp += autoA54B58EA_ai ) {
        if ((libCore_gv_dataMinionWaveCompositions[lv_itComp].lv_enabled == true)) {
            lv_validCompCount += 1;
            lv_validWaveCompositions[lv_validCompCount] = lv_itComp;
        }
        else {
        }
    }
    lv_compArrayIndex = (ModI((libGame_gv_minionWaveSpawnCounter - 1), lv_validCompCount) + 1);
    return lv_validWaveCompositions[lv_compArrayIndex];
}

bool libGame_gf_MinionSystemStarted () {
    // Implementation
    return libGame_gv_minionSystemStarted;
}

void libGame_gf_MinionEnableDisableWaveCompositionType (bool lp_enableDisable, int lp_compositionType) {
    // Implementation
    if ((lp_enableDisable == true)) {
        libCore_gv_dataMinionWaveCompositions[(lp_compositionType)].lv_enabled = true;
    }
    else {
        libCore_gv_dataMinionWaveCompositions[(lp_compositionType)].lv_enabled = false;
    }
}

void libGame_gf_MinionStartStopMinionSystem (bool lp_startStop) {
    // Implementation
    if ((lp_startStop == true)) {
        if ((libCore_gv_sYSMinionAI == false)) {
            return ;
        }
        else {
        }
        if ((libGame_gv_minionSystemStarted == false)) {
            libGame_gv_minionSystemStarted = true;
            libGame_gv_minionSystemPaused = false;
            libAIAI_gf_MinionAITurnMinionAISystemOnOff(true);
        }
        else {
        }
    }
    else {
        libGame_gv_minionSystemStarted = false;
        libGame_gf_MinionStartStopMinionSpawnCycle(false);
        libAIAI_gf_MinionAITurnMinionAISystemOnOff(false);
    }
}

void libGame_gf_MinionStartStopMinionSpawnCycle (bool lp_startStop) {
    // Implementation
    if ((lp_startStop == true)) {
        TriggerExecute(libGame_gt_MinionSpawnCycle, true, false);
    }
    else {
        TriggerStop(libGame_gt_MinionSpawnCycle);
    }
}

void libGame_gf_MinionPauseUnpauseMinionSystem (bool lp_pauseUnpause) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_minionSystemStarted == true)) {
        if ((lp_pauseUnpause == true)) {
            libGame_gv_minionSystemPaused = true;
            libGame_gv_minionSpawningEnabled = false;
            TimerPause(libGame_gv_scalingTimer, true);
            libAIAI_gf_MinionAIPauseUnpauseMinionAISystem(true);
        }
        else {
            libGame_gv_minionSystemPaused = false;
            libGame_gv_minionSpawningEnabled = true;
            if ((libGame_gv_minionScalingEnabled == true)) {
                TimerPause(libGame_gv_scalingTimer, false);
            }
            else {
            }
            libAIAI_gf_MinionAIPauseUnpauseMinionAISystem(false);
        }
    }
    else {
    }
}

void libGame_gf_MinionSpawnMinion (int lp_lane, int lp_owner, int lp_type, point lp_spawnPoint) {
    // Variable Declarations
    int lv_team;
    int lv_bruiserLevel;
    string lv_spawnUnitType;
    int lv_minionTypeIndex;

    // Variable Initialization

    // Implementation
    if (((libGame_gv_gameOver == true) || (libGame_gv_minionSpawningEnabled == false))) {
        return ;
    }
    else {
    }
    if ((lp_owner == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_team = 1;
    }
    else {
        lv_team = 2;
    }
    lv_bruiserLevel = libGame_gv_laneData[lp_lane].lv_bruiserMinionLevel[lv_team];
    lv_spawnUnitType = libCore_gf_DataMinionUnitTypeFromPreset(lp_type);
    if ((lv_spawnUnitType == null)) {
        return ;
    }
    else {
    }
    if ((lv_bruiserLevel < 3) && ((lp_type == libCore_ge_MinionTypes_Catapult) || (lp_type == libCore_ge_MinionTypes_CustomCatapult1) || (lp_type == libCore_ge_MinionTypes_CustomCatapult2))) {
        return ;
    }
    else {
    }
    libNtve_gf_CreateUnitsAtPoint2(1, lv_spawnUnitType, 0, lp_owner, lp_spawnPoint);
    if ((libGame_gv_minionScalingEnabled == true)) {
        lv_minionTypeIndex = (lp_type);
        libGame_gf_UpdateScalingForUnit(UnitLastCreated(), libGame_gv_scalingTicks, 0, libCore_gv_dataMinionData[lv_minionTypeIndex].lv_xPBuffAmount[libGame_gv_scalingTicks]);
    }
    else {
    }
    libGame_gf_CalculateSpawnedMinionGoalPoints(lp_owner, lp_spawnPoint);
    libAIAI_gf_MinionAIStartMinionAI(UnitLastCreated(), lp_lane, libGame_gv_spawnedMinionFirstWaypointIndex, false, false, 0);
    libGame_gf_SendEventMinionGroupCreated(UnitLastCreatedGroup());
    if ((libMapM_gv_mMRavenTeamStats[libGame_gf_TeamNumberOfPlayer(lp_owner)].lv_cursed == true)) {
        libMapM_gf_MMRavenApplyCurseEffectOnMinion(UnitLastCreated());
    }
    else {
    }
}

trigger auto_libGame_gf_MinionSpawnWave_Trigger = null;
int auto_libGame_gf_MinionSpawnWave_lp_lane;
int auto_libGame_gf_MinionSpawnWave_lp_owner;
int auto_libGame_gf_MinionSpawnWave_lp_composition;

void libGame_gf_MinionSpawnWave (int lp_lane, int lp_owner, int lp_composition) {
    auto_libGame_gf_MinionSpawnWave_lp_lane = lp_lane;
    auto_libGame_gf_MinionSpawnWave_lp_owner = lp_owner;
    auto_libGame_gf_MinionSpawnWave_lp_composition = lp_composition;

    if (auto_libGame_gf_MinionSpawnWave_Trigger == null) {
        auto_libGame_gf_MinionSpawnWave_Trigger = TriggerCreate("auto_libGame_gf_MinionSpawnWave_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_MinionSpawnWave_Trigger, false, false);
}

bool auto_libGame_gf_MinionSpawnWave_TriggerFunc (bool testConds, bool runActions) {
    int lp_lane = auto_libGame_gf_MinionSpawnWave_lp_lane;
    int lp_owner = auto_libGame_gf_MinionSpawnWave_lp_owner;
    int lp_composition = auto_libGame_gf_MinionSpawnWave_lp_composition;

    int autoB77C7225_ae;
    int autoB77C7225_ai;
    int autoEFB6C6D3_ae;
    int autoEFB6C6D3_ai;

    // Variable Declarations
    const fixed lv_offsetChangePerGroup = 1.875;
    int lv_itGroup;
    int lv_itMinion;
    int lv_groupCount;
    point lv_basePoint;
    point lv_offsetPoint;
    fixed lv_currentOffsetAmount;
    point lv_spawnPoint;
    int lv_team;
    int lv_minionType;
    int lv_bruiserLevel;

    // Variable Initialization

    // Implementation
    lv_groupCount = libCore_gv_dataMinionWaveCompositions[lp_composition].lv_numberOfGroups;
    if ((lp_owner == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_basePoint = libGame_gv_laneData[lp_lane].lv_waypoints[2];
        lv_offsetPoint = libGame_gv_laneData[lp_lane].lv_waypoints[3];
        lv_team = 1;
    }
    else {
    }
    lv_currentOffsetAmount = ((lv_groupCount - 1) * lv_offsetChangePerGroup);
    if ((lp_owner == libCore_gv_cOMPUTER_TeamChaos)) {
        lv_basePoint = libGame_gv_laneData[lp_lane].lv_waypoints[(libGame_gv_laneData[lp_lane].lv_waypointCount - 1)];
        lv_offsetPoint = libGame_gv_laneData[lp_lane].lv_waypoints[(libGame_gv_laneData[lp_lane].lv_waypointCount - 2)];
        lv_team = 2;
    }
    else {
    }
    if ((lv_basePoint == null)) {
        return true;
    }
    else {
    }
    Wait(libCore_gv_bALMinionTeamSpawnDelay[lv_team], c_timeGame);
    Wait(libGame_gv_laneData[lp_lane].lv_spawnDelay, c_timeGame);
    lv_bruiserLevel = libGame_gv_laneData[lp_lane].lv_bruiserMinionLevel[lv_team];
    autoB77C7225_ae = lv_groupCount;
    autoB77C7225_ai = 1;
    lv_itGroup = 1;
    for ( ; ( (autoB77C7225_ai >= 0 && lv_itGroup <= autoB77C7225_ae) || (autoB77C7225_ai <= 0 && lv_itGroup >= autoB77C7225_ae) ) ; lv_itGroup += autoB77C7225_ai ) {
        lv_minionType = libCore_gv_dataMinionWaveCompositions[lp_composition].lv_groupMinionType[lv_itGroup][lv_team];
        lv_spawnPoint = libNtve_gf_PointOffsetTowardsPoint(lv_basePoint, lv_currentOffsetAmount, lv_offsetPoint);
        autoEFB6C6D3_ae = libCore_gv_dataMinionWaveCompositions[lp_composition].lv_groupMinionCount[lv_itGroup];
        autoEFB6C6D3_ai = 1;
        lv_itMinion = 1;
        for ( ; ( (autoEFB6C6D3_ai >= 0 && lv_itMinion <= autoEFB6C6D3_ae) || (autoEFB6C6D3_ai <= 0 && lv_itMinion >= autoEFB6C6D3_ae) ) ; lv_itMinion += autoEFB6C6D3_ai ) {
            libGame_gf_MinionSpawnMinion(lp_lane, lp_owner, lv_minionType, lv_spawnPoint);
        }
        lv_currentOffsetAmount -= lv_offsetChangePerGroup;
        Wait(0.0625, c_timeGame);
    }
    return true;
}

void libGame_gf_MinionTurnMinionScalingOnOff (bool lp_onOff) {
    // Implementation
    if ((lp_onOff == true)) {
        libGame_gv_minionScalingEnabled = true;
        TimerStart(libGame_gv_scalingTimer, libGame_gv_bALScalingTimerDuration, false, c_timeGame);
    }
    else {
        libGame_gv_minionScalingEnabled = false;
        TimerPause(libGame_gv_scalingTimer, true);
    }
}

void libGame_gf_MinionPauseUnpauseMinionScaling (bool lp_pauseUnpause) {
    // Implementation
    if ((libGame_gv_minionScalingEnabled == true)) {
        if ((lp_pauseUnpause == false)) {
            TimerPause(libGame_gv_scalingTimer, false);
        }
        else {
            TimerPause(libGame_gv_scalingTimer, true);
        }
    }
    else {
    }
}

void libGame_gf_CalculateSpawnedMinionGoalPoints (int lp_ownerPlayer, point lp_positionofSpawner) {
    // Variable Declarations
    int lv_closestIndex;
    int lv_secondaryIndex;

    // Variable Initialization

    // Implementation
    if (((lp_positionofSpawner == null) || (lp_ownerPlayer > libCore_gv_bALMaxEnginePlayerCount))) {
        libGame_gv_spawnedMinionFirstWaypointIndex = 0;
        return ;
    }
    else {
    }
    libGame_gf_CalculateClosestLaneData(lp_positionofSpawner);
    libGame_gv_spawnedMinionLane = libGame_gv_closestLaneData.lv_closestLane;
    if (((libGame_gv_spawnedMinionLane == 0) || (libGame_gv_laneData[libGame_gv_spawnedMinionLane].lv_waypointCount < 3))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_F39264DE"), true);
        libGame_gv_spawnedMinionFirstWaypointIndex = 0;
        return ;
    }
    else {
    }
    lv_closestIndex = libGame_gv_closestLaneData.lv_laneData[libGame_gv_spawnedMinionLane].lv_closestIndex;
    lv_secondaryIndex = libGame_gv_closestLaneData.lv_laneData[libGame_gv_spawnedMinionLane].lv_secondaryIndex;
    if ((libGame_gv_players[lp_ownerPlayer].lv_faction == libGame_ge_Faction_Order)) {
        libGame_gv_spawnedMinionFirstWaypointIndex = MaxI(lv_closestIndex, lv_secondaryIndex);
        if ((libGame_gv_spawnedMinionFirstWaypointIndex >= libGame_gv_laneData[libGame_gv_spawnedMinionLane].lv_waypointCount)) {
            libGame_gv_spawnedMinionFirstWaypointIndex = (libGame_gv_laneData[libGame_gv_spawnedMinionLane].lv_waypointCount - 1);
        }
        else {
        }
    }
    else {
        libGame_gv_spawnedMinionFirstWaypointIndex = MinI(lv_closestIndex, lv_secondaryIndex);
        if ((libGame_gv_spawnedMinionFirstWaypointIndex <= 1)) {
            libGame_gv_spawnedMinionFirstWaypointIndex = 2;
        }
        else {
        }
    }
}

void libGame_gf_ApplyMountBehaviorToPlayer (int lp_player) {
    // Variable Declarations
    unit lv_heroUnit;

    // Variable Initialization

    // Implementation
    if ((libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_player].lv_heroIndex].lv_isFlyer == false) && (libGame_gv_players[lp_player].lv_heroIndex != libCore_gf_GetHeroIndexForUnitType("HeroAbathur")) && (libGame_gv_players[lp_player].lv_heroIndex != libCore_gf_GetHeroIndexForUnitType("HeroSgtHammer"))) {
        lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
        UnitBehaviorAdd(lv_heroUnit, "Mounted", lv_heroUnit, 1);
    }
    else {
    }
}

void libGame_gf_ApplyMountBehaviorToHero (unit lp_hero) {
    // Implementation
    if ((libCore_gv_dataHeroesHeroData[libCore_gf_GetHeroIndexForUnitType(UnitGetType(lp_hero))].lv_usesMounts == true)) {
        UnitBehaviorAdd(lp_hero, "Mounted", lp_hero, 1);
    }
    else {
    }
}

void libGame_gf_AwardXPForNPCKill (unit lp_killedUnit, int lp_killedUnitPlayer, int lp_killedUnitClassification, int lp_killingPlayer) {
    unitgroup autoED19B100_g;
    int autoED19B100_u;
    playergroup auto635EB3AE_g;
    int auto635EB3AE_p;
    playergroup autoA75BD986_g;
    int autoA75BD986_p;
    playergroup auto005D5C61_g;
    int auto005D5C61_p;
    playergroup auto60ED318E_g;
    int auto60ED318E_p;
    int auto6BF10103_val;

    // Variable Declarations
    unit lv_itUnit;
    int lv_itPlayer;
    int lv_itTeamPlayer;
    unitgroup lv_nearbyUnits;
    int lv_creditPlayer;
    playergroup lv_killCreditGroup;
    fixed lv_xPValue;
    playergroup lv_xPAwardGroup;
    int lv_xPSource;

    // Variable Initialization
    lv_nearbyUnits = UnitGroupEmpty();
    lv_killCreditGroup = PlayerGroupEmpty();
    lv_xPAwardGroup = PlayerGroupEmpty();

    // Implementation
    if ((lp_killingPlayer > 0) && (lp_killingPlayer <= libCore_gv_bALMaxEnginePlayerCount)) {
        lv_nearbyUnits = UnitGroupSearch(null, lp_killingPlayer, UnitGetPosition(lp_killedUnit), libCore_gv_bALXPRadius, UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }
    else {
        if ((lp_killedUnitPlayer != libCore_gv_cOMPUTER_Hostile)) {
            lv_nearbyUnits = UnitGroupSearch(null, lp_killedUnitPlayer, UnitGetPosition(lp_killedUnit), libCore_gv_bALXPRadius, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Game_F67CE810", "A", UnitTypeGetName(UnitGetType(lp_killedUnit)));
            TextExpressionSetToken("Param/Expression/lib_Game_F67CE810", "B", IntToText(lp_killingPlayer));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_F67CE810"), true);
            return ;
        }
    }
    autoED19B100_g = lv_nearbyUnits;
    autoED19B100_u = 1;
    for ( ; autoED19B100_u <= UnitGroupCount(autoED19B100_g, c_unitCountAll) ; autoED19B100_u += BoolToInt(lv_itUnit == UnitGroupUnit(autoED19B100_g, autoED19B100_u)) ) {
        lv_itUnit = UnitGroupUnit(autoED19B100_g, autoED19B100_u);
        if ((UnitBehaviorCount(lv_itUnit, "SpecialCaseNPCTakedownParticipant") == 1)) {
            libGame_gf_SendEventSpecialCaseUnitParticipatedInNPCTakedown(UnitGetOwner(lv_itUnit), lp_killedUnit);
        }
        else {
        }
        if (((UnitHasBehavior2(lv_itUnit, "EarnsXP") == true) || ((UnitTypeTestAttribute(UnitGetType(lv_itUnit), c_unitAttributeHeroic) == true) && (UnitHasBehavior2(lv_itUnit, "AbathurUltimateEvolutionVehicleCasterBehavior") == false) && (UnitTestState(lv_itUnit, c_unitStateHallucination) == false)))) {
            lv_creditPlayer = UnitGetOwner(lv_itUnit);
            if ((lv_creditPlayer <= libCore_gv_bALMaxPlayers)) {
                PlayerGroupAdd(lv_killCreditGroup, lv_creditPlayer);
            }
            else {
            }
        }
        else {
        }
    }
    if ((lp_killingPlayer > 0) && (lp_killingPlayer <= libCore_gv_bALMaxPlayers)) {
        PlayerGroupAdd(lv_killCreditGroup, lp_killingPlayer);
    }
    else {
    }
    if ((PlayerGroupCount(lv_killCreditGroup) == 0) && (UnitTypeTestAttribute(UnitGetType(lp_killedUnit), c_unitAttributeStructure) == false)) {
        return ;
    }
    else {
    }
    auto635EB3AE_g = lv_killCreditGroup; 
    auto635EB3AE_p = 1;
    for ( ; auto635EB3AE_p <= PlayerGroupCount(auto635EB3AE_g) ; auto635EB3AE_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto635EB3AE_g, auto635EB3AE_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto635EB3AE_g, auto635EB3AE_p);
        libGame_gf_SendEventHeroParticipatedInNPCTakedown(lv_itPlayer, lp_killedUnit);
    }
    lv_xPValue = libCore_gf_DataXPXPForUnit(lp_killedUnit);
    if ((libSprt_gv_dEBUGXPTextEnabled == true)) {
        TextExpressionSetToken("Param/Expression/lib_Game_D3D36514", "A", UnitTypeGetName(UnitGetType(lp_killedUnit)));
        TextExpressionSetToken("Param/Expression/lib_Game_D3D36514", "B", FixedToText(lv_xPValue, c_fixedPrecisionAny));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_D3D36514"), true);
    }
    else {
    }
    if ((lv_xPValue <= 0.0)) {
        return ;
    }
    else {
    }
    autoA75BD986_g = lv_killCreditGroup; 
    autoA75BD986_p = 1;
    for ( ; autoA75BD986_p <= PlayerGroupCount(autoA75BD986_g) ; autoA75BD986_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(autoA75BD986_g, autoA75BD986_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoA75BD986_g, autoA75BD986_p);
        libGame_gf_ScoreValuesRecordXPContributionForPlayer(lv_itPlayer, lv_xPValue);
        auto005D5C61_g = libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_itPlayer)].lv_teamPlayerGroupNoNPCPlayers; 
        auto005D5C61_p = 1;
        for ( ; auto005D5C61_p <= PlayerGroupCount(auto005D5C61_g) ; auto005D5C61_p += BoolToInt(lv_itTeamPlayer == PlayerGroupPlayer(auto005D5C61_g, auto005D5C61_p)) ) {
            lv_itTeamPlayer = PlayerGroupPlayer(auto005D5C61_g, auto005D5C61_p);
            libGame_gv_encouragement_TotalTeamXPGathered[lv_itTeamPlayer] += lv_xPValue;
        }
    }
    if ((PlayerGroupCount(lv_killCreditGroup) == 0)) {
        lv_xPAwardGroup = PlayerGroupCopy(libGame_gf_EnemyPlayerGroupOfPlayer(lp_killedUnitPlayer));
        if (((lp_killedUnitPlayer < 0) || (lp_killedUnitPlayer > libCore_gv_bALMaxEnginePlayerCount))) {
            TextExpressionSetToken("Param/Expression/lib_Game_34F4B7D0", "A", UnitTypeGetName(UnitGetType(lp_killedUnit)));
            TextExpressionSetToken("Param/Expression/lib_Game_34F4B7D0", "B", IntToText(lp_killedUnitPlayer));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_34F4B7D0"), true);
        }
        else {
        }
    }
    else {
        lv_xPAwardGroup = PlayerGroupCopy(libGame_gf_AlliedPlayerGroupOfPlayer(PlayerGroupPlayer(lv_killCreditGroup, 1)));
    }
    PlayerGroupRemove(lv_xPAwardGroup, libCore_gv_cOMPUTER_TeamOrder);
    PlayerGroupRemove(lv_xPAwardGroup, libCore_gv_cOMPUTER_TeamChaos);
    if ((PlayerGroupCount(lv_xPAwardGroup) == 0) && (UnitTypeTestAttribute(UnitGetType(lp_killedUnit), c_unitAttributeStructure) == true) && (PlayerGroupCount(libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers) > 0) && (PlayerGroupCount(libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers) > 0)) {
        TextExpressionSetToken("Param/Expression/lib_Game_8402AC6F", "A", UnitTypeGetName(UnitGetType(lp_killedUnit)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_8402AC6F"), true);
    }
    else {
    }
    auto60ED318E_g = lv_xPAwardGroup; 
    auto60ED318E_p = 1;
    for ( ; auto60ED318E_p <= PlayerGroupCount(auto60ED318E_g) ; auto60ED318E_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto60ED318E_g, auto60ED318E_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto60ED318E_g, auto60ED318E_p);
        auto6BF10103_val = lp_killedUnitClassification;
        if (auto6BF10103_val == c_unitAttributeStructure) {
            lv_xPSource = libGame_ge_XPSources_Structure;
        }
        else if (auto6BF10103_val == c_unitAttributeLight) {
            lv_xPSource = libGame_ge_XPSources_Creep;
        }
        else if (auto6BF10103_val == c_unitAttributeBiological) {
            lv_xPSource = libGame_ge_XPSources_Minion;
        }
        else {
        }
        libGame_gf_GrantXPToPlayer(lv_xPValue, lv_itPlayer, lv_xPSource);
        SoundPlayForPlayer(SoundLink("XP_Gain", 0), lv_itPlayer, libCore_gv_playerGroupFromPlayer[lv_itPlayer], 100.0, 0.0);
        if ((lp_killedUnitClassification != c_unitAttributeStructure)) {
            libUIUI_gf_UIFloatingCombatTextXP(lv_itPlayer, lp_killedUnit, TextExpressionAssemble("Param/Expression/lib_Game_B43AAD91"), libCore_ge_FloatingTextType_XPSmall);
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Game_8E4E467E", "A", FixedToText(lv_xPValue, 0));
            libUIUI_gf_UIFloatingCombatTextXP(lv_itPlayer, lp_killedUnit, TextExpressionAssemble("Param/Expression/lib_Game_8E4E467E"), libCore_ge_FloatingTextType_XPLarge);
        }
    }
}

trigger auto_libGame_gf_BuildingDiesCameraShake_Trigger = null;
fixed auto_libGame_gf_BuildingDiesCameraShake_lp_delay;
string auto_libGame_gf_BuildingDiesCameraShake_lp_intensity;
playergroup auto_libGame_gf_BuildingDiesCameraShake_lp_playerGroup;

void libGame_gf_BuildingDiesCameraShake (fixed lp_delay, string lp_intensity, playergroup lp_playerGroup) {
    auto_libGame_gf_BuildingDiesCameraShake_lp_delay = lp_delay;
    auto_libGame_gf_BuildingDiesCameraShake_lp_intensity = lp_intensity;
    auto_libGame_gf_BuildingDiesCameraShake_lp_playerGroup = lp_playerGroup;

    if (auto_libGame_gf_BuildingDiesCameraShake_Trigger == null) {
        auto_libGame_gf_BuildingDiesCameraShake_Trigger = TriggerCreate("auto_libGame_gf_BuildingDiesCameraShake_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_BuildingDiesCameraShake_Trigger, false, false);
}

bool auto_libGame_gf_BuildingDiesCameraShake_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_delay = auto_libGame_gf_BuildingDiesCameraShake_lp_delay;
    string lp_intensity = auto_libGame_gf_BuildingDiesCameraShake_lp_intensity;
    playergroup lp_playerGroup = auto_libGame_gf_BuildingDiesCameraShake_lp_playerGroup;

    playergroup auto7B461A9C_g;
    int auto7B461A9C_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    Wait(lp_delay, c_timeGame);
    auto7B461A9C_g = lp_playerGroup; 
    auto7B461A9C_p = 1;
    for ( ; auto7B461A9C_p <= PlayerGroupCount(auto7B461A9C_g) ; auto7B461A9C_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto7B461A9C_g, auto7B461A9C_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto7B461A9C_g, auto7B461A9C_p);
        CameraShake(lv_itPlayer, lp_intensity, "Shake", 0.1, 0.4, 0.5);
    }
    return true;
}

void libGame_gf_GazloweSalvageProc (int lp_killingPlayer, unit lp_minion) {
    // Implementation
    if ((UnitGetType(libGame_gv_players[lp_killingPlayer].lv_heroUnit) == "HeroTinker") && (UnitTypeTestAttribute(UnitGetType(lp_minion), c_unitAttributeStructure) == true) && (UnitTypeTestAttribute(UnitGetType(lp_minion), c_unitAttributeSummoned) == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TinkerSalvageScrap", 0, lp_killingPlayer, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_minion), 1.0, UnitGetPosition(libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_minion))].lv_core)));
        UnitBehaviorAdd(UnitLastCreated(), "TinkerSalvageScrapTimedLife", libGame_gv_players[lp_killingPlayer].lv_heroUnit, 1);
    }
    else {
    }
}

void libGame_gf_GazloweReduceReuseRecycleProc (int lp_killingPlayer, unit lp_minion) {
    // Implementation
    if ((UnitGetType(libGame_gv_players[lp_killingPlayer].lv_heroUnit) == "HeroTinker") && (UnitBehaviorCount(libGame_gv_players[lp_killingPlayer].lv_heroUnit, "ReduceReuseRecycleCarryBehavior") == 1) && (UnitTypeTestAttribute(UnitGetType(lp_minion), c_unitAttributeStructure) == false) && (UnitTypeTestAttribute(UnitGetType(lp_minion), c_unitAttributeSummoned) == false)) {
        UnitCreateEffectPoint(libGame_gv_players[lp_killingPlayer].lv_heroUnit, "ReduceReuseRecycleCreateUnit", libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_minion), 1.0, UnitGetPosition(libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lp_killingPlayer)].lv_core)));
    }
    else {
    }
}

void libGame_gf_BribeProc (int lp_killingPlayer, unit lp_minion) {
    // Variable Declarations
    unit lv_bribeOwnerUnit;

    // Variable Initialization

    // Implementation
    if (((UnitHasBehavior2(libGame_gv_players[lp_killingPlayer].lv_activeVehicle, "BribeCarryBehavior") == true) || (UnitHasBehavior2(libGame_gv_players[lp_killingPlayer].lv_heroUnit, "BribeCarryBehavior") == true)) && ((UnitTypeTestAttribute(UnitGetType(lp_minion), c_unitAttributeBiological) == true) || (UnitGetType(lp_minion) == "UnderworldMinion") || (UnitGetType(lp_minion) == "UnderworldRangedMinion"))) {
        lv_bribeOwnerUnit = libGame_gv_players[lp_killingPlayer].lv_heroUnit;
        UnitBehaviorAdd(lv_bribeOwnerUnit, "BribeStacks", lv_bribeOwnerUnit, 1);
        if (((UnitBehaviorCount(lv_bribeOwnerUnit, "BribeStacks") == 20) || (UnitBehaviorCount(lv_bribeOwnerUnit, "BribeStacks") == 40))) {
            UnitAddChargeUsed(lv_bribeOwnerUnit, "Abil/TalentBucketBribe", -1.0);
        }
        else {
        }
    }
    else {
    }
}

void libGame_gf_DiabloBlackSoulstoneProc (int lp_killingPlayer, unit lp_minion) {
    // Implementation
    if ((UnitHasBehavior2(libGame_gv_players[lp_killingPlayer].lv_heroUnit, "BlackSoulstoneCarryBehavior") == true) && (UnitTypeTestAttribute(UnitGetType(lp_minion), c_unitAttributeSummoned) == false)) {
        if ((UnitBehaviorCount(libGame_gv_players[lp_killingPlayer].lv_heroUnit, "BlackSoulstone") < 100)) {
            UnitBehaviorAdd(libGame_gv_players[lp_killingPlayer].lv_heroUnit, "BlackSoulstone", libGame_gv_players[lp_killingPlayer].lv_heroUnit, 1);
        }
        else {
            if ((UnitHasBehavior2(libGame_gv_players[lp_killingPlayer].lv_heroUnit, "EndlessDeathCarryBehavior") == true)) {
                UnitBehaviorAdd(libGame_gv_players[lp_killingPlayer].lv_heroUnit, "BlackSoulstone", libGame_gv_players[lp_killingPlayer].lv_heroUnit, 1);
            }
            else {
            }
        }
    }
    else {
    }
}

void libGame_gf_GenericSeasonedMarksmanProc (int lp_killingPlayer, unit lp_minion) {
    // Implementation
    if ((UnitHasBehavior2(libGame_gv_players[lp_killingPlayer].lv_heroUnit, "TalentSeasonedMarksmanCarryBehavior") == true) && (UnitTypeTestAttribute(UnitGetType(lp_minion), c_unitAttributeSummoned) == false)) {
        UnitCreateEffectUnit(libGame_gv_players[lp_killingPlayer].lv_heroUnit, "SeasonedMarksmanSwitch", libGame_gv_players[lp_killingPlayer].lv_heroUnit);
    }
    else {
    }
}

int libGame_gf_EnemyTeam (int lp_team) {
    // Implementation
    if ((libGame_gf_TeamNumberIsValid(lp_team) == false)) {
        TextExpressionSetToken("Param/Expression/lib_Game_9AD807BA", "A", IntToText(lp_team));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_9AD807BA"), true);
        return 0;
    }
    else {
    }
    return (3 - lp_team);
}

playergroup libGame_gf_AlliedPlayerGroupOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Implementation
    if (((lp_player < 0) || (lp_player > libCore_gv_bALMaxEnginePlayerCount))) {
        return PlayerGroupEmpty();
    }
    else {
    }
    lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);
    if ((libGame_gf_TeamNumberIsValid(lv_team) == false)) {
        return PlayerGroupEmpty();
    }
    else {
    }
    return libGame_gf_PlayersOnTeamHeroes(lv_team, true);
}

playergroup libGame_gf_EnemyPlayerGroupOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Implementation
    if (((lp_player < 0) || (lp_player > libCore_gv_bALMaxEnginePlayerCount))) {
        return PlayerGroupEmpty();
    }
    else {
    }
    lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);
    if ((libGame_gf_TeamNumberIsValid(lv_team) == false)) {
        return PlayerGroupEmpty();
    }
    else {
    }
    return libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeam(lv_team), false);
}

int libGame_gf_TeamNumberOfPlayer (int lp_player) {
    int auto1C2A9EDD_ae;
    int auto1C2A9EDD_ai;

    // Variable Declarations
    int lv_itTeams;

    // Variable Initialization

    // Implementation
    auto1C2A9EDD_ae = libCore_gv_bALMaxTeams;
    auto1C2A9EDD_ai = 1;
    lv_itTeams = 1;
    for ( ; ( (auto1C2A9EDD_ai >= 0 && lv_itTeams <= auto1C2A9EDD_ae) || (auto1C2A9EDD_ai <= 0 && lv_itTeams >= auto1C2A9EDD_ae) ) ; lv_itTeams += auto1C2A9EDD_ai ) {
        if ((PlayerGroupHasPlayer(libGame_gv_teams[lv_itTeams].lv_teamPlayerGroup, lp_player) == true)) {
            return lv_itTeams;
        }
        else {
        }
    }
    return 0;
}

bool libGame_gf_TeamNumberIsValid (int lp_team) {
    // Implementation
    return ((lp_team == libGame_gv_teamOrderIndex_C) || (lp_team == libGame_gv_teamChaosIndex_C));
}

int libGame_gf_EnemyTeamNumberOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Implementation
    lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);
    if ((libGame_gf_TeamNumberIsValid(lv_team) == true)) {
        return libGame_gf_EnemyTeam(lv_team);
    }
    else {
        return 0;
    }
}

int libGame_gf_ComputerPlayerInTeam (int lp_team) {
    int autoBA7B6EDB_val;

    // Implementation
    autoBA7B6EDB_val = lp_team;
    if (autoBA7B6EDB_val == 1) {
        return libCore_gv_cOMPUTER_TeamOrder;
    }
    else if (autoBA7B6EDB_val == 2) {
        return libCore_gv_cOMPUTER_TeamChaos;
    }
    else {
    }
    return 0;
}

int libGame_gf_PlayersAliveOnTeam (int lp_team) {
    playergroup autoF6F1B708_g;
    int autoF6F1B708_p;

    // Variable Declarations
    int lv_itPlayer;
    int lv_count;

    // Variable Initialization

    // Implementation
    autoF6F1B708_g = libGame_gf_PlayersOnTeamHeroes(lp_team, false); 
    autoF6F1B708_p = 1;
    for ( ; autoF6F1B708_p <= PlayerGroupCount(autoF6F1B708_g) ; autoF6F1B708_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(autoF6F1B708_g, autoF6F1B708_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoF6F1B708_g, autoF6F1B708_p);
        if ((libGame_gv_players[lv_itPlayer].lv_isDead == false)) {
            lv_count += 1;
        }
        else {
        }
    }
    return lv_count;
}

int libGame_gf_GetPlayerNumberFromRosterSlot (int lp_rosterSlot) {
    int autoC6542F8A_ae;
    int autoC6542F8A_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoC6542F8A_ae = libCore_gv_bALMaxPlayers;
    autoC6542F8A_ai = 1;
    lv_i = 1;
    for ( ; ( (autoC6542F8A_ai >= 0 && lv_i <= autoC6542F8A_ae) || (autoC6542F8A_ai <= 0 && lv_i >= autoC6542F8A_ae) ) ; lv_i += autoC6542F8A_ai ) {
        if ((libGame_gv_players[lv_i].lv_rosterSlot == lp_rosterSlot)) {
            return lv_i;
        }
        else {
        }
    }
    return 0;
}

bool libGame_gf_UnitIsHero (unit lp_testUnit) {
    // Variable Declarations
    int lv_ownerPlayer;

    // Variable Initialization

    // Implementation
    lv_ownerPlayer = UnitGetOwner(lp_testUnit);
    if (((lv_ownerPlayer < 1) || (lv_ownerPlayer > libCore_gv_bALMaxPlayers))) {
        return false;
    }
    else {
    }
    if ((UnitFilterMatch(lp_testUnit, lv_ownerPlayer, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), 0)) == true) && ((lp_testUnit == libGame_gv_players[lv_ownerPlayer].lv_heroUnit) || (lp_testUnit == libGame_gv_players[lv_ownerPlayer].lv_activeVehicle))) {
        return true;
    }
    else {
    }
    UnitGroupLoopBegin(libGame_gv_players[lv_ownerPlayer].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((lp_testUnit == UnitGroupLoopCurrent())) {
            return true;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return false;
}

int libGame_gf_TalentBucketFindTalentInBucketForPlayer (int lp_talentIndex, int lp_player) {
    int auto920EC320_ae;
    int auto920EC320_ai;

    // Variable Declarations
    int lv_itBucketTalent;

    // Variable Initialization

    // Implementation
    auto920EC320_ae = libCore_gv_talentsBucket_MaxTalentEntryCount_C;
    auto920EC320_ai = 1;
    lv_itBucketTalent = 1;
    for ( ; ( (auto920EC320_ai >= 0 && lv_itBucketTalent <= auto920EC320_ae) || (auto920EC320_ai <= 0 && lv_itBucketTalent >= auto920EC320_ae) ) ; lv_itBucketTalent += auto920EC320_ai ) {
        if ((libCore_gv_dataHeroesHeroData[libGame_gv_players[lp_player].lv_heroIndex].lv_talentBucket[lv_itBucketTalent].lv_talentIndex == lp_talentIndex)) {
            return lv_itBucketTalent;
        }
        else {
        }
    }
    TextExpressionSetToken("Param/Expression/lib_Game_C876AA67", "C", StringToText((libCore_gv_talents_TalentData[lp_talentIndex].lv_talentCatalogLink)));
    TextExpressionSetToken("Param/Expression/lib_Game_C876AA67", "A", IntToText(lp_talentIndex));
    TextExpressionSetToken("Param/Expression/lib_Game_C876AA67", "B", IntToText(lp_player));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_C876AA67"), true);
    return -1;
}

void libGame_gf_InitializePlayer (int lp_player, int lp_team) {
    // Variable Declarations
    int lv_numberOfPlayersOnTeam;
    int lv_slot;

    // Variable Initialization

    // Implementation
    libGame_gv_players[lp_player].lv_faction = lp_team;
    if ((lp_team == libGame_ge_Faction_Order)) {
        PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, lp_player);
        lv_numberOfPlayersOnTeam = PlayerGroupCount(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup);
        lv_slot = (lv_numberOfPlayersOnTeam + 0);
        libGame_gv_players[lp_player].lv_spawnPoint = PlayerStartLocation(lv_slot);
    }
    else {
    }
    if ((lp_team == libGame_ge_Faction_Chaos)) {
        PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, lp_player);
        lv_numberOfPlayersOnTeam = PlayerGroupCount(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup);
        lv_slot = (lv_numberOfPlayersOnTeam + 5);
        libGame_gv_players[lp_player].lv_spawnPoint = PlayerStartLocation(lv_slot);
    }
    else {
    }
    libGame_gv_players[lp_player].lv_rosterSlot = lv_slot;
    libGame_gv_players[lp_player].lv_teamPlayerSlot = lv_numberOfPlayersOnTeam;
    if ((PlayerStatus(lp_player) == c_playerStatusActive) && (PlayerType(lp_player) != c_playerTypeComputer)) {
        libGame_gv_players[lp_player].lv_playerStatus = libGame_ge_PlayerStatusStorm_ChoosingaHero;
        CameraPan(lp_player, libGame_gv_players[lp_player].lv_spawnPoint, 0.0, -1, 0.0, false);
        CameraLockInput(lp_player, true);
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, libCore_gv_playerGroupFromPlayer[lp_player], 0.0);
        PlayerGroupAdd(libCore_gv_activeHumanPlayers, lp_player);
    }
    else {
    }
    libGame_gv_players[lp_player].lv_name = PlayerName(lp_player);
    PlayerModifyPropertyInt(lp_player, c_playerPropMinerals, c_playerPropOperSetTo, 0);
    PlayerModifyPropertyInt(lp_player, c_playerPropVespene, c_playerPropOperSetTo, 0);
    PlayerSetState(lp_player, c_playerStateDisplayGameResult, false);
}

void libGame_gf_GrantXPToPlayer (fixed lp_xP, int lp_player, int lp_source) {
    int auto993D99AD_val;

    // Variable Declarations
    unit lv_heroUnit;
    int lv_playerLevel;
    fixed lv_totalXPForNextLevel;
    fixed lv_totalXPForCurrentLevel;
    fixed lv_currentXPForPlayer;
    fixed lv_fractionalLevelValue;
    fixed lv_xPDifference;

    // Variable Initialization

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    if ((lv_heroUnit == null)) {
        return ;
    }
    else {
    }
    UnitXPAddXP(lv_heroUnit, null, lp_xP);
    auto993D99AD_val = lp_source;
    if (auto993D99AD_val == libGame_ge_XPSources_Creep) {
        libGame_gv_players[lp_player].lv_xPRecievedFromCreeps += lp_xP;
    }
    else if (auto993D99AD_val == libGame_ge_XPSources_Hero) {
        libGame_gv_players[lp_player].lv_xPRecievedFromHeroes += lp_xP;
    }
    else if (auto993D99AD_val == libGame_ge_XPSources_Minion) {
        libGame_gv_players[lp_player].lv_xPRecievedFromMinions += lp_xP;
    }
    else if (auto993D99AD_val == libGame_ge_XPSources_Structure) {
        libGame_gv_players[lp_player].lv_xPRecievedFromStructures += lp_xP;
    }
    else if (auto993D99AD_val == libGame_ge_XPSources_Trickle) {
        libGame_gv_players[lp_player].lv_xPRecievedFromTrickle += lp_xP;
    }
    else {
    }
    lv_playerLevel = libGame_gv_scoreValues[lp_player].lv_level;
    if ((lv_playerLevel == libCore_gv_bALMaxLevel)) {
        lv_fractionalLevelValue = lv_playerLevel;
    }
    else {
        lv_totalXPForNextLevel = libCore_gf_GetTotalXPForLevel((lv_playerLevel + 1));
        lv_totalXPForCurrentLevel = libCore_gf_GetTotalXPForLevel(lv_playerLevel);
        lv_currentXPForPlayer = UnitGetPropertyFixed(lv_heroUnit, c_unitPropXP, c_unitPropCurrent);
        lv_xPDifference = (lv_totalXPForNextLevel - lv_totalXPForCurrentLevel);
        if ((lv_xPDifference > 0.0)) {
            lv_fractionalLevelValue = (lv_playerLevel + (lv_currentXPForPlayer - lv_totalXPForCurrentLevel) / lv_xPDifference);
            libGame_gf_ScoreValuesReportRealValueAndLog(lp_player, "FractionalTeamLevel", lv_fractionalLevelValue);
        }
        else {
        }
    }
}

trigger auto_libGame_gf_LevelUpHero_Trigger = null;
unit auto_libGame_gf_LevelUpHero_lp_hero;

void libGame_gf_LevelUpHero (unit lp_hero) {
    auto_libGame_gf_LevelUpHero_lp_hero = lp_hero;

    if (auto_libGame_gf_LevelUpHero_Trigger == null) {
        auto_libGame_gf_LevelUpHero_Trigger = TriggerCreate("auto_libGame_gf_LevelUpHero_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_LevelUpHero_Trigger, false, false);
}

bool auto_libGame_gf_LevelUpHero_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hero = auto_libGame_gf_LevelUpHero_lp_hero;

    int autoDDBD77DD_val;
    int autoE654A081_ae;
    int autoE654A081_ai;
    int auto50611CD3_ae;
    int auto50611CD3_ai;

    // Variable Declarations
    int lv_itTalentTier;
    int lv_player;
    int lv_level;
    int lv_heroIndex;
    int lv_team;

    // Variable Initialization

    // Implementation
    UnitBehaviorAdd(lp_hero, "Level", lp_hero, 1);
    lv_player = UnitGetOwner(lp_hero);
    lv_level = UnitBehaviorCount(lp_hero, "Level");
    lv_heroIndex = libGame_gv_players[lv_player].lv_heroIndex;
    lv_team = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_hero));
    libGame_gv_teams[lv_team].lv_teamLevel = MaxI(libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_player)].lv_teamLevel, lv_level);
    libGame_gv_scoreValues[lv_player].lv_level = lv_level;
    autoDDBD77DD_val = libGame_gv_teams[lv_team].lv_teamLevel;
    if (autoDDBD77DD_val == 10) {
        libSond_gf_SoundtrackUpdateMapSoundtrackIndex(2);
    }
    else if (autoDDBD77DD_val == 20) {
        libSond_gf_SoundtrackUpdateMapSoundtrackIndex(3);
    }
    else {
    }
    libUIUI_gf_TopBarTeamLevelUpdateTeamsLevelLabel(lv_team, lv_level);
    libUIUI_gf_DeathTimerPanelUpdateTeamDeathTimeIndicatorForTeam(lv_team);
    libGame_gf_ModifyTeamXPTrickle(libGame_gf_TeamNumberOfPlayer(lv_player));
    libGame_gf_ApplyLevelUpHeroStatsForHero(lp_hero);
    libGame_gf_UpdateHeroWeaponStats(lp_hero);
    autoE654A081_ae = libCore_gv_talentsBucket_MaxTiers_C;
    autoE654A081_ai = 1;
    lv_itTalentTier = 1;
    for ( ; ( (autoE654A081_ai >= 0 && lv_itTalentTier <= autoE654A081_ae) || (autoE654A081_ai <= 0 && lv_itTalentTier >= autoE654A081_ae) ) ; lv_itTalentTier += autoE654A081_ai ) {
        if (((lv_level == 1) || (lv_level == (libCore_gv_talentsBucket_TierLevels[lv_itTalentTier].lv_level - 1)))) {
            libGame_gf_PreloadTalentModelAssets(lv_player, lv_itTalentTier);
            break;
        }
        else {
        }
    }
    SetTalentTreeHeroLevel(lv_player, lv_level);
    if ((libCore_gv_sYSTalentsOn == true)) {
        libUIUI_gf_TalentsBucketUpdateHeroInfoTalentsForPlayer(lv_player);
        libUIUI_gf_TalentsBucketUpdateABChoicePanelForPlayer(lv_player);
        if ((libCore_gv_tUTTalentsAutobuyOn == true) && (libUIUI_gv_talents_ActiveABChoiceForPlayer[lv_player] != 0) && (libGame_gv_players[lv_player].lv_talentsBucketABChoices[libUIUI_gv_talents_ActiveABChoiceForPlayer[lv_player]].lv_selection == 0)) {
            if ((libCore_gv_talentsBucket_TierLevels[libUIUI_gv_talents_ActiveABChoiceForPlayer[lv_player]].lv_tierType == libCore_ge_TalentBucketTierType_HeroicAbility)) {
                libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_player], libGame_ge_AnnouncementPriorities_Critical, libCore_ge_AnnouncerVOEvents_Null, "ShowTutorialNotification", StringExternal("Param/Value/lib_Game_8CBC2F41"), libCore_gv_talents_TalentData[libGame_gv_players[lv_player].lv_talentsBucketABChoices[libUIUI_gv_talents_ActiveABChoiceForPlayer[lv_player]].lv_talentIndexArray[1]].lv_name, null, null, libGame_gv_announcement_StandardTimerDuration_C, false);
            }
            else {
            }
            libUIUI_gf_TalentsBucketChooseABChoiceForPlayerOLD(libUIUI_gv_talents_ActiveABChoiceForPlayer[lv_player], 1, lv_player);
            libGame_gf_SendEventHeroGainTalent(lv_player);
        }
        else {
        }
    }
    else {
    }
    StatEventCreate("LevelUp");
    StatEventAddDataInt(StatEventLastCreated(), "PlayerID", lv_player);
    StatEventAddDataInt(StatEventLastCreated(), "Level", lv_level);
    StatEventSend(StatEventLastCreated());
    libGame_gf_SendEventHeroLevelUp(lv_player);
    if ((libGame_gv_players[lv_player].lv_suppressLevelUpFXAndTeamXPTracking == false) && (UnitLevel(lp_hero) > 1)) {
        libNtve_gf_SendActorMessageToUnit(lp_hero, "Signal LevelUp");
        SoundPlayOnUnit(SoundLink("UI_Game_LevelUp_Team", -1), PlayerGroupSingle(lv_player), lp_hero, 8.0, 100.0, 0.0);
        SoundPlayOnUnit(SoundLink("UI_Game_LevelUp_Enemy", -1), PlayerGroupAlliance(c_playerGroupEnemy, lv_player), lp_hero, 8.0, 100.0, 0.0);
        auto50611CD3_ae = libCore_gv_talentsBucket_MaxTiers_C;
        auto50611CD3_ai = 1;
        lv_itTalentTier = 1;
        for ( ; ( (auto50611CD3_ai >= 0 && lv_itTalentTier <= auto50611CD3_ae) || (auto50611CD3_ai <= 0 && lv_itTalentTier >= auto50611CD3_ae) ) ; lv_itTalentTier += auto50611CD3_ai ) {
            if ((libCore_gv_tUTTalentsAutobuyOn == false) && (lv_level == libCore_gv_talentsBucket_TierLevels[lv_itTalentTier].lv_level)) {
                SoundPlayOnUnit(SoundLink("UI_Game_LevelUp_Talent", -1), PlayerGroupSingle(lv_player), lp_hero, 8.0, 100.0, 0.0);
            }
            else {
            }
        }
    }
    else {
    }
    return true;
}

void libGame_gf_PreloadTalentModelAssets (int lp_player, int lp_talentTier) {
    int autoD40180F0_ae;
    int autoD40180F0_ai;
    int auto392990E0_ae;
    int auto392990E0_ai;
    int auto24725AA0_ae;
    int auto24725AA0_ai;

    // Variable Declarations
    int lv_itButtonIndex;
    int lv_talentIndex;
    int lv_itAbilityMod;
    int lv_itAbilityModChange;
    string lv_modelEntry;
    string lv_modelPath;
    string lv_modelToPreload;

    // Variable Initialization
    lv_modelEntry = "";
    lv_modelPath = "";

    // Implementation
    autoD40180F0_ae = libGame_gv_players[lp_player].lv_talentsBucketABChoices[lp_talentTier].lv_numberOfButtons;
    autoD40180F0_ai = 1;
    lv_itButtonIndex = 1;
    for ( ; ( (autoD40180F0_ai >= 0 && lv_itButtonIndex <= autoD40180F0_ae) || (autoD40180F0_ai <= 0 && lv_itButtonIndex >= autoD40180F0_ae) ) ; lv_itButtonIndex += autoD40180F0_ai ) {
        lv_talentIndex = libGame_gv_players[lp_player].lv_talentsBucketABChoices[lp_talentTier].lv_talentIndexArray[lv_itButtonIndex];
        auto392990E0_ae = libCore_gv_talents_TalentData[lv_talentIndex].lv_abilityModifications;
        auto392990E0_ai = 1;
        lv_itAbilityMod = 1;
        for ( ; ( (auto392990E0_ai >= 0 && lv_itAbilityMod <= auto392990E0_ae) || (auto392990E0_ai <= 0 && lv_itAbilityMod >= auto392990E0_ae) ) ; lv_itAbilityMod += auto392990E0_ai ) {
            auto24725AA0_ae = libCore_gv_talents_TalentData[lv_talentIndex].lv_abilityModificationData.lv_numberOfFieldChanges[lv_itAbilityMod];
            auto24725AA0_ai = 1;
            lv_itAbilityModChange = 1;
            for ( ; ( (auto24725AA0_ai >= 0 && lv_itAbilityModChange <= auto24725AA0_ae) || (auto24725AA0_ai <= 0 && lv_itAbilityModChange >= auto24725AA0_ae) ) ; lv_itAbilityModChange += auto24725AA0_ai ) {
                if ((libCore_gv_talents_TalentData[lv_talentIndex].lv_abilityModificationData.lv_changeType[lv_itAbilityMod][lv_itAbilityModChange] == c_talentModificationCatalogReplacement) && (libCore_gv_talents_TalentData[lv_talentIndex].lv_abilityModificationData.lv_catalog[lv_itAbilityMod][lv_itAbilityModChange] == c_gameCatalogModel)) {
                    lv_modelEntry = libCore_gv_talents_TalentData[lv_talentIndex].lv_abilityModificationData.lv_catalogChangeTo[lv_itAbilityMod][lv_itAbilityModChange];
                    libNtve_gf_PreloadModelObject((lv_modelEntry), false);
                }
                else {
                }
            }
        }
    }
}

void libGame_gf_ArtifactsSetArtifactsForPlayer (int lp_player) {
    int auto18DC9EAE_ae;
    int auto18DC9EAE_ai;

    // Variable Declarations
    int lv_itArtifactIndex;

    // Variable Initialization

    // Implementation
    auto18DC9EAE_ae = libCore_gv_artifacts_MaxArtifactsPerPlayer_C;
    auto18DC9EAE_ai = 1;
    lv_itArtifactIndex = 1;
    for ( ; ( (auto18DC9EAE_ai >= 0 && lv_itArtifactIndex <= auto18DC9EAE_ae) || (auto18DC9EAE_ai <= 0 && lv_itArtifactIndex >= auto18DC9EAE_ae) ) ; lv_itArtifactIndex += auto18DC9EAE_ai ) {
        if ((PlayerArtifact(lp_player, lv_itArtifactIndex) != null) && (libGame_gf_ArtifactSlotIsValidForArtifactType(PlayerArtifact(lp_player, lv_itArtifactIndex), lv_itArtifactIndex) == true)) {
            libGame_gv_players[lp_player].lv_artifacts[lv_itArtifactIndex].lv_artifact = PlayerArtifact(lp_player, lv_itArtifactIndex);
            libGame_gv_players[lp_player].lv_artifacts[lv_itArtifactIndex].lv_rank = PlayerArtifactRank(lp_player, lv_itArtifactIndex);
        }
        else {
        }
    }
    if ((libCore_gv_sYSArtifactsOn == true)) {
        libGame_gf_ArtifactsApplyArtifactModificationsForPlayerOnUnit(lp_player, libGame_gv_players[lp_player].lv_heroUnit);
    }
    else {
    }
}

void libGame_gf_ArtifactsApplyArtifactModificationsForPlayerOnUnit (int lp_player, unit lp_unit) {
    int autoCDD7868D_ae;
    int autoCDD7868D_ai;
    string auto07C182AF_val;

    // Variable Declarations
    int lv_itArtifactIndex;
    int lv_artifactRank;

    // Variable Initialization

    // Implementation
    autoCDD7868D_ae = libCore_gv_artifacts_MaxArtifactsPerPlayer_C;
    autoCDD7868D_ai = 1;
    lv_itArtifactIndex = 1;
    for ( ; ( (autoCDD7868D_ai >= 0 && lv_itArtifactIndex <= autoCDD7868D_ae) || (autoCDD7868D_ai <= 0 && lv_itArtifactIndex >= autoCDD7868D_ae) ) ; lv_itArtifactIndex += autoCDD7868D_ai ) {
        lv_artifactRank = libGame_gv_players[lp_player].lv_artifacts[lv_itArtifactIndex].lv_rank;
        auto07C182AF_val = libGame_gv_players[lp_player].lv_artifacts[lv_itArtifactIndex].lv_artifact;
        if (auto07C182AF_val == "AbilityPowerBrilliantTopaz") {
            libGame_gf_ArtifactsSetAPBehaviorsToRankForHero(lp_unit, lv_artifactRank);
        }
        else if (auto07C182AF_val == "AttackDamagePrimalRuby") {
            libGame_gf_ArtifactsSetADBehaviorsToRankForHero(lp_unit, lv_artifactRank);
        }
        else if (auto07C182AF_val == "AttackSpeedSkyfireEmerald") {
            libGame_gf_ArtifactsSetIASBehaviorsToRankForHero(lp_unit, lv_artifactRank);
        }
        else if (auto07C182AF_val == "CooldownReductionRoyalDiamond") {
            libGame_gf_ArtifactsSetCDRModificationToRankForHero(lp_unit, lv_artifactRank);
        }
        else if (auto07C182AF_val == "LifestealBloodSiphon") {
            libGame_gf_ArtifactsSetLifestealBehaviorsToRankForHero(lp_unit, lv_artifactRank);
        }
        else if (auto07C182AF_val == "ManaRegenManaInfusion") {
            if ((UnitHasBehavior2(lp_unit, "NotManaUserDummy") == false)) {
                libGame_gf_ArtifactsSetMRBehaviorsToRankForHero(lp_unit, lv_artifactRank);
            }
            else {
            }
        }
        else if (auto07C182AF_val == "MaxHealthBoldAmethyst") {
            libGame_gf_ArtifactsSetHPBehaviorsToRankForHero(lp_unit, lv_artifactRank);
        }
        else if (auto07C182AF_val == "MaxManaKhaydarinAmulet") {
            if ((UnitHasBehavior2(lp_unit, "NotManaUserDummy") == false)) {
                libGame_gf_ArtifactsSetMANABehaviorsToRankForHero(lp_unit, lv_artifactRank);
            }
            else {
            }
        }
        else if (auto07C182AF_val == "MovementSpeedWirtsLeg") {
            libGame_gf_ArtifactsSetMovespeedBehaviorsToRankForHero(lp_unit, lv_artifactRank);
        }
        else if (auto07C182AF_val == "SiegeDamageDestroyer") {
            libGame_gf_ArtifactsSetSiegeDmgBehaviorsToRankForHero(lp_unit, lv_artifactRank);
        }
        else if (auto07C182AF_val == "DeathTimeReductionSoulstone") {
            libGame_gf_ArtifactsSetDeathTimeReductionModificationToRankForHero(lp_unit, lv_artifactRank);
        }
        else if (auto07C182AF_val == "MountSpeedRidingCrop") {
            libGame_gf_ArtifactsSetMountSpeedModificationToRankForHero(lp_unit, lv_artifactRank);
        }
        else {
        }
    }
}

void libGame_gf_DataPlayersSetABTalentChociesFromHeroDataForPlayer (int lp_heroIndex, int lp_player) {
    int auto0A65C6F4_ae;
    int auto0A65C6F4_ai;
    int auto7A8557B9_ae;
    int auto7A8557B9_ai;

    // Variable Declarations
    int lv_talentIndex;
    int lv_talentTier;
    int lv_talentColumn;
    int lv_itBucketTalent;
    int lv_itBucketTalentABSlot;

    // Variable Initialization

    // Implementation
    auto0A65C6F4_ae = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentCount;
    auto0A65C6F4_ai = 1;
    lv_itBucketTalent = 1;
    for ( ; ( (auto0A65C6F4_ai >= 0 && lv_itBucketTalent <= auto0A65C6F4_ae) || (auto0A65C6F4_ai <= 0 && lv_itBucketTalent >= auto0A65C6F4_ae) ) ; lv_itBucketTalent += auto0A65C6F4_ai ) {
        lv_talentIndex = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentBucket[lv_itBucketTalent].lv_talentIndex;
        lv_talentTier = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentBucket[lv_itBucketTalent].lv_tier;
        lv_talentColumn = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentBucket[lv_itBucketTalent].lv_column;
        auto7A8557B9_ae = libCore_gv_talentsBucket_TierLevels[lv_talentTier].lv_picks;
        auto7A8557B9_ai = 1;
        lv_itBucketTalentABSlot = 1;
        for ( ; ( (auto7A8557B9_ai >= 0 && lv_itBucketTalentABSlot <= auto7A8557B9_ae) || (auto7A8557B9_ai <= 0 && lv_itBucketTalentABSlot >= auto7A8557B9_ae) ) ; lv_itBucketTalentABSlot += auto7A8557B9_ai ) {
            if ((libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_talentTier].lv_talentIndexArray[lv_itBucketTalentABSlot] == 0)) {
                libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_talentTier].lv_talentIndexArray[lv_itBucketTalentABSlot] = lv_talentIndex;
                libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_talentTier].lv_numberOfButtons += 1;
                if ((TalentTreeAllowed(lp_player, (lv_itBucketTalent - 1)) == false)) {
                    libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_talentTier].lv_talentChoiceData.lv_enabled[lv_itBucketTalentABSlot] = false;
                }
                else {
                }
                break;
            }
            else {
            }
        }
    }
    libGame_gf_DataPlayersSetBucketsABChoiceDataForPlayer(lp_player);
}

void libGame_gf_DataPlayersSetABTalentChoicesFromProfileDataForPlayer (int lp_heroIndex, int lp_player, int lp_talentProfileIndex) {
    int auto78CA005B_ae;
    int auto78CA005B_ai;
    int autoD7A31CE7_ae;
    int autoD7A31CE7_ai;

    // Variable Declarations
    int lv_profileIndex;
    int lv_profileTalentIndex;
    int lv_selectedTalent;
    int lv_selectedTalentTier;
    int lv_itBucketTalent;
    int lv_itBucketTalentABSlot;

    // Variable Initialization

    // Implementation
    lv_profileIndex = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentProfiles[lp_talentProfileIndex];
    auto78CA005B_ae = libGame_gv_players[lp_player].lv_activeProfileTalentsPointsSpent;
    auto78CA005B_ai = 1;
    lv_itBucketTalent = 1;
    for ( ; ( (auto78CA005B_ai >= 0 && lv_itBucketTalent <= auto78CA005B_ae) || (auto78CA005B_ai <= 0 && lv_itBucketTalent >= auto78CA005B_ae) ) ; lv_itBucketTalent += auto78CA005B_ai ) {
        lv_profileTalentIndex = libCore_gv_talents_TalentProfiles[lv_profileIndex].lv_talents[lv_itBucketTalent];
        lv_selectedTalent = libGame_gf_TalentBucketFindTalentInBucketForPlayer(lv_profileTalentIndex, lp_player);
        if ((lv_selectedTalent > 0)) {
            lv_selectedTalentTier = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentBucket[lv_selectedTalent].lv_tier;
            autoD7A31CE7_ae = libCore_gv_talentsBucket_TierLevels[lv_selectedTalentTier].lv_picks;
            autoD7A31CE7_ai = 1;
            lv_itBucketTalentABSlot = 1;
            for ( ; ( (autoD7A31CE7_ai >= 0 && lv_itBucketTalentABSlot <= autoD7A31CE7_ae) || (autoD7A31CE7_ai <= 0 && lv_itBucketTalentABSlot >= autoD7A31CE7_ae) ) ; lv_itBucketTalentABSlot += autoD7A31CE7_ai ) {
                if ((libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_selectedTalentTier].lv_talentIndexArray[lv_itBucketTalentABSlot] == 0)) {
                    libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_selectedTalentTier].lv_talentIndexArray[lv_itBucketTalentABSlot] = lv_profileTalentIndex;
                    libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_selectedTalentTier].lv_numberOfButtons += 1;
                    break;
                }
                else {
                }
            }
        }
        else {
        }
    }
    libGame_gf_DataPlayersSetBucketsABChoiceDataForPlayer(lp_player);
}

void libGame_gf_DataPlayersSetBucketsABChoiceDataForPlayer (int lp_player) {
    int autoEF23017F_ae;
    int autoEF23017F_ai;
    int autoE9B95C10_ae;
    int autoE9B95C10_ai;
    int auto80FF0625_ae;
    int auto80FF0625_ai;

    // Variable Declarations
    int lv_itButtonIndex;
    int lv_itBehavior;
    string lv_talentID;
    string lv_buttonID;
    string lv_abilID;
    int lv_itBucketTier;
    int lv_itBucketTalent;

    // Variable Initialization
    lv_talentID = "";
    lv_buttonID = "";
    lv_abilID = "";

    // Implementation
    autoEF23017F_ae = libCore_gv_talentsBucket_MaxTiers_C;
    autoEF23017F_ai = 1;
    lv_itBucketTier = 1;
    for ( ; ( (autoEF23017F_ai >= 0 && lv_itBucketTier <= autoEF23017F_ae) || (autoEF23017F_ai <= 0 && lv_itBucketTier >= autoEF23017F_ae) ) ; lv_itBucketTier += autoEF23017F_ai ) {
        autoE9B95C10_ae = libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_itBucketTier].lv_numberOfButtons;
        autoE9B95C10_ai = 1;
        lv_itButtonIndex = 1;
        for ( ; ( (autoE9B95C10_ai >= 0 && lv_itButtonIndex <= autoE9B95C10_ae) || (autoE9B95C10_ai <= 0 && lv_itButtonIndex >= autoE9B95C10_ae) ) ; lv_itButtonIndex += autoE9B95C10_ai ) {
            lv_talentID = (libCore_gv_talents_TalentData[libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_itBucketTier].lv_talentIndexArray[lv_itButtonIndex]].lv_talentCatalogLink);
            libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_itBucketTier].lv_talentChoiceData.lv_behaviorCount[lv_itButtonIndex] = CatalogFieldValueCount(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString(0) + "].BehaviorArray", c_playerAny);
            auto80FF0625_ae = libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_itBucketTier].lv_talentChoiceData.lv_behaviorCount[lv_itButtonIndex];
            auto80FF0625_ai = 1;
            lv_itBehavior = 1;
            for ( ; ( (auto80FF0625_ai >= 0 && lv_itBehavior <= auto80FF0625_ae) || (auto80FF0625_ai <= 0 && lv_itBehavior >= auto80FF0625_ae) ) ; lv_itBehavior += auto80FF0625_ai ) {
                libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_itBucketTier].lv_talentChoiceData.lv_behaviors[lv_itButtonIndex][lv_itBehavior] = (CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString(0) + "].BehaviorArray[" + IntToString((lv_itBehavior - 1)) + "]", c_playerAny));
            }
            lv_buttonID = CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString(0) + "].Face", c_playerAny);
            libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_itBucketTier].lv_talentChoiceData.lv_icon[lv_itButtonIndex] = (CatalogFieldValueGet(c_gameCatalogButton, lv_buttonID, "Icon", c_playerAny));
            libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_itBucketTier].lv_talentChoiceData.lv_tooltipSimple[lv_itButtonIndex] = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_buttonID, "Tooltip", c_playerAny));
            libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_itBucketTier].lv_talentChoiceData.lv_tooltipExpanded[lv_itButtonIndex] = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "Face", c_playerAny), "Tooltip", c_playerAny));
            if ((libCore_gv_talents_TalentData[libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_itBucketTier].lv_talentIndexArray[lv_itButtonIndex]].lv_masteryAbilLink != null)) {
                libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_itBucketTier].lv_talentChoiceData.lv_isMastery[lv_itButtonIndex] = true;
            }
            else {
            }
        }
    }
}

void libGame_gf_DataPlayersClearBucketsABChoiceDataForPlayer (int lp_player) {
    int auto05D23769_ae;
    int auto05D23769_ai;
    int autoB0227372_ae;
    int autoB0227372_ai;
    int autoA40310D1_ae;
    int autoA40310D1_ai;

    // Variable Declarations
    int lv_itButtonIndex;
    int lv_itBehavior;
    int lv_choiceIndex;
    int lv_itBucketTier;

    // Variable Initialization

    // Implementation
    auto05D23769_ae = libCore_gv_talentsBucket_MaxTiers_C;
    auto05D23769_ai = 1;
    lv_itBucketTier = 1;
    for ( ; ( (auto05D23769_ai >= 0 && lv_itBucketTier <= auto05D23769_ae) || (auto05D23769_ai <= 0 && lv_itBucketTier >= auto05D23769_ae) ) ; lv_itBucketTier += auto05D23769_ai ) {
        autoB0227372_ae = libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_itBucketTier].lv_numberOfButtons;
        autoB0227372_ai = 1;
        lv_itButtonIndex = 1;
        for ( ; ( (autoB0227372_ai >= 0 && lv_itButtonIndex <= autoB0227372_ae) || (autoB0227372_ai <= 0 && lv_itButtonIndex >= autoB0227372_ae) ) ; lv_itButtonIndex += autoB0227372_ai ) {
            libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_itBucketTier].lv_talentChoiceData.lv_behaviorCount[lv_itButtonIndex] = 0;
            autoA40310D1_ae = libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_itBucketTier].lv_talentChoiceData.lv_behaviorCount[lv_itButtonIndex];
            autoA40310D1_ai = 1;
            lv_itBehavior = 1;
            for ( ; ( (autoA40310D1_ai >= 0 && lv_itBehavior <= autoA40310D1_ae) || (autoA40310D1_ai <= 0 && lv_itBehavior >= autoA40310D1_ae) ) ; lv_itBehavior += autoA40310D1_ai ) {
                libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_itBucketTier].lv_talentChoiceData.lv_behaviors[lv_itButtonIndex][lv_itBehavior] = null;
            }
            libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_itBucketTier].lv_talentChoiceData.lv_icon[lv_itButtonIndex] = null;
            libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_itBucketTier].lv_talentChoiceData.lv_tooltipSimple[lv_itButtonIndex] = null;
            libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_itBucketTier].lv_talentChoiceData.lv_tooltipExpanded[lv_itButtonIndex] = null;
            libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_itBucketTier].lv_talentChoiceData.lv_isMastery[lv_itButtonIndex] = false;
            libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_itBucketTier].lv_talentIndexArray[lv_itButtonIndex] = 0;
        }
        libGame_gv_players[lp_player].lv_talentsBucketABChoices[lv_itBucketTier].lv_numberOfButtons = 0;
    }
}

trigger auto_libGame_gf_SpawnHero_Trigger = null;
int auto_libGame_gf_SpawnHero_lp_player;
int auto_libGame_gf_SpawnHero_lp_heroIndex;
point auto_libGame_gf_SpawnHero_lp_spawnLocation;

void libGame_gf_SpawnHero (int lp_player, int lp_heroIndex, point lp_spawnLocation) {
    auto_libGame_gf_SpawnHero_lp_player = lp_player;
    auto_libGame_gf_SpawnHero_lp_heroIndex = lp_heroIndex;
    auto_libGame_gf_SpawnHero_lp_spawnLocation = lp_spawnLocation;

    if (auto_libGame_gf_SpawnHero_Trigger == null) {
        auto_libGame_gf_SpawnHero_Trigger = TriggerCreate("auto_libGame_gf_SpawnHero_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_SpawnHero_Trigger, false, false);
}

bool auto_libGame_gf_SpawnHero_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libGame_gf_SpawnHero_lp_player;
    int lp_heroIndex = auto_libGame_gf_SpawnHero_lp_heroIndex;
    point lp_spawnLocation = auto_libGame_gf_SpawnHero_lp_spawnLocation;

    // Variable Declarations
    int lv_activeRune;
    string lv_behaviorID;

    // Variable Initialization
    lv_behaviorID = "";

    // Implementation
    while (!((libGame_gv_players[lp_player].lv_heroSpawnReady == true))) {
        Wait(0.0625, c_timeGame);
    }
    PlayerSetSkin(lp_player, libCore_gv_dataSkinsSkinData[libGame_gv_players[lp_player].lv_selectedSkin].lv_skinID);
    libNtve_gf_CreateUnitsAtPoint2(1, libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_unitType, 0, lp_player, lp_spawnLocation);
    libGame_gv_players[lp_player].lv_heroUnit = UnitLastCreated();
    UnitGroupClear(libGame_gv_players[lp_player].lv_heroUnitGroup);
    UnitGroupAdd(libGame_gv_players[lp_player].lv_heroUnitGroup, UnitLastCreated());
    libGame_gv_players[lp_player].lv_heroIndex = lp_heroIndex;
    libGame_gv_players[lp_player].lv_portraitIcon = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_portrait;
    libCore_gf_SendSkinActorMessagesToUnit(libCore_gv_dataSkinsSkinData[libGame_gv_players[lp_player].lv_selectedSkin].lv_skinID, UnitLastCreated());
    UnitGroupAdd(libGame_gv_heroes, UnitLastCreated());
    UnitStatusBarOverride(UnitLastCreated(), c_unitStatusGroupAll);
    PathCreateForUnit(libCore_gv_playerGroupFromPlayer[lp_player], UnitLastCreated());
    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilEffectInstant, c_abilClassFilterExcluded);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilEffectTarget, c_abilClassFilterExcluded);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilArmMagazine, c_abilClassFilterExcluded);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilBuild, c_abilClassFilterExcluded);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilInventory, c_abilClassFilterExcluded);
    libGame_gv_players[lp_player].lv_pathDisplay = PathLastCreated();
    libNtve_gf_SendActorMessageToUnit(libGame_gv_players[lp_player].lv_heroUnit, "Signal Respawn");
    UnitSelect(libGame_gv_players[lp_player].lv_heroUnit, lp_player, true);
    libGame_gv_players[lp_player].lv_playerStatus = libGame_ge_PlayerStatusStorm_Playing;
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroTrackerArrow.lv_arrow, libGame_gv_players[lp_player].lv_heroUnit, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uIHeroTrackerArrow.lv_portraitImage, (CatalogFieldValueGet(c_gameCatalogActor, libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_unitType, "MinimapIcon", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_player]);
    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(libGame_gv_players[lp_player].lv_heroUnit, lp_player);
    libUIUI_gf_UIHeroConsoleSetUpForPlayer(libGame_gv_players[lp_player].lv_heroUnit, lp_player);
    libUIUI_gf_UIUnitStatusFramesHookupUnitStatusFramesForPlayer(lp_player);
    libUIUI_gf_UIHeroConsoleShowHideForPlayer(true, lp_player);
    if ((libNtve_gf_PlayerInCinematicMode(lp_player) == false)) {
        UISetMode(libCore_gv_playerGroupFromPlayer[lp_player], c_uiModeConsole, c_transitionDurationImmediate);
        libUIUI_gf_TopBarPanelShowHideForPlayer(true, lp_player);
        libUIUI_gf_UIGameUIShowHideConsolePanelForPlayer(true, lp_player);
    }
    else {
    }
    PlayerSetHero(lp_player, libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_heroCatalogLink);
    StatEventCreate("PlayerSpawned");
    StatEventAddDataInt(StatEventLastCreated(), "PlayerID", lp_player);
    StatEventAddDataString(StatEventLastCreated(), "Hero", (libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_unitType));
    StatEventSend(StatEventLastCreated());
    ActorScopeSend(ActorScopeFromUnit(libGame_gv_players[lp_player].lv_heroUnit), "StatusIncrement PreventDestroyOnDeath");
    UnitBehaviorAdd(libGame_gv_players[lp_player].lv_heroUnit, "NearShop", libGame_gv_players[lp_player].lv_heroUnit, 1);
    libGame_gf_SendEventHeroSpecialCaseMounting(lp_player);
    if ((libGame_gv_heroDeath_RespawnMounted == true)) {
        libGame_gf_ApplyMountBehaviorToHero(libGame_gv_players[lp_player].lv_heroUnit);
    }
    else {
    }
    libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[lp_player].lv_heroUnitGroup;
    libGame_gf_CameraUpdateCameraForPlayer(lp_player);
    libAIAI_gf_HeroAISetupUnitDangerTracking(libGame_gv_players[lp_player].lv_heroUnit);
    Wait(0.125, c_timeGame);
    if ((libCore_gv_sYSArtifactsOn == true)) {
        libGame_gf_ArtifactsSetArtifactsForPlayer(lp_player);
    }
    else {
    }
    libUIUI_gf_TalentsBucketSetUpTalentsPanelForPlayer(lp_player);
    if ((libCore_gv_tUTTalentsAutobuyOn == true) && (libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentProfiles[libCore_gv_talents_AutobuyProfileIndex_C] != 0)) {
        libUIUI_gf_TalentsBucketSetTalentProfileForPlayerByIndex(libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentProfiles[libCore_gv_talents_AutobuyProfileIndex_C], lp_player);
        libGame_gf_DataPlayersSetABTalentChoicesFromProfileDataForPlayer(lp_heroIndex, lp_player, libCore_gv_talents_AutobuyProfileIndex_C);
        libGame_gf_SendEventHeroGainTalent(lp_player);
    }
    else {
        libGame_gf_DataPlayersSetABTalentChociesFromHeroDataForPlayer(lp_heroIndex, lp_player);
    }
    SetTalentTreeHeroLevel(lp_player, 0);
    libGame_gf_LevelUpHero(libGame_gv_players[lp_player].lv_heroUnit);
    libUIUI_gf_UIObserverUIAddPlayerToObserverUI(lp_player);
    libUIUI_gf_TopBarTeamLevelHookUpXPBarUnitForTeamAndShowTeamLevelLabel(libGame_gf_TeamNumberOfPlayer(lp_player), libGame_gv_players[lp_player].lv_heroUnit);
    return true;
}

trigger auto_libGame_gf_SpawnHeroesForTeam_Trigger = null;
int auto_libGame_gf_SpawnHeroesForTeam_lp_team;

void libGame_gf_SpawnHeroesForTeam (int lp_team) {
    auto_libGame_gf_SpawnHeroesForTeam_lp_team = lp_team;

    if (auto_libGame_gf_SpawnHeroesForTeam_Trigger == null) {
        auto_libGame_gf_SpawnHeroesForTeam_Trigger = TriggerCreate("auto_libGame_gf_SpawnHeroesForTeam_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_SpawnHeroesForTeam_Trigger, false, false);
}

bool auto_libGame_gf_SpawnHeroesForTeam_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libGame_gf_SpawnHeroesForTeam_lp_team;

    playergroup auto6879AF6E_g;
    int auto6879AF6E_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    auto6879AF6E_g = libGame_gv_teams[lp_team].lv_teamPlayerGroup; 
    auto6879AF6E_p = 1;
    for ( ; auto6879AF6E_p <= PlayerGroupCount(auto6879AF6E_g) ; auto6879AF6E_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto6879AF6E_g, auto6879AF6E_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto6879AF6E_g, auto6879AF6E_p);
        if ((lv_itPlayer <= libCore_gv_bALMaxPlayers) && (PlayerStatus(lv_itPlayer) != c_playerStatusUnused) && (libGame_gv_players[lv_itPlayer].lv_heroUnit == null)) {
            libGame_gf_SpawnHero(lv_itPlayer, libGame_gv_players[lv_itPlayer].lv_heroIndex, libGame_gv_players[lv_itPlayer].lv_spawnPoint);
            Wait(libGame_gv_individualHeroSpawnMiniDelay_C, c_timeGame);
        }
        else {
        }
    }
    return true;
}

void libGame_gf_SpawnHeroesForBothTeams () {
    int auto434A30E3_ae;
    int auto434A30E3_ai;
    int auto7B27C0CF_ae;
    int auto7B27C0CF_ai;
    playergroup autoD57830E2_g;
    int autoD57830E2_p;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;
    bool lv_ready;

    // Variable Initialization

    // Implementation
    auto434A30E3_ae = libCore_gv_bALMaxTeams;
    auto434A30E3_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (auto434A30E3_ai >= 0 && lv_itTeam <= auto434A30E3_ae) || (auto434A30E3_ai <= 0 && lv_itTeam >= auto434A30E3_ae) ) ; lv_itTeam += auto434A30E3_ai ) {
        libGame_gf_SpawnHeroesForTeam(lv_itTeam);
    }
    if ((libGame_gv_heroSpawnBlockGame == false)) {
        return ;
    }
    else {
    }
    while (true) {
        lv_ready = true;
        auto7B27C0CF_ae = libCore_gv_bALMaxTeams;
        auto7B27C0CF_ai = 1;
        lv_itTeam = 1;
        for ( ; ( (auto7B27C0CF_ai >= 0 && lv_itTeam <= auto7B27C0CF_ae) || (auto7B27C0CF_ai <= 0 && lv_itTeam >= auto7B27C0CF_ae) ) ; lv_itTeam += auto7B27C0CF_ai ) {
            autoD57830E2_g = libGame_gv_teams[lv_itTeam].lv_teamPlayerGroup; 
            autoD57830E2_p = 1;
            for ( ; autoD57830E2_p <= PlayerGroupCount(autoD57830E2_g) ; autoD57830E2_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(autoD57830E2_g, autoD57830E2_p)) ) {
                lv_itPlayer = PlayerGroupPlayer(autoD57830E2_g, autoD57830E2_p);
                if ((lv_itPlayer <= libCore_gv_bALMaxPlayers) && (PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
                    if ((libGame_gv_players[lv_itPlayer].lv_heroUnit == null)) {
                        lv_ready = false;
                        break;
                    }
                    else {
                    }
                }
                else {
                }
            }
            if ((lv_ready == false)) {
                break;
            }
            else {
            }
        }
        if ((lv_ready == true)) {
            return ;
        }
        else {
        }
        Wait(0.125, c_timeGame);
    }
}

void libGame_gf_PreloadHeroesForTeam (int lp_team) {
    playergroup autoD88D129F_g;
    int autoD88D129F_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    autoD88D129F_g = libGame_gv_teams[lp_team].lv_teamPlayerGroup; 
    autoD88D129F_p = 1;
    for ( ; autoD88D129F_p <= PlayerGroupCount(autoD88D129F_g) ; autoD88D129F_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(autoD88D129F_g, autoD88D129F_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoD88D129F_g, autoD88D129F_p);
        if ((libGame_gv_players[lv_itPlayer].lv_heroIndex != 0)) {
            libNtve_gf_PreloadUnit(libCore_gv_dataHeroesHeroData[libGame_gv_players[lv_itPlayer].lv_heroIndex].lv_unitType, false);
        }
        else {
        }
    }
}

void libGame_gf_ShareUnshareVisionOfAlliesForPlayer (bool lp_onOff, int lp_player) {
    playergroup auto198D0B9F_g;
    int auto198D0B9F_p;

    // Variable Declarations
    int lv_i;
    unit lv_u;
    playergroup lv_allyPlayerGroup;

    // Variable Initialization
    lv_allyPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_allyPlayerGroup = libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lp_player)].lv_teamPlayerGroup;
    auto198D0B9F_g = lv_allyPlayerGroup; 
    auto198D0B9F_p = 1;
    for ( ; auto198D0B9F_p <= PlayerGroupCount(auto198D0B9F_g) ; auto198D0B9F_p += BoolToInt(lv_i == PlayerGroupPlayer(auto198D0B9F_g, auto198D0B9F_p)) ) {
        lv_i = PlayerGroupPlayer(auto198D0B9F_g, auto198D0B9F_p);
        if ((lv_i != lp_player)) {
            PlayerSetAlliance(lv_i, c_allianceIdVision, lp_player, lp_onOff);
        }
        else {
        }
    }
}

void libGame_gf_EndGameForPlayerStorm (int lp_player) {
    // Implementation
    libGame_gf_ScoreValuesReportForPlayer(lp_player);
    libGame_gv_players[lp_player].lv_gameEndedForPlayer = true;
    GameOver(lp_player, libGame_gv_players[lp_player].lv_victoryDefeat, true, true);
}

trigger auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_Trigger = null;
int auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_lp_player;
string auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_lp_displacingBehavior;

void libGame_gf_PlayerHeroDisplacementCameraUnlock (int lp_player, string lp_displacingBehavior) {
    auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_lp_player = lp_player;
    auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_lp_displacingBehavior = lp_displacingBehavior;

    if (auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_Trigger == null) {
        auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_Trigger = TriggerCreate("auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_Trigger, false, false);
}

bool auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_lp_player;
    string lp_displacingBehavior = auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_lp_displacingBehavior;

    // Implementation
    while (((UnitBehaviorCount(libGame_gv_players[lp_player].lv_heroUnit, lp_displacingBehavior) >= 1) && (UnitIsAlive(libGame_gv_players[lp_player].lv_heroUnit) == true))) {
        Wait(0.0625, c_timeGame);
    }
    libGame_gv_players[lp_player].lv_cameraPlayerHasControl = true;
    libGame_gf_CameraUpdateCameraForPlayer(EventPlayer());
    return true;
}

void libGame_gf_UpdateScalingForUnit (unit lp_unit, int lp_desiredLevel, int lp_existingLevel, int lp_desiredXPBuffAmount) {
    // Variable Declarations
    int lv_xPToApply;

    // Variable Initialization

    // Implementation
    lv_xPToApply = (lp_desiredLevel - lp_existingLevel);
    if ((lv_xPToApply > 0)) {
        UnitXPAddXP(lp_unit, null, lv_xPToApply);
    }
    else {
    }
    UnitSetCustomValue(lp_unit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_XPBuffAmount), lp_desiredXPBuffAmount);
}

void libGame_gf_UpdateUpgradesForPlayer (int lp_player, unit lp_unit, int lp_level) {
    // Variable Declarations
    string lv_upgrade;

    // Variable Initialization

    // Implementation
    lv_upgrade = (((UnitGetType(lp_unit)) + "Upgrade"));
    if ((lv_upgrade != null)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_upgrade, lp_level);
    }
    else {
    }
}

void libGame_gf_JungleUpdateScalingForCamp (int lp_camp, int lp_scalingTicks) {
    int autoC1B55DFB_ae;
    int autoC1B55DFB_ai;

    // Variable Declarations
    int lv_itDefender;
    int lv_currentDefenderScalingTicks;
    int lv_newDefenderScalingTicks;
    int lv_newMercScalingTicks;
    int lv_campDefenderType;
    unit lv_creepUnit;

    // Variable Initialization

    // Implementation
    lv_currentDefenderScalingTicks = libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCurrentDefenderScalingTicks;
    lv_newDefenderScalingTicks = MinI(lp_scalingTicks, libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderNumberOfRanks);
    lv_newMercScalingTicks = MinI(lp_scalingTicks, libMapM_gv_jungleCreepCamps[lp_camp].lv_mercNumberOfRanks);
    lv_campDefenderType = (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType);
    autoC1B55DFB_ae = libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCount;
    autoC1B55DFB_ai = 1;
    lv_itDefender = 1;
    for ( ; ( (autoC1B55DFB_ai >= 0 && lv_itDefender <= autoC1B55DFB_ae) || (autoC1B55DFB_ai <= 0 && lv_itDefender >= autoC1B55DFB_ae) ) ; lv_itDefender += autoC1B55DFB_ai ) {
        lv_creepUnit = libAIAI_gf_DefenderUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_aIDefenderAIIndex, lv_itDefender);
        if ((lv_creepUnit != null) && (UnitIsAlive(lv_creepUnit) == true)) {
            libGame_gf_UpdateScalingForUnit(lv_creepUnit, lv_newDefenderScalingTicks, lv_currentDefenderScalingTicks, libMapM_gv_dataJungleCampDefenderData[lv_campDefenderType].lv_xPBuffAmount[lv_newDefenderScalingTicks]);
            UnitSetPropertyFixed(lv_creepUnit, c_unitPropLifePercent, 100.0);
        }
        else {
        }
    }
    libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCurrentDefenderScalingTicks = lv_newDefenderScalingTicks;
    libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCurrentMercScalingTicks = lv_newMercScalingTicks;
}

void libGame_gf_JungleUpdateScalingForCamps () {
    int autoBC04B9D5_ae;
    int autoBC04B9D5_ai;

    // Variable Declarations
    int lv_camp;

    // Variable Initialization

    // Implementation
    autoBC04B9D5_ae = libMapM_gv_jungleNumberOfCreepCamps;
    autoBC04B9D5_ai = 1;
    lv_camp = 1;
    for ( ; ( (autoBC04B9D5_ai >= 0 && lv_camp <= autoBC04B9D5_ae) || (autoBC04B9D5_ai <= 0 && lv_camp >= autoBC04B9D5_ae) ) ; lv_camp += autoBC04B9D5_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lv_camp].lv_aIState == libMapM_ge_JungleCampStates_Idle)) {
            libGame_gf_JungleUpdateScalingForCamp(lv_camp, libGame_gv_scalingTicks);
        }
        else {
        }
    }
}

void libGame_gf_CoreUpdateScaling () {
    int autoD19BFE26_ae;
    int autoD19BFE26_ai;

    // Variable Declarations
    int lv_itTeam;
    int lv_existingLevel;
    int lv_xPToApply;

    // Variable Initialization

    // Implementation
    autoD19BFE26_ae = libCore_gv_bALMaxTeams;
    autoD19BFE26_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (autoD19BFE26_ai >= 0 && lv_itTeam <= autoD19BFE26_ae) || (autoD19BFE26_ai <= 0 && lv_itTeam >= autoD19BFE26_ae) ) ; lv_itTeam += autoD19BFE26_ai ) {
        UnitXPSetCurrentLevel(libGame_gv_teams[lv_itTeam].lv_core, null, libGame_gv_scalingTicks);
    }
}

void libGame_gf_MMInitializeScalingDataForHostileNPCs (int lp_scalingType, string lp_scalingBehavior) {
    int autoBE4E3CEB_ae;
    int autoBE4E3CEB_ai;
    int auto77DD46DF_val;

    // Variable Declarations
    int lv_itRank;
    int lv_behaviorScalingLevels;

    // Variable Initialization

    // Implementation
    lv_behaviorScalingLevels = (CatalogFieldValueCount(c_gameCatalogBehavior, lp_scalingBehavior, "VeterancyLevelArray", c_playerAny) - 1);
    autoBE4E3CEB_ae = libCore_gv_dataScalingMaxScalingTicks;
    autoBE4E3CEB_ai = 1;
    lv_itRank = 1;
    for ( ; ( (autoBE4E3CEB_ai >= 0 && lv_itRank <= autoBE4E3CEB_ae) || (autoBE4E3CEB_ai <= 0 && lv_itRank >= autoBE4E3CEB_ae) ) ; lv_itRank += autoBE4E3CEB_ai ) {
        auto77DD46DF_val = lp_scalingType;
        if (auto77DD46DF_val == libGame_ge_MMScalingType_MINION) {
            libGame_gv_mMMinionScalingChanges[lv_itRank].lv_xP = StringToInt(CatalogFieldValueGet(c_gameCatalogBehavior, lp_scalingBehavior, "VeterancyLevelArray[" + IntToString(lv_itRank) + "].Modification.Food", c_playerAny));
        }
        else if (auto77DD46DF_val == libGame_ge_MMScalingType_BOSS) {
            libGame_gv_mMBossScalingChanges[lv_itRank].lv_xP = StringToInt(CatalogFieldValueGet(c_gameCatalogBehavior, lp_scalingBehavior, "VeterancyLevelArray[" + IntToString(lv_itRank) + "].Modification.Food", c_playerAny));
        }
        else {
        }
    }
}

void libGame_gf_ScoreValuesReportIntegerValueAndLog (int lp_player, string lp_score, int lp_value) {
    // Implementation
    PlayerScoreValueSetFromInt(lp_player, lp_score, lp_value);
}

void libGame_gf_ScoreValuesReportRealValueAndLog (int lp_player, string lp_score, fixed lp_value) {
    // Implementation
    PlayerScoreValueSetFromFixed(lp_player, lp_score, lp_value);
}

void libGame_gf_ScoreValuesReportForPlayer (int lp_player) {
    int auto6CE795AE_val;
    int autoE4DEA447_val;
    int auto4351418E_val;
    int autoF7279039_val;
    int autoC92E084A_val;
    int autoD6CBF14B_val;
    playergroup auto9665A00A_g;
    int auto9665A00A_p;
    int auto76440E23_val;
    playergroup auto1B472315_g;
    int auto1B472315_p;
    int auto5D5836B4_val;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itScoreValue;
    int lv_team;
    int lv_heroIndex;
    int lv_earnedMetaXPValue;
    int lv_trackedXPValueSum;
    bool lv_matchFound;

    // Variable Initialization

    // Implementation
    lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_earnedMetaXPValue = FixedToInt(UnitGetPropertyFixed(libGame_gv_players[lp_player].lv_heroUnit, c_unitPropXP, c_unitPropCurrent));
    if ((libCore_gv_dEBUGDebuggingEnabled == true) && (libUIUI_gv_uIDebugPanelDebugMetaXPValue > 0)) {
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "MetaExperience", libUIUI_gv_uIDebugPanelDebugMetaXPValue);
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "ExperienceFromTrickle", libUIUI_gv_uIDebugPanelDebugMetaXPValue);
    }
    else {
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "MetaExperience", lv_earnedMetaXPValue);
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "ExperienceFromTrickle", FixedToInt(libGame_gv_players[lp_player].lv_xPRecievedFromTrickle));
    }
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "ExperienceFromMinionsAndCreeps", FixedToInt((libGame_gv_players[lp_player].lv_xPRecievedFromMinions + libGame_gv_players[lp_player].lv_xPRecievedFromCreeps)));
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "ExperienceFromTakedowns", FixedToInt(libGame_gv_players[lp_player].lv_xPRecievedFromHeroes));
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "ExperienceFromTownsDestroyed", FixedToInt(libGame_gv_players[lp_player].lv_xPRecievedFromStructures));
    lv_trackedXPValueSum = (FixedToInt(libGame_gv_players[lp_player].lv_xPRecievedFromMinions) + FixedToInt(libGame_gv_players[lp_player].lv_xPRecievedFromCreeps) + FixedToInt(libGame_gv_players[lp_player].lv_xPRecievedFromHeroes) + FixedToInt(libGame_gv_players[lp_player].lv_xPRecievedFromStructures) + FixedToInt(libGame_gv_players[lp_player].lv_xPRecievedFromTrickle));
    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_Normal) && (AbsI((lv_earnedMetaXPValue - lv_trackedXPValueSum)) > 2)) {
        TextExpressionSetToken("Param/Expression/lib_Game_63D9F63A", "A", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_Game_63D9F63A", "B", IntToText(lv_earnedMetaXPValue));
        TextExpressionSetToken("Param/Expression/lib_Game_63D9F63A", "C", IntToText(lv_trackedXPValueSum));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_63D9F63A"), true);
    }
    else {
    }
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "TeamTownKills", libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lp_player)].lv_townKills);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "TeamMercCampCaptures", libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lp_player)].lv_map_MercCampCaptures);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "MercCampCaptures", libGame_gv_scoreValues[lp_player].lv_creepCampsCaptured);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "WatchTowerCaptures", libGame_gv_scoreValues[lp_player].lv_watchTowersCaptured);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "Level", libGame_gv_scoreValues[lp_player].lv_level);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "TownKills", libGame_gv_scoreValues[lp_player].lv_townKills);
    auto6CE795AE_val = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_class;
    if (auto6CE795AE_val == c_heroRoleWarrior) {
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "PlaysWarrior", 1);
    }
    else if (auto6CE795AE_val == c_heroRoleDamage) {
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "PlaysAssassin", 1);
    }
    else if (auto6CE795AE_val == c_heroRoleSupport) {
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "PlaysSupport", 1);
    }
    else if (auto6CE795AE_val == c_heroRoleSpecialist) {
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "PlaysSpecialist", 1);
    }
    else {
    }
    autoE4DEA447_val = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_universe;
    if (autoE4DEA447_val == c_heroUniverseWarcraft) {
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "PlaysWarCraft", 1);
    }
    else if (autoE4DEA447_val == c_heroUniverseStarCraft) {
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "PlaysStarCraft", 1);
    }
    else if (autoE4DEA447_val == c_heroUniverseDiablo) {
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "PlaysDiablo", 1);
    }
    else {
    }
    auto4351418E_val = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_gender;
    if (auto4351418E_val == c_heroGenderMale) {
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "PlaysMale", 1);
    }
    else if (auto4351418E_val == c_heroGenderFemale) {
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "PlaysFemale", 1);
    }
    else {
    }
    if ((libGame_gv_players[lp_player].lv_victoryDefeat == c_gameOverVictory)) {
        autoF7279039_val = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_class;
        if (autoF7279039_val == c_heroRoleWarrior) {
            libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "WinsWarrior", 1);
        }
        else if (autoF7279039_val == c_heroRoleDamage) {
            libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "WinsAssassin", 1);
        }
        else if (autoF7279039_val == c_heroRoleSupport) {
            libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "WinsSupport", 1);
        }
        else if (autoF7279039_val == c_heroRoleSpecialist) {
            libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "WinsSpecialist", 1);
        }
        else {
        }
        autoC92E084A_val = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_universe;
        if (autoC92E084A_val == c_heroUniverseWarcraft) {
            libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "WinsWarcraft", 1);
        }
        else if (autoC92E084A_val == c_heroUniverseStarCraft) {
            libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "WinsStarCraft", 1);
        }
        else if (autoC92E084A_val == c_heroUniverseDiablo) {
            libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "WinsDiablo", 1);
        }
        else {
        }
        autoD6CBF14B_val = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_gender;
        if (autoD6CBF14B_val == c_heroGenderMale) {
            libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "WinsMale", 1);
        }
        else if (autoD6CBF14B_val == c_heroGenderFemale) {
            libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "WinsFemale", 1);
        }
        else {
        }
        if ((libGame_gv_teams[lv_team].lv_teamPlayerCount == libCore_gv_bALMaxPlayersOnATeam)) {
            lv_matchFound = true;
            auto9665A00A_g = libGame_gv_teams[lv_team].lv_teamPlayerGroupNoNPCPlayers; 
            auto9665A00A_p = 1;
            for ( ; auto9665A00A_p <= PlayerGroupCount(auto9665A00A_g) ; auto9665A00A_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto9665A00A_g, auto9665A00A_p)) ) {
                lv_itPlayer = PlayerGroupPlayer(auto9665A00A_g, auto9665A00A_p);
                if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_universe != libCore_gv_dataHeroesHeroData[libGame_gv_players[lv_itPlayer].lv_heroIndex].lv_universe)) {
                    lv_matchFound = false;
                    break;
                }
                else {
                }
            }
            if ((lv_matchFound == true)) {
                auto76440E23_val = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_universe;
                if (auto76440E23_val == c_heroUniverseWarcraft) {
                    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "TeamWinsWarcraft", 1);
                }
                else if (auto76440E23_val == c_heroUniverseStarCraft) {
                    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "TeamWinsStarCraft", 1);
                }
                else if (auto76440E23_val == c_heroUniverseDiablo) {
                    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "TeamWinsDiablo", 1);
                }
                else {
                }
            }
            else {
            }
            lv_matchFound = true;
            auto1B472315_g = libGame_gv_teams[lv_team].lv_teamPlayerGroupNoNPCPlayers; 
            auto1B472315_p = 1;
            for ( ; auto1B472315_p <= PlayerGroupCount(auto1B472315_g) ; auto1B472315_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto1B472315_g, auto1B472315_p)) ) {
                lv_itPlayer = PlayerGroupPlayer(auto1B472315_g, auto1B472315_p);
                if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_gender != libCore_gv_dataHeroesHeroData[libGame_gv_players[lv_itPlayer].lv_heroIndex].lv_gender)) {
                    lv_matchFound = false;
                    break;
                }
                else {
                }
            }
            if ((lv_matchFound == true)) {
                auto5D5836B4_val = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_gender;
                if (auto5D5836B4_val == c_heroGenderMale) {
                    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "TeamWinsMale", 1);
                }
                else if (auto5D5836B4_val == c_heroGenderFemale) {
                    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "TeamWinsFemale", 1);
                }
                else {
                }
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "RavenTeamNumberOfTimesCursedTheEnemy", libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lp_player)].lv_map_CursesPlacedOnEnemyTeam);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "BlackheartDoubloonsCollected", libGame_gv_scoreValues[lp_player].lv_doubloonsCollected);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "BlackheartDoubloonsDropped", libGame_gv_scoreValues[lp_player].lv_doubloonsDropped);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "BlackheartTeamNumberOfTimesFiredTheCannon", libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lp_player)].lv_map_CannonFirings);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "DragonTeamNumberOfDragonCaptures", libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lp_player)].lv_map_DragonCaptures);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "MinesTeamSkullsCollected", libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lp_player)].lv_map_SkullsCollected);
}

void libGame_gf_ScoreValuesRecordXPContributionForPlayer (int lp_player, fixed lp_amount) {
    // Implementation
    if ((lp_player > libCore_gv_bALMaxPlayers)) {
        return ;
    }
    else {
    }
    libGame_gv_encouragement_XPGathered[lp_player] += lp_amount;
    libGame_gv_scoreValues[lp_player].lv_individualXPEarned += lp_amount;
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "ExperienceContribution", FixedToInt(libGame_gv_scoreValues[lp_player].lv_individualXPEarned));
    libGame_gf_AfkResetWarningTimerForPlayer(lp_player);
}

void libGame_gf_ShrubNearbyEnemyHeroRevealCheck (int lp_player, unit lp_unit, point lp_position) {
    unitgroup auto18B46FF8_g;
    int auto18B46FF8_u;

    // Variable Declarations
    fixed lv_unitRadius;
    region lv_searchRegion;
    unitgroup lv_nearbyEnemyHeroes;
    unit lv_enemyHero;
    fixed lv_enemyHeroRadius;
    fixed lv_distance;
    unitfilter lv_filter;
    const fixed lv_distanceSlop = 0.1;
    const fixed lv_maxHeroRadius = 1.25;

    // Variable Initialization
    lv_nearbyEnemyHeroes = UnitGroupEmpty();
    lv_filter = UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)));

    // Implementation
    lv_unitRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_unit), "Radius", c_playerAny));
    lv_searchRegion = RegionCircle(lp_position, (lv_unitRadius + lv_maxHeroRadius + lv_distanceSlop));
    lv_nearbyEnemyHeroes = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", lp_player, c_unitAllianceEnemy, lv_searchRegion, lv_filter, 0);
    if ((UnitGroupCount(lv_nearbyEnemyHeroes, c_unitCountAlive) > 0)) {
        auto18B46FF8_g = lv_nearbyEnemyHeroes;
        auto18B46FF8_u = 1;
        for ( ; auto18B46FF8_u <= UnitGroupCount(auto18B46FF8_g, c_unitCountAll) ; auto18B46FF8_u += BoolToInt(lv_enemyHero == UnitGroupUnit(auto18B46FF8_g, auto18B46FF8_u)) ) {
            lv_enemyHero = UnitGroupUnit(auto18B46FF8_g, auto18B46FF8_u);
            lv_enemyHeroRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lv_enemyHero), "Radius", c_playerAny));
            lv_distance = DistanceBetweenPoints(lp_position, UnitGetPosition(lv_enemyHero));
            if (((lv_unitRadius + lv_enemyHeroRadius) <= (lv_distance + lv_distanceSlop))) {
                UnitBehaviorAdd(lp_unit, "ShrubProximityRevealed", lv_enemyHero, 1);
                return ;
            }
            else {
            }
        }
    }
    else {
    }
}

int libGame_gf_TownGetTownForUnit (unit lp_unit) {
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_TownIndex)));
}

int libGame_gf_TownGetTownStructureIndexForUnit (unit lp_unit) {
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_TownStructureIndex)));
}

int libGame_gf_TownGetBarracksIndexForUnit (unit lp_unit) {
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_BarracksIndexForMilitia)));
}

int libGame_gf_TownGetTownStructurePresetFromUnitID (string lp_unitType) {
    string auto6BAB2C4D_val;

    // Implementation
    auto6BAB2C4D_val = lp_unitType;
    if (auto6BAB2C4D_val == "TownTownHallL1") {
        return libGame_ge_TownStructureTypes_TownHall;
    }
    else if (auto6BAB2C4D_val == "TownTownHallL2") {
        return libGame_ge_TownStructureTypes_TownHall;
    }
    else if (auto6BAB2C4D_val == "TownTownHallL3") {
        return libGame_ge_TownStructureTypes_TownHall;
    }
    else if (auto6BAB2C4D_val == "TownWallDiagonalBLUR") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallL2DiagonalBLUR") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallL3DiagonalBLUR") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallDiagonalBRUL") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallL2DiagonalBRUL") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallL3DiagonalBRUL") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallHorizontal") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallL2Horizontal") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallL3Horizontal") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallVertical") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallL2Vertical") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallL3Vertical") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial0L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial1L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial2L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial3L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial4L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial5L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial6L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial7L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial8L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial9L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial10L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial11L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial12L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial13L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial14L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial15L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial16L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial17L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial18L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial19L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial20L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial21L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial22L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial23L1") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial0L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial1L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial2L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial3L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial4L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial5L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial6L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial7L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial8L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial9L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial10L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial11L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial12L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial13L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial14L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial15L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial16L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial17L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial18L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial19L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial20L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial21L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial22L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial23L2") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial0L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial1L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial2L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial3L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial4L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial5L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial6L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial7L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial8L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial9L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial10L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial11L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial12L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial13L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial14L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial15L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial16L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial17L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial18L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial19L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial20L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial21L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial22L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownWallRadial23L3") {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if (auto6BAB2C4D_val == "TownGateL1") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateConjoined") {
        return libGame_ge_TownStructureTypes_InvisibleGate;
    }
    else if (auto6BAB2C4D_val == "TownGateL2") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL3") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL1BLUR") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL1BRUL") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL1Horizontal") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL1Vertical") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL215BLUR") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL215BRUL") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL2BLUR") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL2BLURBRVisionBlocked") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL2BLURTLVisionBlocked") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL2BRUL") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL2BRULBLVisionBlocked") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL2BRULTRVisionBlocked") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL2Horizontal") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL2HorizontalBotVisionBlocked") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL2HorizontalTopVisionBlocked") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL2Vertical") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL2VerticalLeftVisionBlocked") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL2VerticalRightVisionBlocked") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL315BRUL") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL315BLUR") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL3BLUR") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL3BLURBRVisionBlocked") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL3BLURTLVisionBlocked") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL3BRUL") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL3BRULBLVisionBlocked") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL3BRULTRVisionBlocked") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL3Horizontal") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL3HorizontalBotVisionBlocked") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL3HorizontalTopVisionBlocked") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL3Vertical") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL3VerticalLeftVisionBlocked") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownGateL3VerticalRightVisionBlocked") {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if (auto6BAB2C4D_val == "TownMoonwell") {
        return libGame_ge_TownStructureTypes_Moonwell;
    }
    else if (auto6BAB2C4D_val == "TownMoonwellL2") {
        return libGame_ge_TownStructureTypes_Moonwell;
    }
    else if (auto6BAB2C4D_val == "TownMoonwellL3") {
        return libGame_ge_TownStructureTypes_Moonwell;
    }
    else if (auto6BAB2C4D_val == "TownCannonTower") {
        return libGame_ge_TownStructureTypes_CannonTower;
    }
    else if (auto6BAB2C4D_val == "TownCannonTowerL2") {
        return libGame_ge_TownStructureTypes_CannonTower;
    }
    else if (auto6BAB2C4D_val == "TownCannonTowerL2Standalone") {
        return libGame_ge_TownStructureTypes_CannonTower;
    }
    else if (auto6BAB2C4D_val == "TownCannonTowerL3") {
        return libGame_ge_TownStructureTypes_CannonTower;
    }
    else if (auto6BAB2C4D_val == "TownCannonTowerL3Standalone") {
        return libGame_ge_TownStructureTypes_CannonTower;
    }
    else if (auto6BAB2C4D_val == "KingsCore") {
        return libGame_ge_TownStructureTypes_Core;
    }
    else {
        return libGame_ge_TownStructureTypes_None;
    }
}

int libGame_gf_TownGetTownHallPresetFromUnitID (string lp_unitType) {
    string auto92E62C3D_val;

    // Implementation
    auto92E62C3D_val = lp_unitType;
    if (auto92E62C3D_val == "TownTownHallL2") {
        return libGame_ge_TownHallTypes_FrontTown;
    }
    else if (auto92E62C3D_val == "TownTownHallL3") {
        return libGame_ge_TownHallTypes_BackTown;
    }
    else {
        return libGame_ge_TownHallTypes_None;
    }
}

int libGame_gf_TownGetTownFromPoint (point lp_point) {
    int auto89A0A625_ae;
    int auto89A0A625_ai;

    // Variable Declarations
    int lv_town;

    // Variable Initialization

    // Implementation
    auto89A0A625_ae = libGame_gv_townTownCount;
    auto89A0A625_ai = 1;
    lv_town = 1;
    for ( ; ( (auto89A0A625_ai >= 0 && lv_town <= auto89A0A625_ae) || (auto89A0A625_ai <= 0 && lv_town >= auto89A0A625_ae) ) ; lv_town += auto89A0A625_ai ) {
        if ((RegionContainsPoint(libGame_gv_townTownData[lv_town].lv_townRegion, lp_point) == true)) {
            return lv_town;
        }
        else {
        }
    }
    return 0;
}

void libGame_gf_TownUpgradeBruiserMinions (int lp_town) {
    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_townTownData[lp_town].lv_owner == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_team = 2;
    }
    else {
        lv_team = 1;
    }
    libGame_gv_laneData[libGame_gv_townTownData[lp_town].lv_lane].lv_bruiserMinionLevel[lv_team] += 1;
}

void libGame_gf_TownAnnounceTownDestroyed (int lp_town, int lp_townType) {
    int auto77C5AA67_val;
    int auto9AC08F08_val;

    // Variable Declarations
    int lv_townHallIndex;

    // Variable Initialization

    // Implementation
    lv_townHallIndex = libGame_gv_townTownData[lp_town].lv_townHallIndex;
    if ((lv_townHallIndex < 0)) {
        return ;
    }
    else {
    }
    SoundPlayForPlayer(SoundLink("UI_Game_Fort_Death", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    if ((libGame_gv_townTownData[lp_town].lv_owner == libCore_gv_cOMPUTER_TeamOrder)) {
        MinimapPing(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_gv_townTownData[lp_town].lv_structureSpawnPoints[lv_townHallIndex], 5.0, libCore_gv_cOLOREnemyColor);
        MinimapPing(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_gv_townTownData[lp_town].lv_structureSpawnPoints[lv_townHallIndex], 5.0, libCore_gv_cOLORAllyColor);
        SoundtrackPlay(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, c_soundtrackCategoryMusic, "MX_Stinger_TownDestroyed_Ally", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        SoundtrackPlay(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, c_soundtrackCategoryMusic, "MX_Stinger_TownDestroyed_Enemy", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        auto77C5AA67_val = lp_townType;
        if (auto77C5AA67_val == libGame_ge_TownHallTypes_FrontTown) {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_AlliedOutpostDestroyed, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_EnemyOutpostDestroyed, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_RedTeamDestroysTown, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        }
        else if (auto77C5AA67_val == libGame_ge_TownHallTypes_BackTown) {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_AlliedKeepDestroyed, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_EnemyKeepDestroyed, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_RedTeamDestroysTown, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        }
        else {
        }
    }
    else {
        MinimapPing(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_gv_townTownData[lp_town].lv_structureSpawnPoints[lv_townHallIndex], 5.0, libCore_gv_cOLORAllyColor);
        MinimapPing(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_gv_townTownData[lp_town].lv_structureSpawnPoints[lv_townHallIndex], 5.0, libCore_gv_cOLOREnemyColor);
        SoundtrackPlay(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, c_soundtrackCategoryMusic, "MX_Stinger_TownDestroyed_Enemy", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        SoundtrackPlay(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, c_soundtrackCategoryMusic, "MX_Stinger_TownDestroyed_Ally", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        auto9AC08F08_val = lp_townType;
        if (auto9AC08F08_val == libGame_ge_TownHallTypes_FrontTown) {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_EnemyOutpostDestroyed, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_AlliedOutpostDestroyed, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_BlueTeamDestroysTown, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        }
        else if (auto9AC08F08_val == libGame_ge_TownHallTypes_BackTown) {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_EnemyKeepDestroyed, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_AlliedKeepDestroyed, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_BlueTeamDestroysTown, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        }
        else {
        }
    }
}

void libGame_gf_TownSetTrainingTextTag (int lp_town, int lp_structureIndex) {
    // Variable Declarations
    unit lv_structure;

    // Variable Initialization

    // Implementation
    lv_structure = libGame_gv_townTownData[lp_town].lv_structureUnits[lp_structureIndex];
    if (((UnitGetOwner(lv_structure) != libGame_gv_townTownData[lp_town].lv_owner) || (UnitIsAlive(lv_structure) == false) || (UnitQueueItemCount(lv_structure, 1) == 0))) {
        TextTagDestroy(libGame_gv_townTownData[lp_town].lv_militaRespawnTextTag[lp_structureIndex]);
        libGame_gv_townTownData[lp_town].lv_militaRespawnTextTag[lp_structureIndex] = c_textTagNone;
        return ;
    }
    else {
    }
    if ((UnitHasBehavior(lv_structure, "ItemCalldownMULEAlive") == true)) {
        TextTagDestroy(libGame_gv_townTownData[lp_town].lv_militaRespawnTextTag[lp_structureIndex]);
        libGame_gv_townTownData[lp_town].lv_militaRespawnTextTag[lp_structureIndex] = c_textTagNone;
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_Game_2DCEE633"), 32, PointWithOffset(libGame_gv_townTownData[lp_town].lv_structureSpawnPoints[lp_structureIndex], 0.0, 1.0), 0.0, true, false, PlayerGroupAll());
        libGame_gv_townTownData[lp_town].lv_militaRespawnTextTag[lp_structureIndex] = TextTagLastCreated();
    }
    else {
        TextTagDestroy(libGame_gv_townTownData[lp_town].lv_militaRespawnTextTag[lp_structureIndex]);
        libGame_gv_townTownData[lp_town].lv_militaRespawnTextTag[lp_structureIndex] = c_textTagNone;
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_Game_D67D53B2"), 32, PointWithOffset(libGame_gv_townTownData[lp_town].lv_structureSpawnPoints[lp_structureIndex], 0.0, 1.0), 0.0, true, false, PlayerGroupAll());
        libGame_gv_townTownData[lp_town].lv_militaRespawnTextTag[lp_structureIndex] = TextTagLastCreated();
    }
}

int libGame_gf_VehiclesGetVehicleLocationTypeIndex (unit lp_unit) {
    // Variable Declarations
    int lv_locationIndex;

    // Variable Initialization

    // Implementation
    lv_locationIndex = FixedToInt(UnitGetCustomValue(lp_unit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_VehicleLocationTypeIndex)));
    return lv_locationIndex;
}

string libGame_gf_VehiclesGetVehicleStringfromPreset (int lp_unitType) {
    int autoD13CE363_val;

    // Implementation
    autoD13CE363_val = lp_unitType;
    if (autoD13CE363_val == libCore_ge_VehicleUnitTypes_LightCycle) {
        return "Light Cycle";
    }
    else if (autoD13CE363_val == libCore_ge_VehicleUnitTypes_SCV) {
        return "Builder";
    }
    else if (autoD13CE363_val == libCore_ge_VehicleUnitTypes_Infestor) {
        return "Raider";
    }
    else if (autoD13CE363_val == libCore_ge_VehicleUnitTypes_FalstadVehicle) {
        return "Gryphon";
    }
    else if (autoD13CE363_val == libCore_ge_VehicleUnitTypes_Trebuchet) {
        return "Trebuchet";
    }
    else if (autoD13CE363_val == libCore_ge_VehicleUnitTypes_Ogrenaut) {
        return "Storm_Merc_Ogrenaut";
    }
    else if (autoD13CE363_val == libCore_ge_VehicleUnitTypes_DragonKnight) {
        return "DragonKnight";
    }
    else {
        return null;
    }
}

string libGame_gf_VehiclesGetVehicleUnitIDFromPreset (int lp_unitType) {
    int autoC042BC2C_val;

    // Implementation
    autoC042BC2C_val = lp_unitType;
    if (autoC042BC2C_val == libCore_ge_VehicleUnitTypes_LightCycle) {
        return "VehicleLightCycle";
    }
    else if (autoC042BC2C_val == libCore_ge_VehicleUnitTypes_SCV) {
        return "VehicleBuilder";
    }
    else if (autoC042BC2C_val == libCore_ge_VehicleUnitTypes_Infestor) {
        return "VehicleZasz";
    }
    else if (autoC042BC2C_val == libCore_ge_VehicleUnitTypes_FalstadVehicle) {
        return "HeroFalstad";
    }
    else if (autoC042BC2C_val == libCore_ge_VehicleUnitTypes_Trebuchet) {
        return "VehicleTrebuchet";
    }
    else if (autoC042BC2C_val == libCore_ge_VehicleUnitTypes_Ogrenaut) {
        return "VehicleOgrenaut";
    }
    else if (autoC042BC2C_val == libCore_ge_VehicleUnitTypes_DragonKnight) {
        return "VehicleDragonKnight";
    }
    else {
        return null;
    }
}

int libGame_gf_VehiclesGetVehicleSpawnNodeIndex (unit lp_unit) {
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_VehicleSpawnNode)));
}

void libGame_gf_VehiclesSetVehicleStatusTextTag (unit lp_vehicle) {
    // Variable Declarations
    int lv_locationIndex;
    int lv_vehicleNode;

    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(lp_vehicle) == true)) {
        if ((UnitHasBehavior(lp_vehicle, "GenericVehicleBehaviorOccupied") == true)) {
        }
        else {
            lv_locationIndex = libGame_gf_TownGetTownForUnit(lp_vehicle);
            TextTagDestroy(libGame_gv_townTownData[lv_locationIndex].lv_vehicleStatusTextTag[lv_vehicleNode]);
            libGame_gv_townTownData[lv_locationIndex].lv_vehicleStatusTextTag[lv_vehicleNode] = c_textTagNone;
        }
    }
    else {
        lv_locationIndex = libGame_gf_TownGetTownForUnit(lp_vehicle);
        TextTagDestroy(libGame_gv_townTownData[lv_locationIndex].lv_vehicleStatusTextTag[lv_vehicleNode]);
        libGame_gv_townTownData[lv_locationIndex].lv_vehicleStatusTextTag[lv_vehicleNode] = c_textTagNone;
        TextExpressionSetToken("Param/Expression/lib_Game_AD94F6F5", "A", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(libGame_gv_townTownData[lv_locationIndex].lv_vehicleRespawnTime[lv_vehicleNode])));
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_Game_AD94F6F5"), 32, PointWithOffset(libGame_gv_townTownData[lv_locationIndex].lv_vehicleSpawnPoint[lv_vehicleNode], 0.0, 1.0), 0.0, true, false, PlayerGroupAll());
        libGame_gv_townTownData[lv_locationIndex].lv_vehicleStatusTextTag[lv_vehicleNode] = TextTagLastCreated();
        TimerStart(libGame_gv_townTownData[lv_locationIndex].lv_vehicleRespawnTimer[lv_vehicleNode], libGame_gv_townTownData[lv_locationIndex].lv_vehicleRespawnTime[lv_vehicleNode], false, c_timeGame);
    }
}

void libGame_gf_VehiclesReturnPlayerFromVehicleAtPoint (int lp_player, point lp_vehicleLocation) {
    string auto2CA932AE_val;

    // Variable Declarations
    fixed lv_modifiedDistance;
    point lv_actualTargetPoint;
    unit lv_driverUnit;
    int lv_itHeroUnit;

    // Variable Initialization

    // Implementation
    lv_actualTargetPoint = lp_vehicleLocation;
    UnitGroupLoopBegin(libGame_gv_players[lp_player].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "UsingVehicle") == true)) {
            lv_driverUnit = UnitGroupLoopCurrent();
            break;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitBehaviorRemove(lv_driverUnit, "UsingVehicle", 1);
    UnitSelect(lv_driverUnit, lp_player, true);
    if ((UnitHasBehavior2(libGame_gv_players[lp_player].lv_heroUnit, "AbathurUltimateEvolutionVehicleCasterBehavior") == false)) {
        while ((PointPathingPassable(lv_actualTargetPoint) == false)) {
            lv_modifiedDistance -= 0.125;
            lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lp_vehicleLocation, lv_modifiedDistance, UnitGetPosition(lv_driverUnit));
        }
        UnitSetPosition(lv_driverUnit, lv_actualTargetPoint, false);
    }
    else {
        UnitBehaviorRemove(lv_driverUnit, "AbathurUltimateEvolutionVehicleCasterBehavior", 1);
    }
    auto2CA932AE_val = UnitGetType(lv_driverUnit);
    if (auto2CA932AE_val == "HeroArthas") {
        UnitGroupLoopBegin(UnitGroup("ArthasGhoul", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(lv_driverUnit), false);
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "UsingVehicle", 1);
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lp_player, UnitGetPosition(lv_driverUnit), 0.0, -1, 0.0, false);
    if ((UnitGroupCount(libGame_gv_players[lp_player].lv_heroUnitGroup, c_unitCountAll) == 1)) {
        libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[lp_player].lv_heroUnitGroup;
        libGame_gf_CameraUpdateCameraForPlayer(lp_player);
    }
    else {
    }
}

trigger auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_Trigger = null;
int auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_lp_watchTower;
int auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_lp_newOwner;

void libGame_gf_WatchTowersChangeWatchTowerOwnership (int lp_watchTower, int lp_newOwner) {
    auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_lp_watchTower = lp_watchTower;
    auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_lp_newOwner = lp_newOwner;

    if (auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_Trigger == null) {
        auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_Trigger = TriggerCreate("auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_Trigger, false, false);
}

bool auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_TriggerFunc (bool testConds, bool runActions) {
    int lp_watchTower = auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_lp_watchTower;
    int lp_newOwner = auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_lp_newOwner;

    playergroup autoFBCD20DD_g;
    int autoFBCD20DD_p;

    // Variable Declarations
    int lv_player;
    unitgroup lv_pillarUnits;

    // Variable Initialization
    lv_pillarUnits = UnitGroupEmpty();

    // Implementation
    if ((lp_newOwner == libCore_gv_cOMPUTER_Neutral)) {
        libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lp_watchTower].lv_watchTowerUnit, "AnimBracketStop Capture");
    }
    else {
        libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lp_watchTower].lv_watchTowerUnit, "AnimBracketStart Capture Stand,Work,Start Stand,Work Stand,Work,End");
    }
    UnitSetOwner(libGame_gv_watchTowers[lp_watchTower].lv_watchTowerUnit, lp_newOwner, true);
    UnitSetOwner(libGame_gv_watchTowers[lp_watchTower].lv_captureBeaconUnit, lp_newOwner, true);
    ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_watchTowers[lp_watchTower].lv_watchTowerUnit), "Signal ActiveSoundTog");
    Wait(0.125, c_timeGame);
    autoFBCD20DD_g = PlayerGroupAll(); 
    autoFBCD20DD_p = 1;
    for ( ; autoFBCD20DD_p <= PlayerGroupCount(autoFBCD20DD_g) ; autoFBCD20DD_p += BoolToInt(lv_player == PlayerGroupPlayer(autoFBCD20DD_g, autoFBCD20DD_p)) ) {
        lv_player = PlayerGroupPlayer(autoFBCD20DD_g, autoFBCD20DD_p);
        VisRevealArea(lv_player, RegionCircle(UnitGetPosition(libGame_gv_watchTowers[lp_watchTower].lv_watchTowerUnit), 0.75), 0.125, false);
    }
    return true;
}

int libGame_gf_WatchTowersGetWatchTowerIndexForUnit (unit lp_unit) {
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_WatchTowerIndex)));
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include Game
//--------------------------------------------------------------------------------------------------
bool libGame_gt_IncludeGame_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_IncludeGame_Init () {
    libGame_gt_IncludeGame = TriggerCreate("libGame_gt_IncludeGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Banks
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeBanks_Func (bool testConds, bool runActions) {
    int auto6D90B843_ae;
    int auto6D90B843_ai;
    int auto33764D94_ae;
    int auto33764D94_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itDeathTip;
    string lv_bankKey;
    int lv_itNewUserTip;

    // Variable Initialization
    lv_bankKey = "";

    // Actions
    if (!runActions) {
        return true;
    }

    auto6D90B843_ae = libCore_gv_bALMaxPlayers;
    auto6D90B843_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto6D90B843_ai >= 0 && lv_itPlayer <= auto6D90B843_ae) || (auto6D90B843_ai <= 0 && lv_itPlayer >= auto6D90B843_ae) ) ; lv_itPlayer += auto6D90B843_ai ) {
        if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
            BankLoad("PlayerSettings", lv_itPlayer);
            libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank = BankLastCreated();
            if ((BankKeyExists(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "Settings", "DeathActionCam") == true)) {
                libGame_gv_players[lv_itPlayer].lv_bankData.lv_settingDeathActionCam = BankValueGetAsFlag(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "Settings", "DeathActionCam");
            }
            else {
                libGame_gv_players[lv_itPlayer].lv_bankData.lv_settingDeathActionCam = false;
                BankValueSetFromFlag(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "Settings", "DeathActionCam", libGame_gv_players[lv_itPlayer].lv_bankData.lv_settingDeathActionCam);
            }
            if ((BankKeyExists(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "Settings", "MinimapCommandsEnabled") == true)) {
                libGame_gv_players[lv_itPlayer].lv_bankData.lv_settingMinimapCommandsEnabled = BankValueGetAsFlag(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "Settings", "MinimapCommandsEnabled");
            }
            else {
                libGame_gv_players[lv_itPlayer].lv_bankData.lv_settingMinimapCommandsEnabled = true;
                BankValueSetFromFlag(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "Settings", "MinimapCommandsEnabled", libGame_gv_players[lv_itPlayer].lv_bankData.lv_settingMinimapCommandsEnabled);
            }
            if ((BankKeyExists(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "TotalPlayCount", "TotalPlayCount") == true)) {
                libGame_gv_players[lv_itPlayer].lv_bankData.lv_totalPlayCount = BankValueGetAsInt(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "TotalPlayCount", "TotalPlayCount");
            }
            else {
            }
            libGame_gv_players[lv_itPlayer].lv_bankData.lv_totalPlayCount += 1;
            BankValueSetFromInt(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "TotalPlayCount", "TotalPlayCount", libGame_gv_players[lv_itPlayer].lv_bankData.lv_totalPlayCount);
            if ((libCore_gv_mAPMapStringID != "") && (BankKeyExists(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "MapPlayCounts", libCore_gv_mAPMapStringID) == true)) {
                libGame_gv_players[lv_itPlayer].lv_bankData.lv_mapPlayCount = BankValueGetAsInt(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "MapPlayCounts", libCore_gv_mAPMapStringID);
            }
            else {
            }
            libGame_gv_players[lv_itPlayer].lv_bankData.lv_mapPlayCount += 1;
            if ((libCore_gv_mAPMapStringID != "")) {
                BankValueSetFromInt(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "MapPlayCounts", libCore_gv_mAPMapStringID, libGame_gv_players[lv_itPlayer].lv_bankData.lv_mapPlayCount);
            }
            else {
            }
            auto33764D94_ae = libGame_gv_encouragement_NumberOfDeathTips_C;
            auto33764D94_ai = 1;
            lv_itDeathTip = 1;
            for ( ; ( (auto33764D94_ai >= 0 && lv_itDeathTip <= auto33764D94_ae) || (auto33764D94_ai <= 0 && lv_itDeathTip >= auto33764D94_ae) ) ; lv_itDeathTip += auto33764D94_ai ) {
                lv_bankKey = libGame_ge_EncouragementDeathTipsNames_Ident(libGame_gf_EncouragementConvertIntegerToDeathTipNamePreset(lv_itDeathTip));
                if ((BankKeyExists(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "DeathTipDisplayCounts", lv_bankKey) == true)) {
                    libGame_gv_players[lv_itPlayer].lv_bankData.lv_deathTipDisplayCount[lv_itDeathTip] = BankValueGetAsInt(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "DeathTipDisplayCounts", lv_bankKey);
                }
                else {
                    libGame_gv_players[lv_itPlayer].lv_bankData.lv_deathTipDisplayCount[lv_itDeathTip] = 0;
                    BankValueSetFromInt(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "DeathTipDisplayCounts", lv_bankKey, libGame_gv_players[lv_itPlayer].lv_bankData.lv_deathTipDisplayCount[lv_itDeathTip]);
                }
            }
            TriggerExecute(libStEx_gt_TrainingModeBankInit, true, false);
            BankSave(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeBanks_Init () {
    libGame_gt_InitializeBanks = TriggerCreate("libGame_gt_InitializeBanks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Game Systems
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeGameSystems_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libGame_gt_InitializeBehaviorCategoryBitFlagValues, true, true);
    TriggerExecute(libGame_gt_InitializeCodeLaneSystem, true, true);
    if ((libCore_gv_sYSTowerAI == true)) {
        libAIAI_gf_TowerTurnTowerSystemOnOff(true);
    }
    else {
    }
    TriggerExecute(libGame_gt_InitializeWatchTowers, true, true);
    TriggerExecute(libGame_gt_InitializeTownSystem, true, true);
    TriggerExecute(libMapM_gt_InitializeJungleCamps, true, true);
    GameTimeOfDayPause(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeGameSystems_Init () {
    libGame_gt_InitializeGameSystems = TriggerCreate("libGame_gt_InitializeGameSystems_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Players
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializePlayers_Func (bool testConds, bool runActions) {
    int auto1FB8724F_ae;
    int auto1FB8724F_ai;
    int autoF679E39A_ae;
    int autoF679E39A_ai;
    int auto7FFD0E17_ae;
    int auto7FFD0E17_ai;
    int autoB55CAFAD_ae;
    int autoB55CAFAD_ai;
    playergroup auto626F615F_g;
    int auto626F615F_p;
    playergroup auto11030675_g;
    int auto11030675_p;
    int auto09A86058_ae;
    int auto09A86058_ai;
    playergroup auto688FB2AB_g;
    int auto688FB2AB_p;
    int auto8A583AF5_ae;
    int auto8A583AF5_ai;
    playergroup autoC2070FBE_g;
    int autoC2070FBE_p;
    playergroup autoF3749984_g;
    int autoF3749984_p;
    int auto410EB58E_ae;
    int auto410EB58E_ai;
    int auto822BCDA9_ae;
    int auto822BCDA9_ai;
    int auto8D65EB03_ae;
    int auto8D65EB03_ai;

    // Variable Declarations
    int lv_index;
    int lv_itTeam;
    int lv_currentEnemyPlayer;
    int lv_indexPlayer1;
    int lv_indexPlayer2;
    playergroup lv_unusedPlayersAddedToOrder;
    playergroup lv_unusedPlayersAddedToChaos;

    // Variable Initialization
    lv_unusedPlayersAddedToOrder = PlayerGroupEmpty();
    lv_unusedPlayersAddedToChaos = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gv_dEBUGDebuggingEnabled == true) && (libCore_gv_sYSGameMode == libCore_ge_GameModes_Normal)) {
        auto1FB8724F_ae = 10;
        auto1FB8724F_ai = 1;
        lv_itTeam = (libCore_gv_bALMaxTeams + 1);
        for ( ; ( (auto1FB8724F_ai >= 0 && lv_itTeam <= auto1FB8724F_ae) || (auto1FB8724F_ai <= 0 && lv_itTeam >= auto1FB8724F_ae) ) ; lv_itTeam += auto1FB8724F_ai ) {
            if ((PlayerGroupCount(GameAttributePlayersForTeam(lv_itTeam)) > 0)) {
                TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_CD5979A1"), true);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/lib_Game_EBB4B199"));
                libCore_gv_dEBUGErrorDuringInitialization = true;
                return true;
            }
            else {
            }
        }
        autoF679E39A_ae = libCore_gv_bALMaxTeams;
        autoF679E39A_ai = 1;
        lv_itTeam = 1;
        for ( ; ( (autoF679E39A_ai >= 0 && lv_itTeam <= autoF679E39A_ae) || (autoF679E39A_ai <= 0 && lv_itTeam >= autoF679E39A_ae) ) ; lv_itTeam += autoF679E39A_ai ) {
            if ((PlayerGroupCount(GameAttributePlayersForTeam(lv_itTeam)) > libCore_gv_bALMaxPlayersOnATeam)) {
                TextExpressionSetToken("Param/Expression/lib_Game_24D5C381", "A", IntToText(lv_itTeam));
                TextExpressionSetToken("Param/Expression/lib_Game_24D5C381", "B", IntToText(libCore_gv_bALMaxPlayersOnATeam));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_24D5C381"), true);
                TextExpressionSetToken("Param/Expression/lib_Game_86FA8A87", "A", IntToText(lv_itTeam));
                TextExpressionSetToken("Param/Expression/lib_Game_86FA8A87", "B", IntToText(libCore_gv_bALMaxPlayersOnATeam));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_Game_86FA8A87"));
                libCore_gv_dEBUGErrorDuringInitialization = true;
                return true;
            }
            else {
            }
        }
    }
    else {
    }
    libGame_gv_players[libCore_gv_cOMPUTER_TeamOrder].lv_faction = libGame_ge_Faction_Order;
    libGame_gv_players[libCore_gv_cOMPUTER_TeamOrder].lv_portraitIcon = "Assets\\Textures\\storm_ui_ingame_hero_icon_towerking_blue.dds";
    libGame_gv_players[libCore_gv_cOMPUTER_TeamOrder].lv_name = StringExternal("Param/Value/lib_Game_CE553E53");
    libNtve_gf_SetAllianceOneWay(libCore_gv_cOMPUTER_Hostile, libCore_gv_cOMPUTER_TeamOrder, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceOneWay(libCore_gv_cOMPUTER_TeamOrder, libCore_gv_cOMPUTER_Hostile, libNtve_ge_AllianceSetting_Neutral);
    libGame_gv_players[libCore_gv_cOMPUTER_TeamChaos].lv_faction = libGame_ge_Faction_Chaos;
    libGame_gv_players[libCore_gv_cOMPUTER_TeamChaos].lv_portraitIcon = "Assets\\Textures\\storm_ui_ingame_hero_icon_towerking_red.dds";
    libGame_gv_players[libCore_gv_cOMPUTER_TeamChaos].lv_name = StringExternal("Param/Value/lib_Game_A7B0450E");
    libNtve_gf_SetAllianceOneWay(libCore_gv_cOMPUTER_Hostile, libCore_gv_cOMPUTER_TeamChaos, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceOneWay(libCore_gv_cOMPUTER_TeamChaos, libCore_gv_cOMPUTER_Hostile, libNtve_ge_AllianceSetting_Neutral);
    libGame_gv_players[libCore_gv_cOMPUTER_Neutral].lv_faction = libGame_ge_Faction_Neutral;
    libGame_gv_players[libCore_gv_cOMPUTER_Neutral].lv_portraitIcon = "Assets\\Textures\\storm_ui_ingame_hero_icon_yeti.dds";
    PlayerSetColorIndex(libCore_gv_cOMPUTER_Neutral, libCore_gv_cOLORNeutralPlayerColor, true);
    libGame_gv_players[libCore_gv_cOMPUTER_Hostile].lv_faction = libGame_ge_Faction_HostileCreeps;
    libGame_gv_players[libCore_gv_cOMPUTER_Hostile].lv_portraitIcon = "Assets\\Textures\\storm_ui_ingame_hero_icon_yeti.dds";
    libGame_gv_players[libCore_gv_cOMPUTER_Hostile].lv_name = StringExternal("Param/Value/lib_Game_923DE167");
    PlayerSetColorIndex(libCore_gv_cOMPUTER_Hostile, libCore_gv_cOLORHostilePlayerColor, true);
    PlayerSetAlliance(libCore_gv_cOMPUTER_TeamOrder, c_allianceIdDefeat, libCore_gv_cOMPUTER_Hostile, true);
    PlayerSetAlliance(libCore_gv_cOMPUTER_TeamChaos, c_allianceIdDefeat, libCore_gv_cOMPUTER_Hostile, true);
    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_Normal)) {
        auto626F615F_g = GameAttributePlayersForTeam(1); 
        auto626F615F_p = 1;
        for ( ; auto626F615F_p <= PlayerGroupCount(auto626F615F_g) ; auto626F615F_p += BoolToInt(lv_index == PlayerGroupPlayer(auto626F615F_g, auto626F615F_p)) ) {
            lv_index = PlayerGroupPlayer(auto626F615F_g, auto626F615F_p);
            libGame_gf_InitializePlayer(lv_index, libGame_ge_Faction_Order);
        }
        auto11030675_g = GameAttributePlayersForTeam(2); 
        auto11030675_p = 1;
        for ( ; auto11030675_p <= PlayerGroupCount(auto11030675_g) ; auto11030675_p += BoolToInt(lv_index == PlayerGroupPlayer(auto11030675_g, auto11030675_p)) ) {
            lv_index = PlayerGroupPlayer(auto11030675_g, auto11030675_p);
            libGame_gf_InitializePlayer(lv_index, libGame_ge_Faction_Chaos);
        }
    }
    else {
        auto7FFD0E17_ae = libCore_gv_bALMaxPlayersOnATeam;
        auto7FFD0E17_ai = 1;
        lv_index = 1;
        for ( ; ( (auto7FFD0E17_ai >= 0 && lv_index <= auto7FFD0E17_ae) || (auto7FFD0E17_ai <= 0 && lv_index >= auto7FFD0E17_ae) ) ; lv_index += auto7FFD0E17_ai ) {
            libGame_gf_InitializePlayer(lv_index, libGame_ge_Faction_Order);
        }
        autoB55CAFAD_ae = libCore_gv_bALMaxPlayers;
        autoB55CAFAD_ai = 1;
        lv_index = (libCore_gv_bALMaxPlayersOnATeam + 1);
        for ( ; ( (autoB55CAFAD_ai >= 0 && lv_index <= autoB55CAFAD_ae) || (autoB55CAFAD_ai <= 0 && lv_index >= autoB55CAFAD_ae) ) ; lv_index += autoB55CAFAD_ai ) {
            libGame_gf_InitializePlayer(lv_index, libGame_ge_Faction_Chaos);
        }
    }
    auto09A86058_ae = libCore_gv_bALMaxPlayers;
    auto09A86058_ai = 1;
    lv_index = 1;
    for ( ; ( (auto09A86058_ai >= 0 && lv_index <= auto09A86058_ae) || (auto09A86058_ai <= 0 && lv_index >= auto09A86058_ae) ) ; lv_index += auto09A86058_ai ) {
        if ((PlayerStatus(lv_index) == c_playerStatusUnused)) {
            if ((libSprt_gv_performanceTestPerformanceTestRunning == true)) {
                if ((PlayerGroupCount(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup) < 5)) {
                    libGame_gf_InitializePlayer(lv_index, libGame_ge_Faction_Order);
                }
                else {
                    if ((PlayerGroupCount(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup) < 5)) {
                        libGame_gf_InitializePlayer(lv_index, libGame_ge_Faction_Chaos);
                    }
                    else {
                    }
                }
            }
            else {
                if ((PlayerGroupCount(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup) < 5)) {
                    libGame_gf_InitializePlayer(lv_index, libGame_ge_Faction_Order);
                    PlayerGroupAdd(lv_unusedPlayersAddedToOrder, lv_index);
                }
                else {
                    if ((PlayerGroupCount(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup) < 5)) {
                        libGame_gf_InitializePlayer(lv_index, libGame_ge_Faction_Chaos);
                        PlayerGroupAdd(lv_unusedPlayersAddedToChaos, lv_index);
                    }
                    else {
                    }
                }
            }
        }
        else {
        }
    }
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libCore_gv_cOMPUTER_TeamOrder);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libCore_gv_cOMPUTER_TeamChaos);
    libNtve_gf_SetPlayerGroupAlliance(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetPlayerGroupAlliance(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    PlayerGroupLoopBegin(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerSetAlliance(libCore_gv_cOMPUTER_TeamChaos, c_allianceIdPower, PlayerGroupLoopCurrent(), true);
        libNtve_gf_SetAllianceOneWay(libCore_gv_cOMPUTER_TeamOrder, PlayerGroupLoopCurrent(), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        PlayerSetColorIndex(PlayerGroupLoopCurrent(), libCore_gv_cOLOROrderPlayerColor, true);
        auto688FB2AB_g = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup; 
        auto688FB2AB_p = 1;
        for ( ; auto688FB2AB_p <= PlayerGroupCount(auto688FB2AB_g) ; auto688FB2AB_p += BoolToInt(lv_currentEnemyPlayer == PlayerGroupPlayer(auto688FB2AB_g, auto688FB2AB_p)) ) {
            lv_currentEnemyPlayer = PlayerGroupPlayer(auto688FB2AB_g, auto688FB2AB_p);
            libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), lv_currentEnemyPlayer, libNtve_ge_AllianceSetting_Enemy);
        }
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), libCore_gv_oBSERVER_ObserverUIPlayer, libNtve_ge_AllianceSetting_Ally);
        PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, libCore_gv_oBSERVER_ObserverUIPlayer, true);
        if ((PlayerGroupLoopCurrent() != libCore_gv_cOMPUTER_TeamOrder)) {
            libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), libCore_gv_cOMPUTER_Hostile, libNtve_ge_AllianceSetting_Enemy);
            PlayerSetAlliance(libCore_gv_cOMPUTER_TeamOrder, c_allianceIdSeekHelp, PlayerGroupLoopCurrent(), false);
            PlayerSetAlliance(libCore_gv_cOMPUTER_TeamOrder, c_allianceIdPower, PlayerGroupLoopCurrent(), true);
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerSetAlliance(libCore_gv_cOMPUTER_TeamOrder, c_allianceIdPower, PlayerGroupLoopCurrent(), true);
        libNtve_gf_SetAllianceOneWay(libCore_gv_cOMPUTER_TeamChaos, PlayerGroupLoopCurrent(), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        PlayerSetColorIndex(PlayerGroupLoopCurrent(), libCore_gv_cOLORChaosPlayerColor, true);
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), libCore_gv_oBSERVER_ObserverUIPlayer, libNtve_ge_AllianceSetting_Enemy);
        PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, libCore_gv_oBSERVER_ObserverUIPlayer, true);
        if ((PlayerGroupLoopCurrent() != libCore_gv_cOMPUTER_TeamChaos)) {
            libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), libCore_gv_cOMPUTER_Hostile, libNtve_ge_AllianceSetting_Enemy);
            PlayerSetAlliance(libCore_gv_cOMPUTER_TeamChaos, c_allianceIdSeekHelp, PlayerGroupLoopCurrent(), false);
            PlayerSetAlliance(libCore_gv_cOMPUTER_TeamChaos, c_allianceIdPower, PlayerGroupLoopCurrent(), true);
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    PlayerSetAlliance(libCore_gv_cOMPUTER_Hostile, c_allianceIdVision, libCore_gv_oBSERVER_ObserverUIPlayer, true);
    PlayerGroupLoopBegin(lv_unusedPlayersAddedToOrder);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerGroupRemove(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(lv_unusedPlayersAddedToChaos);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerGroupRemove(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    UISetResourceTradingAllowed(c_resourceTypeMinerals, false);
    UISetResourceTradingAllowed(c_resourceTypeVespene, false);
    auto8A583AF5_ae = 15;
    auto8A583AF5_ai = 1;
    lv_index = 0;
    for ( ; ( (auto8A583AF5_ai >= 0 && lv_index <= auto8A583AF5_ae) || (auto8A583AF5_ai <= 0 && lv_index >= auto8A583AF5_ae) ) ; lv_index += auto8A583AF5_ai ) {
        MeleeSetOption(lv_index, c_meleeOptionSplitResources, false);
    }
    autoC2070FBE_g = libCore_gv_activeHumanPlayers; 
    autoC2070FBE_p = 1;
    for ( ; autoC2070FBE_p <= PlayerGroupCount(autoC2070FBE_g) ; autoC2070FBE_p += BoolToInt(lv_indexPlayer1 == PlayerGroupPlayer(autoC2070FBE_g, autoC2070FBE_p)) ) {
        lv_indexPlayer1 = PlayerGroupPlayer(autoC2070FBE_g, autoC2070FBE_p);
        autoF3749984_g = PlayerGroupAll(); 
        autoF3749984_p = 1;
        for ( ; autoF3749984_p <= PlayerGroupCount(autoF3749984_g) ; autoF3749984_p += BoolToInt(lv_indexPlayer2 == PlayerGroupPlayer(autoF3749984_g, autoF3749984_p)) ) {
            lv_indexPlayer2 = PlayerGroupPlayer(autoF3749984_g, autoF3749984_p);
            if ((lv_indexPlayer1 != lv_indexPlayer2)) {
                PlayerSetAlliance(lv_indexPlayer1, c_allianceIdTrade, lv_indexPlayer2, false);
            }
            else {
            }
        }
    }
    PlayerGroupAdd(libCore_gv_nPCPlayers, libCore_gv_cOMPUTER_Neutral);
    PlayerGroupAdd(libCore_gv_nPCPlayers, libCore_gv_cOMPUTER_TeamOrder);
    PlayerGroupAdd(libCore_gv_nPCPlayers, libCore_gv_cOMPUTER_TeamChaos);
    PlayerGroupAdd(libCore_gv_nPCPlayers, libCore_gv_cOMPUTER_Hostile);
    auto410EB58E_ae = libCore_gv_bALMaxPlayers;
    auto410EB58E_ai = 1;
    lv_index = 1;
    for ( ; ( (auto410EB58E_ai >= 0 && lv_index <= auto410EB58E_ae) || (auto410EB58E_ai <= 0 && lv_index >= auto410EB58E_ae) ) ; lv_index += auto410EB58E_ai ) {
        PlayerGroupAdd(libCore_gv_allHeroPlayersPlusObserver, lv_index);
    }
    PlayerGroupAdd(libCore_gv_allHeroPlayersPlusObserver, libCore_gv_oBSERVER_ObserverUIPlayer);
    auto822BCDA9_ae = libCore_gv_bALMaxPlayers;
    auto822BCDA9_ai = 1;
    lv_index = 1;
    for ( ; ( (auto822BCDA9_ai >= 0 && lv_index <= auto822BCDA9_ae) || (auto822BCDA9_ai <= 0 && lv_index >= auto822BCDA9_ae) ) ; lv_index += auto822BCDA9_ai ) {
        PlayerSetDeathTimer(lv_index, libGame_gv_players[lv_index].lv_respawnTimer);
    }
    libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_nPCPlayer = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers = PlayerGroupCopy(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup);
    PlayerGroupRemove(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_nPCPlayer);
    libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_nPCPlayer = libCore_gv_cOMPUTER_TeamChaos;
    libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers = PlayerGroupCopy(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup);
    PlayerGroupRemove(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_nPCPlayer);
    auto8D65EB03_ae = libCore_gv_bALMaxTeams;
    auto8D65EB03_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (auto8D65EB03_ai >= 0 && lv_itTeam <= auto8D65EB03_ae) || (auto8D65EB03_ai <= 0 && lv_itTeam >= auto8D65EB03_ae) ) ; lv_itTeam += auto8D65EB03_ai ) {
        libGame_gv_teams[lv_itTeam].lv_teamPlayerCount = PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false));
        libGame_gv_teams[lv_itTeam].lv_activeHumanPlayers = PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializePlayers_Init () {
    libGame_gt_InitializePlayers = TriggerCreate("libGame_gt_InitializePlayers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Visibility
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeVisibility_Func (bool testConds, bool runActions) {
    playergroup autoE4148D4A_g;
    int autoE4148D4A_p;
    playergroup auto6814F9D0_g;
    int auto6814F9D0_p;
    playergroup auto0C1904B1_g;
    int auto0C1904B1_p;
    playergroup auto6F7C59FD_g;
    int auto6F7C59FD_p;
    playergroup autoB48B1BB9_g;
    int autoB48B1BB9_p;
    int auto4D61B2C2_ae;
    int auto4D61B2C2_ai;

    // Variable Declarations
    int lv_player;
    revealer[13] lv_tempRevealer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE4148D4A_g = libCore_gv_allHeroPlayersPlusObserver; 
    autoE4148D4A_p = 1;
    for ( ; autoE4148D4A_p <= PlayerGroupCount(autoE4148D4A_g) ; autoE4148D4A_p += BoolToInt(lv_player == PlayerGroupPlayer(autoE4148D4A_g, autoE4148D4A_p)) ) {
        lv_player = PlayerGroupPlayer(autoE4148D4A_g, autoE4148D4A_p);
        VisExploreArea(lv_player, RegionEntireMap(), true, false);
    }
    auto6814F9D0_g = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup; 
    auto6814F9D0_p = 1;
    for ( ; auto6814F9D0_p <= PlayerGroupCount(auto6814F9D0_g) ; auto6814F9D0_p += BoolToInt(lv_player == PlayerGroupPlayer(auto6814F9D0_g, auto6814F9D0_p)) ) {
        lv_player = PlayerGroupPlayer(auto6814F9D0_g, auto6814F9D0_p);
        VisRevealerCreate(lv_player, libCore_gv_mAPOrderBaseRegion);
        VisRevealerEnable(VisRevealerLastCreated(), true);
        libGame_gv_baseRevealers[lv_player] = VisRevealerLastCreated();
    }
    auto0C1904B1_g = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup; 
    auto0C1904B1_p = 1;
    for ( ; auto0C1904B1_p <= PlayerGroupCount(auto0C1904B1_g) ; auto0C1904B1_p += BoolToInt(lv_player == PlayerGroupPlayer(auto0C1904B1_g, auto0C1904B1_p)) ) {
        lv_player = PlayerGroupPlayer(auto0C1904B1_g, auto0C1904B1_p);
        VisRevealerCreate(lv_player, libCore_gv_mAPChaosBaseRegion);
        VisRevealerEnable(VisRevealerLastCreated(), true);
        libGame_gv_baseRevealers[lv_player] = VisRevealerLastCreated();
    }
    auto6F7C59FD_g = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup; 
    auto6F7C59FD_p = 1;
    for ( ; auto6F7C59FD_p <= PlayerGroupCount(auto6F7C59FD_g) ; auto6F7C59FD_p += BoolToInt(lv_player == PlayerGroupPlayer(auto6F7C59FD_g, auto6F7C59FD_p)) ) {
        lv_player = PlayerGroupPlayer(auto6F7C59FD_g, auto6F7C59FD_p);
        VisRevealerCreate(lv_player, libCore_gv_mAPChaosBaseRegion);
        VisRevealerEnable(VisRevealerLastCreated(), true);
        lv_tempRevealer[lv_player] = VisRevealerLastCreated();
    }
    autoB48B1BB9_g = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup; 
    autoB48B1BB9_p = 1;
    for ( ; autoB48B1BB9_p <= PlayerGroupCount(autoB48B1BB9_g) ; autoB48B1BB9_p += BoolToInt(lv_player == PlayerGroupPlayer(autoB48B1BB9_g, autoB48B1BB9_p)) ) {
        lv_player = PlayerGroupPlayer(autoB48B1BB9_g, autoB48B1BB9_p);
        VisRevealerCreate(lv_player, libCore_gv_mAPOrderBaseRegion);
        VisRevealerEnable(VisRevealerLastCreated(), true);
        lv_tempRevealer[lv_player] = VisRevealerLastCreated();
    }
    Wait(0.125, c_timeGame);
    auto4D61B2C2_ae = 12;
    auto4D61B2C2_ai = 1;
    lv_player = 1;
    for ( ; ( (auto4D61B2C2_ai >= 0 && lv_player <= auto4D61B2C2_ae) || (auto4D61B2C2_ai <= 0 && lv_player >= auto4D61B2C2_ae) ) ; lv_player += auto4D61B2C2_ai ) {
        VisRevealerEnable(lv_tempRevealer[lv_player], false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeVisibility_Init () {
    libGame_gt_InitializeVisibility = TriggerCreate("libGame_gt_InitializeVisibility_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Afk Check Player Score Values For Activity
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AfkCheckPlayerScoreValuesForActivity_Func (bool testConds, bool runActions) {
    int autoAC9E31E6_ae;
    int autoAC9E31E6_ai;
    int auto3E3671D0_ae;
    int auto3E3671D0_ai;
    int autoC7FAAD9C_ae;
    int autoC7FAAD9C_ai;

    // Variable Declarations
    int lv_itPlayer;
    fixed[libCore_gv_bALMaxPlayers + 1] lv_heroDamageScoreValue;
    fixed[libCore_gv_bALMaxPlayers + 1] lv_siegeDamageScoreValue;
    fixed[libCore_gv_bALMaxPlayers + 1] lv_creepDamageScoreValue;
    fixed[libCore_gv_bALMaxPlayers + 1] lv_healingScoreValue;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAC9E31E6_ae = libCore_gv_bALMaxPlayers;
    autoAC9E31E6_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoAC9E31E6_ai >= 0 && lv_itPlayer <= autoAC9E31E6_ae) || (autoAC9E31E6_ai <= 0 && lv_itPlayer >= autoAC9E31E6_ae) ) ; lv_itPlayer += autoAC9E31E6_ai ) {
        lv_heroDamageScoreValue[lv_itPlayer] = PlayerScoreValueGetAsFixed(lv_itPlayer, "HeroDamage");
        lv_siegeDamageScoreValue[lv_itPlayer] = PlayerScoreValueGetAsFixed(lv_itPlayer, "SiegeDamage");
        lv_creepDamageScoreValue[lv_itPlayer] = PlayerScoreValueGetAsFixed(lv_itPlayer, "CreepDamage");
        lv_healingScoreValue[lv_itPlayer] = PlayerScoreValueGetAsFixed(lv_itPlayer, "Healing");
    }
    auto3E3671D0_ae = libCore_gv_bALMaxPlayers;
    auto3E3671D0_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto3E3671D0_ai >= 0 && lv_itPlayer <= auto3E3671D0_ae) || (auto3E3671D0_ai <= 0 && lv_itPlayer >= auto3E3671D0_ae) ) ; lv_itPlayer += auto3E3671D0_ai ) {
        if (((lv_heroDamageScoreValue[lv_itPlayer] > libGame_gv_afk_PlayerScoreValueTracking[lv_itPlayer].lv_heroDamage) || (lv_siegeDamageScoreValue[lv_itPlayer] > libGame_gv_afk_PlayerScoreValueTracking[lv_itPlayer].lv_siegeDamage) || (lv_creepDamageScoreValue[lv_itPlayer] > libGame_gv_afk_PlayerScoreValueTracking[lv_itPlayer].lv_creepDamage) || (lv_healingScoreValue[lv_itPlayer] > libGame_gv_afk_PlayerScoreValueTracking[lv_itPlayer].lv_healing))) {
            libGame_gf_AfkResetWarningTimerForPlayer(lv_itPlayer);
        }
        else {
        }
    }
    autoC7FAAD9C_ae = libCore_gv_bALMaxPlayers;
    autoC7FAAD9C_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoC7FAAD9C_ai >= 0 && lv_itPlayer <= autoC7FAAD9C_ae) || (autoC7FAAD9C_ai <= 0 && lv_itPlayer >= autoC7FAAD9C_ae) ) ; lv_itPlayer += autoC7FAAD9C_ai ) {
        libGame_gv_afk_PlayerScoreValueTracking[lv_itPlayer].lv_heroDamage = lv_heroDamageScoreValue[lv_itPlayer];
        libGame_gv_afk_PlayerScoreValueTracking[lv_itPlayer].lv_siegeDamage = lv_siegeDamageScoreValue[lv_itPlayer];
        libGame_gv_afk_PlayerScoreValueTracking[lv_itPlayer].lv_creepDamage = lv_creepDamageScoreValue[lv_itPlayer];
        libGame_gv_afk_PlayerScoreValueTracking[lv_itPlayer].lv_healing = lv_healingScoreValue[lv_itPlayer];
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AfkCheckPlayerScoreValuesForActivity_Init () {
    libGame_gt_AfkCheckPlayerScoreValuesForActivity = TriggerCreate("libGame_gt_AfkCheckPlayerScoreValuesForActivity_Func");
    TriggerEnable(libGame_gt_AfkCheckPlayerScoreValuesForActivity, false);
    TriggerAddEventTimePeriodic(libGame_gt_AfkCheckPlayerScoreValuesForActivity, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Afk Player Afk Warning Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AfkPlayerAfkWarningTimerExpires_Func (bool testConds, bool runActions) {
    int auto47D26E9F_ae;
    int auto47D26E9F_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_triggeringPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto47D26E9F_ae = libCore_gv_bALMaxPlayers;
    auto47D26E9F_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto47D26E9F_ai >= 0 && lv_itPlayer <= auto47D26E9F_ae) || (auto47D26E9F_ai <= 0 && lv_itPlayer >= auto47D26E9F_ae) ) ; lv_itPlayer += auto47D26E9F_ai ) {
        if ((EventTimer() == libGame_gv_afk_PlayerAfkWarningTimer[lv_itPlayer])) {
            lv_triggeringPlayer = lv_itPlayer;
            break;
        }
        else {
        }
    }
    libGame_gv_afk_PlayerAfkWarnCount[lv_triggeringPlayer] += 1;
    if ((libGame_gv_afk_PlayerAfkWarnCount[lv_triggeringPlayer] == libGame_gv_afk_AfkMaxWarnCount_C)) {
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[lv_triggeringPlayer], c_messageAreaDirective, TextExpressionAssemble("Param/Expression/lib_Game_0DABA161"));
        TimerStart(libGame_gv_afk_PlayerAfkKickTimer[lv_triggeringPlayer], libGame_gv_afk_AfkKickTimerDuration_C, false, c_timeGame);
    }
    else if ((libGame_gv_afk_PlayerAfkWarnCount[lv_triggeringPlayer] > libGame_gv_afk_AfkMaxWarnCount_C)) {
        libGame_gf_AfkKickPlayer(lv_triggeringPlayer);
    }
    else if (true) {
        TextExpressionSetToken("Param/Expression/lib_Game_2879DA39", "A", FixedToText(libGame_gv_afk_AfkKickTimerDuration_C, 0));
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[lv_triggeringPlayer], c_messageAreaDirective, TextExpressionAssemble("Param/Expression/lib_Game_2879DA39"));
        TimerStart(libGame_gv_afk_PlayerAfkKickTimer[lv_triggeringPlayer], libGame_gv_afk_AfkKickTimerDuration_C, false, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AfkPlayerAfkWarningTimerExpires_Init () {
    libGame_gt_AfkPlayerAfkWarningTimerExpires = TriggerCreate("libGame_gt_AfkPlayerAfkWarningTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkWarningTimer[1]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkWarningTimer[2]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkWarningTimer[3]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkWarningTimer[4]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkWarningTimer[5]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkWarningTimer[6]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkWarningTimer[7]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkWarningTimer[8]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkWarningTimer[9]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkWarningTimer[10]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Afk Player Afk Kick Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AfkPlayerAfkKickTimerExpires_Func (bool testConds, bool runActions) {
    int autoBF9EE333_ae;
    int autoBF9EE333_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_triggeringPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBF9EE333_ae = libCore_gv_bALMaxPlayers;
    autoBF9EE333_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoBF9EE333_ai >= 0 && lv_itPlayer <= autoBF9EE333_ae) || (autoBF9EE333_ai <= 0 && lv_itPlayer >= autoBF9EE333_ae) ) ; lv_itPlayer += autoBF9EE333_ai ) {
        if ((EventTimer() == libGame_gv_afk_PlayerAfkKickTimer[lv_itPlayer])) {
            lv_triggeringPlayer = lv_itPlayer;
            break;
        }
        else {
        }
    }
    libGame_gf_AfkKickPlayer(lv_triggeringPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AfkPlayerAfkKickTimerExpires_Init () {
    libGame_gt_AfkPlayerAfkKickTimerExpires = TriggerCreate("libGame_gt_AfkPlayerAfkKickTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkKickTimerExpires, libGame_gv_afk_PlayerAfkKickTimer[1]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkKickTimerExpires, libGame_gv_afk_PlayerAfkKickTimer[2]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkKickTimerExpires, libGame_gv_afk_PlayerAfkKickTimer[3]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkKickTimerExpires, libGame_gv_afk_PlayerAfkKickTimer[4]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkKickTimerExpires, libGame_gv_afk_PlayerAfkKickTimer[5]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkKickTimerExpires, libGame_gv_afk_PlayerAfkKickTimer[6]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkKickTimerExpires, libGame_gv_afk_PlayerAfkKickTimer[7]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkKickTimerExpires, libGame_gv_afk_PlayerAfkKickTimer[8]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkKickTimerExpires, libGame_gv_afk_PlayerAfkKickTimer[9]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkKickTimerExpires, libGame_gv_afk_PlayerAfkKickTimer[10]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Announcement Message Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AnnouncementMessageTimerExpires_Func (bool testConds, bool runActions) {
    int autoCF4991EE_ae;
    int autoCF4991EE_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoCF4991EE_ae = libCore_gv_bALMaxEnginePlayerCount;
    autoCF4991EE_ai = 1;
    lv_player = 1;
    for ( ; ( (autoCF4991EE_ai >= 0 && lv_player <= autoCF4991EE_ae) || (autoCF4991EE_ai <= 0 && lv_player >= autoCF4991EE_ae) ) ; lv_player += autoCF4991EE_ai ) {
        if ((EventTimer() == libGame_gv_announcementQueue[lv_player].lv_messageTimer)) {
            libGame_gf_AnnouncementPlayNextItemForPlayer(lv_player);
            break;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AnnouncementMessageTimerExpires_Init () {
    libGame_gt_AnnouncementMessageTimerExpires = TriggerCreate("libGame_gt_AnnouncementMessageTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[1].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[2].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[3].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[4].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[5].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[6].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[7].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[8].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[9].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[10].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[libCore_gv_oBSERVER_ObserverUIPlayer].lv_messageTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Behavior Category Bit Flag Values
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeBehaviorCategoryBitFlagValues_Func (bool testConds, bool runActions) {
    int auto3044E806_ae;
    int auto3044E806_ai;

    // Variable Declarations
    int lv_itCategory;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_behaviorCategoryCount_C != (c_behaviorCategoryUser15+1))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_53C847C1"), true);
    }
    else {
    }
    auto3044E806_ae = (libGame_gv_behaviorCategoryCount_C - 1);
    auto3044E806_ai = 1;
    lv_itCategory = 0;
    for ( ; ( (auto3044E806_ai >= 0 && lv_itCategory <= auto3044E806_ae) || (auto3044E806_ai <= 0 && lv_itCategory >= auto3044E806_ae) ) ; lv_itCategory += auto3044E806_ai ) {
        libGame_gv_behaviorCategoryBitFlagValues[lv_itCategory] = (1 << lv_itCategory);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeBehaviorCategoryBitFlagValues_Init () {
    libGame_gt_InitializeBehaviorCategoryBitFlagValues = TriggerCreate("libGame_gt_InitializeBehaviorCategoryBitFlagValues_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Capture Point Logic
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CapturePointLogic_Func (bool testConds, bool runActions) {
    int auto429447FB_ae;
    int auto429447FB_ai;
    unitgroup autoC5905908_g;
    int autoC5905908_u;
    int auto26BA7E22_val;

    // Variable Declarations
    const int lv_captureIncrement = 1;
    unit lv_itUnit;
    int lv_capturePointIndex;
    int lv_orderTeamHeroes;
    int lv_chaosTeamHeroes;
    playergroup lv_capturingPlayers;
    bool lv_hasOverCaptureRegion;
    bool lv_becameFullyCaptured;
    bool[libGame_gv_capturePointMaxCount_C + 1] lv_capperHasMercLordTalent;

    // Variable Initialization
    lv_capturingPlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto429447FB_ae = libGame_gv_capturePointCurrentCount;
    auto429447FB_ai = 1;
    lv_capturePointIndex = 1;
    for ( ; ( (auto429447FB_ai >= 0 && lv_capturePointIndex <= auto429447FB_ae) || (auto429447FB_ai <= 0 && lv_capturePointIndex >= auto429447FB_ae) ) ; lv_capturePointIndex += auto429447FB_ai ) {
        if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_enabled == false)) {
            continue;
        }
        else {
        }
        lv_orderTeamHeroes = 0;
        lv_chaosTeamHeroes = 0;
        libGame_gv_capturePoints[lv_capturePointIndex].lv_contested = false;
        autoC5905908_g = UnitGroup(null, c_playerAny, libGame_gv_capturePoints[lv_capturePointIndex].lv_captureRegion, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
        autoC5905908_u = 1;
        for ( ; autoC5905908_u <= UnitGroupCount(autoC5905908_g, c_unitCountAll) ; autoC5905908_u += BoolToInt(lv_itUnit == UnitGroupUnit(autoC5905908_g, autoC5905908_u)) ) {
            lv_itUnit = UnitGroupUnit(autoC5905908_g, autoC5905908_u);
            if (((UnitBehaviorCount(lv_itUnit, "UltimateEvolutionBuff") == 1) || (UnitBehaviorCount(lv_itUnit, "CapturePointAllowed") == 1) || (UnitTestState(lv_itUnit, c_unitStateHallucination) == false))) {
                if ((libGame_gv_players[UnitGetOwner(lv_itUnit)].lv_faction == libGame_ge_Faction_Order)) {
                    lv_orderTeamHeroes += 1;
                }
                else {
                    lv_chaosTeamHeroes += 1;
                }
                PlayerGroupAdd(lv_capturingPlayers, UnitGetOwner(lv_itUnit));
                if ((UnitHasBehavior2(lv_itUnit, "TalentMercenaryLord") == true)) {
                    lv_capperHasMercLordTalent[lv_capturePointIndex] = true;
                }
                else {
                }
            }
            else {
            }
        }
        if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_alwaysDecay == true)) {
            if ((lv_orderTeamHeroes == 0) && (lv_chaosTeamHeroes == 0)) {
                if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < 0)) {
                    libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter += lv_captureIncrement;
                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_RevertingtoNeutral)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_RevertingtoNeutral;
                        libCore_gf_SendActorMessageToDoodadsInRegion("Signal RevertingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                    }
                    else {
                    }
                }
                else {
                }
                if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > 0)) {
                    libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter -= lv_captureIncrement;
                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_RevertingtoNeutral)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_RevertingtoNeutral;
                        libCore_gf_SendActorMessageToDoodadsInRegion("Signal RevertingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                    }
                    else {
                    }
                }
                else {
                }
            }
            else if ((lv_orderTeamHeroes > 0) && (lv_chaosTeamHeroes > 0)) {
                libGame_gv_capturePoints[lv_capturePointIndex].lv_contested = true;
                if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < 0)) {
                    libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter += lv_captureIncrement;
                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_RevertingtoNeutral)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_RevertingtoNeutral;
                        libCore_gf_SendActorMessageToDoodadsInRegion("Signal RevertingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                    }
                    else {
                    }
                }
                else {
                }
                if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > 0)) {
                    libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter -= lv_captureIncrement;
                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_RevertingtoNeutral)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_RevertingtoNeutral;
                        libCore_gf_SendActorMessageToDoodadsInRegion("Signal RevertingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                    }
                    else {
                    }
                }
                else {
                }
            }
        }
        else {
            if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_decayToOwner == true)) {
                auto26BA7E22_val = UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit);
                if (auto26BA7E22_val == libCore_gv_cOMPUTER_TeamOrder) {
                    if ((lv_chaosTeamHeroes == 0) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter += lv_captureIncrement;
                        if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_Capturing)) {
                            libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_Capturing;
                            libCore_gf_SendActorMessageToDoodadsInRegion("Signal CapturingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                        }
                        else {
                        }
                    }
                    else {
                    }
                }
                else if (auto26BA7E22_val == libCore_gv_cOMPUTER_TeamChaos) {
                    if ((lv_orderTeamHeroes == 0) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > (libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture * -1))) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter -= lv_captureIncrement;
                        if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_Capturing)) {
                            libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_Capturing;
                            libCore_gf_SendActorMessageToDoodadsInRegion("Signal CapturingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                        }
                        else {
                        }
                    }
                    else {
                    }
                }
                else if (auto26BA7E22_val == libCore_gv_cOMPUTER_Neutral) {
                    if ((lv_orderTeamHeroes == 0) && (lv_chaosTeamHeroes == 0)) {
                        if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < 0)) {
                            libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter += lv_captureIncrement;
                            if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_RevertingtoNeutral)) {
                                libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_RevertingtoNeutral;
                                libCore_gf_SendActorMessageToDoodadsInRegion("Signal RevertingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                            }
                            else {
                            }
                        }
                        else {
                        }
                        if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > 0)) {
                            libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter -= lv_captureIncrement;
                            if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_RevertingtoNeutral)) {
                                libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_RevertingtoNeutral;
                                libCore_gf_SendActorMessageToDoodadsInRegion("Signal RevertingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                            }
                            else {
                            }
                        }
                        else {
                        }
                    }
                    else {
                    }
                }
                else {
                }
            }
            else {
            }
        }
        if ((lv_orderTeamHeroes > 0) && (lv_chaosTeamHeroes == 0) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints)) {
            if (((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter + lv_captureIncrement) >= libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints)) {
                lv_becameFullyCaptured = true;
                libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter = libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints;
                if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_Captured)) {
                    libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_Captured;
                    libCore_gf_SendActorMessageToDoodadsInRegion("Signal CapturingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                    libCore_gf_SendActorMessageToDoodadsInRegion("Signal CapturedCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                }
                else {
                }
            }
            else {
                libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter += lv_captureIncrement;
                if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < 0)) {
                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_RevertingtoNeutral)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_RevertingtoNeutral;
                        libCore_gf_SendActorMessageToDoodadsInRegion("Signal RevertingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                    }
                    else {
                    }
                }
                else {
                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_Capturing)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_Capturing;
                        libCore_gf_SendActorMessageToDoodadsInRegion("Signal TeamOrderCapturing", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                        libCore_gf_SendActorMessageToDoodadsInRegion("Signal CapturingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                    }
                    else {
                    }
                }
            }
        }
        else {
        }
        if ((lv_chaosTeamHeroes > 0) && (lv_orderTeamHeroes == 0) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > (-1 * libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints))) {
            if (((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter - lv_captureIncrement) <= (-1 * libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints))) {
                lv_becameFullyCaptured = true;
                libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter = (-1 * libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints);
                if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_Captured)) {
                    libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_Captured;
                    libCore_gf_SendActorMessageToDoodadsInRegion("Signal CapturingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                    libCore_gf_SendActorMessageToDoodadsInRegion("Signal CapturedCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                }
                else {
                }
            }
            else {
                libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter -= lv_captureIncrement;
                if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > 0)) {
                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_RevertingtoNeutral)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_RevertingtoNeutral;
                        libCore_gf_SendActorMessageToDoodadsInRegion("Signal RevertingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                    }
                    else {
                    }
                }
                else {
                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_Capturing)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_Capturing;
                        libCore_gf_SendActorMessageToDoodadsInRegion("Signal TeamChaosCapturing", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                        libCore_gf_SendActorMessageToDoodadsInRegion("Signal CapturingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                    }
                    else {
                    }
                }
            }
        }
        else {
        }
        if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter == 0)) {
            if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_Neutral)) {
                libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_Neutral;
                libCore_gf_SendActorMessageToDoodadsInRegion("Signal NeutralCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
            }
            else {
            }
        }
        else {
        }
        libNtve_gf_SetDialogItemCurrentValue(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureProgressBar, (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter + libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints), PlayerGroupAll());
        if ((UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) != libCore_gv_cOMPUTER_Neutral) && (((libGame_gv_capturePoints[lv_capturePointIndex].lv_rememberLastOwner == true) && (UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == libCore_gv_cOMPUTER_TeamOrder) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter <= 0)) || ((libGame_gv_capturePoints[lv_capturePointIndex].lv_rememberLastOwner == true) && (UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == libCore_gv_cOMPUTER_TeamChaos) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter >= 0)) || ((libGame_gv_capturePoints[lv_capturePointIndex].lv_rememberLastOwner == false) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > (libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture * -1)) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture)))) {
            libGame_gf_CapturePointChangeOwnership(lv_capturePointIndex, libCore_gv_cOMPUTER_Neutral, lv_capturingPlayers, lv_capperHasMercLordTalent[lv_capturePointIndex]);
        }
        else if ((UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) != libCore_gv_cOMPUTER_TeamOrder) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter >= libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture)) {
            libGame_gf_CapturePointChangeOwnership(lv_capturePointIndex, libCore_gv_cOMPUTER_TeamOrder, lv_capturingPlayers, lv_capperHasMercLordTalent[lv_capturePointIndex]);
        }
        else if ((UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) != libCore_gv_cOMPUTER_TeamChaos) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter <= (libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture * -1))) {
            libGame_gf_CapturePointChangeOwnership(lv_capturePointIndex, libCore_gv_cOMPUTER_TeamChaos, lv_capturingPlayers, lv_capperHasMercLordTalent[lv_capturePointIndex]);
        }
        lv_hasOverCaptureRegion = (libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints > libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture);
        if ((lv_becameFullyCaptured == true) && (lv_hasOverCaptureRegion == true)) {
            libGame_gf_SendEventCapturePointBecomesFullyOverCaptured(lv_capturePointIndex);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CapturePointLogic_Init () {
    libGame_gt_CapturePointLogic = TriggerCreate("libGame_gt_CapturePointLogic_Func");
    TriggerEnable(libGame_gt_CapturePointLogic, false);
    TriggerAddEventTimePeriodic(libGame_gt_CapturePointLogic, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Slow
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CCRecognitionSlow_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "SlowedCC", UnitBehaviorEffectUnit(EventUnit(), EventUnitBehavior(), c_effectUnitCaster, 0), 1);
    UnitBehaviorSetDuration(EventUnit(), "SlowedCC", UnitBehaviorDuration(EventUnit(), EventUnitBehavior()));
    if ((PlayerHasTalent(UnitGetOwner(EventUnit()), "LiLiMasteryShakeIfOff") == false)) {
        libGame_gf_CCRecognitionCCReduction(EventUnit(), EventUnitBehavior());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CCRecognitionSlow_Init () {
    libGame_gt_CCRecognitionSlow = TriggerCreate("libGame_gt_CCRecognitionSlow_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionSlow, null, c_behaviorCategorySlow, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionSlow, null, c_behaviorCategorySlow, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Root
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CCRecognitionRoot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_behavior;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_behavior = EventUnitBehavior();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_CCRecognitionCCReduction(lv_unit, lv_behavior);
    if ((PlayerHasTalent(UnitGetOwner(EventUnit()), "LiLiMasteryShakeIfOff") == true)) {
        UnitBehaviorAdd(lv_unit, "LiLiShakeItOffCooldown", lv_unit, 1);
    }
    else {
    }
    libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar(lv_behavior, lv_unit);
    UIAlert("YourHeroHasBeenRooted", UnitGetOwner(lv_unit), StringToText(""), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CCRecognitionRoot_Init () {
    libGame_gt_CCRecognitionRoot = TriggerCreate("libGame_gt_CCRecognitionRoot_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionRoot, null, c_behaviorCategoryUser5, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionRoot, null, c_behaviorCategoryUser5, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Stun
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CCRecognitionStun_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_behavior;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_behavior = EventUnitBehavior();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar(lv_behavior, lv_unit);
    if ((lv_behavior != "L90ETCMoshPitStun") && (lv_behavior != "StitchesGorgeTarget") && (lv_behavior != "OctoGrabStun") && (lv_behavior != "HaymakerTargetBehaviorMicroStun") && (lv_behavior != "HaymakerTargetBehaviorStun") && (lv_behavior != "DevouringMawTargetBehavior")) {
        libGame_gf_CCRecognitionCCReduction(lv_unit, lv_behavior);
        if ((PlayerHasTalent(UnitGetOwner(EventUnit()), "LiLiMasteryShakeIfOff") == true)) {
            UnitBehaviorAdd(lv_unit, "LiLiShakeItOffCooldown", lv_unit, 1);
        }
        else {
        }
    }
    else {
    }
    if (((lv_unit == libGame_gv_players[UnitGetOwner(lv_unit)].lv_heroUnit) || (lv_unit == libGame_gv_players[UnitGetOwner(lv_unit)].lv_activeVehicle))) {
        if ((lv_behavior == "Hooked")) {
            libUIUI_gf_FullscreenOverlaysCreateCCEffectFlashForPlayer(UnitGetOwner(lv_unit), 0.0);
        }
        else {
            libUIUI_gf_FullscreenOverlaysCreateCCEffectFlashForPlayer(UnitGetOwner(lv_unit), UnitBehaviorDuration(lv_unit, lv_behavior));
        }
    }
    else {
    }
    UIAlert("YourHeroHasBeenStunned", UnitGetOwner(lv_unit), StringToText(""), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CCRecognitionStun_Init () {
    libGame_gt_CCRecognitionStun = TriggerCreate("libGame_gt_CCRecognitionStun_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionStun, null, c_behaviorCategoryStun, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionStun, null, c_behaviorCategoryStun, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Silenced
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CCRecognitionSilenced_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vertOffset;
    fixed lv_horizOffset;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vertOffset = 2.0;
    lv_horizOffset = RandomFixed(-0.4, -0.6);
    if ((PlayerHasTalent(UnitGetOwner(EventUnit()), "LiLiMasteryShakeIfOff") == false)) {
        libGame_gf_CCRecognitionCCReduction(EventUnit(), EventUnitBehavior());
    }
    else {
    }
    if ((EventUnit() == libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit)) {
        libUIUI_gf_FullscreenOverlaysCreateCCEffectFlashForPlayer(UnitGetOwner(EventUnit()), UnitBehaviorDuration(EventUnit(), EventUnitBehavior()));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CCRecognitionSilenced_Init () {
    libGame_gt_CCRecognitionSilenced = TriggerCreate("libGame_gt_CCRecognitionSilenced_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_CCRecognitionSilenced, null, "TwilightDreamSilence", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(libGame_gt_CCRecognitionSilenced, null, "TwilightDreamSilence", c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChange(libGame_gt_CCRecognitionSilenced, null, "Polymorph", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(libGame_gt_CCRecognitionSilenced, null, "Polymorph", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Dismount Stun
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CCRecognitionDismountStun_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vertOffset;
    fixed lv_horizOffset;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vertOffset = 1.5;
    lv_horizOffset = RandomFixed(0.4, 0.6);
    libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar(EventUnitBehavior(), EventUnit());
    libUIUI_gf_FullscreenOverlaysCreateCCEffectFlashForPlayer(UnitGetOwner(EventUnit()), UnitBehaviorDuration(EventUnit(), EventUnitBehavior()));
    UIAlert("YourHeroHasBeenStunned", UnitGetOwner(EventUnit()), StringToText(""), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CCRecognitionDismountStun_Init () {
    libGame_gt_CCRecognitionDismountStun = TriggerCreate("libGame_gt_CCRecognitionDismountStun_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_CCRecognitionDismountStun, null, "DismountStun", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libGame_gt_CCRecognitionDismountStun, null, "DismountStunFlyer", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Stasis
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CCRecognitionStasis_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vertOffset;
    fixed lv_horizOffset;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vertOffset = 1.5;
    lv_horizOffset = RandomFixed(0.4, 0.6);
    if ((EventUnit() == libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit)) {
        libUIUI_gf_FullscreenOverlaysCreateCCEffectFlashForPlayer(UnitGetOwner(EventUnit()), 0.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CCRecognitionStasis_Init () {
    libGame_gt_CCRecognitionStasis = TriggerCreate("libGame_gt_CCRecognitionStasis_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_CCRecognitionStasis, null, "VoidPrisonDisplay", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encouragement Data Initialize Threshold Values
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EncouragementDataInitializeThresholdValues_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_threshold;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_encouragement_NumberOfStatCalloutThresholds_C != ((libGame_ge_EncouragementStatCalloutThresholds_Count) - 1))) {
        TextExpressionSetToken("Param/Expression/lib_Game_C617B596", "A", IntToText(libGame_gv_encouragement_NumberOfStatCalloutThresholds_C));
        TextExpressionSetToken("Param/Expression/lib_Game_C617B596", "B", IntToText(((libGame_ge_EncouragementStatCalloutThresholds_Count) - 1)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_C617B596"), true);
        return true;
    }
    else {
    }
    if ((libGame_gv_encouragement_NumberOfStatCallouts_C != ((libGame_ge_EncouragementStatCallouts_Count) - 1))) {
        TextExpressionSetToken("Param/Expression/lib_Game_4B567416", "A", IntToText(libGame_gv_encouragement_NumberOfStatCallouts_C));
        TextExpressionSetToken("Param/Expression/lib_Game_4B567416", "B", IntToText(((libGame_ge_EncouragementStatCallouts_Count) - 1)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_4B567416"), true);
        return true;
    }
    else {
    }
    lv_threshold = (libGame_ge_EncouragementStatCalloutThresholds_Display);
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_PercentOfTeamsXPGathered)] = 0.2;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_TimeSpentAlive)] = 180.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_Takedowns)] = 1.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_DamageDoneToHeroes)] = 2500.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_HealingDoneToHeroes)] = 2500.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_MapTributesCollected)] = 1.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_MapDoubloonsTurnedIn)] = 1.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_MapDragonShrineCaptures)] = 1.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_MapSkullsCollected)] = 1.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_MercCampsCaptured)] = 1.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_DamageDoneToTowns)] = 1000.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_ShieldingDoneToHeroes)] = 2500.0;
    lv_threshold = (libGame_ge_EncouragementStatCalloutThresholds_GreatJob);
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_PercentOfTeamsXPGathered)] = 0.2;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_TimeSpentAlive)] = 300.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_Takedowns)] = 4.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_DamageDoneToHeroes)] = 6500.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_HealingDoneToHeroes)] = 6250.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_MapTributesCollected)] = 2.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_MapDoubloonsTurnedIn)] = 5.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_MapDragonShrineCaptures)] = 3.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_MapSkullsCollected)] = 10.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_MercCampsCaptured)] = 2.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_DamageDoneToTowns)] = 6000.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_ShieldingDoneToHeroes)] = 6250.0;
    lv_threshold = (libGame_ge_EncouragementStatCalloutThresholds_Amazing);
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_PercentOfTeamsXPGathered)] = 0.25;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_TimeSpentAlive)] = 600.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_Takedowns)] = 8.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_DamageDoneToHeroes)] = 15000.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_HealingDoneToHeroes)] = 12500.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_MapTributesCollected)] = 3.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_MapDoubloonsTurnedIn)] = 10.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_MapDragonShrineCaptures)] = 6.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_MapSkullsCollected)] = 30.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_MercCampsCaptured)] = 4.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_DamageDoneToTowns)] = 12000.0;
    libGame_gv_encouragement_CalloutStatThresholds[lv_threshold][(libGame_ge_EncouragementStatCallouts_ShieldingDoneToHeroes)] = 12500.0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EncouragementDataInitializeThresholdValues_Init () {
    libGame_gt_EncouragementDataInitializeThresholdValues = TriggerCreate("libGame_gt_EncouragementDataInitializeThresholdValues_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encouragement Data Tracking Raven Tribute Collected
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EncouragementDataTrackingRavenTributeCollected_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_encouragement_CalloutStatTracking[libGame_gf_MapTributePickedUpPlayer()][(libGame_ge_EncouragementStatCallouts_MapTributesCollected)] += 1.0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EncouragementDataTrackingRavenTributeCollected_Init () {
    libGame_gt_EncouragementDataTrackingRavenTributeCollected = TriggerCreate("libGame_gt_EncouragementDataTrackingRavenTributeCollected_Func");
    libGame_gf_MapRavenLordTributePickedUp(libGame_gt_EncouragementDataTrackingRavenTributeCollected);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encouragement Data Tracking Doubloons Turned In
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EncouragementDataTrackingDoubloonsTurnedIn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_encouragement_CalloutStatTracking[libGame_gf_MapDoubloonsDoubloonsTurnedInPlayer()][(libGame_ge_EncouragementStatCallouts_MapDoubloonsTurnedIn)] += libGame_gf_MapDoubloonsDoubloonsTurnedInCount();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EncouragementDataTrackingDoubloonsTurnedIn_Init () {
    libGame_gt_EncouragementDataTrackingDoubloonsTurnedIn = TriggerCreate("libGame_gt_EncouragementDataTrackingDoubloonsTurnedIn_Func");
    libGame_gf_MapDoubloonsDoubloonsTurnedIn(libGame_gt_EncouragementDataTrackingDoubloonsTurnedIn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encouragement Data Tracking Dragon Shrine Captured
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EncouragementDataTrackingDragonShrineCaptured_Func (bool testConds, bool runActions) {
    playergroup autoB7C63532_g;
    int autoB7C63532_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gf_MapDragonShireObeliskOwnershipChangeTeam() == 0)) {
        return true;
    }
    else {
    }
    autoB7C63532_g = libGame_gf_MapDragonShireObeliskOwnershipChangeCapturingPlayers(); 
    autoB7C63532_p = 1;
    for ( ; autoB7C63532_p <= PlayerGroupCount(autoB7C63532_g) ; autoB7C63532_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(autoB7C63532_g, autoB7C63532_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoB7C63532_g, autoB7C63532_p);
        libGame_gv_encouragement_CalloutStatTracking[lv_itPlayer][(libGame_ge_EncouragementStatCallouts_MapDragonShrineCaptures)] += 1.0;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EncouragementDataTrackingDragonShrineCaptured_Init () {
    libGame_gt_EncouragementDataTrackingDragonShrineCaptured = TriggerCreate("libGame_gt_EncouragementDataTrackingDragonShrineCaptured_Func");
    libGame_gf_MapDragonShireObeliskOwnershipChange(libGame_gt_EncouragementDataTrackingDragonShrineCaptured);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encouragement Data Tracking Skull Collected
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EncouragementDataTrackingSkullCollected_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_encouragement_CalloutStatTracking[libGame_gf_MapUnderworldSkullCollectedCollectingPlayer()][(libGame_ge_EncouragementStatCallouts_MapSkullsCollected)] += 1.0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EncouragementDataTrackingSkullCollected_Init () {
    libGame_gt_EncouragementDataTrackingSkullCollected = TriggerCreate("libGame_gt_EncouragementDataTrackingSkullCollected_Func");
    libGame_gf_MapUnderworldSkullCollected(libGame_gt_EncouragementDataTrackingSkullCollected);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encouragement Data Tracking Merc Camp Captured
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EncouragementDataTrackingMercCampCaptured_Func (bool testConds, bool runActions) {
    playergroup autoC20876D5_g;
    int autoC20876D5_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoC20876D5_g = libGame_gf_MercCampCapturedCapturingPlayers(); 
    autoC20876D5_p = 1;
    for ( ; autoC20876D5_p <= PlayerGroupCount(autoC20876D5_g) ; autoC20876D5_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(autoC20876D5_g, autoC20876D5_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoC20876D5_g, autoC20876D5_p);
        libGame_gv_encouragement_CalloutStatTracking[lv_itPlayer][(libGame_ge_EncouragementStatCallouts_MercCampsCaptured)] += 1.0;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EncouragementDataTrackingMercCampCaptured_Init () {
    libGame_gt_EncouragementDataTrackingMercCampCaptured = TriggerCreate("libGame_gt_EncouragementDataTrackingMercCampCaptured_Func");
    libGame_gf_MercCampCaptured(libGame_gt_EncouragementDataTrackingMercCampCaptured);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encouragement Data Tracking In Combat Start
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EncouragementDataTrackingInCombatStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_damagingUnit;
    unit lv_targetUnit;
    int lv_damagingPlayer;
    int lv_targetPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damagingUnit = EventUnitDamageSourceUnit();
    lv_targetUnit = EventUnit();
    lv_damagingPlayer = EventUnitDamageSourcePlayer();
    lv_targetPlayer = EventPlayer();
    if ((UnitIsValid(lv_damagingUnit) == true) && (lv_damagingUnit == libGame_gv_players[lv_damagingPlayer].lv_heroUnit)) {
        libGame_gv_encouragement_DeathTipData[lv_damagingPlayer].lv_inCombat = true;
        TimerStart(libGame_gv_encouragement_DeathTipData[lv_damagingPlayer].lv_inCombatDurationTimer, c_timerDurationInfinite, false, c_timeGame);
        TimerStart(libGame_gv_encouragement_DeathTipData[lv_damagingPlayer].lv_inCombatTimeoutTimer, libGame_gv_encouragement_DeathTipInCombatTimeoutTime_C, false, c_timeGame);
    }
    else {
    }
    if ((UnitIsValid(lv_targetUnit) == true) && (lv_targetUnit == libGame_gv_players[lv_targetPlayer].lv_heroUnit)) {
        libGame_gv_encouragement_DeathTipData[lv_targetPlayer].lv_inCombat = true;
        TimerStart(libGame_gv_encouragement_DeathTipData[lv_targetPlayer].lv_inCombatDurationTimer, c_timerDurationInfinite, false, c_timeGame);
        TimerStart(libGame_gv_encouragement_DeathTipData[lv_targetPlayer].lv_inCombatTimeoutTimer, libGame_gv_encouragement_DeathTipInCombatTimeoutTime_C, false, c_timeGame);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EncouragementDataTrackingInCombatStart_Init () {
    libGame_gt_EncouragementDataTrackingInCombatStart = TriggerCreate("libGame_gt_EncouragementDataTrackingInCombatStart_Func");
    TriggerAddEventUnitDamaged(libGame_gt_EncouragementDataTrackingInCombatStart, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encouragement Data Tracking In Combat Timeout
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EncouragementDataTrackingInCombatTimeout_Func (bool testConds, bool runActions) {
    int auto3FCC8566_ae;
    int auto3FCC8566_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_triggeringPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto3FCC8566_ae = libCore_gv_bALMaxPlayers;
    auto3FCC8566_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto3FCC8566_ai >= 0 && lv_itPlayer <= auto3FCC8566_ae) || (auto3FCC8566_ai <= 0 && lv_itPlayer >= auto3FCC8566_ae) ) ; lv_itPlayer += auto3FCC8566_ai ) {
        if ((EventTimer() == libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_inCombatTimeoutTimer)) {
            lv_triggeringPlayer = lv_itPlayer;
            break;
        }
        else {
        }
    }
    libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_inCombat = false;
    TimerPause(libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_inCombatDurationTimer, true);
    libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_alliedHeroesNearby = true;
    TimerPause(libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_timeWithNoAlliedHeroesNearby, true);
    libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_alliedMinionsNearby = true;
    TimerPause(libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_timeWithNoAlliedMinionsNearby, true);
    libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_enemyMinionDamageTaken = 0.0;
    libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_recentHeroKills = 0;
    libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_recentStructureDamageTaken = false;
    TimerPause(libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_recentStructureDamageTimer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EncouragementDataTrackingInCombatTimeout_Init () {
    libGame_gt_EncouragementDataTrackingInCombatTimeout = TriggerCreate("libGame_gt_EncouragementDataTrackingInCombatTimeout_Func");
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[1].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[2].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[3].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[4].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[5].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[6].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[7].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[8].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[9].lv_inCombatTimeoutTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingInCombatTimeout, libGame_gv_encouragement_DeathTipData[10].lv_inCombatTimeoutTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encouragement Data Tracking Death Tip Periodic Update
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EncouragementDataTrackingDeathTipPeriodicUpdate_Func (bool testConds, bool runActions) {
    int autoEE3135B4_ae;
    int autoEE3135B4_ai;
    int auto321C5818_ae;
    int auto321C5818_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itNumberOfSecondsAgo;
    unit lv_heroUnit;
    int lv_heroIndex;
    point lv_positionOfHeroUnit;
    unitgroup lv_scanGroup;
    bool lv_alliedHeroesNearby;
    bool lv_alliedMinionsNearby;
    int lv_currentBufferIndex;
    bool lv_registerMountedTip;
    int lv_iteratorBufferIndex;
    point lv_iteratorPoint;

    // Variable Initialization
    lv_scanGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoEE3135B4_ae = libCore_gv_bALMaxPlayers;
    autoEE3135B4_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoEE3135B4_ai >= 0 && lv_itPlayer <= autoEE3135B4_ae) || (autoEE3135B4_ai <= 0 && lv_itPlayer >= autoEE3135B4_ae) ) ; lv_itPlayer += autoEE3135B4_ai ) {
        lv_heroUnit = libGame_gv_players[lv_itPlayer].lv_heroUnit;
        if (((lv_heroUnit == null) || (libGame_gv_players[lv_itPlayer].lv_bankData.lv_totalPlayCount > libGame_gv_encouragement_DeathTipGamesPlayedThreshold_C))) {
            continue;
        }
        else {
        }
        lv_heroIndex = libGame_gv_players[lv_itPlayer].lv_heroIndex;
        lv_positionOfHeroUnit = UnitGetPosition(lv_heroUnit);
        if ((libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_inCombat == true)) {
            lv_scanGroup = UnitGroupSearch(null, lv_itPlayer, lv_positionOfHeroUnit, libGame_gv_encouragement_DeathTipNearbyScanRadius_C, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
            lv_alliedHeroesNearby = (UnitGroupCount(UnitGroupFilterAlliance(UnitGroupFilter(null, c_playerAny, lv_scanGroup, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0), lv_itPlayer, c_unitAllianceAlly, 1), c_unitCountAlive) > 0);
            if ((lv_alliedHeroesNearby != libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_alliedHeroesNearby)) {
                libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_alliedHeroesNearby = lv_alliedHeroesNearby;
                if ((lv_alliedHeroesNearby == false)) {
                    TimerStart(libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_timeWithNoAlliedHeroesNearby, c_timerDurationInfinite, false, c_timeGame);
                }
                else {
                }
            }
            else {
            }
            lv_alliedMinionsNearby = (UnitGroupCount(UnitGroupFilterAlliance(UnitGroupFilter(null, c_playerAny, lv_scanGroup, UnitFilter((1 << c_targetFilterBiological), 0, 0, 0), 0), lv_itPlayer, c_unitAllianceAlly, 1), c_unitCountAlive) > 0);
            if ((lv_alliedMinionsNearby != libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_alliedMinionsNearby)) {
                libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_alliedMinionsNearby = lv_alliedMinionsNearby;
                if ((lv_alliedMinionsNearby == false)) {
                    TimerStart(libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_timeWithNoAlliedMinionsNearby, c_timerDurationInfinite, false, c_timeGame);
                }
                else {
                }
            }
            else {
            }
            libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_timeSpentBelowSuperLowHealthThresholdWithoutUsableMoonwellNearby = 0.0;
        }
        else {
            if ((UnitGetPropertyFixed(lv_heroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= libGame_gv_encouragement_SuperLowHealthPercentThreshold_C) && ((UnitHasBehavior2(lv_heroUnit, "HealingFountainCooldown") == true) || (UnitGroupCount(UnitGroupSearch("TownMoonwellL2", lv_itPlayer, lv_positionOfHeroUnit, libGame_gv_encouragement_MoonwellNearbyRangeThreshold_C, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), (1 << (c_targetFilterDead - 32))), 1), c_unitCountAlive) == 0))) {
                libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_timeSpentBelowSuperLowHealthThresholdWithoutUsableMoonwellNearby += libGame_gv_encouragement_PeriodicUpdateFrequency_C;
            }
            else {
                libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_timeSpentBelowSuperLowHealthThresholdWithoutUsableMoonwellNearby = 0.0;
            }
        }
        if ((UnitGetPropertyFixed(lv_heroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= libGame_gv_encouragement_LowHealthPercentThreshold_C)) {
            libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_timeSpentBelowLowHealthThreshold += libGame_gv_encouragement_PeriodicUpdateFrequency_C;
        }
        else {
            libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_timeSpentBelowLowHealthThreshold = 0.0;
        }
        if ((UnitGetPropertyFixed(lv_heroUnit, c_unitPropEnergyPercent, c_unitPropCurrent) <= libGame_gv_encouragement_LowManaPercentThreshold_C)) {
            libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_timeSpentBelowLowManaThreshold += libGame_gv_encouragement_PeriodicUpdateFrequency_C;
        }
        else {
            libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_timeSpentBelowLowManaThreshold = 0.0;
        }
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_usesMounts == true) && (ModF((GameGetMissionTime() * 16.0), 16.0) == 0.0)) {
            libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_mountTipTrackingCurrentBufferIndex += 1;
            if ((libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_mountTipTrackingCurrentBufferIndex > libGame_gv_encouragement_MountTipMaxCheckTimeBufferSize_C)) {
                libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_mountTipTrackingCurrentBufferIndex = 1;
            }
            else {
            }
            lv_currentBufferIndex = libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_mountTipTrackingCurrentBufferIndex;
            libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_mountTipTrackingWasInCombat[lv_currentBufferIndex] = libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_inCombat;
            libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_mountTipTrackingWasMounted[lv_currentBufferIndex] = UnitHasBehavior2(lv_heroUnit, "Mounted");
            libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_mountTipTrackingUsedUnderworldGate[lv_currentBufferIndex] = false;
            lv_registerMountedTip = false;
            if ((libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_mountTipTrackingWasInCombat[lv_currentBufferIndex] == false) && (libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_mountTipTrackingWasMounted[lv_currentBufferIndex] == false) && (libGame_gv_players[lv_itPlayer].lv_isDead == false)) {
                libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_mountTipTrackingPosition[lv_currentBufferIndex] = lv_positionOfHeroUnit;
                auto321C5818_ae = libGame_gv_encouragement_MountTipMaxCheckTimeBufferSize_C;
                auto321C5818_ai = 1;
                lv_itNumberOfSecondsAgo = 1;
                for ( ; ( (auto321C5818_ai >= 0 && lv_itNumberOfSecondsAgo <= auto321C5818_ae) || (auto321C5818_ai <= 0 && lv_itNumberOfSecondsAgo >= auto321C5818_ae) ) ; lv_itNumberOfSecondsAgo += auto321C5818_ai ) {
                    lv_iteratorBufferIndex = (lv_currentBufferIndex - lv_itNumberOfSecondsAgo);
                    if ((lv_iteratorBufferIndex < 1)) {
                        lv_iteratorBufferIndex += libGame_gv_encouragement_MountTipMaxCheckTimeBufferSize_C;
                    }
                    else {
                    }
                    if ((libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_mountTipTrackingWasInCombat[lv_iteratorBufferIndex] == false) && (libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_mountTipTrackingWasMounted[lv_iteratorBufferIndex] == false) && (libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_mountTipTrackingUsedUnderworldGate[lv_iteratorBufferIndex] == false)) {
                        lv_iteratorPoint = libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_mountTipTrackingPosition[lv_iteratorBufferIndex];
                        if ((lv_iteratorPoint != null) && (DistanceBetweenPoints(lv_positionOfHeroUnit, lv_iteratorPoint) >= libGame_gv_encouragement_MountTipThresholdDistance_C)) {
                            lv_registerMountedTip = true;
                            break;
                        }
                        else {
                        }
                    }
                    else {
                        break;
                    }
                }
            }
            else {
                libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_mountTipTrackingPosition[lv_currentBufferIndex] = null;
            }
            if ((lv_registerMountedTip == true)) {
                libGame_gf_EncouragementRegisterDeathTipForPlayer(lv_itPlayer, libGame_ge_EncouragementDeathTipsNames_Mount);
            }
            else {
            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EncouragementDataTrackingDeathTipPeriodicUpdate_Init () {
    libGame_gt_EncouragementDataTrackingDeathTipPeriodicUpdate = TriggerCreate("libGame_gt_EncouragementDataTrackingDeathTipPeriodicUpdate_Func");
    TriggerAddEventTimePeriodic(libGame_gt_EncouragementDataTrackingDeathTipPeriodicUpdate, libGame_gv_encouragement_PeriodicUpdateFrequency_C, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encouragement Data Tracking Player Uses Underworld Gate
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EncouragementDataTrackingPlayerUsesUnderworldGate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = libGame_gf_MapUnderworldPlayerUsesGatePlayer();
    libGame_gv_encouragement_DeathTipData[lv_player].lv_mountTipTrackingUsedUnderworldGate[libGame_gv_encouragement_DeathTipData[lv_player].lv_mountTipTrackingCurrentBufferIndex] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EncouragementDataTrackingPlayerUsesUnderworldGate_Init () {
    libGame_gt_EncouragementDataTrackingPlayerUsesUnderworldGate = TriggerCreate("libGame_gt_EncouragementDataTrackingPlayerUsesUnderworldGate_Func");
    libGame_gf_MapUnderworldPlayerUsesGate(libGame_gt_EncouragementDataTrackingPlayerUsesUnderworldGate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encouragement Data Tracking Recent Hero Kills Timeout
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EncouragementDataTrackingRecentHeroKillsTimeout_Func (bool testConds, bool runActions) {
    int auto88B141DF_ae;
    int auto88B141DF_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_triggeringPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto88B141DF_ae = libCore_gv_bALMaxPlayers;
    auto88B141DF_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto88B141DF_ai >= 0 && lv_itPlayer <= auto88B141DF_ae) || (auto88B141DF_ai <= 0 && lv_itPlayer >= auto88B141DF_ae) ) ; lv_itPlayer += auto88B141DF_ai ) {
        if ((EventTimer() == libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_recentHeroKillTimer)) {
            lv_triggeringPlayer = lv_itPlayer;
            break;
        }
        else {
        }
    }
    libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_recentHeroKills = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EncouragementDataTrackingRecentHeroKillsTimeout_Init () {
    libGame_gt_EncouragementDataTrackingRecentHeroKillsTimeout = TriggerCreate("libGame_gt_EncouragementDataTrackingRecentHeroKillsTimeout_Func");
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingRecentHeroKillsTimeout, libGame_gv_encouragement_DeathTipData[1].lv_recentHeroKillTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingRecentHeroKillsTimeout, libGame_gv_encouragement_DeathTipData[2].lv_recentHeroKillTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingRecentHeroKillsTimeout, libGame_gv_encouragement_DeathTipData[3].lv_recentHeroKillTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingRecentHeroKillsTimeout, libGame_gv_encouragement_DeathTipData[4].lv_recentHeroKillTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingRecentHeroKillsTimeout, libGame_gv_encouragement_DeathTipData[5].lv_recentHeroKillTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingRecentHeroKillsTimeout, libGame_gv_encouragement_DeathTipData[6].lv_recentHeroKillTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingRecentHeroKillsTimeout, libGame_gv_encouragement_DeathTipData[7].lv_recentHeroKillTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingRecentHeroKillsTimeout, libGame_gv_encouragement_DeathTipData[8].lv_recentHeroKillTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingRecentHeroKillsTimeout, libGame_gv_encouragement_DeathTipData[9].lv_recentHeroKillTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingRecentHeroKillsTimeout, libGame_gv_encouragement_DeathTipData[10].lv_recentHeroKillTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encouragement Data Tracking Recent Structure Damage Timeout
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EncouragementDataTrackingRecentStructureDamageTimeout_Func (bool testConds, bool runActions) {
    int autoC1BACC5F_ae;
    int autoC1BACC5F_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_triggeringPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoC1BACC5F_ae = libCore_gv_bALMaxPlayers;
    autoC1BACC5F_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoC1BACC5F_ai >= 0 && lv_itPlayer <= autoC1BACC5F_ae) || (autoC1BACC5F_ai <= 0 && lv_itPlayer >= autoC1BACC5F_ae) ) ; lv_itPlayer += autoC1BACC5F_ai ) {
        if ((EventTimer() == libGame_gv_encouragement_DeathTipData[lv_itPlayer].lv_recentStructureDamageTimer)) {
            lv_triggeringPlayer = lv_itPlayer;
            break;
        }
        else {
        }
    }
    libGame_gv_encouragement_DeathTipData[lv_triggeringPlayer].lv_recentStructureDamageTaken = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EncouragementDataTrackingRecentStructureDamageTimeout_Init () {
    libGame_gt_EncouragementDataTrackingRecentStructureDamageTimeout = TriggerCreate("libGame_gt_EncouragementDataTrackingRecentStructureDamageTimeout_Func");
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingRecentStructureDamageTimeout, libGame_gv_encouragement_DeathTipData[1].lv_recentStructureDamageTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingRecentStructureDamageTimeout, libGame_gv_encouragement_DeathTipData[2].lv_recentStructureDamageTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingRecentStructureDamageTimeout, libGame_gv_encouragement_DeathTipData[3].lv_recentStructureDamageTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingRecentStructureDamageTimeout, libGame_gv_encouragement_DeathTipData[4].lv_recentStructureDamageTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingRecentStructureDamageTimeout, libGame_gv_encouragement_DeathTipData[5].lv_recentStructureDamageTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingRecentStructureDamageTimeout, libGame_gv_encouragement_DeathTipData[6].lv_recentStructureDamageTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingRecentStructureDamageTimeout, libGame_gv_encouragement_DeathTipData[7].lv_recentStructureDamageTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingRecentStructureDamageTimeout, libGame_gv_encouragement_DeathTipData[8].lv_recentStructureDamageTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingRecentStructureDamageTimeout, libGame_gv_encouragement_DeathTipData[9].lv_recentStructureDamageTimer);
    TriggerAddEventTimer(libGame_gt_EncouragementDataTrackingRecentStructureDamageTimeout, libGame_gv_encouragement_DeathTipData[10].lv_recentStructureDamageTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encouragement Data Tracking Player Uses Ability
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EncouragementDataTrackingPlayerUsesAbility_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    abilcmd lv_abilityCommand;
    int lv_abilityClass;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_abilityCommand = EventUnitAbility();
    lv_abilityClass = AbilityClass(AbilityCommandGetAbility(lv_abilityCommand));

    // Conditions
    if (testConds) {
        if (!((lv_player > 0))) {
            return false;
        }

        if (!((lv_player <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((libGame_gv_encouragement_DeathTipData[lv_player].lv_usedAnAbility == false))) {
            return false;
        }

        if (!((lv_abilityCommand != AbilityCommand("Mount", 0)))) {
            return false;
        }

        if (!((lv_abilityCommand != AbilityCommand("Dismount", 0)))) {
            return false;
        }

        if (!((lv_abilityCommand != AbilityCommand("MountFlyer", 0)))) {
            return false;
        }

        if (!((lv_abilityCommand != AbilityCommand("DismountFlyer", 0)))) {
            return false;
        }

        if (!((lv_abilityCommand != AbilityCommand("FountainDrink", 0)))) {
            return false;
        }

        if (!(((lv_abilityClass == c_classIdCAbilBuild) || (lv_abilityClass == c_classIdCAbilEffect) || (lv_abilityClass == c_classIdCAbilEffectInstant) || (lv_abilityClass == c_classIdCAbilEffectTarget) || (lv_abilityClass == c_classIdCAbilMorph) || (lv_abilityClass == c_classIdCAbilMorphPlacement)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_encouragement_DeathTipData[lv_player].lv_usedAnAbility = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EncouragementDataTrackingPlayerUsesAbility_Init () {
    libGame_gt_EncouragementDataTrackingPlayerUsesAbility = TriggerCreate("libGame_gt_EncouragementDataTrackingPlayerUsesAbility_Func");
    TriggerAddEventUnitAbility(libGame_gt_EncouragementDataTrackingPlayerUsesAbility, null, null, c_abilBuildStageConstruct, false);
    TriggerAddEventUnitAbility(libGame_gt_EncouragementDataTrackingPlayerUsesAbility, null, null, c_abilEffectStagePrep, false);
    TriggerAddEventUnitAbility(libGame_gt_EncouragementDataTrackingPlayerUsesAbility, null, null, c_abilMorphStageUnitStart, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Encouragement Data Tracking Player Uses Moonwell
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EncouragementDataTrackingPlayerUsesMoonwell_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    abilcmd lv_abilityCommand;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_abilityCommand = EventUnitAbility();

    // Conditions
    if (testConds) {
        if (!((lv_player > 0))) {
            return false;
        }

        if (!((lv_player <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((libGame_gv_encouragement_DeathTipData[lv_player].lv_usedAMoonwell == false))) {
            return false;
        }

        if (!((lv_abilityCommand == AbilityCommand("FountainDrink", 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_encouragement_DeathTipData[lv_player].lv_usedAMoonwell = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EncouragementDataTrackingPlayerUsesMoonwell_Init () {
    libGame_gt_EncouragementDataTrackingPlayerUsesMoonwell = TriggerCreate("libGame_gt_EncouragementDataTrackingPlayerUsesMoonwell_Func");
    TriggerAddEventUnitAbility(libGame_gt_EncouragementDataTrackingPlayerUsesMoonwell, null, null, c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool libGame_gt_StartGame_Func (bool testConds, bool runActions) {
    int autoF4A1C33C_ae;
    int autoF4A1C33C_ai;
    int auto9EC4C45D_ae;
    int auto9EC4C45D_ai;
    unitgroup auto5FC5AF4E_g;
    int auto5FC5AF4E_u;
    unitgroup auto9120F038_g;
    int auto9120F038_u;
    unitgroup auto479DC650_g;
    int auto479DC650_u;
    unitgroup auto4DFC44F8_g;
    int auto4DFC44F8_u;

    // Variable Declarations
    int lv_itTeam;
    int lv_itPlayer;
    unitgroup lv_towers;
    unit lv_itTower;

    // Variable Initialization
    lv_towers = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerAddEventUnitRegion(libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds, null, libCore_gv_mAPOrderBaseRegion, false);
    TriggerAddEventUnitRegion(libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds, null, libCore_gv_mAPChaosBaseRegion, false);
    TimerStart(libGame_gv_totalTime, c_timerDurationInfinite, false, c_timeGame);
    libUIUI_gf_UIUpdateTimeLabels();
    libGame_gf_HeroSelectionSetBNetHeroAndSkinSelectionsForAllPlayers();
    libAIAI_gf_HeroAIGeneralPreInit();
    autoF4A1C33C_ae = libCore_gv_bALMaxPlayers;
    autoF4A1C33C_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoF4A1C33C_ai >= 0 && lv_itPlayer <= autoF4A1C33C_ae) || (autoF4A1C33C_ai <= 0 && lv_itPlayer >= autoF4A1C33C_ae) ) ; lv_itPlayer += autoF4A1C33C_ai ) {
        if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
            if ((libGame_gv_players[lv_itPlayer].lv_heroIndex == 0)) {
                if ((libSprt_gv_dEBUGHeroMimic == true)) {
                    libGame_gv_players[lv_itPlayer].lv_heroIndex = libGame_gv_players[1].lv_heroIndex;
                }
                else {
                    libGame_gv_players[lv_itPlayer].lv_heroIndex = libGame_gf_HeroSelectionRandomlyPickComplementaryUnusedHero(lv_itPlayer);
                    if ((libGame_gv_players[lv_itPlayer].lv_heroIndex == 0)) {
                        libGame_gv_players[lv_itPlayer].lv_heroIndex = libGame_gf_HeroSelectionRandomlyPickAnyUnusedHero(lv_itPlayer, false, false);
                        if ((libGame_gv_players[lv_itPlayer].lv_heroIndex == 0)) {
                            libGame_gv_players[lv_itPlayer].lv_heroIndex = libGame_gf_HeroSelectionRandomlyPickAnyUnusedHero(lv_itPlayer, true, false);
                            if ((libGame_gv_players[lv_itPlayer].lv_heroIndex == 0)) {
                                TextExpressionSetToken("Param/Expression/lib_Game_99428152", "A", IntToText(lv_itPlayer));
                                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_99428152"), true);
                                libGame_gv_players[lv_itPlayer].lv_heroIndex = libGame_gf_HeroSelectionRandomlyPickAnyUnusedHero(lv_itPlayer, true, true);
                            }
                            else {
                            }
                        }
                        else {
                        }
                    }
                    else {
                    }
                }
            }
            else {
            }
        }
        else {
        }
    }
    libGame_gf_HeroSelectionSetBNetMountSelectionsForAllPlayers();
    libGame_gf_HeroSelectionComputersRandomlyPickSkinsMounts();
    auto9EC4C45D_ae = libCore_gv_bALMaxTeams;
    auto9EC4C45D_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (auto9EC4C45D_ai >= 0 && lv_itTeam <= auto9EC4C45D_ae) || (auto9EC4C45D_ai <= 0 && lv_itTeam >= auto9EC4C45D_ae) ) ; lv_itTeam += auto9EC4C45D_ai ) {
        libGame_gf_PreloadHeroesForTeam(lv_itTeam);
    }
    libGame_gv_heroPickDone = true;
    Wait(libGame_gv_heroSpawnDelay_C, c_timeGame);
    while (!((libGame_gv_heroSpawnReady == true))) {
        Wait(0.0625, c_timeGame);
    }
    libGame_gf_SpawnHeroesForBothTeams();
    while (!((libGame_gv_gateTimerReady == true))) {
        Wait(0.0625, c_timeGame);
    }
    if (((libStEx_gf_InTutorial03() == true) || (libStEx_gf_InPracticeMode() == true))) {
        lv_towers = UnitGroup("TownCannonTowerL2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_towers, UnitGroup("TownCannonTowerL2Standalone", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        auto5FC5AF4E_g = lv_towers;
        auto5FC5AF4E_u = 1;
        for ( ; auto5FC5AF4E_u <= UnitGroupCount(auto5FC5AF4E_g, c_unitCountAll) ; auto5FC5AF4E_u += BoolToInt(lv_itTower == UnitGroupUnit(auto5FC5AF4E_g, auto5FC5AF4E_u)) ) {
            lv_itTower = UnitGroupUnit(auto5FC5AF4E_g, auto5FC5AF4E_u);
            UnitBehaviorAddPlayer(lv_itTower, "TutorialTowerRangeBehavior", UnitGetOwner(lv_itTower), 1);
        }
        lv_towers = UnitGroup("TownCannonTowerL3", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_towers, UnitGroup("TownCannonTowerL3Standalone", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        auto9120F038_g = lv_towers;
        auto9120F038_u = 1;
        for ( ; auto9120F038_u <= UnitGroupCount(auto9120F038_g, c_unitCountAll) ; auto9120F038_u += BoolToInt(lv_itTower == UnitGroupUnit(auto9120F038_g, auto9120F038_u)) ) {
            lv_itTower = UnitGroupUnit(auto9120F038_g, auto9120F038_u);
            UnitBehaviorAddPlayer(lv_itTower, "TutorialTowerRangeBehavior", UnitGetOwner(lv_itTower), 1);
        }
        lv_towers = UnitGroup("TownTownHallL1", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(lv_towers, UnitGroup("TownTownHallL2", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        auto479DC650_g = lv_towers;
        auto479DC650_u = 1;
        for ( ; auto479DC650_u <= UnitGroupCount(auto479DC650_g, c_unitCountAll) ; auto479DC650_u += BoolToInt(lv_itTower == UnitGroupUnit(auto479DC650_g, auto479DC650_u)) ) {
            lv_itTower = UnitGroupUnit(auto479DC650_g, auto479DC650_u);
            UnitBehaviorAddPlayer(lv_itTower, "TutorialTownHallRangeBehavior", UnitGetOwner(lv_itTower), 1);
        }
        lv_towers = UnitGroup("KingsCore", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4DFC44F8_g = lv_towers;
        auto4DFC44F8_u = 1;
        for ( ; auto4DFC44F8_u <= UnitGroupCount(auto4DFC44F8_g, c_unitCountAll) ; auto4DFC44F8_u += BoolToInt(lv_itTower == UnitGroupUnit(auto4DFC44F8_g, auto4DFC44F8_u)) ) {
            lv_itTower = UnitGroupUnit(auto4DFC44F8_g, auto4DFC44F8_u);
            UnitBehaviorAddPlayer(lv_itTower, "TutorialKingsCoreRangeBehavior", UnitGetOwner(lv_itTower), 1);
        }
    }
    else {
    }
    TimerStart(libGame_gv_openTheGatesTimer, libCore_gv_bALOpenTheGatesDelay, false, c_timeGame);
    libGame_gf_SendEventGameOpenTimerStarted();
    libSond_gf_HeroVOStartHeroIntroLinesTimer((libCore_gv_bALOpenTheGatesDelay - libGame_gv_heroIntroLineTimeframe_C));
    TriggerExecute(libGame_gt_AnnounceCountdown, true, false);
    TriggerExecute(libGame_gt_RunAnimations, true, false);
    DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_startGameButton, PlayerGroupAll(), true);
    if ((libSprt_gv_performanceTestPerformanceTestRunning == true)) {
        TriggerExecute(libSprt_gt_PerformanceTestSetHeroChoices, true, true);
    }
    else {
    }
    TriggerExecute(libStEx_gt_TrainingModeInit, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_StartGame_Init () {
    libGame_gt_StartGame = TriggerCreate("libGame_gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Announce Countdown
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AnnounceCountdown_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_Tutorial2)) {
        while (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            Wait(0.5, c_timeGame);
        }
        TimerStart(libGame_gv_openTheGatesTimer, 16.0, false, c_timeGame);
    }
    else {
        libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 25.0, false);
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_GetReadyForBattle, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    }
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 12.125, false);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_BattleStartingIn, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 10.125, false);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown10, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 5.125, false);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown5, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown4, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown3, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown2, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown1, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AnnounceCountdown_Init () {
    libGame_gt_AnnounceCountdown = TriggerCreate("libGame_gt_AnnounceCountdown_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Animations
//--------------------------------------------------------------------------------------------------
bool libGame_gt_RunAnimations_Func (bool testConds, bool runActions) {
    int autoD06C5B74_ae;
    int autoD06C5B74_ai;
    int auto30240BB2_ae;
    int auto30240BB2_ai;
    int auto48A1495C_ae;
    int auto48A1495C_ai;
    int auto984DF843_ae;
    int auto984DF843_ai;
    int autoF87F17A3_ae;
    int autoF87F17A3_ai;
    int autoF1D282C2_ae;
    int autoF1D282C2_ai;

    // Variable Declarations
    int lv_town;
    int lv_structure;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(4.0, c_timeGame);
    ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core), "AnimBracketStop CoreStart");
    ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core), "AnimBracketStop CoreStart");
    Wait(2.0, c_timeGame);
    autoD06C5B74_ae = libGame_gv_townTownCount;
    autoD06C5B74_ai = 1;
    lv_town = 1;
    for ( ; ( (autoD06C5B74_ai >= 0 && lv_town <= autoD06C5B74_ae) || (autoD06C5B74_ai <= 0 && lv_town >= autoD06C5B74_ae) ) ; lv_town += autoD06C5B74_ai ) {
        auto30240BB2_ae = libGame_gv_townTownData[lv_town].lv_structureCount;
        auto30240BB2_ai = 1;
        lv_structure = 1;
        for ( ; ( (auto30240BB2_ai >= 0 && lv_structure <= auto30240BB2_ae) || (auto30240BB2_ai <= 0 && lv_structure >= auto30240BB2_ae) ) ; lv_structure += auto30240BB2_ai ) {
            if ((UnitGetType(libGame_gv_townTownData[lv_town].lv_structureUnits[lv_structure]) == "TownTownHallL3")) {
                ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_townTownData[lv_town].lv_structureUnits[lv_structure]), "Signal PlayBuild");
            }
            else {
            }
        }
    }
    Wait(2.0, c_timeGame);
    auto48A1495C_ae = libGame_gv_townTownCount;
    auto48A1495C_ai = 1;
    lv_town = 1;
    for ( ; ( (auto48A1495C_ai >= 0 && lv_town <= auto48A1495C_ae) || (auto48A1495C_ai <= 0 && lv_town >= auto48A1495C_ae) ) ; lv_town += auto48A1495C_ai ) {
        auto984DF843_ae = libGame_gv_townTownData[lv_town].lv_structureCount;
        auto984DF843_ai = 1;
        lv_structure = 1;
        for ( ; ( (auto984DF843_ai >= 0 && lv_structure <= auto984DF843_ae) || (auto984DF843_ai <= 0 && lv_structure >= auto984DF843_ae) ) ; lv_structure += auto984DF843_ai ) {
            if ((libGame_gv_townTownData[lv_town].lv_structureTypes[lv_structure] == libGame_ge_TownStructureTypes_CannonTower)) {
                ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_townTownData[lv_town].lv_structureUnits[lv_structure]), "Signal PlayBuild");
            }
            else {
            }
        }
    }
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 6.0, false);
    autoF87F17A3_ae = libGame_gv_townTownCount;
    autoF87F17A3_ai = 1;
    lv_town = 1;
    for ( ; ( (autoF87F17A3_ai >= 0 && lv_town <= autoF87F17A3_ae) || (autoF87F17A3_ai <= 0 && lv_town >= autoF87F17A3_ae) ) ; lv_town += autoF87F17A3_ai ) {
        autoF1D282C2_ae = libGame_gv_townTownData[lv_town].lv_structureCount;
        autoF1D282C2_ai = 1;
        lv_structure = 1;
        for ( ; ( (autoF1D282C2_ai >= 0 && lv_structure <= autoF1D282C2_ae) || (autoF1D282C2_ai <= 0 && lv_structure >= autoF1D282C2_ae) ) ; lv_structure += autoF1D282C2_ai ) {
            if ((libGame_gv_townTownData[lv_town].lv_structureTypes[lv_structure] == libGame_ge_TownStructureTypes_Gate)) {
                ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_townTownData[lv_town].lv_structureUnits[lv_structure]), "Signal PlayBuild");
            }
            else {
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_RunAnimations_Init () {
    libGame_gt_RunAnimations = TriggerCreate("libGame_gt_RunAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open The Gates (Open The Gates Timer Expires)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_OpenTheGatesOpenTheGatesTimerExpires_Func (bool testConds, bool runActions) {
    int autoDDF95E47_ae;
    int autoDDF95E47_ai;
    unitgroup auto157DB87C_g;
    int auto157DB87C_u;
    unitgroup auto4CAD3EA8_g;
    int auto4CAD3EA8_u;

    // Variable Declarations
    int lv_itPlayer;
    unit lv_itBlocker;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameStarted == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_gameStarted = true;
    TriggerEnable(libGame_gt_ConfineHeroesToBaseUntilCountdownEnds, false);
    TriggerEnable(libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds, false);
    DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_startGameButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_spawnCreepCampsButton, PlayerGroupAll(), true);
    StatEventCreate("GatesOpen");
    StatEventSend(StatEventLastCreated());
    libNtve_gf_SendActorMessageToGameRegionWithFilters(RegionEntireMap(), c_actorIntersectAgainstCenter, "Destroy", "Doodad", "ScopeContains PreGameBarrier");
    TimerStart(libGame_gv_gameTimer, c_timerDurationInfinite, false, c_timeGame);
    TimerStart(libGame_gv_minionSpawnStartTimer, libCore_gv_bALSpawnMinionsDelay, false, c_timeGame);
    TimerStart(libGame_gv_jungleCampStartTimer, libCore_gv_bALJungleCreepCampActivationDelay, false, c_timeGame);
    TimerStart(libGame_gv_graveGolemCampStartTimer, libCore_gv_bALGraveGolemCampActivationDelay, false, c_timeGame);
    TimerStart(libGame_gv_jungleWatchTowerStartTimer, libCore_gv_bALJungleWatchTowerActivationDelay, false, c_timeGame);
    TimerStart(libGame_gv_scalingTimer, libGame_gv_bALScalingTimerDuration, false, c_timeGame);
    TimerStart(libGame_gv_xPTrickleStartTimer, libCore_gv_bALXPTrickleStartDelay, false, c_timeGame);
    autoDDF95E47_ae = libCore_gv_bALMaxPlayers;
    autoDDF95E47_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoDDF95E47_ai >= 0 && lv_itPlayer <= autoDDF95E47_ae) || (autoDDF95E47_ai <= 0 && lv_itPlayer >= autoDDF95E47_ae) ) ; lv_itPlayer += autoDDF95E47_ai ) {
        TimerStart(libGame_gv_encouragement_TimeSpentAliveTimer[lv_itPlayer], c_timerDurationInfinite, false, c_timeGame);
    }
    libGame_gf_AfkStartAfkWarningSystem();
    SoundPlayForPlayer(SoundLink("GameStart", -1), c_maxPlayers, PlayerGroupAll(), 40.0, 0.0);
    libSond_gf_SoundtrackUpdateMapSoundtrackIndex(1);
    auto157DB87C_g = UnitGroup("StormGameStartPathingBlocker", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto157DB87C_u = 1;
    for ( ; auto157DB87C_u <= UnitGroupCount(auto157DB87C_g, c_unitCountAll) ; auto157DB87C_u += BoolToInt(lv_itBlocker == UnitGroupUnit(auto157DB87C_g, auto157DB87C_u)) ) {
        lv_itBlocker = UnitGroupUnit(auto157DB87C_g, auto157DB87C_u);
        UnitRemove(lv_itBlocker);
    }
    auto4CAD3EA8_g = UnitGroup("StormGameStartPathingBlockerDiagonal", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4CAD3EA8_u = 1;
    for ( ; auto4CAD3EA8_u <= UnitGroupCount(auto4CAD3EA8_g, c_unitCountAll) ; auto4CAD3EA8_u += BoolToInt(lv_itBlocker == UnitGroupUnit(auto4CAD3EA8_g, auto4CAD3EA8_u)) ) {
        lv_itBlocker = UnitGroupUnit(auto4CAD3EA8_g, auto4CAD3EA8_u);
        UnitRemove(lv_itBlocker);
    }
    if ((libCore_gv_sYSDataMiningListenForData == true)) {
        libSprt_gf_DataMiningTurnDataMiningTriggersOnOff(true);
    }
    else {
    }
    PlayerCreateEffectPoint(11, "HeroGenericPregameAbilitySearch", Point(0.0, 0.0));
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_LetTheBattleBegin, "BattleBegin", StringExternal("Param/Value/lib_Game_CD24FF66"), null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_OpenTheGatesOpenTheGatesTimerExpires_Init () {
    libGame_gt_OpenTheGatesOpenTheGatesTimerExpires = TriggerCreate("libGame_gt_OpenTheGatesOpenTheGatesTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_OpenTheGatesOpenTheGatesTimerExpires, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Minions (Minion Spawn Start Timer Expires)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_SpawnMinionsMinionSpawnStartTimerExpires_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gv_sYSMinionAI == true)) {
        libGame_gf_MinionStartStopMinionSystem(true);
        libGame_gf_MinionStartStopMinionSpawnCycle(true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_SpawnMinionsMinionSpawnStartTimerExpires_Init () {
    libGame_gt_SpawnMinionsMinionSpawnStartTimerExpires = TriggerCreate("libGame_gt_SpawnMinionsMinionSpawnStartTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_SpawnMinionsMinionSpawnStartTimerExpires, libGame_gv_minionSpawnStartTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn On XP Trickle (XP Trickle Start Timer Expires)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libGame_gt_XPTrickle, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires_Init () {
    libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires = TriggerCreate("libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires, libGame_gv_xPTrickleStartTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Confine Heroes To Base Until Countdown Ends
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ConfineHeroesToBaseUntilCountdownEnds_Func (bool testConds, bool runActions) {
    int auto18BC8C63_ae;
    int auto18BC8C63_ai;

    // Variable Declarations
    const fixed lv_bumpBackDistance = 2.25;
    int lv_player;
    unit lv_heroUnit;
    region lv_region;
    point lv_targetPoint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto18BC8C63_ae = libCore_gv_bALMaxPlayers;
    auto18BC8C63_ai = 1;
    lv_player = 1;
    for ( ; ( (auto18BC8C63_ai >= 0 && lv_player <= auto18BC8C63_ae) || (auto18BC8C63_ai <= 0 && lv_player >= auto18BC8C63_ae) ) ; lv_player += auto18BC8C63_ai ) {
        lv_heroUnit = libGame_gv_players[lv_player].lv_heroUnit;
        if ((UnitIsAlive(lv_heroUnit) == true)) {
            if ((libGame_gv_players[lv_player].lv_faction == libGame_ge_Faction_Order)) {
                lv_region = libCore_gv_mAPOrderBaseRegion;
            }
            else {
                lv_region = libCore_gv_mAPChaosBaseRegion;
            }
            if ((lv_region == null)) {
                return true;
            }
            else {
            }
            if ((libNtve_gf_UnitInRegion(lv_heroUnit, lv_region) == false)) {
                lv_targetPoint = UnitGetPosition(lv_heroUnit);
                while (((PointPathingPassable(lv_targetPoint) == false) || (RegionContainsPoint(lv_region, lv_targetPoint) == false))) {
                    lv_targetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, 0.0625, libGame_gv_players[lv_player].lv_spawnPoint);
                }
                lv_targetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, lv_bumpBackDistance, libGame_gv_players[lv_player].lv_spawnPoint);
                UnitSetPosition(lv_heroUnit, lv_targetPoint, true);
                UnitIssueOrder(lv_heroUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                libNtve_gf_UIErrorMessage(libCore_gv_playerGroupFromPlayer[lv_player], StringExternal("Param/Value/lib_Game_66560905"), SoundLink("UI_GenericError", -1));
            }
            else {
            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ConfineHeroesToBaseUntilCountdownEnds_Init () {
    libGame_gt_ConfineHeroesToBaseUntilCountdownEnds = TriggerCreate("libGame_gt_ConfineHeroesToBaseUntilCountdownEnds_Func");
    TriggerAddEventTimePeriodic(libGame_gt_ConfineHeroesToBaseUntilCountdownEnds, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Confine Other Stuff To Base Until Countdown Ends
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == false) || (UnitTestState(EventUnit(), c_unitStateHallucination) == true)) && (UnitFilterMatch(EventUnit(), 0, UnitFilter((1 << c_targetFilterItem), 0, 0, 0)) == false) && (UnitGetType(EventUnit()) != "StitchesHookMissile") && (UnitGetType(EventUnit()) != "StitchesHookMissedReturnMissile")) {
        UnitKill(EventUnit());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds_Init () {
    libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds = TriggerCreate("libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artifact Stat Update - Player Max Life Changes
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ArtifactStatUpdatePlayerMaxLifeChanges_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((libCore_gv_sYSArtifactsOn == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_UpdateArtifactPercentLifeStatsForHero(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ArtifactStatUpdatePlayerMaxLifeChanges_Init () {
    libGame_gt_ArtifactStatUpdatePlayerMaxLifeChanges = TriggerCreate("libGame_gt_ArtifactStatUpdatePlayerMaxLifeChanges_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_ArtifactStatUpdatePlayerMaxLifeChanges, null, c_behaviorCategoryUser12, c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Diablo Participated In Takedown
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathDiabloParticipatedInTakedown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_behaviorCountToAdd;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit) == "HeroDiablo"))) {
            return false;
        }

        if (!((UnitHasBehavior2(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "BlackSoulstoneCarryBehavior") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitBehaviorCount(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "BlackSoulstone") < 100) || (UnitHasBehavior2(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "EndlessDeathCarryBehavior") == true)) && (UnitBehaviorCount(libGame_gf_HeroParticipatedInTakedownKilledHero(), "LowValueHero") != 1)) {
        if (((UnitBehaviorCount(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "BlackSoulstone") + 10) > 100) && (UnitHasBehavior2(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "EndlessDeathCarryBehavior") == false)) {
            lv_behaviorCountToAdd = (100 - UnitBehaviorCount(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "BlackSoulstone"));
            UnitBehaviorAdd(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "BlackSoulstone", libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, lv_behaviorCountToAdd);
        }
        else {
            UnitBehaviorAdd(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "BlackSoulstone", libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, 10);
        }
    }
    else {
        if ((((UnitBehaviorCount(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "BlackSoulstone") + 1) <= 100) || (UnitHasBehavior2(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "EndlessDeathCarryBehavior") == true))) {
            UnitBehaviorAdd(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "BlackSoulstone", libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, 1);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathDiabloParticipatedInTakedown_Init () {
    libGame_gt_HeroDeathDiabloParticipatedInTakedown = TriggerCreate("libGame_gt_HeroDeathDiabloParticipatedInTakedown_Func");
    libGame_gf_HeroParticipatedInTakedown(libGame_gt_HeroDeathDiabloParticipatedInTakedown);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Seasoned Marksman Participated In Takedown
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathSeasonedMarksmanParticipatedInTakedown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "TalentSeasonedMarksmanCarryBehavior") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit;
    if ((UnitBehaviorCount(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKilledPlayer()].lv_heroUnit, "LowValueHero") == 1)) {
        UnitCreateEffectUnit(lv_unit, "SeasonedMarksmanSwitch", lv_unit);
    }
    else {
        UnitCreateEffectUnit(lv_unit, "SeasonedMarksmanHeroKillPersistent", lv_unit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathSeasonedMarksmanParticipatedInTakedown_Init () {
    libGame_gt_HeroDeathSeasonedMarksmanParticipatedInTakedown = TriggerCreate("libGame_gt_HeroDeathSeasonedMarksmanParticipatedInTakedown_Func");
    libGame_gf_HeroParticipatedInTakedown(libGame_gt_HeroDeathSeasonedMarksmanParticipatedInTakedown);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Hero Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathHeroDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadUnit;
    int lv_deadPlayer;
    int lv_killingPlayer;
    int lv_currentStackCountofSoulstone;

    // Variable Initialization
    lv_currentStackCountofSoulstone = UnitBehaviorCount(EventUnit(), "BlackSoulstone");

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((EventPlayer() >= 1))) {
            return false;
        }

        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((EventUnit() == libGame_gv_players[EventPlayer()].lv_heroUnit))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "AbnormalDeath") == false))) {
            return false;
        }

        if (!(((UnitHasBehavior2(EventUnit(), "UtherEternalDevotion") == false) && (UnitHasBehavior2(EventUnit(), "UtherEternalDevotionRezDelay") == false) && (UnitHasBehavior2(EventUnit(), "TyraelArchangelsWrath") == false) && (UnitHasBehavior2(EventUnit(), "UltimateEvolutionBuff") == false) && (UnitHasBehavior2(EventUnit(), "BlackSoulstoneCarryBehavior") == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadUnit = EventUnit();
    lv_deadPlayer = EventPlayer();
    lv_killingPlayer = libNtve_gf_KillingPlayer();
    UISetTargetingOrder(libCore_gv_playerGroupFromPlayer[lv_deadPlayer], libNtve_gf_ConvertUnitToUnitGroup(lv_deadUnit), null, false);
    libGame_gv_players[lv_deadPlayer].lv_isDead = true;
    libGame_gv_players[lv_deadPlayer].lv_cameraCameraLockInterrupt = true;
    libGame_gf_CameraUpdateCameraForPlayer(lv_deadPlayer);
    libGame_gf_SendEventHeroKilled(lv_killingPlayer, lv_deadUnit);
    libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE(lv_deadUnit, lv_killingPlayer);
    if ((UnitBehaviorCount(EventUnit(), "HammerofJusticeRelicController") == 1)) {
        libGDHL_gf_HeroUtherHammerofJusticeRelicRefundManaCD(EventUnit());
    }
    else {
    }
    libGame_gf_EncouragementRegisterDeathTipsOnPlayerDeath(lv_deadPlayer);
    libGame_gf_HeroDeathStartRespawnTimer(lv_deadPlayer);
    libGame_gf_HeroDeathUpdateUIElementsForDeath(lv_deadPlayer, lv_killingPlayer);
    libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(true, lv_deadPlayer);
    libGame_gf_HeroDeathPortHeroBackAndSetDeathState(lv_deadPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathHeroDies_Init () {
    libGame_gt_HeroDeathHeroDies = TriggerCreate("libGame_gt_HeroDeathHeroDies_Func");
    TriggerAddEventUnitDied(libGame_gt_HeroDeathHeroDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Hero Downed State Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathHeroDownedStateTimerExpires_Func (bool testConds, bool runActions) {
    int auto74D528BA_ae;
    int auto74D528BA_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto74D528BA_ae = libCore_gv_bALMaxPlayers;
    auto74D528BA_ai = 1;
    lv_player = 1;
    for ( ; ( (auto74D528BA_ai >= 0 && lv_player <= auto74D528BA_ae) || (auto74D528BA_ai <= 0 && lv_player >= auto74D528BA_ae) ) ; lv_player += auto74D528BA_ai ) {
        if ((EventTimer() == libGame_gv_players[lv_player].lv_downedStateTimer)) {
            TextTagDestroy(libGame_gv_players[lv_player].lv_gravestoneTextTag);
            UnitKill(libGame_gv_players[lv_player].lv_gravestone);
            break;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathHeroDownedStateTimerExpires_Init () {
    libGame_gt_HeroDeathHeroDownedStateTimerExpires = TriggerCreate("libGame_gt_HeroDeathHeroDownedStateTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDownedStateTimerExpires, libGame_gv_players[1].lv_downedStateTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDownedStateTimerExpires, libGame_gv_players[2].lv_downedStateTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDownedStateTimerExpires, libGame_gv_players[3].lv_downedStateTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDownedStateTimerExpires, libGame_gv_players[4].lv_downedStateTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDownedStateTimerExpires, libGame_gv_players[5].lv_downedStateTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDownedStateTimerExpires, libGame_gv_players[6].lv_downedStateTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDownedStateTimerExpires, libGame_gv_players[7].lv_downedStateTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDownedStateTimerExpires, libGame_gv_players[8].lv_downedStateTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDownedStateTimerExpires, libGame_gv_players[9].lv_downedStateTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDownedStateTimerExpires, libGame_gv_players[10].lv_downedStateTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Hero Respawn Sound Cue Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires_Func (bool testConds, bool runActions) {
    int autoBF669FDA_ae;
    int autoBF669FDA_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBF669FDA_ae = libCore_gv_bALMaxPlayers;
    autoBF669FDA_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoBF669FDA_ai >= 0 && lv_itPlayer <= autoBF669FDA_ae) || (autoBF669FDA_ai <= 0 && lv_itPlayer >= autoBF669FDA_ae) ) ; lv_itPlayer += autoBF669FDA_ai ) {
        if ((EventTimer() == libGame_gv_players[lv_itPlayer].lv_respawnSoundCueTimer)) {
            SoundPlayForPlayer(SoundLink("Gen_Hero_Respawn_Ready", -1), lv_itPlayer, libCore_gv_playerGroupFromPlayer[lv_itPlayer], 100.0, 0.0);
            break;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires_Init () {
    libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires = TriggerCreate("libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[1].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[2].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[3].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[4].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[5].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[6].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[7].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[8].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[9].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[10].lv_respawnSoundCueTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Hero Respawn Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathHeroRespawnTimerExpires_Func (bool testConds, bool runActions) {
    int auto4637F465_ae;
    int auto4637F465_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4637F465_ae = libCore_gv_bALMaxPlayers;
    auto4637F465_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto4637F465_ai >= 0 && lv_itPlayer <= auto4637F465_ae) || (auto4637F465_ai <= 0 && lv_itPlayer >= auto4637F465_ae) ) ; lv_itPlayer += auto4637F465_ai ) {
        if ((EventTimer() == libGame_gv_players[lv_itPlayer].lv_respawnTimer)) {
            libGame_gf_HeroDeathRespawnHeroforPlayer(lv_itPlayer);
            break;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathHeroRespawnTimerExpires_Init () {
    libGame_gt_HeroDeathHeroRespawnTimerExpires = TriggerCreate("libGame_gt_HeroDeathHeroRespawnTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[1].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[2].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[3].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[4].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[5].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[6].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[7].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[8].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[9].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[10].lv_respawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Team Multikill Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathTeamMultikillTimerExpires_Func (bool testConds, bool runActions) {
    int autoAF0AA5CC_ae;
    int autoAF0AA5CC_ai;

    // Variable Declarations
    int lv_itTeam;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoAF0AA5CC_ae = libCore_gv_bALMaxTeams;
    autoAF0AA5CC_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (autoAF0AA5CC_ai >= 0 && lv_itTeam <= autoAF0AA5CC_ae) || (autoAF0AA5CC_ai <= 0 && lv_itTeam >= autoAF0AA5CC_ae) ) ; lv_itTeam += autoAF0AA5CC_ai ) {
        if ((EventTimer() == libGame_gv_teams[lv_itTeam].lv_multikillTimer)) {
            libGame_gv_teams[lv_itTeam].lv_multikillStreak = 0;
            break;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathTeamMultikillTimerExpires_Init () {
    libGame_gt_HeroDeathTeamMultikillTimerExpires = TriggerCreate("libGame_gt_HeroDeathTeamMultikillTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathTeamMultikillTimerExpires, libGame_gv_teams[1].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathTeamMultikillTimerExpires, libGame_gv_teams[2].lv_multikillTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Player Multikill Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathPlayerMultikillTimerExpires_Func (bool testConds, bool runActions) {
    int auto35E4C1F1_ae;
    int auto35E4C1F1_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto35E4C1F1_ae = libCore_gv_bALMaxPlayers;
    auto35E4C1F1_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto35E4C1F1_ai >= 0 && lv_itPlayer <= auto35E4C1F1_ae) || (auto35E4C1F1_ai <= 0 && lv_itPlayer >= auto35E4C1F1_ae) ) ; lv_itPlayer += auto35E4C1F1_ai ) {
        if ((EventTimer() == libGame_gv_players[lv_itPlayer].lv_multikillTimer)) {
            if ((libGame_gv_players[lv_itPlayer].lv_multikillStreak > 1)) {
                DialogControlSendAnimationEvent(libUIUI_gv_notificationDisplay.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lv_itPlayer], "ShowTimedNotification_Expire");
            }
            else {
            }
            libGame_gv_players[lv_itPlayer].lv_multikillStreak = 0;
            libGame_gf_HeroDeathDispatchKillingSpreeAnnouncement(lv_itPlayer);
            break;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathPlayerMultikillTimerExpires_Init () {
    libGame_gt_HeroDeathPlayerMultikillTimerExpires = TriggerCreate("libGame_gt_HeroDeathPlayerMultikillTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[1].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[2].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[3].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[4].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[5].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[6].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[7].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[8].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[9].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[10].lv_multikillTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Update Multikill Timer UI
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathUpdateMultikillTimerUI_Func (bool testConds, bool runActions) {
    int auto93E1A67E_ae;
    int auto93E1A67E_ai;

    // Variable Declarations
    int lv_itPlayer;
    fixed lv_remainingTimerDuration;
    bool lv_playerStillUpdating;
    fixed lv_animTime;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto93E1A67E_ae = libCore_gv_bALMaxPlayers;
    auto93E1A67E_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto93E1A67E_ai >= 0 && lv_itPlayer <= auto93E1A67E_ae) || (auto93E1A67E_ai <= 0 && lv_itPlayer >= auto93E1A67E_ae) ) ; lv_itPlayer += auto93E1A67E_ai ) {
        if ((libGame_gv_players[lv_itPlayer].lv_multikillStreak == 5)) {
            TimerPause(libGame_gv_players[lv_itPlayer].lv_multikillTimer, true);
            libGame_gv_players[lv_itPlayer].lv_multikillStreak = 0;
            libGame_gf_HeroDeathDispatchKillingSpreeAnnouncement(lv_itPlayer);
            continue;
        }
        else {
        }
        lv_remainingTimerDuration = TimerGetRemaining(libGame_gv_players[lv_itPlayer].lv_multikillTimer);
        if ((lv_remainingTimerDuration > 0.0)) {
            lv_playerStillUpdating = true;
            lv_animTime = (libGame_gv_heroDeathMultikillTimeoutDuration - lv_remainingTimerDuration);
            libNtve_gf_SetDialogItemAnimationTime(libUIUI_gv_notificationDisplay.lv_multikillTimerCountdownImage, lv_animTime, libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        }
        else {
        }
    }
    if ((lv_playerStillUpdating == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathUpdateMultikillTimerUI_Init () {
    libGame_gt_HeroDeathUpdateMultikillTimerUI = TriggerCreate("libGame_gt_HeroDeathUpdateMultikillTimerUI_Func");
    TriggerEnable(libGame_gt_HeroDeathUpdateMultikillTimerUI, false);
    TriggerAddEventTimePeriodic(libGame_gt_HeroDeathUpdateMultikillTimerUI, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Kill Stinger Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathKillStingerTimerExpires_Func (bool testConds, bool runActions) {
    int auto740A276E_ae;
    int auto740A276E_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto740A276E_ae = libCore_gv_bALMaxEnginePlayerCount;
    auto740A276E_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto740A276E_ai >= 0 && lv_itPlayer <= auto740A276E_ae) || (auto740A276E_ai <= 0 && lv_itPlayer >= auto740A276E_ae) ) ; lv_itPlayer += auto740A276E_ai ) {
        if ((EventTimer() == libGame_gv_heroDeathKillStingerQueue[lv_itPlayer].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)])) {
            libGame_gf_HeroDeathPlayNextSoundInQueueForPlayer(libGame_ge_HeroDeathKillStingerQueueType_Ally, lv_itPlayer);
            break;
        }
        else {
        }
        if ((EventTimer() == libGame_gv_heroDeathKillStingerQueue[lv_itPlayer].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)])) {
            libGame_gf_HeroDeathPlayNextSoundInQueueForPlayer(libGame_ge_HeroDeathKillStingerQueueType_Enemy, lv_itPlayer);
            break;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathKillStingerTimerExpires_Init () {
    libGame_gt_HeroDeathKillStingerTimerExpires = TriggerCreate("libGame_gt_HeroDeathKillStingerTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[1].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[2].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[3].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[4].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[5].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[6].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[7].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[8].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[9].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[10].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[libCore_gv_oBSERVER_ObserverUIPlayer].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[1].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[2].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[3].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[4].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[5].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[6].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[7].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[8].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[9].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[10].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[libCore_gv_oBSERVER_ObserverUIPlayer].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Diablo - Diablo Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathDiabloDiabloDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadUnit;
    int lv_deadPlayer;
    int lv_killingPlayer;
    int lv_respawnDuration;
    int lv_currentStackCountofSoulstone;
    int lv_removeAmount;
    point lv_deadUnitsOriginalLocation;
    fixed lv_deadUnitsOriginalAngle;

    // Variable Initialization
    lv_currentStackCountofSoulstone = UnitBehaviorCount(EventUnit(), "BlackSoulstone");
    lv_deadUnitsOriginalLocation = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((EventPlayer() >= 1))) {
            return false;
        }

        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((EventUnit() == libGame_gv_players[EventPlayer()].lv_heroUnit))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "HeroDiablo"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "BlackSoulstoneCarryBehavior") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadUnit = EventUnit();
    lv_deadPlayer = EventPlayer();
    lv_killingPlayer = libNtve_gf_KillingPlayer();
    lv_deadUnitsOriginalAngle = UnitGetFacing(lv_deadUnit);
    lv_currentStackCountofSoulstone = UnitBehaviorCount(EventUnit(), "BlackSoulstone");
    lv_respawnDuration = FixedToInt(libCore_gf_HeroDeathTime(lv_deadPlayer, UnitLevel(lv_deadUnit)));
    if ((UnitHasBehavior2(lv_deadUnit, "DyingBreathCarryBehavior") == true)) {
        UnitCreateEffectUnit(lv_deadUnit, "ApocalypseCastSearch", lv_deadUnit);
    }
    else {
    }
    libGame_gv_players[lv_deadPlayer].lv_isDead = true;
    libGame_gv_players[lv_deadPlayer].lv_cameraCameraLockInterrupt = true;
    libGame_gf_CameraUpdateCameraForPlayer(lv_deadPlayer);
    libGame_gf_SendEventHeroKilled(lv_killingPlayer, lv_deadUnit);
    libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE(lv_deadUnit, lv_killingPlayer);
    libGame_gf_EncouragementRegisterDeathTipsOnPlayerDeath(lv_deadPlayer);
    libGame_gf_HeroDeathStartRespawnTimer(lv_deadPlayer);
    if (((lv_currentStackCountofSoulstone >= 100) || ((lv_currentStackCountofSoulstone >= 60) && (UnitHasBehavior2(lv_deadUnit, "DevilsDueCarryBehavior") == true)))) {
        libGame_gf_HeroDeathUpdateRespawnTimer(lv_deadPlayer, 5.0);
        PlayerCreateEffectPoint(lv_deadPlayer, "DiabloSoulstoneDummy", libNtve_gf_PointWithZOffset(lv_deadUnitsOriginalLocation, 2.0));
        if ((UnitHasBehavior2(lv_deadUnit, "DevilsDueCarryBehavior") == true)) {
            UnitBehaviorRemove(lv_deadUnit, "BlackSoulstone", 60);
        }
        else {
            UnitBehaviorRemove(lv_deadUnit, "BlackSoulstone", 100);
        }
    }
    else {
    }
    libGame_gf_HeroDeathUpdateUIElementsForDeath(lv_deadPlayer, lv_killingPlayer);
    libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(true, lv_deadPlayer);
    libGame_gf_HeroDeathPortHeroBackAndSetDeathState(lv_deadPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathDiabloDiabloDies_Init () {
    libGame_gt_HeroDeathDiabloDiabloDies = TriggerCreate("libGame_gt_HeroDeathDiabloDiabloDies_Func");
    TriggerAddEventUnitDied(libGame_gt_HeroDeathDiabloDiabloDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Uther Eternal Devotion Proc
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathUtherEternalDevotionProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadUnit;
    int lv_deadPlayer;
    int lv_killingPlayer;
    const fixed lv_spiritOfRedemptionLowDeathTimeAdjustment_C = 2.0;
    fixed lv_currentDeathTime;
    fixed lv_spiritOfRedemptionBuffDuration;
    fixed lv_spiritOfRedemptionBuffImprovedDuration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_deadPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_killingPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    libGame_gv_players[lv_deadPlayer].lv_lastKillingPlayer = lv_killingPlayer;
    libGame_gf_SendEventHeroKilled(lv_killingPlayer, lv_deadUnit);
    if ((UnitBehaviorCount(lv_deadUnit, "AbathurUltimateEvolutionHasPostDeathEffectsController") == 0)) {
        libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE(lv_deadUnit, lv_killingPlayer);
        libGame_gf_EncouragementRegisterDeathTipsOnPlayerDeath(lv_deadPlayer);
    }
    else {
    }
    lv_currentDeathTime = libCore_gf_HeroDeathTime(UnitGetOwner(lv_deadUnit), UnitLevel(lv_deadUnit));
    lv_currentDeathTime -= (lv_currentDeathTime * libGame_gv_players[lv_deadPlayer].lv_artifacts_DeathTimerReduction);
    lv_spiritOfRedemptionBuffDuration = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "SpiritOfRedemptionSpiritFormBuff", "Duration", 0));
    lv_spiritOfRedemptionBuffImprovedDuration = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "SpiritOfRedemptionSpiritFormBuffImproved", "Duration", 0));
    if ((UnitBehaviorCount(lv_deadUnit, "AbathurUltimateEvolutionHasPostDeathEffectsController") == 1)) {
        CatalogFieldValueSet(c_gameCatalogBehavior, "SpiritOfRedemptionSpiritFormBuff", "Duration", lv_deadPlayer, FixedToString(lv_spiritOfRedemptionBuffDuration, 2));
        CatalogFieldValueSet(c_gameCatalogBehavior, "SpiritOfRedemptionSpiritFormBuffImproved", "Duration", lv_deadPlayer, FixedToString(lv_spiritOfRedemptionBuffImprovedDuration, 2));
    }
    else {
        CatalogFieldValueSet(c_gameCatalogBehavior, "SpiritOfRedemptionSpiritFormBuff", "Duration", lv_deadPlayer, FixedToString(MinF((lv_currentDeathTime - lv_spiritOfRedemptionLowDeathTimeAdjustment_C), lv_spiritOfRedemptionBuffDuration), 2));
        CatalogFieldValueSet(c_gameCatalogBehavior, "SpiritOfRedemptionSpiritFormBuffImproved", "Duration", lv_deadPlayer, FixedToString(MinF((lv_currentDeathTime - lv_spiritOfRedemptionLowDeathTimeAdjustment_C), lv_spiritOfRedemptionBuffImprovedDuration), 2));
    }
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_deadPlayer, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 0.25, -1, 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathUtherEternalDevotionProc_Init () {
    libGame_gt_HeroDeathUtherEternalDevotionProc = TriggerCreate("libGame_gt_HeroDeathUtherEternalDevotionProc_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_HeroDeathUtherEternalDevotionProc, c_playerAny, "SpiritofRedemptionApplyRezDelayBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Uther Eternal Devotion Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathUtherEternalDevotionDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_deadPlayer;
    int lv_killingPlayer;
    int lv_respawnModificationAmount;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "UtherEternalDevotion") == true))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "AbathurUltimateEvolutionHasPostDeathEffectsController") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadPlayer = UnitGetOwner(EventUnit());
    lv_killingPlayer = libGame_gv_players[lv_deadPlayer].lv_lastKillingPlayer;
    libGame_gv_players[lv_deadPlayer].lv_isDead = true;
    libGame_gf_HeroDeathStartRespawnTimer(lv_deadPlayer);
    libGame_gf_HeroDeathUpdateUIElementsForDeath(lv_deadPlayer, lv_killingPlayer);
    libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(true, lv_deadPlayer);
    libGame_gf_HeroDeathPortHeroBackAndSetDeathState(lv_deadPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathUtherEternalDevotionDies_Init () {
    libGame_gt_HeroDeathUtherEternalDevotionDies = TriggerCreate("libGame_gt_HeroDeathUtherEternalDevotionDies_Func");
    TriggerAddEventUnitDied(libGame_gt_HeroDeathUtherEternalDevotionDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Tyrael Archangels Wrath Proc
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathTyraelArchangelsWrathProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadUnit;
    int lv_deadPlayer;
    int lv_killingPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AbathurUltimateEvolutionHasPostDeathEffectsController") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_deadPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_killingPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    libGame_gv_players[lv_deadPlayer].lv_lastKillingPlayer = lv_killingPlayer;
    libGame_gf_SendEventHeroKilled(lv_killingPlayer, lv_deadUnit);
    if ((UnitBehaviorCount(lv_deadUnit, "AbathurUltimateEvolutionHasPostDeathEffectsController") == 0)) {
        libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE(lv_deadUnit, lv_killingPlayer);
        libGame_gf_EncouragementRegisterDeathTipsOnPlayerDeath(lv_deadPlayer);
    }
    else {
    }
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_deadPlayer, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 0.25, -1, 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathTyraelArchangelsWrathProc_Init () {
    libGame_gt_HeroDeathTyraelArchangelsWrathProc = TriggerCreate("libGame_gt_HeroDeathTyraelArchangelsWrathProc_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_HeroDeathTyraelArchangelsWrathProc, c_playerAny, "ArchangelsWrathApplyActiveBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Tyrael Archangels Wrath Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathTyraelArchangelsWrathDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_respawnTime;
    int lv_deadPlayer;
    int lv_killingPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "TyraelArchangelsWrath") == true))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "AbathurUltimateEvolutionHasPostDeathEffectsController") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadPlayer = UnitGetOwner(EventUnit());
    lv_killingPlayer = libGame_gv_players[lv_deadPlayer].lv_lastKillingPlayer;
    lv_respawnTime = (libCore_gf_HeroDeathTime(UnitGetOwner(EventUnit()), UnitLevel(EventUnit())) - 3.5);
    libGame_gv_players[lv_deadPlayer].lv_isDead = true;
    libGame_gf_HeroDeathStartRespawnTimer(lv_deadPlayer);
    libGame_gf_HeroDeathUpdateUIElementsForDeath(lv_deadPlayer, lv_killingPlayer);
    libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(true, lv_deadPlayer);
    libGame_gf_HeroDeathPortHeroBackAndSetDeathState(lv_deadPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathTyraelArchangelsWrathDies_Init () {
    libGame_gt_HeroDeathTyraelArchangelsWrathDies = TriggerCreate("libGame_gt_HeroDeathTyraelArchangelsWrathDies_Func");
    TriggerAddEventUnitDied(libGame_gt_HeroDeathTyraelArchangelsWrathDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Code Lane System
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeCodeLaneSystem_Func (bool testConds, bool runActions) {
    int auto6FB2B62C_ae;
    int auto6FB2B62C_ai;
    int autoF21E549D_ae;
    int autoF21E549D_ai;

    // Variable Declarations
    int lv_laneIndex;
    int lv_waypointIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    AILaneWaypointClearAll();
    auto6FB2B62C_ae = libGame_gv_laneCount;
    auto6FB2B62C_ai = 1;
    lv_laneIndex = 1;
    for ( ; ( (auto6FB2B62C_ai >= 0 && lv_laneIndex <= auto6FB2B62C_ae) || (auto6FB2B62C_ai <= 0 && lv_laneIndex >= auto6FB2B62C_ae) ) ; lv_laneIndex += auto6FB2B62C_ai ) {
        autoF21E549D_ae = libGame_gv_laneData[lv_laneIndex].lv_waypointCount;
        autoF21E549D_ai = 1;
        lv_waypointIndex = 1;
        for ( ; ( (autoF21E549D_ai >= 0 && lv_waypointIndex <= autoF21E549D_ae) || (autoF21E549D_ai <= 0 && lv_waypointIndex >= autoF21E549D_ae) ) ; lv_waypointIndex += autoF21E549D_ai ) {
            AILaneWaypointAdd(lv_laneIndex, libGame_gv_laneData[lv_laneIndex].lv_waypoints[lv_waypointIndex]);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeCodeLaneSystem_Init () {
    libGame_gt_InitializeCodeLaneSystem = TriggerCreate("libGame_gt_InitializeCodeLaneSystem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves Game
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerLeavesGame_Func (bool testConds, bool runActions) {
    playergroup auto42D52532_g;
    int auto42D52532_p;

    // Variable Declarations
    int lv_itPlayer;
    int lv_team;
    int lv_enemyTeam;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_players[EventPlayer()].lv_gameEndedForPlayer == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_gameOver == false)) {
        auto42D52532_g = libCore_gv_allHeroPlayersPlusObserver; 
        auto42D52532_p = 1;
        for ( ; auto42D52532_p <= PlayerGroupCount(auto42D52532_g) ; auto42D52532_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto42D52532_g, auto42D52532_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto42D52532_g, auto42D52532_p);
            if ((lv_itPlayer != EventPlayer())) {
                libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_itPlayer], libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_APlayerHasLeftTheGame, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            }
            else {
            }
        }
        libGame_gv_players[EventPlayer()].lv_playerStatus = libGame_ge_PlayerStatusStorm_LefttheGame;
        lv_team = libGame_gf_TeamNumberOfPlayer(EventPlayer());
        libGame_gv_teams[lv_team].lv_activeHumanPlayers -= 1;
        if ((libGame_gv_teams[lv_team].lv_activeHumanPlayers == 0)) {
            lv_enemyTeam = (3 - lv_team);
            TextExpressionSetToken("Param/Expression/lib_Game_2995AAD8", "A", FixedToText(libGame_gv_teamAbandonedTheGameTimerDuration_C, 0));
            UIDisplayMessage(libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_Game_2995AAD8"));
            TimerStart(libGame_gv_teams[lv_team].lv_abandonedTheGameTimer, libGame_gv_teamAbandonedTheGameTimerDuration_C, false, c_timeGame);
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerLeavesGame_Init () {
    libGame_gt_PlayerLeavesGame = TriggerCreate("libGame_gt_PlayerLeavesGame_Func");
    TriggerAddEventPlayerLeft(libGame_gt_PlayerLeavesGame, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Rejoins Game
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerRejoinsGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_APlayerHasRejoinedTheGame, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
    libGame_gv_players[EventPlayer()].lv_playerStatus = libGame_ge_PlayerStatusStorm_Playing;
    lv_team = libGame_gf_TeamNumberOfPlayer(EventPlayer());
    libGame_gv_teams[lv_team].lv_activeHumanPlayers += 1;
    TimerPause(libGame_gv_teams[lv_team].lv_abandonedTheGameTimer, true);
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(EventPlayer(), UnitGetPosition(libGame_gv_players[EventPlayer()].lv_heroUnit), 0.0, -1, 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerRejoinsGame_Init () {
    libGame_gt_PlayerRejoinsGame = TriggerCreate("libGame_gt_PlayerRejoinsGame_Func");
    TriggerAddEventPlayerJoin(libGame_gt_PlayerRejoinsGame, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Abandoned The Game Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TeamAbandonedTheGameTimerExpires_Func (bool testConds, bool runActions) {
    int auto0AF30C00_ae;
    int auto0AF30C00_ai;

    // Variable Declarations
    int lv_itTeam;
    int lv_enemyTeam;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0AF30C00_ae = libCore_gv_bALMaxTeams;
    auto0AF30C00_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (auto0AF30C00_ai >= 0 && lv_itTeam <= auto0AF30C00_ae) || (auto0AF30C00_ai <= 0 && lv_itTeam >= auto0AF30C00_ae) ) ; lv_itTeam += auto0AF30C00_ai ) {
        if ((EventTimer() == libGame_gv_teams[lv_itTeam].lv_abandonedTheGameTimer)) {
            lv_enemyTeam = (3 - lv_itTeam);
            UIDisplayMessage(libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, c_messageAreaChat, StringExternal("Param/Value/lib_Game_F84632D5"));
            UnitKill(libGame_gv_teams[lv_itTeam].lv_core);
            TriggerEnable(TriggerGetCurrent(), false);
            break;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TeamAbandonedTheGameTimerExpires_Init () {
    libGame_gt_TeamAbandonedTheGameTimerExpires = TriggerCreate("libGame_gt_TeamAbandonedTheGameTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_TeamAbandonedTheGameTimerExpires, libGame_gv_teams[1].lv_abandonedTheGameTimer);
    TriggerAddEventTimer(libGame_gt_TeamAbandonedTheGameTimerExpires, libGame_gv_teams[2].lv_abandonedTheGameTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minion - Spawn Cycle
//--------------------------------------------------------------------------------------------------
bool libGame_gt_MinionSpawnCycle_Func (bool testConds, bool runActions) {
    int auto2740E61A_ae;
    int auto2740E61A_ai;

    // Variable Declarations
    int lv_i;
    int lv_lane;
    fixed lv_remainingWaitTime;
    int lv_waveComposition;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if (((libGame_gv_gameOver == true) || (libCore_gv_sYSMinionAI == false))) {
            return true;
        }
        else {
        }
        libGame_gv_minionWaveSpawnCounter += 1;
        lv_waveComposition = libGame_gf_MinionDetermineWaveComposition();
        auto2740E61A_ae = libGame_gv_laneCount;
        auto2740E61A_ai = 1;
        lv_lane = 1;
        for ( ; ( (auto2740E61A_ai >= 0 && lv_lane <= auto2740E61A_ae) || (auto2740E61A_ai <= 0 && lv_lane >= auto2740E61A_ae) ) ; lv_lane += auto2740E61A_ai ) {
            if ((libGame_gv_laneData[lv_lane].lv_minionSpawningEnabled == true)) {
                libGame_gf_MinionSpawnWave(lv_lane, libCore_gv_cOMPUTER_TeamOrder, lv_waveComposition);
                libGame_gf_MinionSpawnWave(lv_lane, libCore_gv_cOMPUTER_TeamChaos, lv_waveComposition);
                Wait(0.1875, c_timeGame);
            }
            else {
            }
        }
        lv_remainingWaitTime = libCore_gv_bALMinionWaveInterval;
        while ((lv_remainingWaitTime > 0.0)) {
            if ((libGame_gv_minionSpawningEnabled == true)) {
                lv_remainingWaitTime -= 0.0625;
            }
            else {
            }
            Wait(0.0625, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_MinionSpawnCycle_Init () {
    libGame_gt_MinionSpawnCycle = TriggerCreate("libGame_gt_MinionSpawnCycle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Mount
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroMount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_heroActor;
    int lv_heroIndex;
    int lv_mountIndex;
    string lv_poseAnimGroup;
    fixed lv_mountScale;
    fixed lv_mountWalkAnimMoveSpeed;
    string lv_mountModel;
    actor lv_mountActor;

    // Variable Initialization
    lv_poseAnimGroup = "";

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroActor = libNtve_gf_MainActorofUnit(EventUnit());
    lv_heroIndex = libCore_gf_GetHeroIndexForUnitType(UnitGetType(EventUnit()));
    if ((UnitHasBehavior2(EventUnit(), "UltimateEvolutionTimedLife") == true)) {
        PlayerGroupLoopBegin(libGame_gf_AlliedPlayerGroupOfPlayer(UnitGetOwner(EventUnit())));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((UnitGetType(EventUnit()) == UnitGetType(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit))) {
                lv_mountIndex = libGame_gv_players[PlayerGroupLoopCurrent()].lv_selectedMount;
                break;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
    }
    else {
        lv_mountIndex = libGame_gv_players[UnitGetOwner(EventUnit())].lv_selectedMount;
    }
    lv_poseAnimGroup = libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountPoseAnimGroup;
    lv_mountScale = libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountModelScale;
    lv_mountWalkAnimMoveSpeed = libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountModelWalkAnimMoveSpeed;
    CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(EventUnit()), "TauntDuration[" + IntToString(0) + "]", EventPlayer(), "0");
    CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(EventUnit()), "TauntDuration[" + IntToString(1) + "]", EventPlayer(), "0");
    CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(EventUnit()), "TauntDuration[" + IntToString(2) + "]", EventPlayer(), "0");
    if ((UnitHasBehavior2(EventUnit(), "SiegeMode") == true)) {
        UnitCreateEffectUnit(EventUnit(), "SiegeModeRemoveSet", EventUnit());
    }
    else {
    }
    if ((UnitHasBehavior2(EventUnit(), "DeathAndDecay") == true)) {
        UnitBehaviorRemove(EventUnit(), "DeathAndDecay", 1);
    }
    else {
    }
    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_noAttachedMountModel == false)) {
        ActorSend(lv_heroActor, "PhysicsTerminate");
        lv_mountModel = libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountModel;
        ActorSend(lv_heroActor, libNtve_gf_Create(libGame_gv_mountModelActor, (lv_mountModel)));
        lv_mountActor = ActorFromActor(lv_heroActor, libGame_gv_mountModelActor);
        libCore_gf_SendMountActorMessagesToActor(lv_mountIndex, lv_mountActor);
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_isFlyer == true)) {
            ActorSend(lv_mountActor, libNtve_gf_RefSet("::Host", "FlyerBillboard"));
        }
        else {
        }
        ActorSend(lv_mountActor, libNtve_gf_SetScaleAbsolute(lv_mountScale, lv_mountScale, lv_mountScale, 0.0));
        ActorSend(lv_heroActor, (("AnimGroupApply " + lv_poseAnimGroup + " {} {} Instant")));
        ActorSend(lv_heroActor, libNtve_gf_RefSet("::Host", libGame_gv_mountModelActor));
        ActorSend(lv_heroActor, libNtve_gf_HostSiteOpsSet("::Host", "SOpAttachMount", 0, 0));
        ActorSend(lv_heroActor, libNtve_gf_RefSet("::HostForProps", "PropsHost"));
        ActorSend(lv_mountActor, libNtve_gf_RefSet("::HostForProps", (libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_unitType)));
    }
    else {
        ActorSend(lv_heroActor, (("AnimGroupApply " + lv_poseAnimGroup)));
    }
    ActorSend(lv_heroActor, libNtve_gf_SetWalkAnimMoveSpeed(lv_mountWalkAnimMoveSpeed));
    ActorSend(lv_mountActor, libNtve_gf_Signal("MountSound"));
    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountModel != "MoneyPig")) {
        ActorSend(lv_heroActor, libNtve_gf_Create("MountSmokeScreen", ""));
    }
    else {
    }
    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountSound != "")) {
        ActorSend(lv_heroActor, libNtve_gf_Create("MountDismountSound", (libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountSound)));
    }
    else {
    }
    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_loopingSound != "")) {
        ActorSend(lv_heroActor, libNtve_gf_Create("MountLoopingSound", (libCore_gv_dataMountsMountData[lv_mountIndex].lv_loopingSound)));
    }
    else {
    }
    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_stationarySound != "")) {
        ActorSend(lv_heroActor, libNtve_gf_Create("MountStationarySound", (libCore_gv_dataMountsMountData[lv_mountIndex].lv_stationarySound)));
    }
    else {
    }
    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_movingSound != "")) {
        ActorSend(lv_heroActor, libNtve_gf_Create("MountMovingSound", (libCore_gv_dataMountsMountData[lv_mountIndex].lv_movingSound)));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroMount_Init () {
    libGame_gt_HeroMount = TriggerCreate("libGame_gt_HeroMount_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_HeroMount, null, "Mounted", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Dismount
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDismount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    actor lv_heroActor;
    int lv_heroIndex;
    int lv_mountIndex;
    fixed lv_heroWalkAnimMoveSpeed;
    string lv_poseAnimGroup;

    // Variable Initialization
    lv_poseAnimGroup = "";

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) > libCore_gv_bALMaxEnginePlayerCount)) {
        return true;
    }
    else {
    }
    lv_heroActor = libNtve_gf_MainActorofUnit(EventUnit());
    lv_heroIndex = libCore_gf_GetHeroIndexForUnitType(UnitGetType(EventUnit()));
    if ((UnitHasBehavior2(EventUnit(), "UltimateEvolutionTimedLife") == true)) {
        PlayerGroupLoopBegin(libGame_gf_AlliedPlayerGroupOfPlayer(UnitGetOwner(EventUnit())));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((UnitGetType(EventUnit()) == UnitGetType(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit))) {
                lv_mountIndex = libGame_gv_players[PlayerGroupLoopCurrent()].lv_selectedMount;
                break;
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
    }
    else {
        lv_mountIndex = libGame_gv_players[UnitGetOwner(EventUnit())].lv_selectedMount;
    }
    lv_heroWalkAnimMoveSpeed = StringToFixed(CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(EventUnit()), "WalkAnimMoveSpeed", UnitGetOwner(EventUnit())));
    lv_poseAnimGroup = libCore_gv_dataMountsMountData[lv_mountIndex].lv_mountPoseAnimGroup;
    CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(EventUnit()), "TauntDuration[" + IntToString(0) + "]", EventPlayer(), "0");
    CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(EventUnit()), "TauntDuration[" + IntToString(1) + "]", EventPlayer(), "5");
    CatalogFieldValueSet(c_gameCatalogUnit, UnitGetType(EventUnit()), "TauntDuration[" + IntToString(2) + "]", EventPlayer(), "2.5");
    if ((UnitHasBehavior2(EventUnit(), "WarSpurs") == true)) {
        UnitBehaviorAdd(EventUnit(), "WarSpursSpeedBuff", EventUnit(), 1);
    }
    else {
    }
    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_noAttachedMountModel == false)) {
        ActorSend(lv_heroActor, (("AnimBlendTimeApply 0")));
        ActorSend(lv_heroActor, (("AnimGroupRemove " + lv_poseAnimGroup + " Instant")));
        ActorSend(lv_heroActor, (("AnimBlendTimeApply")));
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_isFlyer == true)) {
            ActorSend(lv_heroActor, libNtve_gf_RefSet("::Host", "FlyerBillboard"));
            ActorSend(lv_heroActor, libNtve_gf_HostSiteOpsSet("::Host", "", 0, 0));
        }
        else {
            if (((UnitHasBehavior2(EventUnit(), "TychusOverkillTargetedActive") == true))) {
            }
            else {
                ActorSend(lv_heroActor, libNtve_gf_RefClear("::Host"));
                ActorSend(lv_heroActor, libNtve_gf_HostSiteOpsSet("::Host", "SOpBasicScopeFollow", 0, 0));
            }
        }
        ActorSend(ActorFromScope(ActorScopeFromUnit(EventUnit()), libGame_gv_mountModelActor), libNtve_gf_Destroy());
    }
    else {
        ActorSend(lv_heroActor, (("AnimGroupRemove " + lv_poseAnimGroup)));
    }
    ActorSend(lv_heroActor, libNtve_gf_SetWalkAnimMoveSpeed(lv_heroWalkAnimMoveSpeed));
    if ((UnitIsAlive(EventUnit()) == true)) {
        ActorSend(lv_heroActor, libNtve_gf_Create("DismountSmokeScreen", ""));
    }
    else {
    }
    if ((libCore_gv_dataMountsMountData[lv_mountIndex].lv_dismountSound != "")) {
        ActorSend(lv_heroActor, libNtve_gf_Create("MountDismountSound", (libCore_gv_dataMountsMountData[lv_mountIndex].lv_dismountSound)));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDismount_Init () {
    libGame_gt_HeroDismount = TriggerCreate("libGame_gt_HeroDismount_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_HeroDismount, null, "Mounted", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Dismount On Ability Use - Attack
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDismountOnAbilityUseAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_heroType;

    // Variable Initialization
    lv_unit = EventUnitTarget();
    lv_heroType = UnitGetType(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_unit, "Mounted") == true)) {
        UnitBehaviorRemove(lv_unit, "Mounted", 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDismountOnAbilityUseAttack_Init () {
    libGame_gt_HeroDismountOnAbilityUseAttack = TriggerCreate("libGame_gt_HeroDismountOnAbilityUseAttack_Func");
    TriggerAddEventUnitAttacked(libGame_gt_HeroDismountOnAbilityUseAttack, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flying Mount Cooldown Fly
//--------------------------------------------------------------------------------------------------
bool libGame_gt_FlyingMountCooldownFly_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitModifyCooldown(EventUnit(), "Abil/Dismount", 1.5, c_cooldownOperationAdd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_FlyingMountCooldownFly_Init () {
    libGame_gt_FlyingMountCooldownFly = TriggerCreate("libGame_gt_FlyingMountCooldownFly_Func");
    TriggerAddEventUnitAbility(libGame_gt_FlyingMountCooldownFly, null, AbilityCommand("MountFlyer", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Flying Mount Cooldown Land
//--------------------------------------------------------------------------------------------------
bool libGame_gt_FlyingMountCooldownLand_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitModifyCooldown(EventUnit(), "Abil/Mount", 1.5, c_cooldownOperationAdd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_FlyingMountCooldownLand_Init () {
    libGame_gt_FlyingMountCooldownLand = TriggerCreate("libGame_gt_FlyingMountCooldownLand_Func");
    TriggerAddEventUnitAbility(libGame_gt_FlyingMountCooldownLand, null, AbilityCommand("DismountFlyer", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game General NPC Proc Listener
//--------------------------------------------------------------------------------------------------
bool libGame_gt_GameGeneralNPCProcListener_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killingPlayer;
    unit lv_minion;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killingPlayer = libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer();
    lv_minion = libGame_gf_HeroParticipatedInNPCTakedownMinion();
    libGame_gf_GazloweSalvageProc(lv_killingPlayer, lv_minion);
    libGame_gf_GazloweReduceReuseRecycleProc(lv_killingPlayer, lv_minion);
    libGame_gf_BribeProc(lv_killingPlayer, lv_minion);
    libGame_gf_DiabloBlackSoulstoneProc(lv_killingPlayer, lv_minion);
    libGame_gf_GenericSeasonedMarksmanProc(lv_killingPlayer, lv_minion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_GameGeneralNPCProcListener_Init () {
    libGame_gt_GameGeneralNPCProcListener = TriggerCreate("libGame_gt_GameGeneralNPCProcListener_Func");
    libGame_gf_HeroParticipatedInNPCTakedown(libGame_gt_GameGeneralNPCProcListener);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Creep Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CreepDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_defenderAIIndex;
    int lv_team;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeLight) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "MercDefenderSiegeGiant")) {
        UnitCreate(1, "MercDefenderSiegeGiantOrientDummy", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Hostile, UnitGetPosition(EventUnit()), UnitGetFacing(EventUnit()));
    }
    else {
    }
    lv_defenderAIIndex = libAIAI_gf_DefenderAIIndexOfUnit(EventUnit());
    libAIAI_gf_DefenderAICreepDies(lv_defenderAIIndex, EventUnit(), libNtve_gf_KillingPlayer());
    if ((UnitBehaviorCount(EventUnit(), "HammerofJusticeRelicController") == 1)) {
        libGDHL_gf_HeroUtherHammerofJusticeRelicRefundManaCD(EventUnit());
    }
    else {
    }
    libGame_gf_AwardXPForNPCKill(EventUnit(), EventPlayer(), c_unitAttributeLight, libNtve_gf_KillingPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CreepDies_Init () {
    libGame_gt_CreepDies = TriggerCreate("libGame_gt_CreepDies_Func");
    TriggerAddEventUnitDied(libGame_gt_CreepDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Summoned Unit Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_SummonedUnitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_minionIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_minionIndex = libAIAI_gf_MinionAIGetIndexForMinion(EventUnit());
    if ((lv_minionIndex != 0)) {
        libAIAI_gf_MinionAIFreeMinionIndex(lv_minionIndex);
    }
    else {
    }
    libGame_gf_AwardXPForNPCKill(EventUnit(), EventPlayer(), c_unitAttributeSummoned, libNtve_gf_KillingPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_SummonedUnitDies_Init () {
    libGame_gt_SummonedUnitDies = TriggerCreate("libGame_gt_SummonedUnitDies_Func");
    TriggerAddEventUnitDied(libGame_gt_SummonedUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minion Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_MinionDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_minionIndex;
    int lv_regenGlobeOwner;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeBiological) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_minionIndex = libAIAI_gf_MinionAIGetIndexForMinion(EventUnit());
    libAIAI_gf_MinionAIFreeMinionIndex(lv_minionIndex);
    if ((UnitHasBehavior2(EventUnit(), "SuppressRegenGlobeCreation") == false)) {
        if (((UnitGetType(EventUnit()) == "FlagBearerMinion") || (UnitGetType(EventUnit()) == "WizardMinion"))) {
            if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamOrder)) {
                lv_regenGlobeOwner = libCore_gv_cOMPUTER_TeamChaos;
            }
            else {
                lv_regenGlobeOwner = libCore_gv_cOMPUTER_TeamOrder;
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RegenGlobe", c_unitCreateIgnorePlacement, lv_regenGlobeOwner, UnitGetPosition(EventUnit()));
        }
        else {
        }
        libGame_gf_AwardXPForNPCKill(EventUnit(), EventPlayer(), c_unitAttributeBiological, libNtve_gf_KillingPlayer());
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_MinionDies_Init () {
    libGame_gt_MinionDies = TriggerCreate("libGame_gt_MinionDies_Func");
    TriggerEnable(libGame_gt_MinionDies, false);
    TriggerAddEventUnitDied(libGame_gt_MinionDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Town Structure Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TownStructureDies_Func (bool testConds, bool runActions) {
    int auto81D7249A_ae;
    int auto81D7249A_ai;
    unitgroup autoE376AD85_g;
    int autoE376AD85_u;
    playergroup auto8BB7E864_g;
    int auto8BB7E864_p;

    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;
    int lv_townIndex;
    int lv_structureIndex;
    fixed lv_townHallAnimationExplodeTime;
    playergroup lv_killingPlayersGroup;
    int lv_townType;
    int lv_killingFaction;

    // Variable Initialization
    lv_townHallAnimationExplodeTime = 0.75;
    lv_killingPlayersGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeSummoned) == false))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_AwardXPForNPCKill(EventUnit(), EventPlayer(), c_unitAttributeStructure, libNtve_gf_KillingPlayer());
    lv_townIndex = libGame_gf_TownGetTownForUnit(EventUnit());
    lv_structureIndex = libGame_gf_TownGetTownStructureIndexForUnit(EventUnit());
    lv_townType = libGame_gf_TownGetTownStructurePresetFromUnitID(UnitGetType(EventUnit()));
    if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_killingFaction = libGame_ge_Faction_Chaos;
    }
    else {
        lv_killingFaction = libGame_ge_Faction_Order;
    }
    if ((libGame_gv_townTownData[lv_townIndex].lv_structureTypes[lv_structureIndex] == libGame_ge_TownStructureTypes_TownHall)) {
        StatEventCreate("TownStructureDeath");
        StatEventAddDataInt(StatEventLastCreated(), "TownID", lv_townIndex);
        auto81D7249A_ae = libCore_gv_bALMaxPlayers;
        auto81D7249A_ai = 1;
        lv_itPlayer = 1;
        for ( ; ( (auto81D7249A_ai >= 0 && lv_itPlayer <= auto81D7249A_ae) || (auto81D7249A_ai <= 0 && lv_itPlayer >= auto81D7249A_ae) ) ; lv_itPlayer += auto81D7249A_ai ) {
            if ((libGame_gv_players[lv_itPlayer].lv_faction == lv_killingFaction) && (((libGame_gv_players[lv_itPlayer].lv_heroUnit != null) && (DistanceBetweenPoints(UnitGetPosition(libGame_gv_players[lv_itPlayer].lv_heroUnit), UnitGetPosition(EventUnit())) <= libCore_gv_bALHeroKillXPRadius)) || ((libGame_gv_players[lv_itPlayer].lv_activeVehicle != null) && (DistanceBetweenPoints(UnitGetPosition(libGame_gv_players[lv_itPlayer].lv_activeVehicle), UnitGetPosition(EventUnit())) <= libCore_gv_bALHeroKillXPRadius)))) {
                StatEventAddDataInt(StatEventLastCreated(), "KillingPlayer", lv_itPlayer);
                libGame_gv_scoreValues[lv_itPlayer].lv_townKills += 1;
            }
            else {
            }
        }
        StatEventSend(StatEventLastCreated());
    }
    else {
    }
    if ((lv_townType == libGame_ge_TownStructureTypes_TownHall)) {
        if ((lv_killingFaction == libGame_ge_Faction_Order)) {
            libGame_gv_teams[1].lv_townKills += 1;
            libGame_gv_teams[2].lv_townsRemaining -= 1;
        }
        else {
            libGame_gv_teams[2].lv_townKills += 1;
            libGame_gv_teams[1].lv_townsRemaining -= 1;
        }
        autoE376AD85_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 15.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoE376AD85_u = 1;
        for ( ; autoE376AD85_u <= UnitGroupCount(autoE376AD85_g, c_unitCountAll) ; autoE376AD85_u += BoolToInt(lv_itUnit == UnitGroupUnit(autoE376AD85_g, autoE376AD85_u)) ) {
            lv_itUnit = UnitGroupUnit(autoE376AD85_g, autoE376AD85_u);
            PlayerGroupAdd(lv_killingPlayersGroup, UnitGetOwner(lv_itUnit));
        }
        libGame_gf_BuildingDiesCameraShake(lv_townHallAnimationExplodeTime, "Heavy", lv_killingPlayersGroup);
        libGame_gf_TownUpgradeBruiserMinions(lv_townIndex);
        libGame_gf_TownAnnounceTownDestroyed(lv_townIndex, libGame_gf_TownGetTownHallPresetFromUnitID(UnitGetType(EventUnit())));
        auto8BB7E864_g = lv_killingPlayersGroup; 
        auto8BB7E864_p = 1;
        for ( ; auto8BB7E864_p <= PlayerGroupCount(auto8BB7E864_g) ; auto8BB7E864_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto8BB7E864_g, auto8BB7E864_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto8BB7E864_g, auto8BB7E864_p);
            libSond_gf_HeroVOStartTownKilledVOTimerForPlayer(lv_itPlayer, lv_killingPlayersGroup);
        }
        if ((libGame_gv_townTownData[lv_townIndex].lv_makesCoreVulnerableWhenKilled == true)) {
            if ((lv_killingFaction == libGame_ge_Faction_Order)) {
                UnitBehaviorRemove(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, "CoreInvulnerability", 1);
            }
            else {
                UnitBehaviorRemove(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core, "CoreInvulnerability", 1);
            }
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TownStructureDies_Init () {
    libGame_gt_TownStructureDies = TriggerCreate("libGame_gt_TownStructureDies_Func");
    TriggerAddEventUnitDied(libGame_gt_TownStructureDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Core Dies (Game Over)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CoreDiesGameOver_Func (bool testConds, bool runActions) {
    int auto5A299847_ae;
    int auto5A299847_ai;
    playergroup auto7129A39B_g;
    int auto7129A39B_p;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itPlayerTracking;
    int lv_i;
    unit lv_u;
    const fixed lv_cameraPanTime = 2.0;
    const fixed lv_coreAnimationWaitExplodeTime = 2.8;
    const fixed lv_coreAnimationWaitTime = 5.0;
    int lv_killingFaction;
    int lv_winningTeam;
    int lv_losingTeam;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((EventUnit() == libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core) || (EventUnit() == libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core)))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_gameOver = true;
    TimerPause(libGame_gv_gameTimer, true);
    if ((EventUnit() == libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core)) {
        lv_killingFaction = libGame_ge_Faction_Order;
        lv_winningTeam = 1;
    }
    else {
        lv_killingFaction = libGame_ge_Faction_Chaos;
        lv_winningTeam = 2;
    }
    lv_losingTeam = (3 - lv_winningTeam);
    UnitPauseAll(true);
    libNtve_gf_ChangeUnitDamage(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libAIAI_gf_MinionAIPauseUnpauseMinionAISystem(true);
    libUIUI_gf_DeathTimerPanelPauseTimerAnimations();
    UnitGroupLoopBegin(libGame_gv_heroes);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "HeroTassadar")) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "TassadarDistortionBeamSuppression", UnitGroupLoopCurrent(), 1);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroupAlliance(UnitGetOwner(EventUnit()), c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        ActorSend(libNtve_gf_MainActorofUnit(UnitGroupLoopCurrent()), "AnimPlay Victory Stand,Victory PlayForever");
    }
    UnitGroupLoopEnd();
    auto5A299847_ae = libCore_gv_bALMaxPlayers;
    auto5A299847_ai = 1;
    lv_itPlayerTracking = 1;
    for ( ; ( (auto5A299847_ai >= 0 && lv_itPlayerTracking <= auto5A299847_ae) || (auto5A299847_ai <= 0 && lv_itPlayerTracking >= auto5A299847_ae) ) ; lv_itPlayerTracking += auto5A299847_ai ) {
        libGame_gv_encouragement_CalloutStatTracking[lv_itPlayerTracking][(libGame_ge_EncouragementStatCallouts_TimeSpentAlive)] = TimerGetElapsed(libGame_gv_encouragement_TimeSpentAliveTimer[lv_itPlayerTracking]);
        if ((libGame_gv_encouragement_TotalTeamXPGathered[lv_itPlayerTracking] == 0.0)) {
            libGame_gv_encouragement_CalloutStatTracking[lv_itPlayerTracking][(libGame_ge_EncouragementStatCallouts_PercentOfTeamsXPGathered)] = 0.0;
        }
        else {
            libGame_gv_encouragement_CalloutStatTracking[lv_itPlayerTracking][(libGame_ge_EncouragementStatCallouts_PercentOfTeamsXPGathered)] = (libGame_gv_encouragement_XPGathered[lv_itPlayerTracking] / libGame_gv_encouragement_TotalTeamXPGathered[lv_itPlayerTracking]);
        }
        libGame_gf_EncouragementDataTrackingResetCalloutValuesForPlayer(lv_itPlayerTracking);
    }
    libGame_gf_BuildingDiesCameraShake(lv_coreAnimationWaitExplodeTime, "Massive", libCore_gv_activeHumanPlayers);
    PlayerGroupLoopBegin(libCore_gv_activeHumanPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraLockInput(PlayerGroupLoopCurrent(), true);
        PlayerOptionOverride(PlayerGroupLoopCurrent(), "camerafollow", "0");
        libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(false, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    Wait(0.0625, c_timeGame);
    PlayerGroupLoopBegin(libCore_gv_activeHumanPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraFollowUnitGroup(PlayerGroupLoopCurrent(), CameraFollowUnitGroupGet(PlayerGroupLoopCurrent()), false, false);
        libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(PlayerGroupLoopCurrent(), UnitGetPosition(EventUnit()), lv_cameraPanTime, -1, 10, false);
    }
    PlayerGroupLoopEnd();
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(libCore_gv_oBSERVER_ObserverUIPlayer, UnitGetPosition(EventUnit()), lv_cameraPanTime, -1, 10, false);
    libSond_gf_MuteMostSoundChannelsForGameOverState(true);
    libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("Storm_Music_Stinger_Victory", libGame_gv_teams[lv_winningTeam].lv_teamPlayerGroup);
    libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("Storm_Music_Stinger_Defeat", libGame_gv_teams[lv_losingTeam].lv_teamPlayerGroup);
    SetTalentsEnabled(false);
    Wait(lv_cameraPanTime, c_timeGame);
    Wait(lv_coreAnimationWaitTime, c_timeGame);
    auto7129A39B_g = PlayerGroupAll(); 
    auto7129A39B_p = 1;
    for ( ; auto7129A39B_p <= PlayerGroupCount(auto7129A39B_g) ; auto7129A39B_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto7129A39B_g, auto7129A39B_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto7129A39B_g, auto7129A39B_p);
        libGame_gf_AnnouncementClearQueueForPlayer(lv_itPlayer);
    }
    if ((EventUnit() == libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core)) {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Victory, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Defeat, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_BlueTeamWins, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
    }
    else {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Defeat, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Victory, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_RedTeamWins, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
    }
    libGame_gv_announcement_SystemEnabled = false;
    libGame_gf_GameOver(lv_winningTeam);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CoreDiesGameOver_Init () {
    libGame_gt_CoreDiesGameOver = TriggerCreate("libGame_gt_CoreDiesGameOver_Func");
    TriggerAddEventUnitDied(libGame_gt_CoreDiesGameOver, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level Up
//--------------------------------------------------------------------------------------------------
bool libGame_gt_LevelUp_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }

        if (!((EventUnitBehavior() == "HeroDummyVeterancy"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "AbnormalExperienceGain") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_LevelUpHero(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_LevelUp_Init () {
    libGame_gt_LevelUp = TriggerCreate("libGame_gt_LevelUp_Func");
    TriggerAddEventUnitGainLevel(libGame_gt_LevelUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Recent Damage Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_RecentDamageTimerExpires_Func (bool testConds, bool runActions) {
    int autoB30A3530_ae;
    int autoB30A3530_ai;
    int auto28EF0F20_ae;
    int auto28EF0F20_ai;

    // Variable Declarations
    int lv_i;
    int lv_playerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB30A3530_ae = libCore_gv_bALMaxPlayers;
    autoB30A3530_ai = 1;
    lv_i = 1;
    for ( ; ( (autoB30A3530_ai >= 0 && lv_i <= autoB30A3530_ae) || (autoB30A3530_ai <= 0 && lv_i >= autoB30A3530_ae) ) ; lv_i += autoB30A3530_ai ) {
        if ((EventTimer() == libGame_gv_players[lv_i].lv_recentDamageResetTimer)) {
            lv_playerIndex = lv_i;
            break;
        }
        else {
        }
    }
    if ((lv_playerIndex != 0)) {
        auto28EF0F20_ae = libCore_gv_bALMaxPlayers;
        auto28EF0F20_ai = 1;
        lv_i = 1;
        for ( ; ( (auto28EF0F20_ai >= 0 && lv_i <= auto28EF0F20_ae) || (auto28EF0F20_ai <= 0 && lv_i >= auto28EF0F20_ae) ) ; lv_i += auto28EF0F20_ai ) {
            libGame_gv_players[lv_playerIndex].lv_recentPlayerDamageReceived[lv_i] = 0.0;
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_RecentDamageTimerExpires_Init () {
    libGame_gt_RecentDamageTimerExpires = TriggerCreate("libGame_gt_RecentDamageTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_RecentDamageTimerExpires, libGame_gv_players[1].lv_recentDamageResetTimer);
    TriggerAddEventTimer(libGame_gt_RecentDamageTimerExpires, libGame_gv_players[2].lv_recentDamageResetTimer);
    TriggerAddEventTimer(libGame_gt_RecentDamageTimerExpires, libGame_gv_players[3].lv_recentDamageResetTimer);
    TriggerAddEventTimer(libGame_gt_RecentDamageTimerExpires, libGame_gv_players[4].lv_recentDamageResetTimer);
    TriggerAddEventTimer(libGame_gt_RecentDamageTimerExpires, libGame_gv_players[5].lv_recentDamageResetTimer);
    TriggerAddEventTimer(libGame_gt_RecentDamageTimerExpires, libGame_gv_players[6].lv_recentDamageResetTimer);
    TriggerAddEventTimer(libGame_gt_RecentDamageTimerExpires, libGame_gv_players[7].lv_recentDamageResetTimer);
    TriggerAddEventTimer(libGame_gt_RecentDamageTimerExpires, libGame_gv_players[8].lv_recentDamageResetTimer);
    TriggerAddEventTimer(libGame_gt_RecentDamageTimerExpires, libGame_gv_players[9].lv_recentDamageResetTimer);
    TriggerAddEventTimer(libGame_gt_RecentDamageTimerExpires, libGame_gv_players[10].lv_recentDamageResetTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Damage Tracking
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDamageTracking_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_triggeringUnitType;
    string lv_damagingUnitType;
    fixed lv_damageTaken;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringUnitType = UnitGetType(EventUnit());
    lv_damagingUnitType = UnitGetType(EventUnitDamageSourceUnit());
    lv_damageTaken = EventUnitDamageAmount();
    if ((EventUnitDamageSourcePlayer() <= libCore_gv_bALMaxPlayers) && (UnitTypeTestAttribute(lv_damagingUnitType, c_unitAttributeHeroic) == true)) {
        if ((UnitTypeTestAttribute(lv_triggeringUnitType, c_unitAttributeHeroic) == true)) {
            libGame_gv_encouragement_CalloutStatTracking[EventUnitDamageSourcePlayer()][(libGame_ge_EncouragementStatCallouts_DamageDoneToHeroes)] += lv_damageTaken;
        }
        else {
            if ((UnitTypeTestAttribute(lv_triggeringUnitType, c_unitAttributeStructure) == true)) {
                libGame_gv_encouragement_CalloutStatTracking[EventUnitDamageSourcePlayer()][(libGame_ge_EncouragementStatCallouts_DamageDoneToTowns)] += lv_damageTaken;
            }
            else {
            }
        }
    }
    else {
    }
    if ((EventPlayer() <= libCore_gv_bALMaxPlayers) && (UnitTypeTestAttribute(lv_triggeringUnitType, c_unitAttributeHeroic) == true) && (UnitTestState(EventUnit(), c_unitStateHallucination) == false) && (UnitHasBehavior(EventUnit(), "GenericVehicleBehaviorEmpty") == false) && (UnitHasBehavior(EventUnit(), "GenericVehicleBehaviorOccupied") == false)) {
        if ((UnitTypeTestAttribute(lv_damagingUnitType, c_unitAttributeHeroic) == true) && (UnitTestState(EventUnitDamageSourceUnit(), c_unitStateHallucination) == false)) {
            if ((EventUnitDamageSourcePlayer() <= libCore_gv_bALMaxPlayers)) {
                libGame_gv_players[EventPlayer()].lv_recentPlayerDamageReceived[EventUnitDamageSourcePlayer()] += lv_damageTaken;
            }
            else {
            }
        }
        else {
            if ((UnitTypeTestAttribute(lv_damagingUnitType, c_unitAttributeBiological) == true)) {
                libGame_gf_EncouragementDataTrackingRegisterMinionDamageForPlayer(EventPlayer(), lv_damageTaken);
            }
            else {
                if ((UnitTypeTestAttribute(lv_damagingUnitType, c_unitAttributeStructure) == true)) {
                    libGame_gf_EncouragementDataTrackingRegisterRecentStructureDamageForPlayer(EventPlayer());
                }
                else {
                }
            }
        }
        TimerStart(libGame_gv_players[EventPlayer()].lv_recentDamageResetTimer, libCore_gv_bALRecentDamageResetTime, false, c_timeGame);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDamageTracking_Init () {
    libGame_gt_HeroDamageTracking = TriggerCreate("libGame_gt_HeroDamageTracking_Func");
    TriggerAddEventUnitDamaged(libGame_gt_HeroDamageTracking, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Kill Credit Proximity Tracking
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroKillCreditProximityTracking_Func (bool testConds, bool runActions) {
    int auto98CCDFBA_ae;
    int auto98CCDFBA_ai;
    unitgroup auto6101B342_g;
    int auto6101B342_u;

    // Variable Declarations
    const int lv_heroIndexMod = 2;
    int lv_player;
    unit lv_u;
    fixed lv_missionTime;
    int lv_firstIndex;
    int lv_owner;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_missionTime = GameGetMissionTime();
    lv_firstIndex = ModI(FixedToInt((lv_missionTime / 0.0625)), lv_heroIndexMod);
    auto98CCDFBA_ae = libCore_gv_bALMaxPlayers;
    auto98CCDFBA_ai = lv_heroIndexMod;
    lv_player = lv_firstIndex;
    for ( ; ( (auto98CCDFBA_ai >= 0 && lv_player <= auto98CCDFBA_ae) || (auto98CCDFBA_ai <= 0 && lv_player >= auto98CCDFBA_ae) ) ; lv_player += auto98CCDFBA_ai ) {
        if ((UnitIsAlive(libGame_gv_players[lv_player].lv_heroUnit) == true)) {
            auto6101B342_g = UnitGroupSearch(null, lv_player, UnitGetPosition(libGame_gv_players[lv_player].lv_heroUnit), libCore_gv_bALHeroKillXPRadius, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32))), 0);
            auto6101B342_u = 1;
            for ( ; auto6101B342_u <= UnitGroupCount(auto6101B342_g, c_unitCountAll) ; auto6101B342_u += BoolToInt(lv_u == UnitGroupUnit(auto6101B342_g, auto6101B342_u)) ) {
                lv_u = UnitGroupUnit(auto6101B342_g, auto6101B342_u);
                lv_owner = UnitGetOwner(lv_u);
                if ((lv_owner <= libCore_gv_bALMaxPlayers)) {
                    libGame_gv_players[lv_player].lv_lastTimeHeroWasWithinXPRadius[lv_owner] = lv_missionTime;
                }
                else {
                }
            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroKillCreditProximityTracking_Init () {
    libGame_gt_HeroKillCreditProximityTracking = TriggerCreate("libGame_gt_HeroKillCreditProximityTracking_Func");
    TriggerAddEventTimePeriodic(libGame_gt_HeroKillCreditProximityTracking, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero XP Changes
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroXPChanges_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((EventPlayer() >= 1))) {
            return false;
        }

        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((EventUnit() == libGame_gv_players[EventPlayer()].lv_heroUnit))) {
            return false;
        }

        if (!((libGame_gv_players[EventPlayer()].lv_suppressLevelUpFXAndTeamXPTracking == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_team = libGame_gf_TeamNumberOfPlayer(EventPlayer());
    libGame_gv_teams[lv_team].lv_xPTotals += EventUnitPropertyChangeInt();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroXPChanges_Init () {
    libGame_gt_HeroXPChanges = TriggerCreate("libGame_gt_HeroXPChanges_Func");
    TriggerAddEventUnitProperty(libGame_gt_HeroXPChanges, null, c_unitPropXP);
}

//--------------------------------------------------------------------------------------------------
// Trigger: XP Trickle
//--------------------------------------------------------------------------------------------------
bool libGame_gt_XPTrickle_Func (bool testConds, bool runActions) {
    unitgroup autoAEA68A5B_g;
    int autoAEA68A5B_u;

    // Variable Declarations
    unit lv_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_xPTrickleEnabled == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAEA68A5B_g = libGame_gv_heroes;
    autoAEA68A5B_u = 1;
    for ( ; autoAEA68A5B_u <= UnitGroupCount(autoAEA68A5B_g, c_unitCountAll) ; autoAEA68A5B_u += BoolToInt(lv_u == UnitGroupUnit(autoAEA68A5B_g, autoAEA68A5B_u)) ) {
        lv_u = UnitGroupUnit(autoAEA68A5B_g, autoAEA68A5B_u);
        libGame_gf_GrantXPToPlayer((libCore_gv_data_XP_TrickleAmount_C * libGame_gv_xPTrickleModifier[libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lv_u))]), UnitGetOwner(lv_u), libGame_ge_XPSources_Trickle);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_XPTrickle_Init () {
    libGame_gt_XPTrickle = TriggerCreate("libGame_gt_XPTrickle_Func");
    TriggerEnable(libGame_gt_XPTrickle, false);
    TriggerAddEventTimePeriodic(libGame_gt_XPTrickle, libCore_gv_data_XP_TricklePeriod_C, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player - Home Shield Protection On
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerHomeShieldProtectionOn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "HeroAbathur"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit == EventUnit()) || (libGame_gv_players[UnitGetOwner(EventUnit())].lv_activeVehicle == EventUnit()))) {
        CatalogFieldValueSet(c_gameCatalogAbil, "Mount", "CastIntroTime[" + IntToString(0) + "]", UnitGetOwner(EventUnit()), "0");
        CatalogFieldValueSet(c_gameCatalogAbil, "Mount", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(EventUnit()), "0");
        CatalogFieldValueSet(c_gameCatalogEffect, "DismountModifyCooldown", "Cost[" + IntToString(0) + "].CooldownTimeUse", UnitGetOwner(EventUnit()), "0.5");
        CatalogFieldValueSet(c_gameCatalogAbil, "RehgarGhostWolfActivate", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(EventUnit()), "0");
        CatalogFieldValueSet(c_gameCatalogEffect, "GhostWolfModifyCooldown", "Cost[" + IntToString(0) + "].CooldownTimeUse", UnitGetOwner(EventUnit()), "0.5");
        CatalogFieldValueSet(c_gameCatalogEffect, "RehgarGhostWolfModifyCancelCooldown", "Cost[" + IntToString(0) + "].CooldownTimeUse", UnitGetOwner(EventUnit()), "0");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerHomeShieldProtectionOn_Init () {
    libGame_gt_PlayerHomeShieldProtectionOn = TriggerCreate("libGame_gt_PlayerHomeShieldProtectionOn_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_PlayerHomeShieldProtectionOn, null, "HomeShieldProtection", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player - Home Shield Protection Off
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerHomeShieldProtectionOff_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "HeroAbathur"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit == EventUnit()) || (libGame_gv_players[UnitGetOwner(EventUnit())].lv_activeVehicle == EventUnit()))) {
        CatalogFieldValueSet(c_gameCatalogAbil, "Mount", "CastIntroTime[" + IntToString(0) + "]", UnitGetOwner(EventUnit()), CatalogFieldValueGet(c_gameCatalogAbil, "Mount", "CastIntroTime[" + IntToString(0) + "]", 0));
        CatalogFieldValueSet(c_gameCatalogAbil, "Mount", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(EventUnit()), "1");
        CatalogFieldValueSet(c_gameCatalogEffect, "DismountModifyCooldown", "Cost[" + IntToString(0) + "].CooldownTimeUse", UnitGetOwner(EventUnit()), "4");
        CatalogFieldValueSet(c_gameCatalogAbil, "RehgarGhostWolfActivate", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(EventUnit()), "1");
        CatalogFieldValueSet(c_gameCatalogEffect, "GhostWolfModifyCooldown", "Cost[" + IntToString(0) + "].CooldownTimeUse", UnitGetOwner(EventUnit()), "4");
        CatalogFieldValueSet(c_gameCatalogEffect, "RehgarGhostWolfModifyCancelCooldown", "Cost[" + IntToString(0) + "].CooldownTimeUse", UnitGetOwner(EventUnit()), "1.5");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerHomeShieldProtectionOff_Init () {
    libGame_gt_PlayerHomeShieldProtectionOff = TriggerCreate("libGame_gt_PlayerHomeShieldProtectionOff_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_PlayerHomeShieldProtectionOff, null, "HomeShieldProtection", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player - Hero Displacement Camera Lock
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerHeroDisplacementCameraLock_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_cameraWasLocked;
    int lv_player;
    string lv_displacingBehavior;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());
    lv_displacingBehavior = EventUnitBehavior();

    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) >= 1) && (UnitGetOwner(EventUnit()) <= 10) && (EventUnit() == libGame_gv_players[lv_player].lv_heroUnit) && (UnitIsAlive(EventUnit()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_players[lv_player].lv_cameraPlayerHasControl = false;
    libGame_gv_players[lv_player].lv_cameraPlayerUnitToFocusOn = libGame_gv_players[lv_player].lv_heroUnit;
    libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    libGame_gf_PlayerHeroDisplacementCameraUnlock(lv_player, lv_displacingBehavior);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerHeroDisplacementCameraLock_Init () {
    libGame_gt_PlayerHeroDisplacementCameraLock = TriggerCreate("libGame_gt_PlayerHeroDisplacementCameraLock_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_PlayerHeroDisplacementCameraLock, null, "DragonKnightBullRushTargetKnockback", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGame_gt_PlayerHeroDisplacementCameraLock, null, "Hooked", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGame_gt_PlayerHeroDisplacementCameraLock, null, "StitchesGorgeInitialTargetBehavior", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGame_gt_PlayerHeroDisplacementCameraLock, null, "HaymakerTargetBehaviorKnockback", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGame_gt_PlayerHeroDisplacementCameraLock, null, "JudgementKnockback", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scaling Timer Expiration
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScalingTimerExpiration_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_scalingTicks += 1;
    if ((libGame_gv_scalingTicks > libCore_gv_dataScalingMaxScalingTicks)) {
        libGame_gv_scalingTicks = libCore_gv_dataScalingMaxScalingTicks;
    }
    else {
    }
    TriggerExecute(libGame_gt_JungleScalingTimerExpires, true, false);
    TriggerExecute(libGame_gt_CoreScalingTimerExpires, true, false);
    TimerStart(libGame_gv_scalingTimer, libGame_gv_bALScalingTimerDuration, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScalingTimerExpiration_Init () {
    libGame_gt_ScalingTimerExpiration = TriggerCreate("libGame_gt_ScalingTimerExpiration_Func");
    TriggerAddEventTimer(libGame_gt_ScalingTimerExpiration, libGame_gv_scalingTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Scaling Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_JungleScalingTimerExpires_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSJungleCreepCamps == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_JungleUpdateScalingForCamps();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_JungleScalingTimerExpires_Init () {
    libGame_gt_JungleScalingTimerExpires = TriggerCreate("libGame_gt_JungleScalingTimerExpires_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Core - Scaling Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CoreScalingTimerExpires_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSMinionAI == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_CoreUpdateScaling();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CoreScalingTimerExpires_Init () {
    libGame_gt_CoreScalingTimerExpires = TriggerCreate("libGame_gt_CoreScalingTimerExpires_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Tracking Time CCd Enemy Heroes
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScoreTrackingTimeCCdEnemyHeroes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_triggeringUnit;
    int lv_caster;
    fixed lv_duration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringUnit = EventUnit();
    if (((UnitGetOwner(lv_triggeringUnit) <= 0) || (UnitGetOwner(lv_triggeringUnit) > libCore_gv_bALMaxPlayers) || (UnitTypeTestAttribute(UnitGetType(lv_triggeringUnit), c_unitAttributeHeroic) == false) || (UnitTestState(lv_triggeringUnit, c_unitStateHallucination) == true))) {
        return true;
    }
    else {
    }
    lv_caster = UnitBehaviorEffectPlayer(lv_triggeringUnit, EventUnitBehavior(), c_effectPlayerCaster, 0);
    if (((lv_caster <= 0) || (lv_caster > libCore_gv_bALMaxPlayers))) {
        return true;
    }
    else {
    }
    lv_duration = UnitBehaviorDurationTotal(lv_triggeringUnit, EventUnitBehavior());
    libGame_gv_scoreValues[lv_caster].lv_timeCCdEnemyHeroes += lv_duration;
    libGame_gf_ScoreValuesReportRealValueAndLog(lv_caster, "TimeCCdEnemyHeroes", libGame_gv_scoreValues[lv_caster].lv_timeCCdEnemyHeroes);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScoreTrackingTimeCCdEnemyHeroes_Init () {
    libGame_gt_ScoreTrackingTimeCCdEnemyHeroes = TriggerCreate("libGame_gt_ScoreTrackingTimeCCdEnemyHeroes_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_ScoreTrackingTimeCCdEnemyHeroes, null, c_behaviorCategorySlow, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_ScoreTrackingTimeCCdEnemyHeroes, null, c_behaviorCategorySlow, c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_ScoreTrackingTimeCCdEnemyHeroes, null, c_behaviorCategoryUser5, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_ScoreTrackingTimeCCdEnemyHeroes, null, c_behaviorCategoryUser5, c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_ScoreTrackingTimeCCdEnemyHeroes, null, c_behaviorCategoryStun, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_ScoreTrackingTimeCCdEnemyHeroes, null, c_behaviorCategoryStun, c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_ScoreTrackingTimeCCdEnemyHeroes, null, c_behaviorCategoryUser6, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_ScoreTrackingTimeCCdEnemyHeroes, null, c_behaviorCategoryUser6, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Tracking Raven Tribute Collected
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScoreTrackingRavenTributeCollected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;
    int lv_triggeringPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringPlayer = libGame_gf_MapTributePickedUpPlayer();
    libGame_gv_scoreValues[lv_triggeringPlayer].lv_tributesCollected += 1;
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_triggeringPlayer, "MapMechanics", libGame_gv_scoreValues[lv_triggeringPlayer].lv_tributesCollected);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_triggeringPlayer, "RavenTributesCollected", libGame_gv_scoreValues[lv_triggeringPlayer].lv_tributesCollected);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScoreTrackingRavenTributeCollected_Init () {
    libGame_gt_ScoreTrackingRavenTributeCollected = TriggerCreate("libGame_gt_ScoreTrackingRavenTributeCollected_Func");
    libGame_gf_MapRavenLordTributePickedUp(libGame_gt_ScoreTrackingRavenTributeCollected);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Tracking Doubloon Collected
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScoreTrackingDoubloonCollected_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_scoreValues[libGame_gf_MapDoubloonsDoubloonCollectedPlayer()].lv_doubloonsCollected += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScoreTrackingDoubloonCollected_Init () {
    libGame_gt_ScoreTrackingDoubloonCollected = TriggerCreate("libGame_gt_ScoreTrackingDoubloonCollected_Func");
    libGame_gf_MapDoubloonsDoubloonCollected(libGame_gt_ScoreTrackingDoubloonCollected);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Tracking Doubloons Dropped
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScoreTrackingDoubloonsDropped_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_scoreValues[libGame_gf_MapDoubloonsDoubloonsDroppedPlayer()].lv_doubloonsDropped += libGame_gf_MapDoubloonsDoubloonsDroppedCount();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScoreTrackingDoubloonsDropped_Init () {
    libGame_gt_ScoreTrackingDoubloonsDropped = TriggerCreate("libGame_gt_ScoreTrackingDoubloonsDropped_Func");
    libGame_gf_MapDoubloonsDoubloonsDropped(libGame_gt_ScoreTrackingDoubloonsDropped);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Tracking Doubloons Turned In
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScoreTrackingDoubloonsTurnedIn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;
    int lv_triggeringPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringPlayer = libGame_gf_MapDoubloonsDoubloonsTurnedInPlayer();
    libGame_gv_scoreValues[lv_triggeringPlayer].lv_doubloonsTurnedIn += libGame_gf_MapDoubloonsDoubloonsTurnedInCount();
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_triggeringPlayer, "MapMechanics", libGame_gv_scoreValues[lv_triggeringPlayer].lv_doubloonsTurnedIn);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_triggeringPlayer, "BlackheartDoubloonsTurnedIn", libGame_gv_scoreValues[lv_triggeringPlayer].lv_doubloonsTurnedIn);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScoreTrackingDoubloonsTurnedIn_Init () {
    libGame_gt_ScoreTrackingDoubloonsTurnedIn = TriggerCreate("libGame_gt_ScoreTrackingDoubloonsTurnedIn_Func");
    libGame_gf_MapDoubloonsDoubloonsTurnedIn(libGame_gt_ScoreTrackingDoubloonsTurnedIn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Tracking Dragon Activated
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScoreTrackingDragonActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;
    int lv_triggeringPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringPlayer = libGame_gf_MapDragonActivatedDragonPlayer();
    libGame_gv_scoreValues[lv_triggeringPlayer].lv_dragonCaptures += 1;
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_triggeringPlayer, "MapMechanics", libGame_gv_scoreValues[lv_triggeringPlayer].lv_dragonCaptures);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_triggeringPlayer, "DragonNumberOfDragonCaptures", libGame_gv_scoreValues[lv_triggeringPlayer].lv_dragonCaptures);
    libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(libGame_gf_MapDragonActivatedDragonPlayer())].lv_map_DragonCaptures += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScoreTrackingDragonActivated_Init () {
    libGame_gt_ScoreTrackingDragonActivated = TriggerCreate("libGame_gt_ScoreTrackingDragonActivated_Func");
    libGame_gf_MapDragonShireDragonActivated(libGame_gt_ScoreTrackingDragonActivated);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Tracking Dragon Shrine Captured
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScoreTrackingDragonShrineCaptured_Func (bool testConds, bool runActions) {
    playergroup auto2D8867FF_g;
    int auto2D8867FF_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gf_MapDragonShireObeliskOwnershipChangeTeam() == 0)) {
        return true;
    }
    else {
    }
    auto2D8867FF_g = libGame_gf_MapDragonShireObeliskOwnershipChangeCapturingPlayers(); 
    auto2D8867FF_p = 1;
    for ( ; auto2D8867FF_p <= PlayerGroupCount(auto2D8867FF_g) ; auto2D8867FF_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto2D8867FF_g, auto2D8867FF_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto2D8867FF_g, auto2D8867FF_p);
        libGame_gv_scoreValues[lv_itPlayer].lv_dragonShrineCaptures += 1;
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_itPlayer, "DragonShrinesCaptured", libGame_gv_scoreValues[lv_itPlayer].lv_dragonShrineCaptures);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScoreTrackingDragonShrineCaptured_Init () {
    libGame_gt_ScoreTrackingDragonShrineCaptured = TriggerCreate("libGame_gt_ScoreTrackingDragonShrineCaptured_Func");
    libGame_gf_MapDragonShireObeliskOwnershipChange(libGame_gt_ScoreTrackingDragonShrineCaptured);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Tracking Skull Collected
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScoreTrackingSkullCollected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;
    int lv_triggeringPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringPlayer = libGame_gf_MapUnderworldSkullCollectedCollectingPlayer();
    libGame_gv_scoreValues[lv_triggeringPlayer].lv_skullsCollected += 1;
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_triggeringPlayer, "MapMechanics", libGame_gv_scoreValues[lv_triggeringPlayer].lv_skullsCollected);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_triggeringPlayer, "MinesSkullsCollected", libGame_gv_scoreValues[lv_triggeringPlayer].lv_skullsCollected);
    libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_triggeringPlayer)].lv_map_SkullsCollected += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScoreTrackingSkullCollected_Init () {
    libGame_gt_ScoreTrackingSkullCollected = TriggerCreate("libGame_gt_ScoreTrackingSkullCollected_Func");
    libGame_gf_MapUnderworldSkullCollected(libGame_gt_ScoreTrackingSkullCollected);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Tracking Seed Collected
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScoreTrackingSeedCollected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;
    int lv_triggeringPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringPlayer = libGame_gf_MapGardensSeedsCollectedCollectingPlayer();
    libGame_gv_scoreValues[lv_triggeringPlayer].lv_seedsCollected += 1;
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_triggeringPlayer, "MapMechanics", libGame_gv_scoreValues[lv_triggeringPlayer].lv_seedsCollected);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_triggeringPlayer, "GardensSeedsCollected", libGame_gv_scoreValues[lv_triggeringPlayer].lv_seedsCollected);
    libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_triggeringPlayer)].lv_map_SeedsCollected += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScoreTrackingSeedCollected_Init () {
    libGame_gt_ScoreTrackingSeedCollected = TriggerCreate("libGame_gt_ScoreTrackingSeedCollected_Func");
    libGame_gf_MapGardensSeedsCollected(libGame_gt_ScoreTrackingSeedCollected);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Shrub Proximity Revealer
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ShrubProximityRevealer_Func (bool testConds, bool runActions) {
    int auto03E1685C_ae;

    // Variable Declarations
    int lv_playerIndex;
    point lv_heroPosition;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto03E1685C_ae = libCore_gv_bALMaxPlayers;
    lv_playerIndex = 1;
    for ( ; lv_playerIndex <= auto03E1685C_ae ; lv_playerIndex += 1 ) {
        if ((UnitIsValid(libGame_gv_players[lv_playerIndex].lv_heroUnit) == true) && (UnitTestState(libGame_gv_players[lv_playerIndex].lv_heroUnit, c_unitStateCloaked) == false)) {
            lv_heroPosition = UnitGetPosition(libGame_gv_players[lv_playerIndex].lv_heroUnit);
            if ((InShrub(lv_heroPosition) == true)) {
                libGame_gf_ShrubNearbyEnemyHeroRevealCheck(lv_playerIndex, libGame_gv_players[lv_playerIndex].lv_heroUnit, lv_heroPosition);
            }
            else {
            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ShrubProximityRevealer_Init () {
    libGame_gt_ShrubProximityRevealer = TriggerCreate("libGame_gt_ShrubProximityRevealer_Func");
    TriggerAddEventTimePeriodic(libGame_gt_ShrubProximityRevealer, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower - Tower Dead State Gate Check
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TowerTowerDeadStateGateCheck_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libGame_gf_UnitTypeIsTownGate(UnitGetType(UnitGroupLoopCurrent())) == true)) {
            return true;
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitKill(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TowerTowerDeadStateGateCheck_Init () {
    libGame_gt_TowerTowerDeadStateGateCheck = TriggerCreate("libGame_gt_TowerTowerDeadStateGateCheck_Func");
    TriggerAddEventUnitAbility(libGame_gt_TowerTowerDeadStateGateCheck, null, AbilityCommand("TowerDeadMorph", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower - Tower Morph To Dead State Structure "Dies"
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TowerTowerMorphToDeadStateStructureDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_townIndex;
    int lv_structureIndex;
    int lv_killingFaction;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_townIndex = libGame_gf_TownGetTownForUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_structureIndex = libGame_gf_TownGetTownStructureIndexForUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    libGame_gf_AwardXPForNPCKill(EventPlayerEffectUsedUnit(c_effectUnitCaster), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), c_unitAttributeStructure, EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget));
    if ((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_killingFaction = libGame_ge_Faction_Chaos;
    }
    else {
        lv_killingFaction = libGame_ge_Faction_Order;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TowerTowerMorphToDeadStateStructureDies_Init () {
    libGame_gt_TowerTowerMorphToDeadStateStructureDies = TriggerCreate("libGame_gt_TowerTowerMorphToDeadStateStructureDies_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_TowerTowerMorphToDeadStateStructureDies, c_playerAny, "TownCannonTowerDeathSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower - Hero Targeting Warning Sounds
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TowerHeroTargetingWarningSounds_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "TowerAggroSoundCooldown") == false)) {
        SoundPlayForPlayer(SoundLink("Doodad_CannonTower_Targeting_Warning", -1), UnitGetOwner(EventUnit()), libCore_gv_playerGroupFromPlayer[UnitGetOwner(EventUnit())], 100.0, 0.0);
        UnitBehaviorAdd(EventUnit(), "TowerAggroSoundCooldown", EventUnit(), 1);
    }
    else {
        UnitBehaviorAdd(EventUnit(), "TowerAggroSoundCooldown", EventUnit(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TowerHeroTargetingWarningSounds_Init () {
    libGame_gt_TowerHeroTargetingWarningSounds = TriggerCreate("libGame_gt_TowerHeroTargetingWarningSounds_Func");
    TriggerAddEventUnitAttacked2(libGame_gt_TowerHeroTargetingWarningSounds, null, "GuardTowerL1Weapon");
    TriggerAddEventUnitAttacked2(libGame_gt_TowerHeroTargetingWarningSounds, null, "GuardTowerL2Weapon");
    TriggerAddEventUnitAttacked2(libGame_gt_TowerHeroTargetingWarningSounds, null, "GuardTowerL3Weapon");
    TriggerAddEventUnitAttacked2(libGame_gt_TowerHeroTargetingWarningSounds, null, "TownHallWeapon");
    TriggerAddEventUnitAttacked2(libGame_gt_TowerHeroTargetingWarningSounds, null, "TownHallL2Weapon");
    TriggerAddEventUnitAttacked2(libGame_gt_TowerHeroTargetingWarningSounds, null, "TownHallL3Weapon");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower - Core Is Attacked
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TowerCoreIsAttacked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_teamUnderAttack;
    timer lv_teamAlertTimer;

    // Variable Initialization
    lv_teamUnderAttack = PlayerGroupEmpty();
    lv_teamAlertTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsedUnit(c_effectUnitCaster) == libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core)) {
        lv_teamUnderAttack = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup;
        lv_teamAlertTimer = libGame_gv_towerTeamOrderCoreAlertTimer;
        DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_coreHealthUnitStatusFrames[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_coreHealthUnitStatusFrames[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_coreHealthLabel, PlayerGroupAll(), true);
    }
    else {
        if ((EventPlayerEffectUsedUnit(c_effectUnitCaster) == libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core)) {
            lv_teamUnderAttack = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup;
            lv_teamAlertTimer = libGame_gv_towerTeamChaosCoreAlertTimer;
            DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_coreHealthUnitStatusFrames[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), true);
            DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_coreHealthUnitStatusFrames[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), true);
            DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_coreHealthLabel, PlayerGroupAll(), true);
        }
        else {
            return true;
        }
    }
    if ((TimerGetRemaining(lv_teamAlertTimer) == 0.0)) {
        TimerStart(lv_teamAlertTimer, libGame_gv_towerCoreUnderAttackAlertRepeatTime, false, c_timeGame);
        libNtve_gf_CreatePingFacingAngle(lv_teamUnderAttack, "StormPingCoreAttack", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), Color(100.00, 0.00, 0.00), 5.0, 270.0);
        libGame_gf_AnnouncementAddItemForPlayerGroup(lv_teamUnderAttack, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_AlliedCoreUnderAttack, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        if ((lv_teamUnderAttack == libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup)) {
            libNtve_gf_CreatePingFacingAngle(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "StormPingCoreAttack", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), libCore_gv_cOLORAllyColor, 5.0, 270.0);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_BlueTeamCoreUnderAttack, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        }
        else {
            libNtve_gf_CreatePingFacingAngle(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "StormPingCoreAttack", UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), libCore_gv_cOLOREnemyColor, 5.0, 270.0);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_RedTeamCoreUnderAttack, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        }
        UIAlert("CoreUnderAttack", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), StringToText(""), null);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TowerCoreIsAttacked_Init () {
    libGame_gt_TowerCoreIsAttacked = TriggerCreate("libGame_gt_TowerCoreIsAttacked_Func");
    TriggerEnable(libGame_gt_TowerCoreIsAttacked, false);
    TriggerAddEventPlayerEffectUsed(libGame_gt_TowerCoreIsAttacked, c_playerAny, "PalaceDamageResponseDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Town System
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeTownSystem_Func (bool testConds, bool runActions) {
    int autoFDF0F771_ae;
    int autoFDF0F771_ai;
    unitgroup auto408FF192_g;
    int auto408FF192_u;
    int auto6F02997B_val;

    // Variable Declarations
    const fixed lv_workerSpreadArc = 30.0;
    int lv_town;
    unit lv_u;
    int lv_worker;
    string lv_unitID;
    int lv_townStructureType;
    int lv_townStructureCount;
    fixed lv_workerArcIncrement;
    fixed lv_defaultTownWorkerAngle;
    fixed lv_currentWorkerArc;
    int lv_townVehicleNode;
    int lv_vehicleNodeCount;
    int lv_townEnemyTeam;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSTowns == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_townsRemaining = 0;
    libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_townsRemaining = 0;
    autoFDF0F771_ae = libGame_gv_townTownCount;
    autoFDF0F771_ai = 1;
    lv_town = 1;
    for ( ; ( (autoFDF0F771_ai >= 0 && lv_town <= autoFDF0F771_ae) || (autoFDF0F771_ai <= 0 && lv_town >= autoFDF0F771_ae) ) ; lv_town += autoFDF0F771_ai ) {
        libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(libGame_gv_townTownData[lv_town].lv_owner)].lv_townsRemaining += 1;
        libGame_gv_townTownData[lv_town].lv_structureCount = 0;
        libGame_gv_townTownData[lv_town].lv_structuresAlive = 0;
        if ((libGame_gv_townTownData[lv_town].lv_owner == libCore_gv_cOMPUTER_TeamOrder)) {
            lv_townEnemyTeam = libCore_gv_cOMPUTER_TeamChaos;
        }
        else {
            lv_townEnemyTeam = libCore_gv_cOMPUTER_TeamOrder;
        }
        auto408FF192_g = UnitGroup(null, libGame_gv_townTownData[lv_town].lv_owner, libGame_gv_townTownData[lv_town].lv_townRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto408FF192_u = 1;
        for ( ; auto408FF192_u <= UnitGroupCount(auto408FF192_g, c_unitCountAll) ; auto408FF192_u += BoolToInt(lv_u == UnitGroupUnit(auto408FF192_g, auto408FF192_u)) ) {
            lv_u = UnitGroupUnit(auto408FF192_g, auto408FF192_u);
            lv_unitID = UnitGetType(lv_u);
            lv_townStructureType = libGame_gf_TownGetTownStructurePresetFromUnitID(lv_unitID);
            if ((lv_townStructureType != libGame_ge_TownStructureTypes_None)) {
                libGame_gv_townTownData[lv_town].lv_structureCount += 1;
                lv_townStructureCount = libGame_gv_townTownData[lv_town].lv_structureCount;
                UnitSetCustomValue(lv_u, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_TownIndex), lv_town);
                UnitSetCustomValue(lv_u, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_TownStructureIndex), lv_townStructureCount);
                libGame_gv_townTownData[lv_town].lv_structureTypes[lv_townStructureCount] = lv_townStructureType;
                libGame_gv_townTownData[lv_town].lv_structureUnits[lv_townStructureCount] = lv_u;
                libGame_gv_townTownData[lv_town].lv_structureUnitIDs[lv_townStructureCount] = lv_unitID;
                libGame_gv_townTownData[lv_town].lv_structureSpawnPoints[lv_townStructureCount] = UnitGetPosition(lv_u);
                auto6F02997B_val = lv_townStructureType;
                if (auto6F02997B_val == libGame_ge_TownStructureTypes_TownHall) {
                    libGame_gv_townTownData[lv_town].lv_townHallIndex = lv_townStructureCount;
                    libGame_gv_townTownData[lv_town].lv_townHallPosition = UnitGetPosition(lv_u);
                    libGame_gv_townTownData[lv_town].lv_structuresAlive += 1;
                    UnitBehaviorAddPlayer(lv_u, "StormPowerSourceA", libGame_gv_townTownData[lv_town].lv_owner, 1);
                    UnitBehaviorAddPlayer(lv_u, "StormPowerSourceB", lv_townEnemyTeam, 1);
                }
                else if (auto6F02997B_val == libGame_ge_TownStructureTypes_CannonTower) {
                    libGame_gv_townTownData[lv_town].lv_structuresAlive += 1;
                }
                else if (auto6F02997B_val == libGame_ge_TownStructureTypes_Gate) {
                    libGame_gv_townTownData[lv_town].lv_structuresAlive += 1;
                }
                else if (auto6F02997B_val == libGame_ge_TownStructureTypes_Moonwell) {
                    libGame_gv_townTownData[lv_town].lv_structuresAlive += 1;
                }
                else {
                }
            }
            else {
            }
        }
    }
    TriggerEnable(libGame_gt_VehiclesVehicleBuilt, true);
    libGame_gf_SendEventTownDataInitialized();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeTownSystem_Init () {
    libGame_gt_InitializeTownSystem = TriggerCreate("libGame_gt_InitializeTownSystem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Town - Vehicle Pad Killed
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TownVehiclePadKilled_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_structureIndex;
    int lv_townIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "LightCyclePad") || (UnitGetType(EventUnit()) == "BuilderPad") || (UnitGetType(EventUnit()) == "FlyingMachinePad") || (UnitGetType(EventUnit()) == "TrebuchetPad")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_townIndex = libGame_gf_TownGetTownForUnit(EventUnit());
    lv_structureIndex = libGame_gf_TownGetTownStructureIndexForUnit(EventUnit());
    libGame_gf_TownSetTrainingTextTag(lv_townIndex, lv_structureIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TownVehiclePadKilled_Init () {
    libGame_gt_TownVehiclePadKilled = TriggerCreate("libGame_gt_TownVehiclePadKilled_Func");
    TriggerAddEventUnitDied(libGame_gt_TownVehiclePadKilled, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base - Repulser Field - Launch Missile
//--------------------------------------------------------------------------------------------------
bool libGame_gt_BaseRepulserFieldLaunchMissile_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_base;
    unit lv_targetUnit;
    fixed lv_abilityRange;
    fixed lv_distanceFromBasePlayerTargetPoint;
    fixed lv_baseRadius;
    point lv_targetPoint;
    point lv_actualTargetPoint;
    fixed lv_modifiedDistance;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_base = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_abilityRange = libGame_gv_baseRepulserFieldLaunchDistance;
    lv_targetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_base), libGame_gv_baseRepulserFieldLaunchDistance, UnitGetPosition(lv_targetUnit));
    lv_actualTargetPoint = lv_targetPoint;
    if ((PointPathingPassable(lv_actualTargetPoint) == false)) {
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lv_base))].lv_core), 7.5, UnitGetPosition(lv_base));
    }
    else {
    }
    UnitCreateEffectPoint(lv_targetUnit, "RepulserFieldLaunchUnit", lv_actualTargetPoint);
    if ((UnitGetType(lv_targetUnit) == "HeroFalstad")) {
        UnitSetPropertyFixed(lv_targetUnit, c_unitPropHeight, 2.0);
    }
    else {
        UnitSetPropertyFixed(lv_targetUnit, c_unitPropHeight, 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_BaseRepulserFieldLaunchMissile_Init () {
    libGame_gt_BaseRepulserFieldLaunchMissile = TriggerCreate("libGame_gt_BaseRepulserFieldLaunchMissile_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_BaseRepulserFieldLaunchMissile, c_playerAny, "BaseRepulserFieldPuntDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vehicles - Town Respawn Timer Countdown
//--------------------------------------------------------------------------------------------------
bool libGame_gt_VehiclesTownRespawnTimerCountdown_Func (bool testConds, bool runActions) {
    int auto3E88CEF9_ae;
    int auto3E88CEF9_ai;
    int autoDD4B65CF_ae;
    int autoDD4B65CF_ai;

    // Variable Declarations
    int lv_militiaRespawnTextTag;
    int lv_town;
    int lv_structure;
    int lv_vehicleNode;

    // Variable Initialization
    lv_militiaRespawnTextTag = c_textTagNone;

    // Actions
    if (!runActions) {
        return true;
    }

    auto3E88CEF9_ae = libGame_gv_townTownCount;
    auto3E88CEF9_ai = 1;
    lv_town = 1;
    for ( ; ( (auto3E88CEF9_ai >= 0 && lv_town <= auto3E88CEF9_ae) || (auto3E88CEF9_ai <= 0 && lv_town >= auto3E88CEF9_ae) ) ; lv_town += auto3E88CEF9_ai ) {
        autoDD4B65CF_ae = libGame_gv_townTownData[lv_town].lv_vehicleSpawnNodes;
        autoDD4B65CF_ai = 1;
        lv_vehicleNode = 1;
        for ( ; ( (autoDD4B65CF_ai >= 0 && lv_vehicleNode <= autoDD4B65CF_ae) || (autoDD4B65CF_ai <= 0 && lv_vehicleNode >= autoDD4B65CF_ae) ) ; lv_vehicleNode += autoDD4B65CF_ai ) {
            if ((TimerGetRemaining(libGame_gv_townTownData[lv_town].lv_vehicleRespawnTimer[lv_vehicleNode]) > 0.0)) {
                TextExpressionSetToken("Param/Expression/lib_Game_0B541623", "A", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(libGame_gv_townTownData[lv_town].lv_vehicleRespawnTimer[lv_vehicleNode]))));
                TextTagSetText(libGame_gv_townTownData[lv_town].lv_vehicleStatusTextTag[lv_vehicleNode], TextExpressionAssemble("Param/Expression/lib_Game_0B541623"));
            }
            else {
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_VehiclesTownRespawnTimerCountdown_Init () {
    libGame_gt_VehiclesTownRespawnTimerCountdown = TriggerCreate("libGame_gt_VehiclesTownRespawnTimerCountdown_Func");
    TriggerAddEventTimePeriodic(libGame_gt_VehiclesTownRespawnTimerCountdown, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vehicles - Initialize Occupied Vehicle Catalog Values
//--------------------------------------------------------------------------------------------------
bool libGame_gt_VehiclesInitializeOccupiedVehicleCatalogValues_Func (bool testConds, bool runActions) {
    int auto363B9EFC_ae;
    int auto363B9EFC_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_97C3FD84"), true);
    auto363B9EFC_ae = libCore_gv_bALMaxPlayers;
    auto363B9EFC_ai = 1;
    lv_player = 1;
    for ( ; ( (auto363B9EFC_ai >= 0 && lv_player <= auto363B9EFC_ae) || (auto363B9EFC_ai <= 0 && lv_player >= auto363B9EFC_ae) ) ; lv_player += auto363B9EFC_ai ) {
        CatalogFieldValueSet(c_gameCatalogUnit, "VehicleLightCycle", "Attributes[" + IntToString(5) + "]", lv_player, "1");
        CatalogFieldValueSet(c_gameCatalogUnit, "VehicleLightCycle", "Sight", lv_player, "12");
        CatalogFieldValueSet(c_gameCatalogUnit, "VehicleLightCycle", "Attributes[" + IntToString(5) + "]", lv_player, "1");
        CatalogFieldValueSet(c_gameCatalogUnit, "VehicleLightCycle", "Sight", lv_player, "12");
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_VehiclesInitializeOccupiedVehicleCatalogValues_Init () {
    libGame_gt_VehiclesInitializeOccupiedVehicleCatalogValues = TriggerCreate("libGame_gt_VehiclesInitializeOccupiedVehicleCatalogValues_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vehicles - Vehicle Built
//--------------------------------------------------------------------------------------------------
bool libGame_gt_VehiclesVehicleBuilt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_vehiclePad;
    unit lv_newVehicle;
    int lv_townIndex;
    int lv_vehiclePadIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "LightCyclePad") || (UnitGetType(EventUnit()) == "TrebuchetPad") || (UnitGetType(EventUnit()) == "FlyingMachinePad") || (UnitGetType(EventUnit()) == "BuilderPad")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vehiclePad = EventUnit();
    lv_newVehicle = EventUnitProgressUnit();
    lv_townIndex = libGame_gf_TownGetTownForUnit(lv_vehiclePad);
    lv_vehiclePadIndex = libGame_gf_TownGetTownStructureIndexForUnit(lv_vehiclePad);
    if (((lv_townIndex == 0) || (lv_vehiclePadIndex == 0))) {
        return true;
    }
    else {
    }
    libGame_gf_TownSetTrainingTextTag(lv_townIndex, lv_vehiclePadIndex);
    UnitSetCustomValue(lv_newVehicle, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_TownIndex), lv_townIndex);
    UnitSetCustomValue(lv_newVehicle, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_BarracksIndexForMilitia), lv_vehiclePadIndex);
    UnitSetCustomValue(lv_newVehicle, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_VehicleLocationTypeIndex), 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_VehiclesVehicleBuilt_Init () {
    libGame_gt_VehiclesVehicleBuilt = TriggerCreate("libGame_gt_VehiclesVehicleBuilt_Func");
    TriggerEnable(libGame_gt_VehiclesVehicleBuilt, false);
    TriggerAddEventUnitTrainProgress(libGame_gt_VehiclesVehicleBuilt, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vehicles - Use Vehicle
//--------------------------------------------------------------------------------------------------
bool libGame_gt_VehiclesUseVehicle_Func (bool testConds, bool runActions) {
    int auto50B57BB8_ae;
    int auto50B57BB8_ai;
    int autoCEADE6AD_ae;
    int autoCEADE6AD_ai;
    string autoB85FD23B_val;

    // Variable Declarations
    int lv_heroExperience;
    int lv_p;
    int lv_player;
    unit lv_hero;
    unit lv_vehicle;
    fixed lv_vehicleLifePercent;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_vehicle = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_heroExperience = UnitLevel(lv_hero);
    if ((UnitHasBehavior2(lv_hero, "AbathurSymbioteHostBehavior") == true)) {
        UnitBehaviorRemove(lv_hero, "AbathurSymbioteHostBehavior", 1);
    }
    else {
    }
    if ((UnitTestState(lv_hero, c_unitStateHallucination) == true)) {
        lv_hero = libGame_gv_players[lv_player].lv_heroUnit;
        libGame_gv_players[lv_player].lv_activeVehicle = lv_vehicle;
        UnitCreateEffectUnit(lv_hero, "UseVehicleApplyCasterBehavior", lv_hero);
        UnitCreateEffectUnit(lv_hero, "UseVehicleTeleToBaseSearchForDestination", lv_hero);
        UnitGroupLoopBegin(UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHallucination - 32)), (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitKill(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }
    else {
        libGame_gv_players[lv_player].lv_activeVehicle = lv_vehicle;
    }
    if ((UnitGroupCount(libGame_gv_players[lv_player].lv_heroUnitGroup, c_unitCountAll) == 1)) {
        libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[lv_player].lv_activeVehicle);
        libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    }
    else {
    }
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroTrackerArrow.lv_arrow, libGame_gv_players[lv_player].lv_activeVehicle, libCore_gv_playerGroupFromPlayer[lv_player]);
    libUIUI_gf_UIHeroConsoleSetUpForPlayer(lv_vehicle, lv_player);
    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(libGame_gv_players[lv_player].lv_activeVehicle, lv_player);
    libGame_gf_VehiclesSetVehicleStatusTextTag(lv_vehicle);
    UnitClearSelection(lv_player);
    UnitSelect(lv_vehicle, lv_player, true);
    lv_vehicleLifePercent = UnitGetPropertyFixed(lv_vehicle, c_unitPropLifePercent, c_unitPropCurrent);
    UnitSetOwner(lv_vehicle, lv_player, true);
    UnitCreateEffectUnit(lv_hero, "UseVehiclePropagateOrders", lv_vehicle);
    libGame_gf_UpdateScalingForUnit(lv_vehicle, libGame_gv_scalingTicks, 0, 0);
    libGame_gf_UpdateUpgradesForPlayer(lv_player, lv_vehicle, libGame_gv_scalingTicks);
    UnitStatusBarOverride(lv_vehicle, c_unitStatusGroupAll);
    UnitSetPropertyFixed(lv_vehicle, c_unitPropLifePercent, lv_vehicleLifePercent);
    libUIUI_gf_UIDamageFlashStopLowHPSoundAndScreenEffects(lv_player);
    libUIUI_gf_UIUpdateEventPlayerStatsChange(lv_player);
    auto50B57BB8_ae = libCore_gv_bALMaxPlayers;
    auto50B57BB8_ai = 1;
    lv_p = 1;
    for ( ; ( (auto50B57BB8_ai >= 0 && lv_p <= auto50B57BB8_ae) || (auto50B57BB8_ai <= 0 && lv_p >= auto50B57BB8_ae) ) ; lv_p += auto50B57BB8_ai ) {
        if ((libGame_gv_players[lv_p].lv_cameraAllyPlayerToTrack == lv_player)) {
            libGame_gf_CameraUpdateCameraForPlayer(lv_p);
        }
        else {
        }
    }
    autoCEADE6AD_ae = libCore_gv_bALMaxPlayers;
    autoCEADE6AD_ai = 1;
    lv_p = 1;
    for ( ; ( (autoCEADE6AD_ai >= 0 && lv_p <= autoCEADE6AD_ae) || (autoCEADE6AD_ai <= 0 && lv_p >= autoCEADE6AD_ae) ) ; lv_p += autoCEADE6AD_ai ) {
        if ((libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lv_p] == lv_hero)) {
            libUIUI_gf_UITargetInfoPanelSetTargetForPlayer(libGame_gv_players[UnitGetOwner(lv_hero)].lv_activeVehicle, lv_p);
        }
        else {
        }
    }
    autoB85FD23B_val = UnitGetType(lv_hero);
    if (autoB85FD23B_val == "HeroArthas") {
        UnitGroupLoopBegin(UnitGroup("ArthasGhoul", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(libGame_gv_players[lv_player].lv_heroUnit), false);
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "UsingVehicle", UnitGroupLoopCurrent(), 1);
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_VehiclesUseVehicle_Init () {
    libGame_gt_VehiclesUseVehicle = TriggerCreate("libGame_gt_VehiclesUseVehicle_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_VehiclesUseVehicle, c_playerAny, "UseVehicleCastCompleteSet");
    TriggerAddEventPlayerEffectUsed(libGame_gt_VehiclesUseVehicle, c_playerAny, "CommandeerOdinVehicleCastCompleteSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vehicles - Leave Vehicle
//--------------------------------------------------------------------------------------------------
bool libGame_gt_VehiclesLeaveVehicle_Func (bool testConds, bool runActions) {
    int autoFD90636A_ae;
    int autoFD90636A_ai;
    int auto91294E51_ae;
    int auto91294E51_ai;

    // Variable Declarations
    int lv_p;
    int lv_q;
    int lv_player;
    unit lv_vehicle;
    fixed lv_vehicleLifePercent;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_vehicle = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    UnitBehaviorRemove(lv_vehicle, "GenericVehicleBehaviorOccupied", 1);
    if ((UnitGroupCount(libGame_gv_players[lv_player].lv_heroUnitGroup, c_unitCountAll) == 1)) {
        libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[lv_player].lv_heroUnitGroup;
        libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    }
    else {
    }
    UnitSelect(lv_vehicle, lv_player, false);
    UnitSetPropertyFixed(lv_vehicle, c_unitPropLevel, 1.0);
    libGame_gf_VehiclesReturnPlayerFromVehicleAtPoint(lv_player, UnitGetPosition(lv_vehicle));
    lv_vehicleLifePercent = UnitGetPropertyFixed(lv_vehicle, c_unitPropLifePercent, c_unitPropCurrent);
    if ((libGame_gf_TeamNumberOfPlayer(lv_player) == 1)) {
        UnitSetOwner(lv_vehicle, libCore_gv_cOMPUTER_TeamOrder, true);
    }
    else {
        UnitSetOwner(lv_vehicle, libCore_gv_cOMPUTER_TeamChaos, true);
    }
    UnitSetPropertyFixed(lv_vehicle, c_unitPropLifePercent, lv_vehicleLifePercent);
    autoFD90636A_ae = libCore_gv_bALMaxPlayers;
    autoFD90636A_ai = 1;
    lv_q = 1;
    for ( ; ( (autoFD90636A_ai >= 0 && lv_q <= autoFD90636A_ae) || (autoFD90636A_ai <= 0 && lv_q >= autoFD90636A_ae) ) ; lv_q += autoFD90636A_ai ) {
        if ((libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lv_q] == lv_vehicle)) {
            libUIUI_gf_UITargetInfoPanelSetTargetForPlayer(libGame_gv_players[lv_player].lv_heroUnit, lv_q);
        }
        else {
        }
    }
    libGame_gv_players[lv_player].lv_activeVehicle = null;
    if ((UnitGetPropertyFixed(libGame_gv_players[lv_player].lv_heroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= libUIUI_gv_uIDamageFlashLowHPThreshold)) {
        libUIUI_gf_UIDamageFlashStartLowHPSoundAndScreenEffects(lv_player);
    }
    else {
    }
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroTrackerArrow.lv_arrow, libGame_gv_players[lv_player].lv_heroUnit, libCore_gv_playerGroupFromPlayer[lv_player]);
    libUIUI_gf_UIHeroConsoleSetUpForPlayer(libGame_gv_players[lv_player].lv_heroUnit, lv_player);
    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(libGame_gv_players[lv_player].lv_heroUnit, lv_player);
    libUIUI_gf_UIUpdateEventPlayerStatsChange(lv_player);
    auto91294E51_ae = libCore_gv_bALMaxPlayers;
    auto91294E51_ai = 1;
    lv_p = 1;
    for ( ; ( (auto91294E51_ai >= 0 && lv_p <= auto91294E51_ae) || (auto91294E51_ai <= 0 && lv_p >= auto91294E51_ae) ) ; lv_p += auto91294E51_ai ) {
        if ((libGame_gv_players[lv_p].lv_cameraAllyPlayerToTrack == lv_player)) {
            libGame_gf_CameraUpdateCameraForPlayer(lv_p);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_VehiclesLeaveVehicle_Init () {
    libGame_gt_VehiclesLeaveVehicle = TriggerCreate("libGame_gt_VehiclesLeaveVehicle_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_VehiclesLeaveVehicle, c_playerAny, "LeaveVehicleApplyTimedLife");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vehicles - Vehicle Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_VehiclesVehicleDies_Func (bool testConds, bool runActions) {
    int autoEB417FA1_ae;
    int autoEB417FA1_ai;
    int auto7CCADAE5_ae;
    int auto7CCADAE5_ai;
    int auto6EB0E705_ae;
    int auto6EB0E705_ai;

    // Variable Declarations
    int lv_p;
    int lv_q;
    int lv_activeVehicleIndex;
    unit lv_vehicle;
    int lv_locationTypeIndex;
    int lv_locationIndex;
    int lv_vehiclePadIndex;
    unit lv_vehiclePad;
    int lv_locationIndexPreset;
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vehicle = EventPlayerEffectUsedUnit(c_effectUnitSource);
    autoEB417FA1_ae = libCore_gv_bALMaxPlayers;
    autoEB417FA1_ai = 1;
    lv_activeVehicleIndex = 1;
    for ( ; ( (autoEB417FA1_ai >= 0 && lv_activeVehicleIndex <= autoEB417FA1_ae) || (autoEB417FA1_ai <= 0 && lv_activeVehicleIndex >= autoEB417FA1_ae) ) ; lv_activeVehicleIndex += autoEB417FA1_ai ) {
        if ((lv_vehicle == libGame_gv_players[lv_activeVehicleIndex].lv_activeVehicle)) {
            lv_player = lv_activeVehicleIndex;
            UnitSelect(lv_vehicle, lv_player, false);
            libGame_gf_VehiclesReturnPlayerFromVehicleAtPoint(lv_player, UnitGetPosition(lv_vehicle));
            auto7CCADAE5_ae = libCore_gv_bALMaxPlayers;
            auto7CCADAE5_ai = 1;
            lv_q = 1;
            for ( ; ( (auto7CCADAE5_ai >= 0 && lv_q <= auto7CCADAE5_ae) || (auto7CCADAE5_ai <= 0 && lv_q >= auto7CCADAE5_ae) ) ; lv_q += auto7CCADAE5_ai ) {
                if ((libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lv_q] == lv_vehicle)) {
                    libUIUI_gf_UITargetInfoPanelSetTargetForPlayer(libGame_gv_players[lv_player].lv_heroUnit, lv_q);
                }
                else {
                }
            }
            libGame_gv_players[lv_player].lv_activeVehicle = null;
            if ((UnitGetPropertyFixed(libGame_gv_players[lv_player].lv_heroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= libUIUI_gv_uIDamageFlashLowHPThreshold)) {
                libUIUI_gf_UIDamageFlashStartLowHPSoundAndScreenEffects(lv_player);
            }
            else {
            }
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroTrackerArrow.lv_arrow, libGame_gv_players[lv_player].lv_heroUnit, libCore_gv_playerGroupFromPlayer[lv_player]);
            libUIUI_gf_UIHeroConsoleSetUpForPlayer(libGame_gv_players[lv_player].lv_heroUnit, lv_player);
            libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(libGame_gv_players[lv_player].lv_heroUnit, lv_player);
            libUIUI_gf_UIUpdateEventPlayerStatsChange(lv_player);
            break;
        }
        else {
        }
    }
    if ((lv_player != 0)) {
        if ((UnitGroupCount(libGame_gv_players[lv_player].lv_heroUnitGroup, c_unitCountAll) == 1)) {
            libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[lv_player].lv_heroUnitGroup;
            libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_player, UnitGetPosition(libGame_gv_players[lv_player].lv_heroUnit), 0.0, -1, 0.0, false);
            libGame_gf_CameraUpdateCameraForPlayer(lv_player);
        }
        else {
        }
        auto6EB0E705_ae = libCore_gv_bALMaxPlayers;
        auto6EB0E705_ai = 1;
        lv_p = 1;
        for ( ; ( (auto6EB0E705_ai >= 0 && lv_p <= auto6EB0E705_ae) || (auto6EB0E705_ai <= 0 && lv_p >= auto6EB0E705_ae) ) ; lv_p += auto6EB0E705_ai ) {
            if ((libGame_gv_players[lv_p].lv_cameraAllyPlayerToTrack == lv_player)) {
                libGame_gf_CameraUpdateCameraForPlayer(lv_p);
            }
            else {
            }
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_VehiclesVehicleDies_Init () {
    libGame_gt_VehiclesVehicleDies = TriggerCreate("libGame_gt_VehiclesVehicleDies_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_VehiclesVehicleDies, c_playerAny, "UseVehicleFinalDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vehicle - Dragon Knight - Bull Rush
//--------------------------------------------------------------------------------------------------
bool libGame_gt_VehicleDragonKnightBullRush_Func (bool testConds, bool runActions) {
    fixed auto3D4EE29E_at;

    // Variable Declarations
    unit lv_dragonKnight;
    unit lv_targetUnit;
    fixed lv_abilityRange;
    fixed lv_distanceFromDragonKnightToPlayerTargetPoint;
    fixed lv_dragonKnightRadius;
    point lv_targetPoint;
    point lv_actualTargetPoint;
    fixed lv_modifiedDistance;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dragonKnight = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_abilityRange = libGame_gv_vehicleDragonKnightBullRushLaunchDistance;
    lv_targetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_targetUnit), libGame_gv_vehicleDragonKnightBullRushLaunchDistance, UnitGetPosition(lv_dragonKnight));
    lv_modifiedDistance = (lv_abilityRange + 0.0);
    lv_actualTargetPoint = lv_targetPoint;
    while ((PointPathingPassable(lv_actualTargetPoint) == false)) {
        lv_modifiedDistance += 0.125;
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_targetUnit), lv_modifiedDistance, UnitGetPosition(lv_dragonKnight));
        if ((lv_modifiedDistance >= libGame_gv_vehicleDragonKnightBullRushCutoffDistance)) {
            return true;
        }
        else {
        }
    }
    UnitCreateEffectPoint(lv_targetUnit, "DragonKnightBullRushLaunchUnit", lv_actualTargetPoint);
    auto3D4EE29E_at = 0;
    while (!((UnitHasBehavior2(lv_targetUnit, "DragonKnightBullRushImpactDummy") == true)) && auto3D4EE29E_at <= 10.0) {
        Wait(0.0625, c_timeGame);
        auto3D4EE29E_at = auto3D4EE29E_at + 0.0625;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_VehicleDragonKnightBullRush_Init () {
    libGame_gt_VehicleDragonKnightBullRush = TriggerCreate("libGame_gt_VehicleDragonKnightBullRush_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_VehicleDragonKnightBullRush, c_playerAny, "DragonKnightBullRushImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Watch Towers
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeWatchTowers_Func (bool testConds, bool runActions) {
    unitgroup autoDB8A231F_g;
    int autoDB8A231F_u;
    playergroup autoE1888F5C_g;
    int autoE1888F5C_p;

    // Variable Declarations
    unit lv_u;
    int lv_player;
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSJungleWatchTowers == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDB8A231F_g = UnitGroup("XelNagaWatchTower", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDB8A231F_u = 1;
    for ( ; autoDB8A231F_u <= UnitGroupCount(autoDB8A231F_g, c_unitCountAll) ; autoDB8A231F_u += BoolToInt(lv_u == UnitGroupUnit(autoDB8A231F_g, autoDB8A231F_u)) ) {
        lv_u = UnitGroupUnit(autoDB8A231F_g, autoDB8A231F_u);
        libGame_gv_watchTowersCurrentCount += 1;
        libGame_gv_watchTowers[libGame_gv_watchTowersCurrentCount].lv_watchTowerUnit = lv_u;
        UnitSetCustomValue(lv_u, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_WatchTowerIndex), libGame_gv_watchTowersCurrentCount);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "WatchTowerCaptureBeacon", c_unitCreateIgnorePlacement, UnitGetOwner(lv_u), UnitGetPosition(lv_u));
        libGame_gf_CapturePointCreate(UnitLastCreated(), libCore_gv_data_WatchTower_CaptureRadius_C, libCore_gv_data_WatchTower_CaptureTime_C, 0.0, true, true);
        libGame_gv_watchTowers[libGame_gv_watchTowersCurrentCount].lv_capturePointIndex = libGame_gf_LastCreatedCapturePoint();
        autoE1888F5C_g = PlayerGroupAll(); 
        autoE1888F5C_p = 1;
        for ( ; autoE1888F5C_p <= PlayerGroupCount(autoE1888F5C_g) ; autoE1888F5C_p += BoolToInt(lv_player == PlayerGroupPlayer(autoE1888F5C_g, autoE1888F5C_p)) ) {
            lv_player = PlayerGroupPlayer(autoE1888F5C_g, autoE1888F5C_p);
            VisRevealArea(lv_player, RegionCircle(UnitGetPosition(lv_u), 0.75), 0.125, false);
        }
    }
    TriggerEnable(libGame_gt_WatchTowersOwnershipChanges, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeWatchTowers_Init () {
    libGame_gt_InitializeWatchTowers = TriggerCreate("libGame_gt_InitializeWatchTowers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Watch Towers - Turn On Watch Towers
//--------------------------------------------------------------------------------------------------
bool libGame_gt_WatchTowersTurnOnWatchTowers_Func (bool testConds, bool runActions) {
    int auto9EC32974_ae;
    int auto9EC32974_ai;
    playergroup auto2BDC87DC_g;
    int auto2BDC87DC_p;

    // Variable Declarations
    int lv_watchtower;
    int lv_player;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSJungleWatchTowers == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9EC32974_ae = libGame_gv_watchTowersCurrentCount;
    auto9EC32974_ai = 1;
    lv_watchtower = 1;
    for ( ; ( (auto9EC32974_ai >= 0 && lv_watchtower <= auto9EC32974_ae) || (auto9EC32974_ai <= 0 && lv_watchtower >= auto9EC32974_ae) ) ; lv_watchtower += auto9EC32974_ai ) {
        ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_watchTowers[lv_watchtower].lv_captureBeaconUnit), "SetVisibility 1");
        ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_watchTowers[lv_watchtower].lv_watchTowerUnit), "SetMinimapVisibility 1");
        auto2BDC87DC_g = PlayerGroupAll(); 
        auto2BDC87DC_p = 1;
        for ( ; auto2BDC87DC_p <= PlayerGroupCount(auto2BDC87DC_g) ; auto2BDC87DC_p += BoolToInt(lv_player == PlayerGroupPlayer(auto2BDC87DC_g, auto2BDC87DC_p)) ) {
            lv_player = PlayerGroupPlayer(auto2BDC87DC_g, auto2BDC87DC_p);
            VisRevealArea(lv_player, RegionCircle(UnitGetPosition(libGame_gv_watchTowers[lv_watchtower].lv_watchTowerUnit), 0.75), 0.125, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_WatchTowersTurnOnWatchTowers_Init () {
    libGame_gt_WatchTowersTurnOnWatchTowers = TriggerCreate("libGame_gt_WatchTowersTurnOnWatchTowers_Func");
    TriggerAddEventTimer(libGame_gt_WatchTowersTurnOnWatchTowers, libGame_gv_jungleWatchTowerStartTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Watch Towers - Ownership Changes
//--------------------------------------------------------------------------------------------------
bool libGame_gt_WatchTowersOwnershipChanges_Func (bool testConds, bool runActions) {
    int autoD9163F59_ae;
    playergroup auto1994BB0D_g;
    int auto1994BB0D_p;
    int autoBF467B1A_val;

    // Variable Declarations
    int lv_itWatchTower;
    int lv_itPlayer;
    int lv_capturePointIndex;
    int lv_capturePointOwner;

    // Variable Initialization
    lv_capturePointIndex = libGame_gf_CapturePointChangesOwnerCapturePointIndex();
    lv_capturePointOwner = libGame_gf_CapturePointChangesOwnerOwner();

    // Actions
    if (!runActions) {
        return true;
    }

    autoD9163F59_ae = libGame_gv_watchTowersMaxCount;
    lv_itWatchTower = 1;
    for ( ; lv_itWatchTower <= autoD9163F59_ae ; lv_itWatchTower += 1 ) {
        if ((libGame_gv_watchTowers[lv_itWatchTower].lv_capturePointIndex == lv_capturePointIndex)) {
            auto1994BB0D_g = libGame_gf_CapturePointChangesOwnerCapturingPlayers(); 
            auto1994BB0D_p = 1;
            for ( ; auto1994BB0D_p <= PlayerGroupCount(auto1994BB0D_g) ; auto1994BB0D_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto1994BB0D_g, auto1994BB0D_p)) ) {
                lv_itPlayer = PlayerGroupPlayer(auto1994BB0D_g, auto1994BB0D_p);
                libGame_gv_scoreValues[lv_itPlayer].lv_watchTowersCaptured += 1;
            }
            libGame_gf_WatchTowersChangeWatchTowerOwnership(lv_itWatchTower, lv_capturePointOwner);
            autoBF467B1A_val = lv_capturePointOwner;
            if (autoBF467B1A_val == libCore_gv_cOMPUTER_Neutral) {
                libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_itWatchTower].lv_watchTowerUnit, "Signal OwnerNeutral");
            }
            else if (autoBF467B1A_val == libCore_gv_cOMPUTER_TeamChaos) {
                libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_itWatchTower].lv_watchTowerUnit, "Signal OwnerChaos");
                UnitCreateEffectUnit(libGame_gv_watchTowers[lv_itWatchTower].lv_watchTowerUnit, "WatchtowerRevealDummy", libGame_gv_watchTowers[lv_itWatchTower].lv_watchTowerUnit);
            }
            else if (autoBF467B1A_val == libCore_gv_cOMPUTER_TeamOrder) {
                libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_itWatchTower].lv_watchTowerUnit, "Signal OwnerOrder");
                UnitCreateEffectUnit(libGame_gv_watchTowers[lv_itWatchTower].lv_watchTowerUnit, "WatchtowerRevealDummy", libGame_gv_watchTowers[lv_itWatchTower].lv_watchTowerUnit);
            }
            else {
            }
            break;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_WatchTowersOwnershipChanges_Init () {
    libGame_gt_WatchTowersOwnershipChanges = TriggerCreate("libGame_gt_WatchTowersOwnershipChanges_Func");
    TriggerEnable(libGame_gt_WatchTowersOwnershipChanges, false);
    libGame_gf_CapturePointChangesOwner(libGame_gt_WatchTowersOwnershipChanges);
}

void libGame_InitTriggers () {
    libGame_gt_IncludeGame_Init();
    libGame_gt_InitializeBanks_Init();
    libGame_gt_InitializeGameSystems_Init();
    libGame_gt_InitializePlayers_Init();
    libGame_gt_InitializeVisibility_Init();
    libGame_gt_AfkCheckPlayerScoreValuesForActivity_Init();
    libGame_gt_AfkPlayerAfkWarningTimerExpires_Init();
    libGame_gt_AfkPlayerAfkKickTimerExpires_Init();
    libGame_gt_AnnouncementMessageTimerExpires_Init();
    libGame_gt_InitializeBehaviorCategoryBitFlagValues_Init();
    libGame_gt_CapturePointLogic_Init();
    libGame_gt_CCRecognitionSlow_Init();
    libGame_gt_CCRecognitionRoot_Init();
    libGame_gt_CCRecognitionStun_Init();
    libGame_gt_CCRecognitionSilenced_Init();
    libGame_gt_CCRecognitionDismountStun_Init();
    libGame_gt_CCRecognitionStasis_Init();
    libGame_gt_EncouragementDataInitializeThresholdValues_Init();
    libGame_gt_EncouragementDataTrackingRavenTributeCollected_Init();
    libGame_gt_EncouragementDataTrackingDoubloonsTurnedIn_Init();
    libGame_gt_EncouragementDataTrackingDragonShrineCaptured_Init();
    libGame_gt_EncouragementDataTrackingSkullCollected_Init();
    libGame_gt_EncouragementDataTrackingMercCampCaptured_Init();
    libGame_gt_EncouragementDataTrackingInCombatStart_Init();
    libGame_gt_EncouragementDataTrackingInCombatTimeout_Init();
    libGame_gt_EncouragementDataTrackingDeathTipPeriodicUpdate_Init();
    libGame_gt_EncouragementDataTrackingPlayerUsesUnderworldGate_Init();
    libGame_gt_EncouragementDataTrackingRecentHeroKillsTimeout_Init();
    libGame_gt_EncouragementDataTrackingRecentStructureDamageTimeout_Init();
    libGame_gt_EncouragementDataTrackingPlayerUsesAbility_Init();
    libGame_gt_EncouragementDataTrackingPlayerUsesMoonwell_Init();
    libGame_gt_StartGame_Init();
    libGame_gt_AnnounceCountdown_Init();
    libGame_gt_RunAnimations_Init();
    libGame_gt_OpenTheGatesOpenTheGatesTimerExpires_Init();
    libGame_gt_SpawnMinionsMinionSpawnStartTimerExpires_Init();
    libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires_Init();
    libGame_gt_ConfineHeroesToBaseUntilCountdownEnds_Init();
    libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds_Init();
    libGame_gt_ArtifactStatUpdatePlayerMaxLifeChanges_Init();
    libGame_gt_HeroDeathDiabloParticipatedInTakedown_Init();
    libGame_gt_HeroDeathSeasonedMarksmanParticipatedInTakedown_Init();
    libGame_gt_HeroDeathHeroDies_Init();
    libGame_gt_HeroDeathHeroDownedStateTimerExpires_Init();
    libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires_Init();
    libGame_gt_HeroDeathHeroRespawnTimerExpires_Init();
    libGame_gt_HeroDeathTeamMultikillTimerExpires_Init();
    libGame_gt_HeroDeathPlayerMultikillTimerExpires_Init();
    libGame_gt_HeroDeathUpdateMultikillTimerUI_Init();
    libGame_gt_HeroDeathKillStingerTimerExpires_Init();
    libGame_gt_HeroDeathDiabloDiabloDies_Init();
    libGame_gt_HeroDeathUtherEternalDevotionProc_Init();
    libGame_gt_HeroDeathUtherEternalDevotionDies_Init();
    libGame_gt_HeroDeathTyraelArchangelsWrathProc_Init();
    libGame_gt_HeroDeathTyraelArchangelsWrathDies_Init();
    libGame_gt_InitializeCodeLaneSystem_Init();
    libGame_gt_PlayerLeavesGame_Init();
    libGame_gt_PlayerRejoinsGame_Init();
    libGame_gt_TeamAbandonedTheGameTimerExpires_Init();
    libGame_gt_MinionSpawnCycle_Init();
    libGame_gt_HeroMount_Init();
    libGame_gt_HeroDismount_Init();
    libGame_gt_HeroDismountOnAbilityUseAttack_Init();
    libGame_gt_FlyingMountCooldownFly_Init();
    libGame_gt_FlyingMountCooldownLand_Init();
    libGame_gt_GameGeneralNPCProcListener_Init();
    libGame_gt_CreepDies_Init();
    libGame_gt_SummonedUnitDies_Init();
    libGame_gt_MinionDies_Init();
    libGame_gt_TownStructureDies_Init();
    libGame_gt_CoreDiesGameOver_Init();
    libGame_gt_LevelUp_Init();
    libGame_gt_RecentDamageTimerExpires_Init();
    libGame_gt_HeroDamageTracking_Init();
    libGame_gt_HeroKillCreditProximityTracking_Init();
    libGame_gt_HeroXPChanges_Init();
    libGame_gt_XPTrickle_Init();
    libGame_gt_PlayerHomeShieldProtectionOn_Init();
    libGame_gt_PlayerHomeShieldProtectionOff_Init();
    libGame_gt_PlayerHeroDisplacementCameraLock_Init();
    libGame_gt_ScalingTimerExpiration_Init();
    libGame_gt_JungleScalingTimerExpires_Init();
    libGame_gt_CoreScalingTimerExpires_Init();
    libGame_gt_ScoreTrackingTimeCCdEnemyHeroes_Init();
    libGame_gt_ScoreTrackingRavenTributeCollected_Init();
    libGame_gt_ScoreTrackingDoubloonCollected_Init();
    libGame_gt_ScoreTrackingDoubloonsDropped_Init();
    libGame_gt_ScoreTrackingDoubloonsTurnedIn_Init();
    libGame_gt_ScoreTrackingDragonActivated_Init();
    libGame_gt_ScoreTrackingDragonShrineCaptured_Init();
    libGame_gt_ScoreTrackingSkullCollected_Init();
    libGame_gt_ScoreTrackingSeedCollected_Init();
    libGame_gt_ShrubProximityRevealer_Init();
    libGame_gt_TowerTowerDeadStateGateCheck_Init();
    libGame_gt_TowerTowerMorphToDeadStateStructureDies_Init();
    libGame_gt_TowerHeroTargetingWarningSounds_Init();
    libGame_gt_TowerCoreIsAttacked_Init();
    libGame_gt_InitializeTownSystem_Init();
    libGame_gt_TownVehiclePadKilled_Init();
    libGame_gt_BaseRepulserFieldLaunchMissile_Init();
    libGame_gt_VehiclesTownRespawnTimerCountdown_Init();
    libGame_gt_VehiclesInitializeOccupiedVehicleCatalogValues_Init();
    libGame_gt_VehiclesVehicleBuilt_Init();
    libGame_gt_VehiclesUseVehicle_Init();
    libGame_gt_VehiclesLeaveVehicle_Init();
    libGame_gt_VehiclesVehicleDies_Init();
    libGame_gt_VehicleDragonKnightBullRush_Init();
    libGame_gt_InitializeWatchTowers_Init();
    libGame_gt_WatchTowersTurnOnWatchTowers_Init();
    libGame_gt_WatchTowersOwnershipChanges_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libGame_InitLib_completed = false;

void libGame_InitLib () {
    if (libGame_InitLib_completed) {
        return;
    }

    libGame_InitLib_completed = true;

    libGame_InitLibraries();
    libGame_InitVariables();
    libGame_InitTriggers();
}

include "TriggerLibs/HeroesLib"
include "TriggerLibs/MapMechanicsLib"
include "TriggerLibs/AILib"
include "TriggerLibs/UILib"
include "TriggerLibs/StartingExperienceLib"
include "TriggerLibs/SoundLib"
include "TriggerLibs/GameDataHelperLib"
include "TriggerLibs/SupportLib"

