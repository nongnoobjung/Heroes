include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib_h"
include "TriggerLibs/GameLib_h"
include "TriggerLibs/MapMechanicsLib_h"
include "TriggerLibs/AILib_h"
include "TriggerLibs/UILib_h"

include "TriggerLibs/GameDataHelperLib_h"

//--------------------------------------------------------------------------------------------------
// Library: Game Data Helper
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libGDHL_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libMapM_InitVariables();
    libAIAI_InitVariables();
    libUIUI_InitVariables();
}

// Variable Initialization
bool libGDHL_InitVariables_completed = false;

void libGDHL_InitVariables () {
    int init_i;
    int init_j;

    if (libGDHL_InitVariables_completed) {
        return;
    }

    libGDHL_InitVariables_completed = true;

    libGDHL_gv_bALFaerieDragonDreamDustDuration = 0.75;
    libGDHL_gv_bALFaerieDragonDreamDustSpeedBoost = 0.5;
    libGDHL_gv_heroAbathurSpikeBurstSplatScalar = 0.95;
    libGDHL_gv_kerriganMaxChargesEnrage = StringToInt(CatalogFieldValueGet(c_gameCatalogBehavior, "KerriganEnrageStack", "MaxStackCount", c_playerAny));
    libGDHL_gv_bALHeroKerriganAssimilationRangedDamageModifier = 0.1;
    libGDHL_gv_bALHeroKerriganAssimilationImprovedRangedDamageModifier = 0.1;
    libGDHL_gv_bALHeroKerriganAssimilationSpellDamageModifier = 0.1;
    libGDHL_gv_bALHeroKerriganAssimilationAggressiveDefenseMasterySpellDamageModifier = 0.2;
    libGDHL_gv_bALHeroKerriganAssimilationImprovedSpellDamageModifier = 0.1;
    libGDHL_gv_bALHeroKerriganAssimilationMaxHPLevelModifier = 100.0;
    libGDHL_gv_bALHeroKerriganAssimilationBaseHPValue = 200.0;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGDHL_gv_heroMalfurionTwilightDreamSilenceTimer[init_i] = TimerCreate();
    }
    libGDHL_gv_bALHeroMalfurionDruidsGiftManaCostReduction = 0.1;
    libGDHL_gv_bALHeroMalfurionDruidsGiftImprovedManaCostReduction = 0.15;
    libGDHL_gv_heroMuradinHaymakerLaunchDistance = -12.6;
    libGDHL_gv_heroMuradinHaymakerCutoffDistance = -1.0;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGDHL_gv_novaTripleTapMissileGroup[init_i] = UnitGroupEmpty();
    }
    libGDHL_gv_bALHeroTinkerSalvageCDRAmount = 2.0;
    libGDHL_gv_bALHeroTinkerImprovedSalvageCDRAmount = 4.0;
    libGDHL_gv_heroTyraelElDruinsMightTeleportDelay = 0.25;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGDHL_gv_heroUtherHolyRadianceUnitGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        for (init_j = 0; init_j <= 12; init_j += 1) {
            libGDHL_gv_moonwellTextTags[init_i][init_j] = c_textTagNone;
        }
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libGDHL_gv_moonwellTextTagsUnitGroup[init_i] = UnitGroupEmpty();
    }
    libGDHL_gv_bALHeroSwiftStormMountSpeedIncrease = 0.2;
}

// Presets
// Functions
void libGDHL_gf_SiegeUpdateAbilityPowerOnSummonedUnits (unit lp_unit) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_unit);
    UnitBehaviorAdd(lp_unit, "BucketOverdriveSummonedUnit", libGame_gv_players[lv_player].lv_heroUnit, UnitBehaviorCount(libGame_gv_players[lv_player].lv_heroUnit, "BucketOverdrive"));
    UnitBehaviorAdd(lp_unit, "TalentGatheringPowerCarry", libGame_gv_players[lv_player].lv_heroUnit, UnitBehaviorCount(libGame_gv_players[lv_player].lv_heroUnit, "TalentGatheringPowerCarry"));
    UnitBehaviorAdd(lp_unit, "TalentGatheringPowerStack", libGame_gv_players[lv_player].lv_heroUnit, UnitBehaviorCount(libGame_gv_players[lv_player].lv_heroUnit, "TalentGatheringPowerStack"));
    UnitBehaviorAdd(lp_unit, "TalentGatheringPowerMurky", libGame_gv_players[lv_player].lv_heroUnit, UnitBehaviorCount(libGame_gv_players[lv_player].lv_heroUnit, "TalentGatheringPowerMurky"));
}

void libGDHL_gf_RestoreHeight (unit lp_unit) {
    // Variable Declarations
    int lv_height;

    // Variable Initialization

    // Implementation
    lv_height = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(lp_unit), "Height", c_playerAny);
    UnitSetPropertyFixed(lp_unit, c_unitPropHeight, lv_height);
}

point libGDHL_gf_TargetCalculation (point lp_targetPoint, point lp_casterPoint, region lp_bFGRegion) {
    // Variable Declarations
    point lv_casterPoint;
    fixed lv_cosineofTargetAngle;
    point lv_targetPoint;
    fixed lv_targetXToEdgeOfMap;
    fixed lv_targetYToEdgeOfMap;
    fixed lv_targetAngle;
    fixed lv_triangle1C;
    fixed lv_triangle2C;
    point lv_abilityTargetPoint;

    // Variable Initialization
    lv_casterPoint = lp_casterPoint;
    lv_targetPoint = lp_targetPoint;

    // Implementation
    if ((PointGetX(lv_casterPoint) <= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) <= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - PointGetX(lv_targetPoint));
        lv_targetYToEdgeOfMap = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - PointGetY(lv_targetPoint));
        lv_targetAngle = AngleBetweenPoints(lv_casterPoint, lv_targetPoint);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMax(RegionPlayableMap())));
        }
        else {
            lv_triangle1C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMax(RegionPlayableMap())), PointGetY(lv_targetPoint));
            }
            else {
                lv_triangle2C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                }
            }
        }
    }
    else if ((PointGetX(lv_casterPoint) >= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) <= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = PointGetX(lv_targetPoint);
        lv_targetYToEdgeOfMap = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - PointGetY(lv_targetPoint));
        lv_targetAngle = (AngleBetweenPoints(lv_casterPoint, lv_targetPoint) - 90.0);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(lv_targetPoint));
        }
        else {
            lv_triangle1C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMax(RegionPlayableMap())));
            }
            else {
                lv_triangle2C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                }
            }
        }
    }
    else if ((PointGetX(lv_casterPoint) >= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) >= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = PointGetX(lv_targetPoint);
        lv_targetYToEdgeOfMap = PointGetY(lv_targetPoint);
        lv_targetAngle = (AngleBetweenPoints(lv_casterPoint, lv_targetPoint) - 180.0);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())));
        }
        else {
            lv_triangle1C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(lv_targetPoint));
            }
            else {
                lv_triangle2C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                }
            }
        }
    }
    else if ((PointGetX(lv_casterPoint) <= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) >= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - PointGetX(lv_targetPoint));
        lv_targetYToEdgeOfMap = PointGetY(lv_targetPoint);
        lv_targetAngle = (AngleBetweenPoints(lv_casterPoint, lv_targetPoint) - 270.0);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMax(RegionPlayableMap())), PointGetY(lv_targetPoint));
        }
        else {
            lv_triangle1C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())));
            }
            else {
                lv_triangle2C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                }
            }
        }
    }
    if ((lv_abilityTargetPoint != null)) {
        return lv_abilityTargetPoint;
    }
    else {
        return null;
    }
}

void libGDHL_gf_AbathurSymbiote (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGDHL_gv_eventID_AbathurSymbiote_C);
}

void libGDHL_gf_SendEventAbathurSymbiote (int lp_abathurPlayer, unit lp_symbioteUnit, unit lp_symbioteTarget) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGDHL_gv_eventID_AbathurSymbiote_C, libGDHL_gv_eventParam_AbathurSymbiote_AbathurPlayer_C), lp_abathurPlayer);
    DataTableSetUnit(false, TriggerEventParamName(libGDHL_gv_eventID_AbathurSymbiote_C, libGDHL_gv_eventParam_AbathurSymbiote_SymbioteUnit_C), lp_symbioteUnit);
    DataTableSetUnit(false, TriggerEventParamName(libGDHL_gv_eventID_AbathurSymbiote_C, libGDHL_gv_eventParam_AbathurSymbiote_SymbioteTarget_C), lp_symbioteTarget);
    TriggerSendEvent(libGDHL_gv_eventID_AbathurSymbiote_C);
}

int libGDHL_gf_AbathurSymbioteAbathurPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGDHL_gv_eventID_AbathurSymbiote_C, libGDHL_gv_eventParam_AbathurSymbiote_AbathurPlayer_C));
}

unit libGDHL_gf_AbathurSymbioteUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGDHL_gv_eventID_AbathurSymbiote_C, libGDHL_gv_eventParam_AbathurSymbiote_SymbioteUnit_C));
}

unit libGDHL_gf_AbathurSymbioteTarget () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGDHL_gv_eventID_AbathurSymbiote_C, libGDHL_gv_eventParam_AbathurSymbiote_SymbioteTarget_C));
}

void libGDHL_gf_HeroAbathurReturnControlledUnittoLaneAI (unit lp_unit) {
    // Variable Declarations
    unit lv_lanerUnit;
    int lv_ownerPlayer;
    int lv_teamNumberofOwner;
    point lv_positionOfUnit;

    // Variable Initialization

    // Implementation
    lv_lanerUnit = lp_unit;
    lv_ownerPlayer = UnitGetOwner(lp_unit);
    lv_teamNumberofOwner = libGame_gf_TeamNumberOfPlayer(lv_ownerPlayer);
    lv_positionOfUnit = UnitGetPosition(lp_unit);
    libGame_gf_CalculateSpawnedMinionGoalPoints(lv_ownerPlayer, lv_positionOfUnit);
    libAIAI_gf_MinionAIStartMinionAI(lv_lanerUnit, libGame_gv_spawnedMinionLane, libGame_gv_spawnedMinionFirstWaypointIndex, false, true, 0);
}

void libGDHL_gf_HeroAbathurSignalSymbioteVisibility (unit lp_symbioteTarget, unit lp_symbioteUnit) {
    // Implementation
    if ((UnitBehaviorCount(lp_symbioteTarget, "SymbioteVisibilityController") == 0)) {
        libNtve_gf_SendActorMessageToUnit(lp_symbioteUnit, "Signal SymbioteHide");
    }
    else {
        libNtve_gf_SendActorMessageToUnit(lp_symbioteUnit, "Signal SymbioteShow");
    }
}

void libGDHL_gf_HeroLiLiCloudSerpentCloakController (unit lp_owningUnit, unit lp_serpentUnit) {
    // Implementation
    if ((UnitTestState(lp_owningUnit, c_unitStateCloaked) == true) && (UnitHasBehavior2(lp_serpentUnit, "CloudSerpentCloakingBehavior") == false)) {
        libNtve_gf_SendActorMessageToUnit(lp_serpentUnit, "Signal SerpentHide");
        UnitBehaviorAdd(lp_serpentUnit, "CloudSerpentCloakingBehavior", lp_serpentUnit, 1);
    }
    else {
        if ((UnitTestState(lp_owningUnit, c_unitStateCloaked) == false) && (UnitHasBehavior2(lp_serpentUnit, "CloudSerpentCloakingBehavior") == true)) {
            libNtve_gf_SendActorMessageToUnit(lp_serpentUnit, "Signal SerpentShow");
            UnitBehaviorRemove(lp_serpentUnit, "CloudSerpentCloakingBehavior", 1);
        }
        else {
        }
    }
}

void libGDHL_gf_HeroStitchesReturnControlledUnittoLaneAI (unit lp_unit) {
    // Variable Declarations
    unit lv_lanerUnit;
    int lv_ownerPlayer;
    int lv_teamNumberofOwner;
    point lv_positionOfUnit;

    // Variable Initialization

    // Implementation
    lv_lanerUnit = lp_unit;
    lv_ownerPlayer = UnitGetOwner(lp_unit);
    lv_teamNumberofOwner = libGame_gf_TeamNumberOfPlayer(lv_ownerPlayer);
    lv_positionOfUnit = UnitGetPosition(lp_unit);
    libGame_gf_CalculateSpawnedMinionGoalPoints(lv_ownerPlayer, lv_positionOfUnit);
    libAIAI_gf_MinionAIStartMinionAI(lv_lanerUnit, libGame_gv_spawnedMinionLane, libGame_gv_spawnedMinionFirstWaypointIndex, false, true, 0);
}

void libGDHL_gf_HeroTinkerModifyDethLazor (int lp_player, bool lp_on) {
    int auto588448D2_ae;
    int auto588448D2_ai;
    int autoB1BBDC28_ae;
    int autoB1BBDC28_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    if ((lp_on == true)) {
        autoB1BBDC28_ae = 15;
        autoB1BBDC28_ai = 1;
        lv_i = 0;
        for ( ; ( (autoB1BBDC28_ai >= 0 && lv_i <= autoB1BBDC28_ae) || (autoB1BBDC28_ai <= 0 && lv_i >= autoB1BBDC28_ae) ) ; lv_i += autoB1BBDC28_ai ) {
            CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeCreatePersistent", "PeriodicPeriodArray[" + IntToString(lv_i) + "]", lp_player, ".125");
        }
        CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeModelPersistent1", "InitialDelay", lp_player, "1");
        CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeModelPersistent2", "InitialDelay", lp_player, "1");
        CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeBaseModelPersistent", "PeriodicPeriodArray[" + IntToString(1) + "]", lp_player, "1");
        CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeBaseModelPersistent", "PeriodicPeriodArray[" + IntToString(2) + "]", lp_player, "5");
    }
    else {
        auto588448D2_ae = 15;
        auto588448D2_ai = 1;
        lv_i = 0;
        for ( ; ( (auto588448D2_ai >= 0 && lv_i <= auto588448D2_ae) || (auto588448D2_ai <= 0 && lv_i >= auto588448D2_ae) ) ; lv_i += auto588448D2_ai ) {
            CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeCreatePersistent", "PeriodicPeriodArray[" + IntToString(lv_i) + "]", lp_player, ".25");
        }
        CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeModelPersistent1", "InitialDelay", lp_player, "2");
        CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeModelPersistent2", "InitialDelay", lp_player, "2");
        CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeBaseModelPersistent", "PeriodicPeriodArray[" + IntToString(1) + "]", lp_player, "2");
        CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeBaseModelPersistent", "PeriodicPeriodArray[" + IntToString(2) + "]", lp_player, "6");
    }
}

trigger auto_libGDHL_gf_HeroWitchDoctorGargantuanIdle_Trigger = null;
unit auto_libGDHL_gf_HeroWitchDoctorGargantuanIdle_lp_witchDoctor;
int auto_libGDHL_gf_HeroWitchDoctorGargantuanIdle_lp_player;

void libGDHL_gf_HeroWitchDoctorGargantuanIdle (unit lp_witchDoctor, int lp_player) {
    auto_libGDHL_gf_HeroWitchDoctorGargantuanIdle_lp_witchDoctor = lp_witchDoctor;
    auto_libGDHL_gf_HeroWitchDoctorGargantuanIdle_lp_player = lp_player;

    if (auto_libGDHL_gf_HeroWitchDoctorGargantuanIdle_Trigger == null) {
        auto_libGDHL_gf_HeroWitchDoctorGargantuanIdle_Trigger = TriggerCreate("auto_libGDHL_gf_HeroWitchDoctorGargantuanIdle_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_HeroWitchDoctorGargantuanIdle_Trigger, false, false);
}

bool auto_libGDHL_gf_HeroWitchDoctorGargantuanIdle_TriggerFunc (bool testConds, bool runActions) {
    unit lp_witchDoctor = auto_libGDHL_gf_HeroWitchDoctorGargantuanIdle_lp_witchDoctor;
    int lp_player = auto_libGDHL_gf_HeroWitchDoctorGargantuanIdle_lp_player;

    // Variable Declarations
    bool lv_gaveToMinionAI;

    // Variable Initialization

    // Implementation
    while ((UnitHasBehavior2(lp_witchDoctor, "WitchDoctorGargantuanActive") == true)) {
        UnitGroupLoopBegin(UnitGroup("WitchDoctorGargantuan", lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitIsAlive(lp_witchDoctor) == true)) {
                if ((lv_gaveToMinionAI == true)) {
                    libAIAI_gf_MinionAIUnhookUnitFromMinionAI(UnitGroupLoopCurrent());
                    lv_gaveToMinionAI = false;
                }
                else {
                }
                if ((libGame_gv_players[lp_player].lv_activeVehicle != null)) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(libGame_gv_players[lp_player].lv_activeVehicle), 2.0, UnitGetPosition(UnitGroupLoopCurrent()))), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("attack", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_witchDoctor), 2.0, UnitGetPosition(UnitGroupLoopCurrent()))), c_orderQueueReplace);
                }
            }
            else {
                if ((lv_gaveToMinionAI == false)) {
                    libGame_gf_CalculateSpawnedMinionGoalPoints(UnitGetOwner(UnitGroupLoopCurrent()), UnitGetPosition(UnitGroupLoopCurrent()));
                    libAIAI_gf_MinionAIStartMinionAI(UnitGroupLoopCurrent(), libGame_gv_spawnedMinionLane, libGame_gv_spawnedMinionFirstWaypointIndex, false, true, 0);
                    lv_gaveToMinionAI = true;
                }
                else {
                }
            }
        }
        UnitGroupLoopEnd();
        Wait(0.5, c_timeGame);
    }
    return true;
}

void libGDHL_gf_HeroUtherHammerofJusticeRelicRefundManaCD (unit lp_dyingUnit) {
    // Implementation
    UnitCreateEffectUnit(UnitBehaviorEffectUnit(lp_dyingUnit, "HammerofJusticeRelicController", c_effectUnitCaster, 0), "HammerofJusticeRelicCreateRefundHealer", UnitBehaviorEffectUnit(lp_dyingUnit, "HammerofJusticeRelicController", c_effectUnitCaster, 0));
    UnitAbilityReset(UnitBehaviorEffectUnit(lp_dyingUnit, "HammerofJusticeRelicController", c_effectUnitCaster, 0), AbilityCommand("UtherHammerOfJustice", 0), c_spendLocationAll);
}

bool libGDHL_gf_AbilityIsTalent (abilcmd lp_ability) {
    // Implementation
    if (((lp_ability == AbilityCommand("TalentBerserk", 0)) || (lp_ability == AbilityCommand("TalentBloodForBlood", 0)) || (lp_ability == AbilityCommand("TalentCleanse", 0)) || (lp_ability == AbilityCommand("TalentDash", 0)) || (lp_ability == AbilityCommand("TalentDashSupport", 0)) || (lp_ability == AbilityCommand("TalentDeafeningRoar", 0)) || (lp_ability == AbilityCommand("TalentEnrage", 0)) || (lp_ability == AbilityCommand("TalentFirstAid", 0)) || (lp_ability == AbilityCommand("TalentFirstAidSupport", 0)) || (lp_ability == AbilityCommand("TalentHealingWard", 0)) || (lp_ability == AbilityCommand("TalentOverdrive", 0)) || (lp_ability == AbilityCommand("TalentOverdriveResourceless", 0)) || (lp_ability == AbilityCommand("TalentRewind", 0)) || (lp_ability == AbilityCommand("TalentRewindSupport", 0)) || (lp_ability == AbilityCommand("TalentStoneskin", 0)) || (lp_ability == AbilityCommand("TalentStoneskinSupport", 0)) || (lp_ability == AbilityCommand("FlashoftheStorms", 0)) || (lp_ability == AbilityCommand("TalentBucketBribe", 0)) || (lp_ability == AbilityCommand("MULERepair", 0)) || (lp_ability == AbilityCommand("TalentBucketIceBlock", 0)) || (libNtve_gf_EventItemAbilityOrUnitAbility() == AbilityCommand("Envenom", 0)) || (lp_ability == AbilityCommand("TalentBucketPromote", 0)) || (lp_ability == AbilityCommand("TalentBucketShrinkRay", 0)) || (lp_ability == AbilityCommand("TalentBucketSprint", 0)) || (lp_ability == AbilityCommand("TalentBucketStormShield", 0)) || (lp_ability == AbilityCommand("TalentBucketShrinkRay", 0)))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_GDHL_EA3C3D99"));
        return true;
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_GDHL_C7CA188E"));
        return false;
    }
}

bool libGDHL_gf_AbilityorItem (abilcmd lp_ability) {
    // Implementation
    if (((libNtve_gf_EventItemAbilityOrUnitAbility() == AbilityCommand("TalentBerserk", 0)) || (libNtve_gf_EventItemAbilityOrUnitAbility() == AbilityCommand("TalentBloodForBlood", 0)) || (libNtve_gf_EventItemAbilityOrUnitAbility() == AbilityCommand("TalentCleanse", 0)) || (libNtve_gf_EventItemAbilityOrUnitAbility() == AbilityCommand("TalentDash", 0)) || (libNtve_gf_EventItemAbilityOrUnitAbility() == AbilityCommand("TalentDashSupport", 0)) || (lp_ability == AbilityCommand("TalentDeafeningRoar", 0)) || (lp_ability == AbilityCommand("TalentEnrage", 0)) || (lp_ability == AbilityCommand("TalentFirstAid", 0)) || (lp_ability == AbilityCommand("TalentFirstAidSupport", 0)) || (lp_ability == AbilityCommand("TalentHealingWard", 0)) || (lp_ability == AbilityCommand("TalentOverdrive", 0)) || (lp_ability == AbilityCommand("TalentOverdriveResourceless", 0)) || (lp_ability == AbilityCommand("TalentRewind", 0)) || (lp_ability == AbilityCommand("TalentRewindSupport", 0)) || (lp_ability == AbilityCommand("TalentStoneskin", 0)) || (lp_ability == AbilityCommand("TalentStoneskinSupport", 0)) || (lp_ability == AbilityCommand("FlashoftheStorms", 0)) || (lp_ability == AbilityCommand("TalentBucketBribe", 0)) || (lp_ability == AbilityCommand("MULERepair", 0)) || (lp_ability == AbilityCommand("TalentBucketIceBlock", 0)) || (libNtve_gf_EventItemAbilityOrUnitAbility() == AbilityCommand("Envenom", 0)) || (lp_ability == AbilityCommand("Envenom", 0)) || (lp_ability == AbilityCommand("TalentBucketPromote", 0)) || (lp_ability == AbilityCommand("TalentBucketShrinkRay", 0)) || (lp_ability == AbilityCommand("TalentBucketSprint", 0)) || (lp_ability == AbilityCommand("TalentBucketStormShield", 0)) || (lp_ability == AbilityCommand("TalentBucketShrinkRay", 0)))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_GDHL_59348182"));
        return true;
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_GDHL_B8E83988"));
        return false;
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include Game Data Helper
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_IncludeGameDataHelper_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_IncludeGameDataHelper_Init () {
    libGDHL_gt_IncludeGameDataHelper = TriggerCreate("libGDHL_gt_IncludeGameDataHelper_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Neutral Regen Globe
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_NeutralRegenGlobe_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_globe;
    int lv_player;
    int lv_team;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_globe = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    lv_team = libGame_gf_TeamNumberOfPlayer(lv_player);
    if ((lv_team == 0)) {
        return true;
    }
    else {
    }
    UnitSetOwner(lv_globe, libGame_gv_teams[lv_team].lv_nPCPlayer, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_NeutralRegenGlobe_Init () {
    libGDHL_gt_NeutralRegenGlobe = TriggerCreate("libGDHL_gt_NeutralRegenGlobe_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_NeutralRegenGlobe, c_playerAny, "RegenGlobeNeutralTriggerDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Siege Artifact Application
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_SiegeArtifactApplication_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() != null))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitCreatedUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitCreatedUnit()) >= 1))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeSummoned) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeSummoned) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_ArtifactsUpdateSiegeDamageArtifactForUnit(EventUnitCreatedUnit());
    libGDHL_gf_SiegeUpdateAbilityPowerOnSummonedUnits(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_SiegeArtifactApplication_Init () {
    libGDHL_gt_SiegeArtifactApplication = TriggerCreate("libGDHL_gt_SiegeArtifactApplication_Func");
    TriggerAddEventUnitCreated(libGDHL_gt_SiegeArtifactApplication, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Generic - Camera Shake Light Target
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericCameraShakeLightTarget_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(EventPlayerEffectUsedPoint(c_effectLocationCasterPoint), CameraGetTarget(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget))) <= 10.0)) {
        CameraShake(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), "Light", "Shake", 0.1, 0.2, 0.3);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericCameraShakeLightTarget_Init () {
    libGDHL_gt_HeroGenericCameraShakeLightTarget = TriggerCreate("libGDHL_gt_HeroGenericCameraShakeLightTarget_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroGenericCameraShakeLightTarget, c_playerAny, "CameraShakeLightTauntingTotemSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Generic - Camera Shake Medium Target
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericCameraShakeMediumTarget_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), CameraGetTarget(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget))) <= 10.0)) {
        CameraShake(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), "Medium", "Shake", 0.1, 0.2, 0.3);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericCameraShakeMediumTarget_Init () {
    libGDHL_gt_HeroGenericCameraShakeMediumTarget = TriggerCreate("libGDHL_gt_HeroGenericCameraShakeMediumTarget_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroGenericCameraShakeMediumTarget, c_playerAny, "CameraShakeMediumTauntingTotemSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Generic - Camera Shake Heavy Target
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericCameraShakeHeavyTarget_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), CameraGetTarget(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget))) <= 10.0)) {
        CameraShake(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), "Heavy", "Shake", 0.1, 0.2, 0.3);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericCameraShakeHeavyTarget_Init () {
    libGDHL_gt_HeroGenericCameraShakeHeavyTarget = TriggerCreate("libGDHL_gt_HeroGenericCameraShakeHeavyTarget_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroGenericCameraShakeHeavyTarget, c_playerAny, "CameraShakeHeavyTauntingTotemSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Generic - Camera Shake Auto Caster
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericCameraShakeAutoCaster_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), CameraGetTarget(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster))) <= 10.0)) {
        CameraShake(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "Medium", "Shake", 0.0, 0.125, 0.0625);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericCameraShakeAutoCaster_Init () {
    libGDHL_gt_HeroGenericCameraShakeAutoCaster = TriggerCreate("libGDHL_gt_HeroGenericCameraShakeAutoCaster_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroGenericCameraShakeAutoCaster, c_playerAny, "CameraShakeAutoCasterDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Generic - Camera Shake Light Caster
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericCameraShakeLightCaster_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), CameraGetTarget(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster))) <= 10.0)) {
        CameraShake(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "Light", "Shake", 0.1, 0.2, 0.3);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericCameraShakeLightCaster_Init () {
    libGDHL_gt_HeroGenericCameraShakeLightCaster = TriggerCreate("libGDHL_gt_HeroGenericCameraShakeLightCaster_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroGenericCameraShakeLightCaster, c_playerAny, "CameraShakeLightCasterDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Generic - Camera Shake Medium Caster
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericCameraShakeMediumCaster_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), CameraGetTarget(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster))) <= 10.0)) {
        CameraShake(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "Medium", "Shake", 0.1, 0.2, 0.3);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericCameraShakeMediumCaster_Init () {
    libGDHL_gt_HeroGenericCameraShakeMediumCaster = TriggerCreate("libGDHL_gt_HeroGenericCameraShakeMediumCaster_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroGenericCameraShakeMediumCaster, c_playerAny, "CameraShakeMediumCasterDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Generic - Camera Shake Heavy Caster
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericCameraShakeHeavyCaster_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), CameraGetTarget(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster))) <= 10.0)) {
        CameraShake(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "Heavy", "Shake", 0.1, 0.2, 0.3);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericCameraShakeHeavyCaster_Init () {
    libGDHL_gt_HeroGenericCameraShakeHeavyCaster = TriggerCreate("libGDHL_gt_HeroGenericCameraShakeHeavyCaster_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroGenericCameraShakeHeavyCaster, c_playerAny, "CameraShakeHeavyCasterDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combat Style - Faerie Dragon - Dream Dust Update
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_CombatStyleFaerieDragonDreamDustUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        CatalogFieldValueSet(c_gameCatalogBehavior, "FaerieDustBuff", "Duration", UnitGetOwner(EventUnit()), FixedToString(libGDHL_gv_bALFaerieDragonDreamDustDuration, c_fixedPrecisionAny));
    }
    else {
    }
    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeDeactivate)) {
        CatalogFieldValueSet(c_gameCatalogBehavior, "FaerieDustBuff", "Duration", UnitGetOwner(EventUnit()), CatalogFieldValueGet(c_gameCatalogBehavior, "FaerieDustBuff", "Duration", 0));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_CombatStyleFaerieDragonDreamDustUpdate_Init () {
    libGDHL_gt_CombatStyleFaerieDragonDreamDustUpdate = TriggerCreate("libGDHL_gt_CombatStyleFaerieDragonDreamDustUpdate_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_CombatStyleFaerieDragonDreamDustUpdate, null, "FaerieDragonDreamDustCombatStyleCarryBehavior", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combat Style - Tinker - Clockwerk Steam Fists Duration
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_CombatStyleTinkerClockwerkSteamFistsDuration_Func (bool testConds, bool runActions) {
    unitgroup auto78EFE64A_g;
    int auto78EFE64A_u;

    // Variable Declarations
    fixed lv_cooldown;
    fixed lv_duration;
    unit lv_tinker;
    unitgroup lv_searchedUnits;
    unit lv_u;
    unitgroup lv_turrets;

    // Variable Initialization
    lv_tinker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_searchedUnits = UnitGroupEmpty();
    lv_turrets = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_tinker) == "HeroTinker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_turrets = UnitGroup("TinkerRockItTurret", UnitGetOwner(lv_tinker), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto78EFE64A_g = lv_turrets;
    auto78EFE64A_u = 1;
    for ( ; auto78EFE64A_u <= UnitGroupCount(auto78EFE64A_g, c_unitCountAll) ; auto78EFE64A_u += BoolToInt(lv_u == UnitGroupUnit(auto78EFE64A_g, auto78EFE64A_u)) ) {
        lv_u = UnitGroupUnit(auto78EFE64A_g, auto78EFE64A_u);
        lv_duration = UnitBehaviorDuration(lv_u, "RockItTurretTimedLife");
        UnitBehaviorSetDurationRemaining(lv_u, "RockItTurretTimedLife", (lv_duration + 1.0));
        UnitCreateEffectUnit(lv_tinker, "ClockwerkSteamFistsDummySet", lv_u);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_CombatStyleTinkerClockwerkSteamFistsDuration_Init () {
    libGDHL_gt_CombatStyleTinkerClockwerkSteamFistsDuration = TriggerCreate("libGDHL_gt_CombatStyleTinkerClockwerkSteamFistsDuration_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_CombatStyleTinkerClockwerkSteamFistsDuration, c_playerAny, "ClockwerkSteamfistsDummyEffect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combat Style - Tinker - Mecha-Lord Mastery Duration
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_CombatStyleTinkerMechaLordMasteryDuration_Func (bool testConds, bool runActions) {
    unitgroup autoC6BEAE5A_g;
    int autoC6BEAE5A_u;

    // Variable Declarations
    fixed lv_cooldown;
    fixed lv_duration;
    unit lv_tinker;
    unitgroup lv_searchedUnits;
    unit lv_u;
    unitgroup lv_turrets;

    // Variable Initialization
    lv_tinker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_searchedUnits = UnitGroupEmpty();
    lv_turrets = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(lv_tinker, "TinkerMechaLordMasteryCarryBehavior") == 1))) {
            return false;
        }

        if (!((UnitGetType(lv_tinker) == "HeroTinker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC6BEAE5A_g = lv_turrets;
    autoC6BEAE5A_u = 1;
    for ( ; autoC6BEAE5A_u <= UnitGroupCount(autoC6BEAE5A_g, c_unitCountAll) ; autoC6BEAE5A_u += BoolToInt(lv_u == UnitGroupUnit(autoC6BEAE5A_g, autoC6BEAE5A_u)) ) {
        lv_u = UnitGroupUnit(autoC6BEAE5A_g, autoC6BEAE5A_u);
        lv_duration = UnitBehaviorDuration(lv_u, "RockItTurretTimedLife");
        UnitBehaviorSetDurationRemaining(lv_u, "RockItTurretTimedLife", (lv_duration + 1.0));
        UnitCreateEffectUnit(lv_tinker, "ClockwerkSteamFistsDummySet", lv_u);
    }
    if ((UnitBehaviorCount(lv_tinker, "TinkerRoboGoblin") == 1)) {
        lv_duration = UnitBehaviorDuration(lv_tinker, "TinkerRoboGoblin");
        UnitBehaviorSetDurationRemaining(lv_tinker, "TinkerRoboGoblin", (lv_duration + 1.0));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_CombatStyleTinkerMechaLordMasteryDuration_Init () {
    libGDHL_gt_CombatStyleTinkerMechaLordMasteryDuration = TriggerCreate("libGDHL_gt_CombatStyleTinkerMechaLordMasteryDuration_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_CombatStyleTinkerMechaLordMasteryDuration, c_playerAny, "MechaLordMasteryDummyEffect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combat Style - Zeratul - Assassin's Blade
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_CombatStyleZeratulAssassinsBlade_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        CatalogFieldValueSet(c_gameCatalogBehavior, "ZeratulPermanentCloak", "Modification.UnifiedMoveSpeedFactor", EventPlayer(), ".1");
    }
    else {
    }
    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeDeactivate)) {
        CatalogFieldValueSet(c_gameCatalogBehavior, "ZeratulPermanentCloak", "Modification.UnifiedMoveSpeedFactor", EventPlayer(), "0");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_CombatStyleZeratulAssassinsBlade_Init () {
    libGDHL_gt_CombatStyleZeratulAssassinsBlade = TriggerCreate("libGDHL_gt_CombatStyleZeratulAssassinsBlade_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_CombatStyleZeratulAssassinsBlade, null, "ZeratulPassiveBuffWeapon", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Port Back To Base
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroPortBackToBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_hero;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    if ((UnitIsSelected(lv_hero, lv_player) == true)) {
        libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_player, UnitGetPosition(lv_hero), 0.0, -1, 0.0, false);
    }
    else {
    }
    UIAlert("HearthstoneUsed", lv_player, StringToText(""), null);
    libGame_gf_SendEventHeroPortedBackToTown(lv_player);
    if (((UnitHasBehavior2(lv_hero, "SiegeMode") == true) || (UnitHasBehavior2(lv_hero, "PassiveBuffWeaponSiegeMode") == true))) {
        UnitCreateEffectUnit(lv_hero, "SiegeModeRemoveSet", lv_hero);
    }
    else {
    }
    if ((UnitBehaviorCount(lv_hero, "TinkerRoboGoblin") == 0) && (UnitBehaviorCount(lv_hero, "IllidanMetamorphosis") == 0) && (UnitBehaviorCount(lv_hero, "TychusOdin") == 0) && (UnitBehaviorCount(lv_hero, "Archon") == 0) && (UnitBehaviorCount(lv_hero, "Maelstrom") == 0) && (UnitBehaviorCount(lv_hero, "TranquilityBehavior") == 0) && (libCore_gv_sYSGameMode != libCore_ge_GameModes_Tutorial1)) {
        libGame_gf_ApplyMountBehaviorToHero(lv_hero);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroPortBackToBase_Init () {
    libGDHL_gt_HeroPortBackToBase = TriggerCreate("libGDHL_gt_HeroPortBackToBase_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroPortBackToBase, c_playerAny, "PortBackToBaseTeleport");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Port Back To Base Start
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroPortBackToBaseStart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "HeroGenericHearthing", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroPortBackToBaseStart_Init () {
    libGDHL_gt_HeroPortBackToBaseStart = TriggerCreate("libGDHL_gt_HeroPortBackToBaseStart_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroPortBackToBaseStart, null, AbilityCommand("PortBackToBase", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Port Back To Base End
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroPortBackToBaseEnd_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "HeroGenericHearthing", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroPortBackToBaseEnd_Init () {
    libGDHL_gt_HeroPortBackToBaseEnd = TriggerCreate("libGDHL_gt_HeroPortBackToBaseEnd_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroPortBackToBaseEnd, null, AbilityCommand("PortBackToBase", 0), c_abilEffectStageBail, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroPortBackToBaseEnd, null, AbilityCommand("PortBackToBase", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroPortBackToBaseEnd, null, AbilityCommand("PortBackToBase", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroPortBackToBaseEnd, null, AbilityCommand("PortBackToBase", 0), c_unitAbilStagePreempt, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroPortBackToBaseEnd, null, AbilityCommand("PortBackToBase", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Port Back To Base Fizzle
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroPortBackToBaseFizzle_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayOnUnitForPlayer(SoundLink("Gen_Hearthstone_Teleport_Fizzle", -1), EventPlayer(), PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroPortBackToBaseFizzle_Init () {
    libGDHL_gt_HeroPortBackToBaseFizzle = TriggerCreate("libGDHL_gt_HeroPortBackToBaseFizzle_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroPortBackToBaseFizzle, null, AbilityCommand("PortBackToBase", 0), c_abilEffectStageBail, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroPortBackToBaseFizzle, null, AbilityCommand("PortBackToBase", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Generic - Apply Flashbang Effect
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericApplyFlashbangEffect_Func (bool testConds, bool runActions) {
    playergroup autoB5BA7C92_g;
    int autoB5BA7C92_p;

    // Variable Declarations
    unit lv_targetHero;
    int lv_targetPlayer;
    playergroup lv_allyPlayerGroup;
    int lv_p;

    // Variable Initialization
    lv_targetHero = EventUnit();
    lv_targetPlayer = UnitGetOwner(EventUnit());
    lv_allyPlayerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) < 11))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_flashBangImage, PlayerGroupSingle(lv_targetPlayer), 0.0, 0.0);
    DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_flashBangImage, PlayerGroupSingle(lv_targetPlayer), 2.0, 100.0);
    SoundPlayForPlayer(SoundLink("Talent_FlashBang_Ring", -1), lv_targetPlayer, PlayerGroupSingle(lv_targetPlayer), 100.0, 0.0);
    libGame_gf_ShareUnshareVisionOfAlliesForPlayer(false, lv_targetPlayer);
    lv_allyPlayerGroup = libGame_gf_AlliedPlayerGroupOfPlayer(lv_targetPlayer);
    autoB5BA7C92_g = lv_allyPlayerGroup; 
    autoB5BA7C92_p = 1;
    for ( ; autoB5BA7C92_p <= PlayerGroupCount(autoB5BA7C92_g) ; autoB5BA7C92_p += BoolToInt(lv_p == PlayerGroupPlayer(autoB5BA7C92_g, autoB5BA7C92_p)) ) {
        lv_p = PlayerGroupPlayer(autoB5BA7C92_g, autoB5BA7C92_p);
        PlayerSetAlliance(lv_p, c_allianceIdSeekHelp, lv_targetPlayer, false);
        PlayerSetAlliance(lv_p, c_allianceIdGiveHelp, lv_targetPlayer, false);
    }
    VisRevealerEnable(libGame_gv_baseRevealers[lv_targetPlayer], false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericApplyFlashbangEffect_Init () {
    libGDHL_gt_HeroGenericApplyFlashbangEffect = TriggerCreate("libGDHL_gt_HeroGenericApplyFlashbangEffect_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroGenericApplyFlashbangEffect, null, "ItemBlindingLightHeroBlind", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroGenericApplyFlashbangEffect, null, "ArchangelsWrathFlashBang", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroGenericApplyFlashbangEffect, null, "RighteousnessExpirationFlashBang", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Generic - Remove Flash Bang Effect
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericRemoveFlashBangEffect_Func (bool testConds, bool runActions) {
    playergroup autoE8B60B84_g;
    int autoE8B60B84_p;

    // Variable Declarations
    unit lv_targetHero;
    int lv_targetPlayer;
    playergroup lv_allyPlayerGroup;
    int lv_p;

    // Variable Initialization
    lv_targetHero = EventUnit();
    lv_targetPlayer = UnitGetOwner(EventUnit());
    lv_allyPlayerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) < 11))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_ShareUnshareVisionOfAlliesForPlayer(true, lv_targetPlayer);
    lv_allyPlayerGroup = libGame_gf_AlliedPlayerGroupOfPlayer(lv_targetPlayer);
    autoE8B60B84_g = lv_allyPlayerGroup; 
    autoE8B60B84_p = 1;
    for ( ; autoE8B60B84_p <= PlayerGroupCount(autoE8B60B84_g) ; autoE8B60B84_p += BoolToInt(lv_p == PlayerGroupPlayer(autoE8B60B84_g, autoE8B60B84_p)) ) {
        lv_p = PlayerGroupPlayer(autoE8B60B84_g, autoE8B60B84_p);
        PlayerSetAlliance(lv_p, c_allianceIdSeekHelp, lv_targetPlayer, true);
        PlayerSetAlliance(lv_p, c_allianceIdGiveHelp, lv_targetPlayer, true);
    }
    VisRevealerEnable(libGame_gv_baseRevealers[lv_targetPlayer], true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericRemoveFlashBangEffect_Init () {
    libGDHL_gt_HeroGenericRemoveFlashBangEffect = TriggerCreate("libGDHL_gt_HeroGenericRemoveFlashBangEffect_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroGenericRemoveFlashBangEffect, null, "ItemBlindingLightHeroBlind", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroGenericRemoveFlashBangEffect, null, "ArchangelsWrathFlashBang", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroGenericRemoveFlashBangEffect, null, "ArchangelsWrathFlashBang", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroGenericRemoveFlashBangEffect, null, "RighteousnessExpirationFlashBang", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroGenericRemoveFlashBangEffect, null, "RighteousnessExpirationFlashBang", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Symbiote Screen Effect
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurSymbioteScreenEffect_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "AssumingDirectControlBehavior") == true)) {
        DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_abathurSymbioteOverlay, PlayerGroupSingle(EventPlayer()), 0.5, 0.0);
    }
    else {
        DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_abathurSymbioteOverlay, PlayerGroupSingle(EventPlayer()), 0.5, 100.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurSymbioteScreenEffect_Init () {
    libGDHL_gt_HeroAbathurSymbioteScreenEffect = TriggerCreate("libGDHL_gt_HeroAbathurSymbioteScreenEffect_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAbathurSymbioteScreenEffect, null, "AssumingDirectControlBehavior", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Deep Tunnel Cooldown Perversion (Move Cancel)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurDeepTunnelCooldownPerversionMoveCancel_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitModifyCooldown(EventPlayerEffectUsedUnit(c_effectUnitCaster), "Abil/AbathurDeepTunnel", 0.0, c_cooldownOperationSet);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurDeepTunnelCooldownPerversionMoveCancel_Init () {
    libGDHL_gt_HeroAbathurDeepTunnelCooldownPerversionMoveCancel = TriggerCreate("libGDHL_gt_HeroAbathurDeepTunnelCooldownPerversionMoveCancel_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurDeepTunnelCooldownPerversionMoveCancel, c_playerAny, "DeepTunnelPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Deep Tunnel Cooldown Perversion (Completion Cooldown Add)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurDeepTunnelCooldownPerversionCompletionCooldownAdd_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitModifyCooldown(EventPlayerEffectUsedUnit(c_effectUnitCaster), "Abil/AbathurDeepTunnel", 30.0, c_cooldownOperationAdd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurDeepTunnelCooldownPerversionCompletionCooldownAdd_Init () {
    libGDHL_gt_HeroAbathurDeepTunnelCooldownPerversionCompletionCooldownAdd = TriggerCreate("libGDHL_gt_HeroAbathurDeepTunnelCooldownPerversionCompletionCooldownAdd_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurDeepTunnelCooldownPerversionCompletionCooldownAdd, c_playerAny, "DeepTunnelSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Deep Tunnel Cooldown Perversion (Symbiote Cancel)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurDeepTunnelCooldownPerversionSymbioteCancel_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitModifyCooldown(EventUnit(), "Abil/AbathurDeepTunnel", 0.5, c_cooldownOperationAdd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurDeepTunnelCooldownPerversionSymbioteCancel_Init () {
    libGDHL_gt_HeroAbathurDeepTunnelCooldownPerversionSymbioteCancel = TriggerCreate("libGDHL_gt_HeroAbathurDeepTunnelCooldownPerversionSymbioteCancel_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAbathurDeepTunnelCooldownPerversionSymbioteCancel, null, "AssumingDirectControlBehavior", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Locust Spawned
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurLocustSpawned_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gf_HeroAbathurReturnControlledUnittoLaneAI(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurLocustSpawned_Init () {
    libGDHL_gt_HeroAbathurLocustSpawned = TriggerCreate("libGDHL_gt_HeroAbathurLocustSpawned_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurLocustSpawned, c_playerAny, "LocustSpawnLanerDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Symbiote
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurSymbiote_Func (bool testConds, bool runActions) {
    int auto28C78E78_ae;
    int auto28C78E78_ai;

    // Variable Declarations
    int lv_abathurPlayer;
    unit lv_symbiote;
    unit lv_symbioteHost;
    string lv_cooldownLink;
    fixed lv_spikeBurstRange;
    fixed lv_symbioteFacing;
    bool lv_symbioteFacingTriggerEnabled;
    int lv_i;

    // Variable Initialization
    lv_cooldownLink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_abathurPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    UnitSetFacing(libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 315.0, 0.0);
    lv_symbioteHost = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, "AbathurSymbiote", "Cost[" + IntToString(0) + "].Cooldown.Link", lv_abathurPlayer);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "AbathurSymbiote", 0, lv_abathurPlayer, UnitGetPosition(lv_symbioteHost));
    lv_symbiote = UnitLastCreated();
    UnitCreateEffectUnit(lv_symbioteHost, "SymbioteActorLink", lv_symbiote);
    UnitCreateEffectUnit(lv_symbiote, "AbathurSpikeBurstAddCoolup", lv_symbiote);
    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitTarget), "SymbioteVisibilityController", lv_symbiote, 1);
    libGDHL_gf_HeroAbathurSignalSymbioteVisibility(EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_symbiote);
    libGDHL_gf_SendEventAbathurSymbiote(lv_abathurPlayer, lv_symbiote, lv_symbioteHost);
    if ((UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "PressurizedGlandsCarryBehavior") == 1)) {
        lv_spikeBurstRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "SpikeBurstPressurizedGlandsDamageSearch", "AreaArray[" + IntToString(0) + "].Radius", lv_abathurPlayer)) + UnitGetPropertyFixed(lv_symbioteHost, c_unitPropRadius, c_unitPropCurrent));
        CatalogFieldValueSet(c_gameCatalogActor, "SymbioteSpikeBurstRangeSplat", "Scale", lv_abathurPlayer, FixedToString((lv_spikeBurstRange * libGDHL_gv_heroAbathurSpikeBurstSplatScalar), 2));
    }
    else {
        lv_spikeBurstRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "SpikeBurstDamageSearch", "AreaArray[" + IntToString(0) + "].Radius", lv_abathurPlayer)) + UnitGetPropertyFixed(lv_symbioteHost, c_unitPropRadius, c_unitPropCurrent));
        CatalogFieldValueSet(c_gameCatalogActor, "SymbioteSpikeBurstRangeSplat", "Scale", lv_abathurPlayer, FixedToString((lv_spikeBurstRange * libGDHL_gv_heroAbathurSpikeBurstSplatScalar), 2));
    }
    SoundPlayForPlayer(SoundLink("AbathurHero_Symbiote", -1), lv_abathurPlayer, PlayerGroupSingle(UnitGetOwner(lv_symbioteHost)), 100.0, 0.0);
    UnitSelect(libGame_gv_players[lv_abathurPlayer].lv_heroUnit, lv_abathurPlayer, false);
    UnitSelect(lv_symbiote, lv_abathurPlayer, true);
    UnitSelect(libGame_gv_players[lv_abathurPlayer].lv_heroUnit, lv_abathurPlayer, true);
    libGame_gv_players[lv_abathurPlayer].lv_cameraForcedLock = true;
    libGame_gv_players[lv_abathurPlayer].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lv_symbiote);
    libGame_gf_CameraUpdateCameraForPlayer(lv_abathurPlayer);
    libGDHL_gv_heroAbathurSymbioteEventAdded[EventPlayer()] = true;
    libGDHL_gv_heroAbathurSymbioteLookAt[lv_abathurPlayer] = UnitGetPosition(lv_symbioteHost);
    libGDHL_gv_heroAbathurSymbioteActive[EventPlayer()] = true;
    libNtve_gf_MakeUnitFacePoint(lv_symbiote, PointWithOffsetPolar(UnitGetPosition(lv_symbioteHost), 1.0, -90.0), 2.0);
    while ((UnitIsAlive(lv_symbioteHost) == true) && (UnitBehaviorCount(lv_symbioteHost, "AbathurSymbioteHostBehavior") >= 1)) {
        if ((DistanceBetweenPoints(UnitGetPosition(lv_symbiote), UnitGetPosition(lv_symbioteHost)) >= 4.0)) {
            UnitSetPosition(lv_symbiote, UnitGetPosition(lv_symbioteHost), false);
        }
        else {
            UnitSetPosition(lv_symbiote, UnitGetPosition(lv_symbioteHost), true);
            if (((UnitHasBehavior2(lv_symbiote, "StabFacingControllerBehavior") == false))) {
            }
            else {
            }
        }
        if ((UnitBehaviorCount(lv_symbioteHost, "SymbioteVisibilityController") == 0)) {
            libNtve_gf_SendActorMessageToUnit(lv_symbiote, "Signal SymbioteHide");
        }
        else {
            libNtve_gf_SendActorMessageToUnit(lv_symbiote, "Signal SymbioteShow");
        }
        Wait(0.0625, c_timeGame);
    }
    UnitModifyCooldown(EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_cooldownLink, 4.0, c_cooldownOperationSet);
    libGame_gv_players[lv_abathurPlayer].lv_cameraForcedLock = false;
    libGame_gv_players[lv_abathurPlayer].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[lv_abathurPlayer].lv_heroUnitGroup;
    libGame_gf_CameraUpdateCameraForPlayer(lv_abathurPlayer);
    UnitKill(lv_symbiote);
    auto28C78E78_ae = libCore_gv_bALMaxPlayers;
    auto28C78E78_ai = 1;
    lv_i = 1;
    for ( ; ( (auto28C78E78_ai >= 0 && lv_i <= auto28C78E78_ae) || (auto28C78E78_ai <= 0 && lv_i >= auto28C78E78_ae) ) ; lv_i += auto28C78E78_ai ) {
        if ((libGDHL_gv_heroAbathurSymbioteActive[lv_i] == true)) {
            lv_symbioteFacingTriggerEnabled = true;
            break;
        }
        else {
        }
    }
    libGDHL_gv_heroAbathurSymbioteActive[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurSymbiote_Init () {
    libGDHL_gt_HeroAbathurSymbiote = TriggerCreate("libGDHL_gt_HeroAbathurSymbiote_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurSymbiote, c_playerAny, "SymbioteApplyHostBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Carapace Regenerative Microbes
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurCarapaceRegenerativeMicrobes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_abathur;
    int lv_abathurPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_abathurPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_abathur = libGame_gv_players[lv_abathurPlayer].lv_heroUnit;
    if ((PlayerHasTalent(lv_abathurPlayer, "AbathurMasteryRegenerativeMicrobes") == true)) {
        UnitCreateEffectUnit(lv_abathur, "RegenerativeMicrobesApplyBehavior", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurCarapaceRegenerativeMicrobes_Init () {
    libGDHL_gt_HeroAbathurCarapaceRegenerativeMicrobes = TriggerCreate("libGDHL_gt_HeroAbathurCarapaceRegenerativeMicrobes_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurCarapaceRegenerativeMicrobes, c_playerAny, "CarapaceEvolutionApplyShield");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Stab Facer
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurStabFacer_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitFacePoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 0.0625);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurStabFacer_Init () {
    libGDHL_gt_HeroAbathurStabFacer = TriggerCreate("libGDHL_gt_HeroAbathurStabFacer_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurStabFacer, c_playerAny, "StabCreateSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Ultimate Evolution - Start Control
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurUltimateEvolutionStartControl_Func (bool testConds, bool runActions) {
    int auto28F30903_ae;
    int auto28F30903_ai;

    // Variable Declarations
    int lv_heroIndex;
    string lv_abilLink;
    string lv_cooldownLink;
    int lv_abathurPlayer;
    string lv_typeofCopiedUnit;
    unit lv_abathur;
    unit lv_ultimateEvolutionUnit;
    fixed lv_multiplier;
    fixed lv_lifeofTarget;
    int lv_itArtifactIndex;
    int lv_itHeroicAbil;

    // Variable Initialization
    lv_cooldownLink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == false)) {
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AssumingDirectControlBehavior", 1);
        return true;
    }
    else {
    }
    lv_typeofCopiedUnit = UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    lv_abathur = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_abathurPlayer = UnitGetOwner(lv_abathur);
    lv_multiplier = ((UnitLevel(libGame_gv_players[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_heroUnit) * 150.0) + 0.0);
    lv_lifeofTarget = UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifeMax, c_unitPropNormal);
    lv_heroIndex = libCore_gf_GetHeroIndexForUnitType(lv_typeofCopiedUnit);
    PlayerSetSkin(lv_abathurPlayer, libCore_gv_dataSkinsSkinData[libGame_gv_players[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))].lv_selectedSkin].lv_skinID);
    if ((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) <= libCore_gv_bALMaxPlayers) && (libGame_gv_players[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))].lv_activeVehicle != null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_typeofCopiedUnit, 0, lv_abathurPlayer, UnitTypePlacementFromPoint(lv_typeofCopiedUnit, lv_abathurPlayer, UnitGetPosition(libGame_gv_players[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))].lv_activeVehicle), 35.0));
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_typeofCopiedUnit, 0, lv_abathurPlayer, UnitTypePlacementFromPoint(lv_typeofCopiedUnit, lv_abathurPlayer, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 35.0));
    }
    lv_ultimateEvolutionUnit = UnitLastCreated();
    UnitSetPropertyFixed(lv_ultimateEvolutionUnit, c_unitPropLife, UnitGetPropertyFixed(lv_ultimateEvolutionUnit, c_unitPropLifeMax, c_unitPropCurrent));
    UnitBehaviorAdd(lv_ultimateEvolutionUnit, "UltimateEvolutionBuild", libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 1);
    UnitBehaviorAdd(lv_ultimateEvolutionUnit, "UltimateEvolutionBuff", libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 1);
    UnitBehaviorAdd(lv_ultimateEvolutionUnit, "SuppressGenericDeath", libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 1);
    UnitBehaviorAdd(lv_ultimateEvolutionUnit, "SuppressGenericDeathRagdoll", libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 1);
    UnitBehaviorAdd(lv_ultimateEvolutionUnit, "AbathurUltimateEvolutionControlBehavior", libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 1);
    UnitBehaviorAdd(lv_ultimateEvolutionUnit, "EarnsXP", libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 1);
    UnitBehaviorAdd(lv_ultimateEvolutionUnit, "Level", lv_ultimateEvolutionUnit, UnitBehaviorCount(lv_abathur, "Level"));
    UnitXPAddXP(lv_ultimateEvolutionUnit, null, libCore_gf_GetTotalXPForLevel(UnitBehaviorCount(lv_abathur, "Level")));
    CatalogFieldValueSet(c_gameCatalogAbil, "Mount", "CastIntroTime[" + IntToString(0) + "]", UnitGetOwner(lv_abathur), CatalogFieldValueGet(c_gameCatalogAbil, "Mount", "CastIntroTime[" + IntToString(0) + "]", 0));
    if ((libMapM_gf_MapMechanicExistsOnMap(libMapM_ge_MapMechanicType_Cannonballs) == true)) {
        UnitBehaviorAdd(lv_ultimateEvolutionUnit, "MapMechanicStack", lv_ultimateEvolutionUnit, UnitBehaviorCount(lv_abathur, "MapMechanicStack"));
    }
    else {
    }
    libGame_gv_players[lv_abathurPlayer].lv_activeVehicle = lv_ultimateEvolutionUnit;
    UnitSetPropertyFixed(libGame_gv_players[lv_abathurPlayer].lv_activeVehicle, c_unitPropLevel, UnitBehaviorCount(lv_abathur, "Level"));
    libUIUI_gf_UIHeroConsoleSetUpForPlayer(lv_ultimateEvolutionUnit, lv_abathurPlayer);
    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(lv_ultimateEvolutionUnit, lv_abathurPlayer);
    UnitStatusBarOverride(lv_ultimateEvolutionUnit, c_unitStatusGroupAll);
    libGame_gf_ApplyLevelUpHeroStatsForHero(lv_ultimateEvolutionUnit);
    UnitClearSelection(lv_abathurPlayer);
    UnitSelect(lv_ultimateEvolutionUnit, lv_abathurPlayer, true);
    if ((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitTarget), "Ultimate1Unlocked") == true)) {
        UnitBehaviorAdd(lv_ultimateEvolutionUnit, "Ultimate1Unlocked", lv_ultimateEvolutionUnit, 1);
    }
    else {
        if ((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitTarget), "Ultimate2Unlocked") == true)) {
            UnitBehaviorAdd(lv_ultimateEvolutionUnit, "Ultimate2Unlocked", lv_ultimateEvolutionUnit, 1);
        }
        else {
        }
    }
    auto28F30903_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_numberOfAbilities;
    auto28F30903_ai = 1;
    lv_itHeroicAbil = 1;
    for ( ; ( (auto28F30903_ai >= 0 && lv_itHeroicAbil <= auto28F30903_ae) || (auto28F30903_ai <= 0 && lv_itHeroicAbil >= auto28F30903_ae) ) ; lv_itHeroicAbil += auto28F30903_ai ) {
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilities[lv_itHeroicAbil].lv_isHeroic == true)) {
            lv_abilLink = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilities[lv_itHeroicAbil].lv_ability;
            lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.Link", lv_abathurPlayer);
            UnitModifyCooldown(lv_ultimateEvolutionUnit, lv_cooldownLink, 15.0, c_cooldownOperationDefault);
        }
        else {
        }
    }
    libGame_gv_players[lv_abathurPlayer].lv_cameraPlayerHasControl = false;
    libGame_gv_players[lv_abathurPlayer].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lv_ultimateEvolutionUnit);
    libGame_gf_CameraUpdateCameraForPlayer(lv_abathurPlayer);
    libGame_gv_players[lv_abathurPlayer].lv_cameraPlayerHasControl = true;
    libGame_gf_CameraUpdateCameraForPlayer(lv_abathurPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurUltimateEvolutionStartControl_Init () {
    libGDHL_gt_HeroAbathurUltimateEvolutionStartControl = TriggerCreate("libGDHL_gt_HeroAbathurUltimateEvolutionStartControl_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurUltimateEvolutionStartControl, c_playerAny, "UltimateEvolutionCastDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Ultimate Evolution - Gains Bolt of the Storms
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurUltimateEvolutionGainsBoltoftheStorms_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_abathurPlayer;
    unit lv_abathur;
    unit lv_ultimateEvolutionUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroAbathur"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_abathur = EventUnit();
    lv_abathurPlayer = UnitGetOwner(lv_abathur);
    if ((libGame_gv_players[lv_abathurPlayer].lv_activeVehicle != null) && (UnitHasBehavior2(libGame_gv_players[lv_abathurPlayer].lv_activeVehicle, "AbathurUltimateEvolutionControlBehavior") == true)) {
        UnitInventoryCreate(libGame_gv_players[lv_abathurPlayer].lv_activeVehicle, "FlashoftheStorms");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurUltimateEvolutionGainsBoltoftheStorms_Init () {
    libGDHL_gt_HeroAbathurUltimateEvolutionGainsBoltoftheStorms = TriggerCreate("libGDHL_gt_HeroAbathurUltimateEvolutionGainsBoltoftheStorms_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAbathurUltimateEvolutionGainsBoltoftheStorms, null, "TalentBucketFlashoftheStormCarryBehavior", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Ultimate Evolution - Stop Control
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurUltimateEvolutionStopControl_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mindControlledUnit;
    int lv_ownerPlayer;
    int lv_itPlayer;
    int lv_teamNumberofOwner;
    bool lv_vehicleTransferCase;
    string lv_abilLink;
    string lv_cooldownLink;
    fixed lv_cooldownValue;

    // Variable Initialization
    lv_vehicleTransferCase = true;
    lv_cooldownLink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mindControlledUnit = EventUnit();
    lv_ownerPlayer = UnitGetOwner(lv_mindControlledUnit);
    lv_teamNumberofOwner = libGame_gf_TeamNumberOfPlayer(lv_ownerPlayer);
    PlayerGroupLoopBegin(libGame_gv_teams[lv_teamNumberofOwner].lv_teamPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((libGame_gv_players[PlayerGroupLoopCurrent()].lv_activeVehicle == lv_mindControlledUnit)) {
            UnitBehaviorRemove(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit, "AbathurUltimateEvolutionVehicleCasterBehavior", 1);
            libGame_gv_players[PlayerGroupLoopCurrent()].lv_activeVehicle = null;
            lv_vehicleTransferCase = false;
            break;
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    if ((lv_vehicleTransferCase == true)) {
        UnitBehaviorRemove(libGame_gv_players[lv_ownerPlayer].lv_heroUnit, "AssumingDirectControlBehavior", 1);
        return true;
    }
    else {
    }
    PlayerGroupLoopBegin(libGame_gv_teams[lv_teamNumberofOwner].lv_teamPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitGetType(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit) == "HeroAbathur")) {
            PlayerSetSkin(PlayerGroupLoopCurrent(), libCore_gv_dataSkinsSkinData[libGame_gv_players[PlayerGroupLoopCurrent()].lv_selectedSkin].lv_skinID);
            libGame_gv_players[PlayerGroupLoopCurrent()].lv_cameraPlayerHasControl = false;
            libGame_gv_players[PlayerGroupLoopCurrent()].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnitGroup;
            libGame_gf_CameraUpdateCameraForPlayer(PlayerGroupLoopCurrent());
            Wait(0.0625, c_timeGame);
            libGame_gv_players[PlayerGroupLoopCurrent()].lv_cameraPlayerHasControl = true;
            libGame_gf_CameraUpdateCameraForPlayer(PlayerGroupLoopCurrent());
            UnitSelect(lv_mindControlledUnit, PlayerGroupLoopCurrent(), false);
            UnitSelect(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit, PlayerGroupLoopCurrent(), true);
            UnitBehaviorRemove(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit, "AssumingDirectControlBehavior", 1);
            libUIUI_gf_UIHeroConsoleSetUpForPlayer(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit, PlayerGroupLoopCurrent());
            libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit, PlayerGroupLoopCurrent());
            lv_abilLink = "AbathurUltimateEvolution";
            lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.Link", PlayerGroupLoopCurrent());
            lv_cooldownValue = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.TimeUse", PlayerGroupLoopCurrent());
            UnitModifyCooldown(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit, lv_cooldownLink, lv_cooldownValue, c_cooldownOperationSet);
            if ((libMapM_gf_MapMechanicExistsOnMap(libMapM_ge_MapMechanicType_Cannonballs) == true) && (UnitBehaviorCount(lv_mindControlledUnit, "MapMechanicStack") > UnitBehaviorCount(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit, "MapMechanicStack"))) {
                UnitBehaviorAdd(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit, "MapMechanicStack", libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit, (UnitBehaviorCount(lv_mindControlledUnit, "MapMechanicStack") - UnitBehaviorCount(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit, "MapMechanicStack")));
            }
            else {
            }
            break;
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    if ((libMapM_gf_MapMechanicExistsOnMap(libMapM_ge_MapMechanicType_Cannonballs) == true) && (UnitBehaviorCount(libGame_gv_players[lv_ownerPlayer].lv_heroUnit, "MapMechanicStack") == 0)) {
        UnitAbilityEnable(libGame_gv_players[lv_ownerPlayer].lv_heroUnit, "CaptureMacGuffin", false);
    }
    else {
        UnitAbilityEnable(libGame_gv_players[lv_ownerPlayer].lv_heroUnit, "CaptureMacGuffin", true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurUltimateEvolutionStopControl_Init () {
    libGDHL_gt_HeroAbathurUltimateEvolutionStopControl = TriggerCreate("libGDHL_gt_HeroAbathurUltimateEvolutionStopControl_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAbathurUltimateEvolutionStopControl, null, "AbathurUltimateEvolutionControlBehavior", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Ultimate Evolution - Unit Dead
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead_Func (bool testConds, bool runActions) {
    playergroup autoC8F5471D_g;
    int autoC8F5471D_p;

    // Variable Declarations
    int lv_targetPlayer;
    playergroup lv_allyPlayerGroup;
    int lv_p;
    int lv_ownerPlayer;
    unit lv_itCleanupTargets;

    // Variable Initialization
    lv_targetPlayer = UnitGetOwner(EventUnit());
    lv_allyPlayerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!(((UnitHasBehavior2(EventUnit(), "UltimateEvolutionBuff") == true) || (UnitHasBehavior2(EventUnit(), "UltimateEvolutionBuild") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_ShareUnshareVisionOfAlliesForPlayer(true, lv_targetPlayer);
    lv_allyPlayerGroup = libGame_gf_AlliedPlayerGroupOfPlayer(lv_targetPlayer);
    autoC8F5471D_g = lv_allyPlayerGroup; 
    autoC8F5471D_p = 1;
    for ( ; autoC8F5471D_p <= PlayerGroupCount(autoC8F5471D_g) ; autoC8F5471D_p += BoolToInt(lv_p == PlayerGroupPlayer(autoC8F5471D_g, autoC8F5471D_p)) ) {
        lv_p = PlayerGroupPlayer(autoC8F5471D_g, autoC8F5471D_p);
        PlayerSetAlliance(lv_p, c_allianceIdSeekHelp, lv_targetPlayer, true);
        PlayerSetAlliance(lv_p, c_allianceIdGiveHelp, lv_targetPlayer, true);
    }
    UnitBehaviorRemove(EventUnit(), "UltimateEvolutionBuff", 1);
    Wait(5.0, c_timeGame);
    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead_Init () {
    libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead = TriggerCreate("libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead_Func");
    TriggerAddEventUnitDied(libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Ultimate Evolution Heroic Ability Detection
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurUltimateEvolutionHeroicAbilityDetection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heroIndex;
    string lv_abilLink;
    string lv_cooldownLink;
    int lv_itHeroicAbil;

    // Variable Initialization
    lv_cooldownLink = "";

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != "HeroAbathur"))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "UltimateEvolutionHeroicAbilityDetector") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroIndex = libCore_gf_GetHeroIndexForUnitType(UnitGetType(EventUnit()));
    UnitGroupLoopBegin(UnitGroup("HeroAbathur", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitBehaviorEffectUnit(EventUnit(), "UltimateEvolutionHeroicAbilityDetector", c_effectUnitCaster, 0) == UnitGroupLoopCurrent())) {
            UnitBehaviorAdd(libGame_gv_players[UnitGetOwner(UnitGroupLoopCurrent())].lv_activeVehicle, EventUnitBehavior(), UnitGroupLoopCurrent(), 1);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurUltimateEvolutionHeroicAbilityDetection_Init () {
    libGDHL_gt_HeroAbathurUltimateEvolutionHeroicAbilityDetection = TriggerCreate("libGDHL_gt_HeroAbathurUltimateEvolutionHeroicAbilityDetection_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAbathurUltimateEvolutionHeroicAbilityDetection, null, "Ultimate1Unlocked", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAbathurUltimateEvolutionHeroicAbilityDetection, null, "Ultimate2Unlocked", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Arthas - Army of the Dead - Port Ghouls
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArthasArmyoftheDeadPortGhouls_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroArthas"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("ArthasGhoul", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(libGame_gv_players[lv_player].lv_heroUnit), false);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArthasArmyoftheDeadPortGhouls_Init () {
    libGDHL_gt_HeroArthasArmyoftheDeadPortGhouls = TriggerCreate("libGDHL_gt_HeroArthasArmyoftheDeadPortGhouls_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroArthasArmyoftheDeadPortGhouls, c_playerAny, "PortBackToBaseTeleport");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Arthas - Army of the Dead - Cliff Height Teleport
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArthasArmyoftheDeadCliffHeightTeleport_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((PointPathingCliffLevel(UnitGetPosition(EventUnitCreatedUnit())) > PointPathingCliffLevel(UnitGetPosition(EventUnit()))) || (PointPathingCliffLevel(UnitGetPosition(EventUnitCreatedUnit())) < PointPathingCliffLevel(UnitGetPosition(EventUnit())))))) {
            return false;
        }

        if (!((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroArthas"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPosition(EventUnitCreatedUnit(), UnitGetPosition(libGame_gv_players[lv_player].lv_heroUnit), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArthasArmyoftheDeadCliffHeightTeleport_Init () {
    libGDHL_gt_HeroArthasArmyoftheDeadCliffHeightTeleport = TriggerCreate("libGDHL_gt_HeroArthasArmyoftheDeadCliffHeightTeleport_Func");
    TriggerAddEventUnitCreated(libGDHL_gt_HeroArthasArmyoftheDeadCliffHeightTeleport, null, "ArthasGhoulMagazine", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Arthas - Army of the Dead - Start Sacrifice Cooldown
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArthasArmyoftheDeadStartSacrificeCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_seconds;
    unit lv_arthas;

    // Variable Initialization
    lv_arthas = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAddCooldown(EventUnit(), "Abil/ArthasArmyOfTheDeadSacrifice", libCore_gv_bALCancelDelay);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArthasArmyoftheDeadStartSacrificeCooldown_Init () {
    libGDHL_gt_HeroArthasArmyoftheDeadStartSacrificeCooldown = TriggerCreate("libGDHL_gt_HeroArthasArmyoftheDeadStartSacrificeCooldown_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroArthasArmyoftheDeadStartSacrificeCooldown, null, AbilityCommand("ArthasArmyOfTheDead", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Arthas - Endless Winter Passive - Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArthasEndlessWinterPassiveProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_arthas;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventUnit(), "ArthasEndlessWinter") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_arthas = EventUnit();
    if ((UnitBehaviorCount(EventUnit(), "ArthasPassiveBuffWeapon") == 1)) {
        UnitCreateEffectUnit(lv_arthas, "EndlessWinterImprovedSearch", lv_arthas);
    }
    else {
        UnitCreateEffectUnit(lv_arthas, "EndlessWinterSearch", lv_arthas);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArthasEndlessWinterPassiveProc_Init () {
    libGDHL_gt_HeroArthasEndlessWinterPassiveProc = TriggerCreate("libGDHL_gt_HeroArthasEndlessWinterPassiveProc_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroArthasEndlessWinterPassiveProc, null, AbilityCommand("ArthasArmyOfTheDeadSacrifice", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroArthasEndlessWinterPassiveProc, null, AbilityCommand("ArthasHowlingBlast", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroArthasEndlessWinterPassiveProc, null, AbilityCommand("ArthasDeathCoil", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroArthasEndlessWinterPassiveProc, null, AbilityCommand("ArthasSummonSindragosa", 0), c_abilEffectStageCast, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroArthasEndlessWinterPassiveProc, null, AbilityCommand("ArthasArmyOfTheDead", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Barbarian - Leap
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroBarbarianLeap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_abilityRange;
    point lv_playerTargetPoint;
    fixed lv_distanceFromBarbarianToPlayerTargetPoint;
    fixed lv_barbarianRadius;
    point lv_actualTargetPoint;
    fixed lv_modifiedDistance;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_barbarianRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster))), "Radius", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    lv_abilityRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogActor, "BarbarianLeapRangeSplat", "Scale", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster))) + lv_barbarianRadius);
    lv_playerTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_distanceFromBarbarianToPlayerTargetPoint = DistanceBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_playerTargetPoint);
    if ((lv_distanceFromBarbarianToPlayerTargetPoint > lv_abilityRange)) {
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_abilityRange, lv_playerTargetPoint);
    }
    else {
        lv_actualTargetPoint = lv_playerTargetPoint;
    }
    lv_modifiedDistance = lv_distanceFromBarbarianToPlayerTargetPoint;
    while ((PointPathingPassable(lv_actualTargetPoint) == false)) {
        lv_modifiedDistance -= 0.125;
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_modifiedDistance, lv_playerTargetPoint);
        if ((PointPathingPassable(lv_actualTargetPoint) == false)) {
            lv_actualTargetPoint = PointWithOffsetPolar(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_modifiedDistance, lv_playerTargetPoint), 0.5, (AngleBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_playerTargetPoint) + 90.0));
            if ((PointPathingPassable(lv_actualTargetPoint) == false)) {
                lv_actualTargetPoint = PointWithOffsetPolar(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_modifiedDistance, lv_playerTargetPoint), 0.5, (AngleBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_playerTargetPoint) - 90.0));
                if ((PointPathingPassable(lv_actualTargetPoint) == false)) {
                    lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_modifiedDistance, lv_playerTargetPoint);
                }
                else {
                }
            }
            else {
            }
        }
        else {
        }
        if ((DistanceBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_actualTargetPoint) <= (lv_barbarianRadius + 0.125))) {
            libNtve_gf_UIErrorMessage(libCore_gv_playerGroupFromPlayer[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)], StringExternal("Param/Value/lib_GDHL_D9EC6B41"), SoundLink("UI_GenericError", -1));
            UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "BarbarianLeap", 1);
            UnitAbilityReset(EventPlayerEffectUsedUnit(c_effectUnitCaster), AbilityCommand("BarbarianLeap", 0), c_spendLocationAll);
            return true;
        }
        else {
        }
    }
    if ((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true)) {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "BarbarianLeapLaunchMissile", lv_actualTargetPoint);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroBarbarianLeap_Init () {
    libGDHL_gt_HeroBarbarianLeap = TriggerCreate("libGDHL_gt_HeroBarbarianLeap_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroBarbarianLeap, c_playerAny, "BarbarianLeapInitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Barbarian Whirlwind Animation
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroBarbarianWhirlwindAnimation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_whirlwindDamage;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_whirlwindDamage = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "BarbarianWhirlwindDamage", "Amount", UnitGetOwner(EventUnit()));
    if ((lv_whirlwindDamage >= 125.0)) {
        libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimPlay Channel Spell,B PlayForever,AssetDrivenLooping -1.000000 -1.000000 1.600000 AsTimeScale");
    }
    else {
        if ((lv_whirlwindDamage >= 105.0)) {
            libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimPlay Channel Spell,B PlayForever,AssetDrivenLooping -1.000000 -1.000000 1.500000 AsTimeScale");
        }
        else {
            if ((lv_whirlwindDamage >= 90.0)) {
                libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimPlay Channel Spell,B PlayForever,AssetDrivenLooping -1.000000 -1.000000 1.400000 AsTimeScale");
            }
            else {
                if ((lv_whirlwindDamage >= 75.0)) {
                    libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimPlay Channel Spell,B PlayForever,AssetDrivenLooping -1.000000 -1.000000 1.300000 AsTimeScale");
                }
                else {
                    if ((lv_whirlwindDamage >= 60.0)) {
                        libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimPlay Channel Spell,B PlayForever,AssetDrivenLooping -1.000000 -1.000000 1.200000 AsTimeScale");
                    }
                    else {
                        if ((lv_whirlwindDamage >= 45.0)) {
                            libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimPlay Channel Spell,B PlayForever,AssetDrivenLooping -1.000000 -1.000000 1.100000 AsTimeScale");
                        }
                        else {
                            libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimPlay Channel Spell,B PlayForever,AssetDrivenLooping");
                        }
                    }
                }
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroBarbarianWhirlwindAnimation_Init () {
    libGDHL_gt_HeroBarbarianWhirlwindAnimation = TriggerCreate("libGDHL_gt_HeroBarbarianWhirlwindAnimation_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroBarbarianWhirlwindAnimation, null, AbilityCommand("BarbarianWhirlwind", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Barbarian Whirlwind Animation Stop
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroBarbarianWhirlwindAnimationStop_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AnimClear Channel");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroBarbarianWhirlwindAnimationStop_Init () {
    libGDHL_gt_HeroBarbarianWhirlwindAnimationStop = TriggerCreate("libGDHL_gt_HeroBarbarianWhirlwindAnimationStop_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroBarbarianWhirlwindAnimationStop, c_playerAny, "BarbarianWhirlwindRemoveSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Barbarian Slam - Apply Cost Reduction
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroBarbarianSlamApplyCostReduction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_defaultCost;
    fixed lv_newCost;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroBarbarianSeismicSlamCooldown[UnitGetOwner(EventUnit())] = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "BarbarianSeismicSlam", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", UnitGetOwner(EventUnit())));
    lv_defaultCost = libGDHL_gv_heroBarbarianSeismicSlamCooldown[UnitGetOwner(EventUnit())];
    lv_newCost = (lv_defaultCost / 2.0);
    CatalogFieldValueSet(c_gameCatalogAbil, "BarbarianSeismicSlam", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", UnitGetOwner(EventUnit()), FixedToString(lv_newCost, c_fixedPrecisionAny));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroBarbarianSlamApplyCostReduction_Init () {
    libGDHL_gt_HeroBarbarianSlamApplyCostReduction = TriggerCreate("libGDHL_gt_HeroBarbarianSlamApplyCostReduction_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroBarbarianSlamApplyCostReduction, null, "BarbarianSeismicSlamAftershockFuryReductionBehavior", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Barbarian Slam - Remove Cost Reduction
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroBarbarianSlamRemoveCostReduction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_defaultCost;
    fixed lv_newCost;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_defaultCost = libGDHL_gv_heroBarbarianSeismicSlamCooldown[UnitGetOwner(EventUnit())];
    CatalogFieldValueSet(c_gameCatalogAbil, "BarbarianSeismicSlam", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", UnitGetOwner(EventUnit()), FixedToString(lv_defaultCost, c_fixedPrecisionAny));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroBarbarianSlamRemoveCostReduction_Init () {
    libGDHL_gt_HeroBarbarianSlamRemoveCostReduction = TriggerCreate("libGDHL_gt_HeroBarbarianSlamRemoveCostReduction_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroBarbarianSlamRemoveCostReduction, null, "BarbarianSeismicSlamAftershockFuryReductionBehavior", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Barbarian Wrath of the Berserker Buff Duration Extension
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroBarbarianWrathoftheBerserkerBuffDurationExtension_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_regenAmount;
    fixed lv_currentDuration;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "BarbarianWrathoftheBerserkerBase") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentDuration = UnitBehaviorDuration(EventPlayerEffectUsedUnit(c_effectUnitCaster), "BarbarianWrathoftheBerserkerBase");
    if ((EventPlayerEffectUsed() == "BarbarianShotofFuryHealer")) {
        lv_regenAmount = 25.0;
    }
    else {
    }
    if ((EventPlayerEffectUsed() == "BarbarianAncientSpearRegenFuryModifyUnit")) {
        lv_regenAmount = 20.0;
    }
    else {
    }
    if ((EventPlayerEffectUsed() == "BarbarianRegen4Fury2")) {
        lv_regenAmount = 8.0;
    }
    else {
    }
    if ((EventPlayerEffectUsed() == "BarbarianRegen4Fury")) {
        lv_regenAmount = 4.0;
    }
    else {
    }
    if ((EventPlayerEffectUsed() == "BarbarianRegen2Fury")) {
        lv_regenAmount = 2.0;
    }
    else {
    }
    if ((EventPlayerEffectUsed() == "BarbarianRegen1Fury")) {
        lv_regenAmount = 1.0;
    }
    else {
    }
    if ((EventPlayerEffectUsed() == "BarbarianRegenHalfOneFury")) {
        lv_regenAmount = 0.5;
    }
    else {
    }
    if ((UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "BarbarianWrathoftheBerserkerAngerManagementCarryBehavior") == 1)) {
        UnitBehaviorSetDurationRemaining(EventPlayerEffectUsedUnit(c_effectUnitCaster), "BarbarianWrathoftheBerserkerBase", (lv_currentDuration + (lv_regenAmount / 2.0)));
    }
    else {
        UnitBehaviorSetDurationRemaining(EventPlayerEffectUsedUnit(c_effectUnitCaster), "BarbarianWrathoftheBerserkerBase", (lv_currentDuration + (lv_regenAmount / 4.0)));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroBarbarianWrathoftheBerserkerBuffDurationExtension_Init () {
    libGDHL_gt_HeroBarbarianWrathoftheBerserkerBuffDurationExtension = TriggerCreate("libGDHL_gt_HeroBarbarianWrathoftheBerserkerBuffDurationExtension_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroBarbarianWrathoftheBerserkerBuffDurationExtension, c_playerAny, "BarbarianShotofFuryHealer");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroBarbarianWrathoftheBerserkerBuffDurationExtension, c_playerAny, "BarbarianAncientSpearRegenFuryModifyUnit");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroBarbarianWrathoftheBerserkerBuffDurationExtension, c_playerAny, "BarbarianRegen4Fury2");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroBarbarianWrathoftheBerserkerBuffDurationExtension, c_playerAny, "BarbarianRegen4Fury");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroBarbarianWrathoftheBerserkerBuffDurationExtension, c_playerAny, "BarbarianRegen2Fury");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroBarbarianWrathoftheBerserkerBuffDurationExtension, c_playerAny, "BarbarianRegen1Fury");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroBarbarianWrathoftheBerserkerBuffDurationExtension, c_playerAny, "BarbarianRegenHalfOneFury");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Barbarian Leap Arreat Crater Cancel Modify Cooldown
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroBarbarianLeapArreatCraterCancelModifyCooldown_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitModifyCooldown(EventUnit(), "Abil/BarbarianCancelLeapArreatCrater", 1.0, c_cooldownOperationSet);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroBarbarianLeapArreatCraterCancelModifyCooldown_Init () {
    libGDHL_gt_HeroBarbarianLeapArreatCraterCancelModifyCooldown = TriggerCreate("libGDHL_gt_HeroBarbarianLeapArreatCraterCancelModifyCooldown_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroBarbarianLeapArreatCraterCancelModifyCooldown, null, "BarbarianLeapArreatCraterDummyBehavior", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Demonic Charge Impact Change Facing
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloDemonicChargeImpactChangeFacing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_diablo;
    unit lv_target;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_diablo = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    UnitSetFacing(lv_target, UnitGetFacing(lv_diablo), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloDemonicChargeImpactChangeFacing_Init () {
    libGDHL_gt_HeroDiabloDemonicChargeImpactChangeFacing = TriggerCreate("libGDHL_gt_HeroDiabloDemonicChargeImpactChangeFacing_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroDiabloDemonicChargeImpactChangeFacing, c_playerAny, "DemonicChargeImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - OverPower Facing
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloOverPowerFacing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_diablo;
    unit lv_target;
    fixed lv_currentAngle;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "DiabloNotWalkableCasterBehavior") == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "FireStompDummyBehavior") == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "DiabloShadowChargeCasterBehavior") == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "DiabloShadowChargeCasterPostChargeBehavior") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_diablo = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_currentAngle = UnitGetFacing(lv_diablo);
    if ((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "DiabloPoundFireStompDummy") == true)) {
        UnitSetFacing(lv_diablo, (lv_currentAngle + 180.0), 0.0);
        libNtve_gf_SendActorMessageToUnit(lv_diablo, "AnimClear Spell 0.000000");
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "DiabloPoundFireStompDummy", 1);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloOverPowerFacing_Init () {
    libGDHL_gt_HeroDiabloOverPowerFacing = TriggerCreate("libGDHL_gt_HeroDiabloOverPowerFacing_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroDiabloOverPowerFacing, c_playerAny, "DiabloPoundPersistentFinalDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Fire Stomp Facing
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloFireStompFacing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_diablo;
    unit lv_target;
    fixed lv_currentAngle;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "DiabloDiabloPoundCasterBehaviorPart2") == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "DiabloPoundCasterBehavior") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_diablo = EventUnit();
    lv_currentAngle = UnitGetFacing(lv_diablo);
    if ((UnitHasBehavior2(EventUnit(), "DiabloNotWalkableCasterBehavior") == false) && (UnitHasBehavior2(EventUnit(), "DiabloPoundFireStompDummy") == true)) {
        libNtve_gf_SendActorMessageToUnit(lv_diablo, "AnimClear Spell 0.000000");
        UnitSetFacing(lv_diablo, (lv_currentAngle + 180.0), 0.0);
        UnitBehaviorRemove(EventUnit(), "DiabloPoundFireStompDummy", 1);
    }
    else {
    }
    libNtve_gf_SendActorMessageToUnit(lv_diablo, "AnimPlay Spell Spell,A 0 0.100000 0.300000 1.000000 AsTimeScale");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloFireStompFacing_Init () {
    libGDHL_gt_HeroDiabloFireStompFacing = TriggerCreate("libGDHL_gt_HeroDiabloFireStompFacing_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroDiabloFireStompFacing, null, AbilityCommand("DiabloFireStomp", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Lightning Breath Targeted Cancel Delay
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloLightningBreathTargetedCancelDelay_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAddCooldown(EventUnit(), "Abil/DiabloLightningBreathTargetedCancel", 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloLightningBreathTargetedCancelDelay_Init () {
    libGDHL_gt_HeroDiabloLightningBreathTargetedCancelDelay = TriggerCreate("libGDHL_gt_HeroDiabloLightningBreathTargetedCancelDelay_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroDiabloLightningBreathTargetedCancelDelay, null, AbilityCommand("DiabloLightningBreathTargeted", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Inferno Breath Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloInfernoBreathCast_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroDiabloInfernoBreathActive[EventPlayer()] = true;
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroDiablo", "StationaryTurningRate", EventPlayer(), FixedToString(libGDHL_gv_heroDiabloInfernoBreathTurningRate, 0));
    if ((libGDHL_gv_heroDiabloInfernoBreathEventAdded[EventPlayer()] == false)) {
        TriggerAddEventMouseMoved(libGDHL_gt_HeroDiabloInfernoBreathAim, EventPlayer());
    }
    else {
    }
    libGDHL_gv_heroDiabloInfernoBreathEventAdded[EventPlayer()] = true;
    TriggerEnable(libGDHL_gt_HeroDiabloInfernoBreathAim, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloInfernoBreathCast_Init () {
    libGDHL_gt_HeroDiabloInfernoBreathCast = TriggerCreate("libGDHL_gt_HeroDiabloInfernoBreathCast_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroDiabloInfernoBreathCast, null, "LightningBreathTargetedActive", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Inferno Breath Aim
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloInfernoBreathAim_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libGDHL_gv_heroDiabloInfernoBreathActive[EventPlayer()] == true))) {
            return false;
        }

        if (!((libAIAI_gf_HeroAIIsAIEnabledForPlayer(EventPlayer()) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libGame_gv_players[EventPlayer()].lv_heroUnit) == "HeroAbathur")) {
        UnitIssueOrder(libGame_gv_players[EventPlayer()].lv_activeVehicle, OrderTargetingPoint(AbilityCommand("move", 4), Point(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld())), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(libGame_gv_players[EventPlayer()].lv_heroUnit, OrderTargetingPoint(AbilityCommand("move", 4), Point(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld())), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloInfernoBreathAim_Init () {
    libGDHL_gt_HeroDiabloInfernoBreathAim = TriggerCreate("libGDHL_gt_HeroDiabloInfernoBreathAim_Func");
    TriggerEnable(libGDHL_gt_HeroDiabloInfernoBreathAim, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Inferno Breath End
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloInfernoBreathEnd_Func (bool testConds, bool runActions) {
    int autoA2170D1E_ae;
    int autoA2170D1E_ai;
    int autoF56656DD_ae;
    int autoF56656DD_ai;

    // Variable Declarations
    int lv_i;
    bool lv_infernoBreathAimTriggerEnabled;
    int lv_diabloIndex;
    int lv_triggeringDiabloPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers)) {
        CatalogFieldValueSet(c_gameCatalogUnit, "HeroDiablo", "StationaryTurningRate", EventPlayer(), CatalogFieldValueGet(c_gameCatalogUnit, "HeroDiablo", "StationaryTurningRate", 0));
        libGDHL_gv_heroDiabloInfernoBreathActive[EventPlayer()] = false;
    }
    else {
        autoA2170D1E_ae = libCore_gv_bALMaxPlayers;
        autoA2170D1E_ai = 1;
        lv_diabloIndex = 1;
        for ( ; ( (autoA2170D1E_ai >= 0 && lv_diabloIndex <= autoA2170D1E_ae) || (autoA2170D1E_ai <= 0 && lv_diabloIndex >= autoA2170D1E_ae) ) ; lv_diabloIndex += autoA2170D1E_ai ) {
            if ((TechTreeUnitCount(lv_diabloIndex, "HeroAbathur", c_techCountCompleteOnly) == 1) && (TechTreeUnitCount(lv_diabloIndex, "HeroTinker", c_techCountCompleteOnly) == 0) && (lv_diabloIndex != EventPlayer()) && (libGDHL_gv_heroDiabloInfernoBreathActive[lv_diabloIndex] == true)) {
                lv_triggeringDiabloPlayer = lv_diabloIndex;
                CatalogFieldValueSet(c_gameCatalogUnit, "HeroDiablo", "StationaryTurningRate", lv_diabloIndex, CatalogFieldValueGet(c_gameCatalogUnit, "HeroDiablo", "StationaryTurningRate", 0));
                libGDHL_gv_heroDiabloInfernoBreathActive[lv_diabloIndex] = false;
            }
            else {
            }
        }
    }
    autoF56656DD_ae = libCore_gv_bALMaxPlayers;
    autoF56656DD_ai = 1;
    lv_i = 1;
    for ( ; ( (autoF56656DD_ai >= 0 && lv_i <= autoF56656DD_ae) || (autoF56656DD_ai <= 0 && lv_i >= autoF56656DD_ae) ) ; lv_i += autoF56656DD_ai ) {
        if ((libGDHL_gv_heroDiabloInfernoBreathActive[lv_i] == true)) {
            lv_infernoBreathAimTriggerEnabled = true;
            break;
        }
        else {
        }
    }
    if ((lv_infernoBreathAimTriggerEnabled == false)) {
        TriggerEnable(libGDHL_gt_HeroDiabloInfernoBreathAim, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloInfernoBreathEnd_Init () {
    libGDHL_gt_HeroDiabloInfernoBreathEnd = TriggerCreate("libGDHL_gt_HeroDiabloInfernoBreathEnd_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroDiabloInfernoBreathEnd, null, "LightningBreathTargetedActive", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Faerie Dragon - Polymorph
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroFaerieDragonPolymorph_Func (bool testConds, bool runActions) {
    int auto921F42C5_val;
    fixed auto697A5741_at;
    fixed auto588A924F_at;

    // Variable Declarations
    int lv_random;
    string lv_sound;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnitTargetUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_random = RandomInt(1, 3);
    ActorCreate(ActorScopeFromUnit(EventUnitTargetUnit()), "FaerieDragonPolymorphUnitModelChanger", null, null, null);
    auto921F42C5_val = lv_random;
    if (auto921F42C5_val == 1) {
        ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap FaerieDragonPolymorphPig");
        ActorSend(libNtve_gf_ActorLastCreated(), "TimerSet 0.200000 TimerPig");
        lv_sound = "Polymorph_Pig_Vox_Yes";
    }
    else if (auto921F42C5_val == 2) {
        ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap FaerieDragonPolymorphCrab");
        ActorSend(libNtve_gf_ActorLastCreated(), "TimerSet 0.200000 TimerCrab");
        lv_sound = "Polymorph_Crab_Vox_Yes";
    }
    else if (auto921F42C5_val == 3) {
        ActorSend(libNtve_gf_ActorLastCreated(), "ModelSwap FaerieDragonPolymorphSquirrel");
        ActorSend(libNtve_gf_ActorLastCreated(), "TimerSet 0.200000 TimerSquirrel");
        lv_sound = "Polymorph_Squirrel_Vox_Yes";
    }
    else {
    }
    CatalogFieldValueSet(c_gameCatalogActor, (UnitGetType(EventUnitTargetUnit())), "SoundArray[" + IntToString(4) + "]", UnitGetOwner(EventUnitTargetUnit()), (lv_sound));
    auto697A5741_at = 0;
    while (!((UnitHasBehavior2(EventUnitTargetUnit(), "Polymorph") == true)) && auto697A5741_at <= 5.0) {
        Wait(0.0625, c_timeGame);
        auto697A5741_at = auto697A5741_at + 0.0625;
    }
    auto588A924F_at = 0;
    while (!((UnitHasBehavior2(EventUnitTargetUnit(), "Polymorph") == false)) && auto588A924F_at <= 5.0) {
        Wait(0.0625, c_timeGame);
        auto588A924F_at = auto588A924F_at + 0.0625;
    }
    lv_sound = (CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(EventUnitTargetUnit()), "SoundArray[" + IntToString(4) + "]", 0));
    CatalogFieldValueSet(c_gameCatalogActor, (UnitGetType(EventUnitTargetUnit())), "SoundArray[" + IntToString(4) + "]", UnitGetOwner(EventUnitTargetUnit()), (lv_sound));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroFaerieDragonPolymorph_Init () {
    libGDHL_gt_HeroFaerieDragonPolymorph = TriggerCreate("libGDHL_gt_HeroFaerieDragonPolymorph_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroFaerieDragonPolymorph, null, AbilityCommand("FaerieDragonPolymorph", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Faerie Dragon - Phase Shift - Camera
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroFaerieDragonPhaseShiftCamera_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    libGame_gv_players[lv_player].lv_cameraCameraLockInterrupt = true;
    libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_player, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroFaerieDragonPhaseShiftCamera_Init () {
    libGDHL_gt_HeroFaerieDragonPhaseShiftCamera = TriggerCreate("libGDHL_gt_HeroFaerieDragonPhaseShiftCamera_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroFaerieDragonPhaseShiftCamera, c_playerAny, "FlightTeleport");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Falstad - Thunderstorm Refresh
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroFalstadThunderstormRefresh_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogBehavior, "ThunderstormPeriodicController", "Period", EventPlayer(), CatalogFieldValueGet(c_gameCatalogAbil, "FalstadThunderstormPassive", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", EventPlayer()));
    UnitBehaviorRemove(EventUnit(), "ThunderstormPeriodicController", 1);
    UnitBehaviorAdd(EventUnit(), "ThunderstormPeriodicController", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroFalstadThunderstormRefresh_Init () {
    libGDHL_gt_HeroFalstadThunderstormRefresh = TriggerCreate("libGDHL_gt_HeroFalstadThunderstormRefresh_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroFalstadThunderstormRefresh, null, "ThunderstormReadyBuff", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Falstad - Preparation Shield
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroFalstadPreparationShield_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_maxLife;
    fixed lv_halfLife;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "FalstadPreparationCarryBehavior") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_maxLife = UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent);
    lv_halfLife = (lv_maxLife / 2.0);
    CatalogFieldValueSet(c_gameCatalogBehavior, "FalstadPreparationAerialBlitzkrieg", "DamageResponse.ModifyLimit", EventPlayer(), FixedToString(lv_halfLife, c_fixedPrecisionAny));
    UnitBehaviorAdd(EventUnit(), "FalstadPreparationAerialBlitzkrieg", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroFalstadPreparationShield_Init () {
    libGDHL_gt_HeroFalstadPreparationShield = TriggerCreate("libGDHL_gt_HeroFalstadPreparationShield_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroFalstadPreparationShield, null, AbilityCommand("FalstadAerialBlitzkrieg", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Illidan - Apply FotB Cooldown on Inventory Use
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroIllidanApplyFotBCooldownonInventoryUse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    abilcmd lv_abilityCommand;
    unit lv_unit;
    string lv_heroType;

    // Variable Initialization
    lv_abilityCommand = EventUnitAbility();
    lv_unit = EventUnit();
    lv_heroType = UnitGetType(EventUnit());

    // Conditions
    if (testConds) {
        if (!(((UnitHasBehavior2(lv_unit, "FlightoftheBetrayer") == true) || (UnitHasBehavior2(lv_unit, "FlightoftheBetrayerCooldown") == true)))) {
            return false;
        }

        if (!((AbilityClass(AbilityCommandGetAbility(lv_abilityCommand)) == c_classIdCAbilInventory))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "FlightoftheBetrayerCooldown", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroIllidanApplyFotBCooldownonInventoryUse_Init () {
    libGDHL_gt_HeroIllidanApplyFotBCooldownonInventoryUse = TriggerCreate("libGDHL_gt_HeroIllidanApplyFotBCooldownonInventoryUse_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroIllidanApplyFotBCooldownonInventoryUse, null, null, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Illidan - Metamorphosis Avatar Apply Health Buff
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroIllidanMetamorphosisAvatarApplyHealthBuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_targetCount;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetCount = UnitBehaviorCount(EventUnit(), "IllidanMetamorphosisBonusHealthDummyCount");
    CatalogFieldValueSet(c_gameCatalogBehavior, "IllidanMetamorphosisDoubleDummyHealth", "Modification.VitalMaxArray[" + IntToString(0) + "]", UnitGetOwner(EventUnit()), FixedToString((StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "IllidanMetamorphosisBonusHealthScaler", "Modification.VitalMaxArray[" + IntToString(0) + "]", UnitGetOwner(EventUnit()))) * lv_targetCount), c_fixedPrecisionAny));
    UnitCreateEffectUnit(EventUnit(), "NewMetamorphosisApplyRealHealthBehavior", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroIllidanMetamorphosisAvatarApplyHealthBuff_Init () {
    libGDHL_gt_HeroIllidanMetamorphosisAvatarApplyHealthBuff = TriggerCreate("libGDHL_gt_HeroIllidanMetamorphosisAvatarApplyHealthBuff_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroIllidanMetamorphosisAvatarApplyHealthBuff, null, "IllidanMetamorphosisBonusHealthDummyCount", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - NewIllidan - The Hunt Ability Used
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNewIllidanTheHuntAbilityUsed_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_newIllidanHuntTarget[UnitGetOwner(EventUnit())] = EventUnitTargetUnit();
    libGDHL_gv_newIllidanHuntTargetLastPoint[UnitGetOwner(EventUnit())] = UnitGetPosition(EventUnitTargetUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNewIllidanTheHuntAbilityUsed_Init () {
    libGDHL_gt_HeroNewIllidanTheHuntAbilityUsed = TriggerCreate("libGDHL_gt_HeroNewIllidanTheHuntAbilityUsed_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroNewIllidanTheHuntAbilityUsed, null, AbilityCommand("IllidanTheHunt", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - NewIllidan - The Hunt Launch Missile Used
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNewIllidanTheHuntLaunchMissileUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_illidanPlayer;
    int lv_targetPlayer;
    point lv_currentPositionOfTarget;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_illidanPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    libGDHL_gv_newIllidanIsHunting[lv_illidanPlayer] = true;
    while ((libGDHL_gv_newIllidanIsHunting[lv_illidanPlayer] == true) && (UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true) && (UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true)) {
        lv_currentPositionOfTarget = UnitGetPosition(libGDHL_gv_newIllidanHuntTarget[lv_illidanPlayer]);
        if ((DistanceBetweenPoints(lv_currentPositionOfTarget, libGDHL_gv_newIllidanHuntTargetLastPoint[lv_illidanPlayer]) > libGDHL_gv_newIllidanHuntRedirectDistanceThreshold) && (UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true)) {
            UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "IllidanTheHuntRedirectMissile", libGDHL_gv_newIllidanHuntTargetLastPoint[lv_illidanPlayer]);
        }
        else {
            libGDHL_gv_newIllidanHuntTargetLastPoint[lv_illidanPlayer] = lv_currentPositionOfTarget;
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNewIllidanTheHuntLaunchMissileUsed_Init () {
    libGDHL_gt_HeroNewIllidanTheHuntLaunchMissileUsed = TriggerCreate("libGDHL_gt_HeroNewIllidanTheHuntLaunchMissileUsed_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroNewIllidanTheHuntLaunchMissileUsed, c_playerAny, "IllidanTheHuntMissileLaunchMissile");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - NewIllidan - The Hunt Impacts
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNewIllidanTheHuntImpacts_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_newIllidanIsHunting[EventPlayer()] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNewIllidanTheHuntImpacts_Init () {
    libGDHL_gt_HeroNewIllidanTheHuntImpacts = TriggerCreate("libGDHL_gt_HeroNewIllidanTheHuntImpacts_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroNewIllidanTheHuntImpacts, null, "IllidanTheHuntMissile", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - NewIllidan - The Hunt - Create Revealer
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNewIllidanTheHuntCreateRevealer_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "IllidanTheHuntMissileCreateRevealerPersistent", EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNewIllidanTheHuntCreateRevealer_Init () {
    libGDHL_gt_HeroNewIllidanTheHuntCreateRevealer = TriggerCreate("libGDHL_gt_HeroNewIllidanTheHuntCreateRevealer_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroNewIllidanTheHuntCreateRevealer, c_playerAny, "IllidanTheHuntMissileCreateImpactOffsetPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan - Assimilation Passive - Add Shields
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganAssimilationPassiveAddShields_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unittoShield;
    fixed lv_maxShields;
    fixed lv_damageValue;
    fixed lv_shieldsToAdd;
    fixed lv_currentShields;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventUnit(), "DestructibleBehavior") == 0))) {
            return false;
        }

        if (!(((UnitTypeTestAttribute(UnitGetType(EventUnitDamageSourceUnit()), c_unitAttributeHeroic) == true) || (UnitGetType(EventUnitDamageSourceUnit()) == "KerriganUltralisk") || (UnitGetType(EventUnitDamageSourceUnit()) == "ImpalingBladesZergling")))) {
            return false;
        }

        if (!(((UnitBehaviorCount(libGame_gv_players[UnitGetOwner(EventUnitDamageSourceUnit())].lv_heroUnit, "KerriganAssimilation") == 1) || (UnitBehaviorCount(EventUnitDamageSourceUnit(), "AbathurUltimateEvolutionControlBehavior") == 1)))) {
            return false;
        }

        if (!(((EventUnitDamageEffect() == "RavageDamage") || (EventUnitDamageEffect() == "RavageDamageRelic") || (EventUnitDamageEffect() == "CrushingGripDamage") || (EventUnitDamageEffect() == "PrimalGraspDamage") || (EventUnitDamageEffect() == "PrimalBlastDamage") || (EventUnitDamageEffect() == "KerriganWeaponDamage") || (EventUnitDamageEffect() == "DoubleStrikeDamage") || (EventUnitDamageEffect() == "FuryOfTheSwarmPassiveBuffDamage") || (EventUnitDamageEffect() == "MaelstromDamage") || (EventUnitDamageEffect() == "UltraliskWeaponDamage") || (EventUnitDamageEffect() == "ImpalingBladesZerglingWeaponDamage")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(libGame_gv_players[UnitGetOwner(EventUnitDamageSourceUnit())].lv_heroUnit, "KerriganAssimilation") == 1)) {
        lv_unittoShield = libGame_gv_players[UnitGetOwner(EventUnitDamageSourceUnit())].lv_heroUnit;
    }
    else {
    }
    if ((UnitBehaviorCount(EventUnitDamageSourceUnit(), "AbathurUltimateEvolutionControlBehavior") == 1)) {
        lv_unittoShield = libGame_gv_players[UnitGetOwner(EventUnitDamageSourceUnit())].lv_activeVehicle;
    }
    else {
    }
    lv_maxShields = (libGDHL_gv_bALHeroKerriganAssimilationBaseHPValue + (libGDHL_gv_bALHeroKerriganAssimilationMaxHPLevelModifier * UnitXPGetCurrentLevel(libGame_gv_players[UnitGetOwner(EventUnitDamageSourceUnit())].lv_heroUnit, "HeroDummyVeterancy")));
    lv_damageValue = EventUnitDamageAttempted();
    if (((UnitHasBehavior2(EventUnitDamageSourceUnit(), "KerriganAssimilationShield") == true) || (EventUnitDamageEffect() == "ImpalingBladesZerglingWeaponDamage") || (EventUnitDamageEffect() == "UltraliskWeaponDamage"))) {
        lv_currentShields = UnitBehaviorDamageModifyRemaining(lv_unittoShield, "KerriganAssimilationShield");
    }
    else {
        lv_currentShields = 0.0;
    }
    if ((UnitBehaviorCount(lv_unittoShield, "KerriganPassiveBuffWeaponFuryOfTheSwarm") == 1)) {
        if (((EventUnitDamageEffect() == "KerriganWeaponDamage") || (EventUnitDamageEffect() == "DoubleStrikeDamage") || (EventUnitDamageEffect() == "FuryOfTheSwarmPassiveBuffDamage") || (EventUnitDamageEffect() == "ImpalingBladesZerglingWeaponDamage") || (EventUnitDamageEffect() == "UltraliskWeaponDamage"))) {
            lv_shieldsToAdd = (lv_damageValue * libGDHL_gv_bALHeroKerriganAssimilationImprovedRangedDamageModifier);
        }
        else {
            if (((EventUnitDamageEffect() == "MaelstromDamage") && (UnitHasBehavior2(EventUnitDamageSourceUnit(), "KerriganMaelstromMasteryCarryBehavior") == true))) {
                lv_shieldsToAdd = (lv_damageValue * (libGDHL_gv_bALHeroKerriganAssimilationImprovedSpellDamageModifier * 2.0));
            }
            else {
                lv_shieldsToAdd = (lv_damageValue * libGDHL_gv_bALHeroKerriganAssimilationImprovedSpellDamageModifier);
            }
        }
    }
    else {
        if (((EventUnitDamageEffect() == "KerriganWeaponDamage") || (EventUnitDamageEffect() == "DoubleStrikeDamage") || (EventUnitDamageEffect() == "FuryOfTheSwarmPassiveBuffDamage") || (EventUnitDamageEffect() == "ImpalingBladesZerglingWeaponDamage") || (EventUnitDamageEffect() == "UltraliskWeaponDamage"))) {
            lv_shieldsToAdd = (lv_damageValue * libGDHL_gv_bALHeroKerriganAssimilationRangedDamageModifier);
        }
        else {
            if (((EventUnitDamageEffect() == "MaelstromDamage") && (UnitHasBehavior2(EventUnitDamageSourceUnit(), "KerriganMaelstromMasteryCarryBehavior") == true))) {
                lv_shieldsToAdd = (lv_damageValue * (libGDHL_gv_bALHeroKerriganAssimilationSpellDamageModifier * 2.0));
            }
            else {
                if ((EventUnitDamageEffect() != "MaelstromDamage") && (UnitBehaviorCount(libGame_gv_players[UnitGetOwner(EventUnitDamageSourceUnit())].lv_heroUnit, "KerriganAggressiveDefenseCarry") == 1)) {
                    lv_shieldsToAdd = (lv_damageValue * libGDHL_gv_bALHeroKerriganAssimilationAggressiveDefenseMasterySpellDamageModifier);
                }
                else {
                    lv_shieldsToAdd = (lv_damageValue * libGDHL_gv_bALHeroKerriganAssimilationSpellDamageModifier);
                }
            }
        }
    }
    if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true)) {
        lv_shieldsToAdd = (lv_shieldsToAdd * 2.0);
    }
    else {
    }
    if ((lv_currentShields < lv_maxShields)) {
        lv_currentShields += lv_shieldsToAdd;
        if ((lv_currentShields > lv_maxShields)) {
            lv_currentShields = lv_maxShields;
        }
        else {
        }
        if ((lv_currentShields < 1)) {
            CatalogFieldValueSet(c_gameCatalogBehavior, "KerriganAssimilationShield", "DamageResponse.ModifyLimit", UnitGetOwner(EventUnitDamageSourceUnit()), FixedToString((lv_currentShields + 1.0), 2));
        }
        else {
            CatalogFieldValueSet(c_gameCatalogBehavior, "KerriganAssimilationShield", "DamageResponse.ModifyLimit", UnitGetOwner(EventUnitDamageSourceUnit()), FixedToString(lv_currentShields, 2));
        }
    }
    else {
    }
    UnitBehaviorAdd(lv_unittoShield, "KerriganAssimilationShield", libGame_gv_players[UnitGetOwner(EventUnitDamageSourceUnit())].lv_heroUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganAssimilationPassiveAddShields_Init () {
    libGDHL_gt_HeroKerriganAssimilationPassiveAddShields = TriggerCreate("libGDHL_gt_HeroKerriganAssimilationPassiveAddShields_Func");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilationPassiveAddShields, null, c_unitDamageTypeSpell, c_unitDamageEither, null);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilationPassiveAddShields, null, c_unitDamageTypeRanged, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan - Ravage CDR
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganRavageCDR_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_kerrigan;

    // Variable Initialization
    lv_kerrigan = UnitBehaviorEffectUnit(EventUnit(), "RavageDeathRefundBehavior", c_effectUnitCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "RavageDeathRefundBehavior") == true)) {
        libNtve_gf_UnitRemoveCooldown(lv_kerrigan, "Abil/KerriganRavage");
        if ((UnitHasBehavior2(lv_kerrigan, "CleanKillCarryBehavior") == true)) {
            UnitSetPropertyFixed(lv_kerrigan, c_unitPropEnergy, (UnitGetPropertyFixed(lv_kerrigan, c_unitPropEnergy, c_unitPropCurrent) + (StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "KerriganRavage", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", UnitGetOwner(lv_kerrigan))) * 1.0)));
            libNtve_gf_SendActorMessageToUnit(lv_kerrigan, "Signal RavageDeathRefund");
        }
        else {
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganRavageCDR_Init () {
    libGDHL_gt_HeroKerriganRavageCDR = TriggerCreate("libGDHL_gt_HeroKerriganRavageCDR_Func");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganRavageCDR, null, c_unitDamageTypeRanged, c_unitDamageFatal, null);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganRavageCDR, null, c_unitDamageTypeSpell, c_unitDamageFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan Sic Ultralisk
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganSicUltralisk_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    unit lv_kerrigan;
    unit lv_targetUnit;
    point lv_lastKnownLocation;
    unit lv_ultralisk;
    int lv_ownerPlayer;
    point lv_positionOfUnit;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_kerrigan = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_lastKnownLocation = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget));

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, "KerriganUltralisk", 0, lv_triggeringPlayer, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_kerrigan), 1.0, UnitGetPosition(lv_targetUnit)), UnitGetPosition(lv_targetUnit));
    lv_ultralisk = UnitLastCreated();
    libGDHL_gf_SiegeUpdateAbilityPowerOnSummonedUnits(lv_ultralisk);
    if ((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "KerriganSummonUltraliskMasteryCarryBehavior") == true)) {
        libNtve_gf_SendActorMessageToUnit(lv_ultralisk, "SetTintColor 170,252,120");
    }
    else {
    }
    while ((UnitIsAlive(lv_ultralisk) == true) && (UnitFilterMatch(lv_targetUnit, lv_triggeringPlayer, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) && ((libNtve_gf_UnitIsVisibleToPlayer(lv_targetUnit, lv_triggeringPlayer) == true) || (UnitOrderCount(lv_ultralisk) > 0))) {
        if ((libNtve_gf_UnitIsVisibleToPlayer(lv_targetUnit, lv_triggeringPlayer) == true) && (libAIAI_gf_AIUnitBehindEnemyGateEstimate(UnitGetPosition(lv_ultralisk), lv_triggeringPlayer, lv_targetUnit) == false)) {
            UnitIssueOrder(lv_ultralisk, OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetUnit), c_orderQueueReplace);
            lv_lastKnownLocation = UnitGetPosition(lv_targetUnit);
        }
        else {
            UnitIssueOrder(lv_ultralisk, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(lv_lastKnownLocation, 2.0, UnitGetFacing(lv_ultralisk))), c_orderQueueReplace);
            Wait(1.5, c_timeGame);
        }
        Wait(0.125, c_timeGame);
    }
    if ((UnitIsAlive(lv_ultralisk) == true)) {
        lv_ownerPlayer = UnitGetOwner(lv_ultralisk);
        lv_positionOfUnit = UnitGetPosition(lv_ultralisk);
        libGame_gf_CalculateSpawnedMinionGoalPoints(lv_ownerPlayer, lv_positionOfUnit);
        libAIAI_gf_MinionAIStartMinionAI(lv_ultralisk, libGame_gv_spawnedMinionLane, libGame_gv_spawnedMinionFirstWaypointIndex, false, true, 0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganSicUltralisk_Init () {
    libGDHL_gt_HeroKerriganSicUltralisk = TriggerCreate("libGDHL_gt_HeroKerriganSicUltralisk_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroKerriganSicUltralisk, c_playerAny, "SummonUltraliskPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - L90ETC - Powerslide - Target Check
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroL90ETCPowerslideTargetCheck_Func (bool testConds, bool runActions) {
    int auto0B10A829_ae;
    int auto0B10A829_ai;

    // Variable Declarations
    fixed lv_offset;
    point lv_k;
    point lv_t;
    fixed lv_range;
    int lv_i;
    unit lv_eTC;

    // Variable Initialization
    lv_offset = StringToFixed(CatalogFieldValueGet(c_gameCatalogActor, "L90ETCPowerslideGuide", "Height", c_playerAny));
    lv_k = UnitGetPosition(EventUnit());
    lv_t = EventUnitTargetPoint();
    lv_eTC = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_range = StringToFixed(CatalogFieldValueGet(c_gameCatalogActor, "L90ETCPowerslideGuide", "Height", EventPlayer()));
    lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, lv_range, lv_t);
    Wait(0.1875, c_timeGame);
    auto0B10A829_ae = 14;
    auto0B10A829_ai = 1;
    lv_i = 1;
    for ( ; ( (auto0B10A829_ai >= 0 && lv_i <= auto0B10A829_ae) || (auto0B10A829_ai <= 0 && lv_i >= auto0B10A829_ae) ) ; lv_i += auto0B10A829_ai ) {
        if ((OrderGetTargetType(UnitOrder(EventUnit(), 0)) == c_orderTargetPoint) && (OrderGetTargetPoint(UnitOrder(EventUnit(), 0)) != null) && (DistanceBetweenPoints(UnitGetPosition(lv_eTC), lv_t) < 1)) {
            UnitBehaviorRemove(EventUnit(), "Powerslide", 1);
            break;
        }
        else {
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroL90ETCPowerslideTargetCheck_Init () {
    libGDHL_gt_HeroL90ETCPowerslideTargetCheck = TriggerCreate("libGDHL_gt_HeroL90ETCPowerslideTargetCheck_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroL90ETCPowerslideTargetCheck, null, AbilityCommand("L90ETCPowerslide", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - L90ETC - Stage Dive - Teleport Unit
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroL90ETCStageDiveTeleportUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    libGame_gv_players[lv_player].lv_cameraCameraLockInterrupt = true;
    libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_player, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroL90ETCStageDiveTeleportUnit_Init () {
    libGDHL_gt_HeroL90ETCStageDiveTeleportUnit = TriggerCreate("libGDHL_gt_HeroL90ETCStageDiveTeleportUnit_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroL90ETCStageDiveTeleportUnit, c_playerAny, "StageDiveTeleport");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - L90ETC - Stage Dive - Final Set
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroL90ETCStageDiveFinalSet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    libGame_gv_players[lv_player].lv_cameraCameraLockInterrupt = false;
    libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    UnitSetFacing(libGame_gv_players[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)].lv_heroUnit, 270.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroL90ETCStageDiveFinalSet_Init () {
    libGDHL_gt_HeroL90ETCStageDiveFinalSet = TriggerCreate("libGDHL_gt_HeroL90ETCStageDiveFinalSet_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroL90ETCStageDiveFinalSet, c_playerAny, "StageDiveFinalSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Li Li - Cloud Serpent Summon and Simplified AI
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLiLiCloudSerpentSummonandSimplifiedAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owningPlayer;
    unit lv_owningUnit;
    unit lv_CloudSerpent;
    int lv_currentState;
    int lv_characterLevel;

    // Variable Initialization
    lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_owningPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    lv_owningUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_characterLevel = UnitXPGetCurrentLevel(EventPlayerEffectUsedUnit(c_effectUnitCaster), "HeroDummyVeterancy");
    libNtve_gf_CreateUnitsAtPoint2(1, "CloudSerpent", 0, lv_owningPlayer, PointWithOffsetPolar(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 1.0, libNtve_gf_RandomAngle()));
    lv_CloudSerpent = UnitLastCreated();
    UnitCreateEffectUnit(lv_owningUnit, "LiLiCloudSerpentHostLinkDummy", lv_CloudSerpent);
    UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionBehavior", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    libGame_gf_ArtifactsUpdateSiegeDamageArtifactForUnit(lv_CloudSerpent);
    if ((PlayerHasTalent(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "LiLiMasteryCloudSerpentLightningSerpent") == true)) {
        UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentLightningSerpentBehavior", lv_CloudSerpent, 1);
    }
    else {
    }
    CatalogFieldValueSet(c_gameCatalogBehavior, "CloudSerpentMinionSpeedBoost", "Modification.UnifiedMoveSpeedFactor", lv_owningPlayer, CatalogFieldValueGet(c_gameCatalogBehavior, "Mounted", "Modification.UnifiedMoveSpeedFactor", lv_owningPlayer));
    CatalogFieldValueSet(c_gameCatalogEffect, "CloudSerpentWeaponDamage", "Amount", lv_owningPlayer, CatalogFieldValueGet(c_gameCatalogEffect, "CloudSerpentWeaponDamage", "Amount", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    CatalogFieldValueSet(c_gameCatalogEffect, "LightningSerpentHopDamage", "Amount", lv_owningPlayer, CatalogFieldValueGet(c_gameCatalogEffect, "LightningSerpentHopDamage", "Amount", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    if ((UnitGetType(lv_owningUnit) != "HeroTychus")) {
        CatalogFieldValueSet(c_gameCatalogAbil, "LiLiCloudSerpentAttack", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lv_owningPlayer, "0");
    }
    else {
    }
    while ((UnitIsAlive(lv_CloudSerpent) == true) && (UnitIsAlive(lv_owningUnit) == true)) {
        if (((UnitOrderCount(lv_CloudSerpent) == 0) || (OrderGetAbilityCommand(UnitOrder(lv_CloudSerpent, 0)) != AbilityCommand("LiLiCloudSerpentAttack", 0)))) {
            if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) >= 8.0)) {
                UnitSetPosition(lv_CloudSerpent, PointWithOffsetPolar(UnitGetPosition(lv_owningUnit), 2.0, libNtve_gf_RandomAngle()), false);
                UnitIssueOrder(lv_CloudSerpent, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;
            }
            else {
                if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) >= 4.0) && (lv_currentState != libGDHL_ge_CloudSerpentAIState_Leashing)) {
                    UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_owningUnit), 2.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                    UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionSpeedBoost", lv_CloudSerpent, 1);
                    lv_currentState = libGDHL_ge_CloudSerpentAIState_Leashing;
                }
                else {
                }
            }
            if ((lv_currentState == libGDHL_ge_CloudSerpentAIState_Idle)) {
                if ((UnitOrderCount(lv_owningUnit) == 0)) {
                }
                else {
                    if ((OrderGetAbilityCommand(UnitOrder(lv_owningUnit, 0)) == AbilityCommand("attack", 0))) {
                        if ((UnitIsValid(OrderGetTargetUnit(UnitOrder(lv_owningUnit, 0))) == false)) {
                            if ((OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)) == null)) {
                                UnitCreateEffectUnit(lv_owningUnit, "CloudSerpentCopyOrders", lv_CloudSerpent);
                            }
                            else {
                                if ((DistanceBetweenPoints(OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), UnitGetPosition(lv_CloudSerpent)) > 3.0)) {
                                    UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), 2.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                                    lv_currentState = libGDHL_ge_CloudSerpentAIState_Moving;
                                }
                                else {
                                    libNtve_gf_MakeUnitFacePoint(lv_CloudSerpent, OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), 0.2);
                                }
                            }
                        }
                        else {
                            if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(OrderGetTargetUnit(UnitOrder(lv_owningUnit, 0)))) > 12.0)) {
                                UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(OrderGetTargetUnit(UnitOrder(lv_owningUnit, 0))), 2.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                                lv_currentState = libGDHL_ge_CloudSerpentAIState_Moving;
                            }
                            else {
                            }
                        }
                    }
                    else {
                    }
                    if ((OrderGetAbilityCommand(UnitOrder(lv_owningUnit, 0)) == AbilityCommand("move", 0))) {
                        if ((DistanceBetweenPoints(OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), UnitGetPosition(lv_CloudSerpent)) > 3.0)) {
                            UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), 2.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                            lv_currentState = libGDHL_ge_CloudSerpentAIState_Moving;
                        }
                        else {
                            libNtve_gf_MakeUnitFacePoint(lv_CloudSerpent, OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), 0.2);
                        }
                    }
                    else {
                    }
                }
            }
            else {
            }
            if ((lv_currentState == libGDHL_ge_CloudSerpentAIState_Moving)) {
                if ((UnitOrderCount(lv_CloudSerpent) == 0)) {
                    lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;
                }
                else {
                    if ((UnitOrderCount(lv_owningUnit) == 0)) {
                        if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) <= 3.0)) {
                            UnitIssueOrder(lv_CloudSerpent, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                            lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;
                        }
                        else {
                        }
                    }
                    else {
                        if ((OrderGetAbilityCommand(UnitOrder(lv_owningUnit, 0)) == AbilityCommand("attack", 0))) {
                            if ((OrderGetTargetUnit(UnitOrder(lv_owningUnit, 0)) == null)) {
                                if ((OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)) == null)) {
                                    UnitCreateEffectUnit(lv_owningUnit, "CloudSerpentCopyOrders", lv_CloudSerpent);
                                }
                                else {
                                    if ((DistanceBetweenPoints(OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), OrderGetTargetPoint(UnitOrder(lv_CloudSerpent, 0))) > 3.0)) {
                                        UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), 2.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                                        lv_currentState = libGDHL_ge_CloudSerpentAIState_Moving;
                                    }
                                    else {
                                        libNtve_gf_MakeUnitFacePoint(lv_CloudSerpent, OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), 0.2);
                                    }
                                }
                            }
                            else {
                                if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(OrderGetTargetUnit(UnitOrder(lv_owningUnit, 0)))) > 12.0)) {
                                    UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(OrderGetTargetUnit(UnitOrder(lv_owningUnit, 0))), 2.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                                    lv_currentState = libGDHL_ge_CloudSerpentAIState_Moving;
                                }
                                else {
                                    lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;
                                }
                            }
                        }
                        else {
                        }
                        if ((OrderGetAbilityCommand(UnitOrder(lv_owningUnit, 0)) == AbilityCommand("move", 0))) {
                            if ((DistanceBetweenPoints(OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), OrderGetTargetPoint(UnitOrder(lv_CloudSerpent, 0))) > 3.0)) {
                                UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), 2.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                                lv_currentState = libGDHL_ge_CloudSerpentAIState_Moving;
                            }
                            else {
                                if ((DistanceBetweenPoints(OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), UnitGetPosition(lv_owningUnit)) < DistanceBetweenPoints(OrderGetTargetPoint(UnitOrder(lv_CloudSerpent, 0)), UnitGetPosition(lv_CloudSerpent)))) {
                                    UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionSpeedBoost", lv_CloudSerpent, 1);
                                }
                                else {
                                }
                            }
                        }
                        else {
                        }
                    }
                }
            }
            else {
            }
            if ((lv_currentState == libGDHL_ge_CloudSerpentAIState_Leashing)) {
                if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) <= 3.0)) {
                    UnitIssueOrder(lv_CloudSerpent, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                    lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;
                }
                else {
                    if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) <= 4.0) && (UnitOrderCount(lv_CloudSerpent) == 0)) {
                        if ((UnitOrderCount(lv_owningUnit) == 0)) {
                            lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;
                        }
                        else {
                            UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_owningUnit), 2.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                            UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionSpeedBoost", lv_CloudSerpent, 1);
                            lv_currentState = libGDHL_ge_CloudSerpentAIState_Leashing;
                        }
                    }
                    else {
                        if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) > 4.0) && (UnitOrderCount(lv_CloudSerpent) == 0)) {
                            UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_owningUnit), 2.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                            UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionSpeedBoost", lv_CloudSerpent, 1);
                            lv_currentState = libGDHL_ge_CloudSerpentAIState_Leashing;
                        }
                        else {
                            if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), OrderGetTargetPoint(UnitOrder(lv_CloudSerpent, 0))) <= 1.5) && (DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) > 4.0)) {
                                UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_owningUnit), 2.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                                UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionSpeedBoost", lv_CloudSerpent, 1);
                                lv_currentState = libGDHL_ge_CloudSerpentAIState_Leashing;
                            }
                            else {
                            }
                        }
                    }
                }
            }
            else {
            }
        }
        else {
        }
        Wait(0.0625, c_timeGame);
    }
    if ((UnitIsAlive(lv_owningUnit) != true)) {
        UnitCreateEffectUnit(lv_CloudSerpent, "TimedLifeFate", lv_CloudSerpent);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLiLiCloudSerpentSummonandSimplifiedAI_Init () {
    libGDHL_gt_HeroLiLiCloudSerpentSummonandSimplifiedAI = TriggerCreate("libGDHL_gt_HeroLiLiCloudSerpentSummonandSimplifiedAI_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroLiLiCloudSerpentSummonandSimplifiedAI, c_playerAny, "CloudSerpentApplyBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Li Li - Cloud Serpent Attack Mimic
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLiLiCloudSerpentAttackMimic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_OwnerUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "CloudSerpentOwnerBehavior") == true) || (UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "LiLiCloudSerpentAndOneForMeOwnerBehavior") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_OwnerUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) != "DocksTreasureChest")) {
        UnitGroupLoopBegin(UnitGroup("CloudSerpent", UnitGetOwner(lv_OwnerUnit), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libCore_gf_IsAbilityOnCooldown(UnitGroupLoopCurrent(), "LiLiCloudSerpentAttack") == false)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("LiLiCloudSerpentAttack", 0), EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_orderQueueReplace);
            }
            else {
            }
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLiLiCloudSerpentAttackMimic_Init () {
    libGDHL_gt_HeroLiLiCloudSerpentAttackMimic = TriggerCreate("libGDHL_gt_HeroLiLiCloudSerpentAttackMimic_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroLiLiCloudSerpentAttackMimic, c_playerAny, "UniversalWeaponLaunchSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Malfurion - Twilight Dream - Silence Target
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMalfurionTwilightDreamSilenceTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_targetUnit;
    int lv_owner;
    fixed lv_cooldownTime;
    fixed lv_modifiedCooldownTime;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetUnit = EventUnit();
    lv_owner = UnitGetOwner(lv_targetUnit);
    libUIUI_gf_UILowHPSetSoundChannelsForSilence(lv_owner);
    SoundPlayForPlayer(SoundLink("Malfurion_TwilightDream_Loop", -1), UnitGetOwner(lv_targetUnit), libCore_gv_playerGroupFromPlayer[UnitGetOwner(lv_targetUnit)], 100.0, 0.0);
    Wait(5.0, c_timeGame);
    SoundStop(SoundLastPlayed(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMalfurionTwilightDreamSilenceTarget_Init () {
    libGDHL_gt_HeroMalfurionTwilightDreamSilenceTarget = TriggerCreate("libGDHL_gt_HeroMalfurionTwilightDreamSilenceTarget_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMalfurionTwilightDreamSilenceTarget, null, "TwilightDreamSilence", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMalfurionTwilightDreamSilenceTarget, null, "TwilightDreamSilence", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Malfurion - Twilight Dream - Silence End
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMalfurionTwilightDreamSilenceEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_targetUnit;
    int lv_owner;
    fixed lv_cooldownTime;
    fixed lv_modifiedCooldownTime;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetUnit = EventUnit();
    lv_owner = UnitGetOwner(lv_targetUnit);
    libUIUI_gf_UILowHPSetSoundChannelsForNormal(lv_owner);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMalfurionTwilightDreamSilenceEnd_Init () {
    libGDHL_gt_HeroMalfurionTwilightDreamSilenceEnd = TriggerCreate("libGDHL_gt_HeroMalfurionTwilightDreamSilenceEnd_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMalfurionTwilightDreamSilenceEnd, null, "TwilightDreamSilence", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Malfurion - Entangling Roots Treant Spawned
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMalfurionEntanglingRootsTreantSpawned_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(EventUnit()) == true)) {
        UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("attack", 1), UnitGetPosition(EventUnit())), c_orderQueueReplace);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMalfurionEntanglingRootsTreantSpawned_Init () {
    libGDHL_gt_HeroMalfurionEntanglingRootsTreantSpawned = TriggerCreate("libGDHL_gt_HeroMalfurionEntanglingRootsTreantSpawned_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMalfurionEntanglingRootsTreantSpawned, null, "EntanglingRootsRelicTreantTimedLife", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Muradin - Dwarf Toss
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMuradinDwarfToss_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_abilityRange;
    point lv_playerTargetPoint;
    fixed lv_distanceFromMuradinToPlayerTargetPoint;
    fixed lv_muradinRadius;
    point lv_actualTargetPoint;
    fixed lv_modifiedDistance;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_muradinRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster))), "Radius", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    lv_abilityRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogActor, "MuradinDwarfTossRangeSplat", "Scale", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster))) + lv_muradinRadius);
    lv_playerTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_distanceFromMuradinToPlayerTargetPoint = DistanceBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_playerTargetPoint);
    if ((lv_distanceFromMuradinToPlayerTargetPoint > lv_abilityRange)) {
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_abilityRange, lv_playerTargetPoint);
    }
    else {
        lv_actualTargetPoint = lv_playerTargetPoint;
    }
    lv_modifiedDistance = (lv_abilityRange + 0.125);
    while ((PointPathingPassable(lv_actualTargetPoint) == false)) {
        lv_modifiedDistance -= 0.125;
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_modifiedDistance, lv_playerTargetPoint);
        if ((DistanceBetweenPoints(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_actualTargetPoint) <= (lv_muradinRadius + 0.125))) {
            libNtve_gf_UIErrorMessage(libCore_gv_playerGroupFromPlayer[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)], StringExternal("Param/Value/lib_GDHL_37DA855A"), SoundLink("UI_GenericError", -1));
            UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "DwarfToss", 1);
            UnitAbilityReset(EventPlayerEffectUsedUnit(c_effectUnitCaster), AbilityCommand("MuradinDwarfToss", 0), c_spendLocationAll);
            UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitPropEnergy, (UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitPropEnergy, c_unitPropCurrent) + StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "MuradinDwarfToss", "Cost[0].Vital[2]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)))));
            return true;
        }
        else {
        }
    }
    if ((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true)) {
        UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "DwarfTossLaunchMissile", lv_actualTargetPoint);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMuradinDwarfToss_Init () {
    libGDHL_gt_HeroMuradinDwarfToss = TriggerCreate("libGDHL_gt_HeroMuradinDwarfToss_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMuradinDwarfToss, c_playerAny, "DwarfTossInitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Muradin - Haymaker
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMuradinHaymaker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    unit lv_muradin;
    fixed lv_abilityRange;
    fixed lv_distanceFromMuradinToPlayerTargetPoint;
    fixed lv_muradinRadius;
    point lv_targetPoint;
    point lv_actualTargetPoint;
    fixed lv_modifiedDistance;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_muradin = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_abilityRange = libGDHL_gv_heroMuradinHaymakerLaunchDistance;
    lv_targetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_targetUnit), lv_abilityRange, UnitGetPosition(lv_muradin));
    lv_modifiedDistance = (lv_abilityRange + 0.0);
    lv_actualTargetPoint = lv_targetPoint;
    while ((PointPathingPassable(lv_actualTargetPoint) == false)) {
        lv_modifiedDistance += 0.125;
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_targetUnit), lv_modifiedDistance, UnitGetPosition(lv_muradin));
        if ((lv_modifiedDistance >= libGDHL_gv_heroMuradinHaymakerCutoffDistance)) {
            return true;
        }
        else {
        }
    }
    if ((UnitIsAlive(lv_targetUnit) == true)) {
        if ((UnitHasBehavior2(lv_muradin, "HaymakerGrandSlamCarryBehavior") == true)) {
            UnitCreateEffectPoint(lv_targetUnit, "HaymakerGrandSlamLaunchTarget", lv_actualTargetPoint);
        }
        else {
            UnitCreateEffectPoint(lv_targetUnit, "HaymakerLaunchTarget", lv_actualTargetPoint);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMuradinHaymaker_Init () {
    libGDHL_gt_HeroMuradinHaymaker = TriggerCreate("libGDHL_gt_HeroMuradinHaymaker_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMuradinHaymaker, c_playerAny, "HaymakerAttackSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Muradin - Haymaker Face Caster
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMuradinHaymakerFaceCaster_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    unit lv_muradin;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_muradin = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    libNtve_gf_MakeUnitFacePoint(lv_targetUnit, UnitGetPosition(lv_muradin), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMuradinHaymakerFaceCaster_Init () {
    libGDHL_gt_HeroMuradinHaymakerFaceCaster = TriggerCreate("libGDHL_gt_HeroMuradinHaymakerFaceCaster_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMuradinHaymakerFaceCaster, c_playerAny, "HaymakerInitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Muradin - Avatar Apply Health Buff
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMuradinAvatarApplyHealthBuff_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogBehavior, "MuradinAvatarHealthBuff", "Modification.VitalMaxArray[" + IntToString(0) + "]", UnitGetOwner(EventUnit()), CatalogFieldValueGet(c_gameCatalogBehavior, "MuradinAvatar", "Modification.VitalMaxArray[" + IntToString(0) + "]", UnitGetOwner(EventUnit())));
    UnitCreateEffectUnit(EventUnit(), "AvatarApplyBehavior", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMuradinAvatarApplyHealthBuff_Init () {
    libGDHL_gt_HeroMuradinAvatarApplyHealthBuff = TriggerCreate("libGDHL_gt_HeroMuradinAvatarApplyHealthBuff_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroMuradinAvatarApplyHealthBuff, null, AbilityCommand("MuradinAvatar", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Muradin - Perfect Storm Mastery Effect
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMuradinPerfectStormMasteryEffect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_muradin;
    int lv_PerfectStormBonus;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_muradin = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_PerfectStormBonus = PlayerScoreValueGetAsInt(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "StormhammerPerfectStormBonusDamage");
    lv_PerfectStormBonus += 5;
    CatalogFieldValueModify(c_gameCatalogEffect, "StormBoltDamage", "Amount", UnitGetOwner(lv_muradin), "5", c_upgradeOperationAdd);
    PlayerScoreValueSetFromInt(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "StormhammerPerfectStormBonusDamage", lv_PerfectStormBonus);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMuradinPerfectStormMasteryEffect_Init () {
    libGDHL_gt_HeroMuradinPerfectStormMasteryEffect = TriggerCreate("libGDHL_gt_HeroMuradinPerfectStormMasteryEffect_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMuradinPerfectStormMasteryEffect, c_playerAny, "StormBoltPerfectStormMasteryDummyEffect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Triple Tap Ability Used
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaTripleTapAbilityUsed_Func (bool testConds, bool runActions) {
    unitgroup auto8C6CDF13_g;
    int auto8C6CDF13_u;

    // Variable Declarations
    unit lv_targetUnit;
    unit lv_casterUnit;
    unit lv_itUnit;
    int lv_novaPlayer;
    point lv_currentPositionOfTarget;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterUnit = EventUnit();
    lv_targetUnit = EventUnitTargetUnit();
    lv_novaPlayer = UnitGetOwner(lv_casterUnit);
    libGDHL_gv_novaTripleTapTarget[lv_novaPlayer] = lv_targetUnit;
    libGDHL_gv_novaTripleTapTargetLastPoint[lv_novaPlayer] = UnitGetPosition(lv_targetUnit);
    libGDHL_gv_novaTripleTappingBoolean[lv_novaPlayer] = true;
    while ((libGDHL_gv_novaTripleTappingBoolean[lv_novaPlayer] == true) && (UnitIsAlive(lv_casterUnit) == true)) {
        lv_currentPositionOfTarget = UnitGetPosition(libGDHL_gv_novaTripleTapTarget[lv_novaPlayer]);
        if ((DistanceBetweenPoints(lv_currentPositionOfTarget, libGDHL_gv_novaTripleTapTargetLastPoint[lv_novaPlayer]) > libGDHL_gv_novaTripleTapDestroyDistanceThreshold)) {
            UnitBehaviorAdd(libGDHL_gv_novaTripleTapTarget[lv_novaPlayer], "TripleTapDummyRemove", lv_casterUnit, 1);
        }
        else {
            if ((DistanceBetweenPoints(lv_currentPositionOfTarget, libGDHL_gv_novaTripleTapTargetLastPoint[lv_novaPlayer]) > libGDHL_gv_novaTripleTapRedirectDistanceThreshold)) {
                auto8C6CDF13_g = libGDHL_gv_novaTripleTapMissileGroup[lv_novaPlayer];
                auto8C6CDF13_u = 1;
                for ( ; auto8C6CDF13_u <= UnitGroupCount(auto8C6CDF13_g, c_unitCountAll) ; auto8C6CDF13_u += BoolToInt(lv_itUnit == UnitGroupUnit(auto8C6CDF13_g, auto8C6CDF13_u)) ) {
                    lv_itUnit = UnitGroupUnit(auto8C6CDF13_g, auto8C6CDF13_u);
                    UnitCreateEffectPoint(lv_itUnit, "NovaTripleTapMissileRedirect", libNtve_gf_PointWithZOffset(libGDHL_gv_novaTripleTapTargetLastPoint[lv_novaPlayer], 1.5));
                }
            }
            else {
            }
        }
        libGDHL_gv_novaTripleTapTargetLastPoint[lv_novaPlayer] = lv_currentPositionOfTarget;
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaTripleTapAbilityUsed_Init () {
    libGDHL_gt_HeroNovaTripleTapAbilityUsed = TriggerCreate("libGDHL_gt_HeroNovaTripleTapAbilityUsed_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroNovaTripleTapAbilityUsed, null, AbilityCommand("NovaTripleTap", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Triple Tap Missiles
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaTripleTapMissiles_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    UnitGroupAdd(libGDHL_gv_novaTripleTapMissileGroup[lv_player], EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaTripleTapMissiles_Init () {
    libGDHL_gt_HeroNovaTripleTapMissiles = TriggerCreate("libGDHL_gt_HeroNovaTripleTapMissiles_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroNovaTripleTapMissiles, null, "TripleTapMissileScan", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Triple Tap Ability Completes
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaTripleTapAbilityCompletes_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_novaTripleTappingBoolean[EventPlayer()] = false;
    UnitGroupClear(libGDHL_gv_novaTripleTapMissileGroup[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaTripleTapAbilityCompletes_Init () {
    libGDHL_gt_HeroNovaTripleTapAbilityCompletes = TriggerCreate("libGDHL_gt_HeroNovaTripleTapAbilityCompletes_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroNovaTripleTapAbilityCompletes, c_playerAny, "TripleTapRemoveRevealPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Triple Tap Caster Dies
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaTripleTapCasterDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "HeroNova") && (EventPlayer() <= libCore_gv_bALMaxPlayers)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_novaTripleTappingBoolean[EventPlayer()] = false;
    UnitGroupClear(libGDHL_gv_novaTripleTapMissileGroup[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaTripleTapCasterDies_Init () {
    libGDHL_gt_HeroNovaTripleTapCasterDies = TriggerCreate("libGDHL_gt_HeroNovaTripleTapCasterDies_Func");
    TriggerAddEventUnitDied(libGDHL_gt_HeroNovaTripleTapCasterDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Cloak Finished
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaCloakFinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_cooldown;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cooldown = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "NovaCloak", "Cost[0].Cooldown.TimeUse", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    libNtve_gf_UnitRemoveCooldown(EventPlayerEffectUsedUnit(c_effectUnitCaster), "Abil/NovaCloak");
    UnitAddCooldown(EventPlayerEffectUsedUnit(c_effectUnitCaster), "Abil/NovaCloak", lv_cooldown);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaCloakFinished_Init () {
    libGDHL_gt_HeroNovaCloakFinished = TriggerCreate("libGDHL_gt_HeroNovaCloakFinished_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroNovaCloakFinished, c_playerAny, "HoldFireRemoveSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Holo Clone Spawned
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaHoloCloneSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_createdUnit;
    int lv_ownerOfCreatedUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_createdUnit = EventUnitCreatedUnit();
    if ((UnitGetType(lv_createdUnit) != "NovaHoloClone") && (UnitGetType(lv_createdUnit) != "NovaHoloCloneCloaked")) {
        return true;
    }
    else {
    }
    lv_ownerOfCreatedUnit = UnitGetOwner(lv_createdUnit);
    if ((UnitGetType(libGame_gv_players[lv_ownerOfCreatedUnit].lv_heroUnit) == "HeroAbathur")) {
        UnitBehaviorAdd(lv_createdUnit, "UltimateEvolutionAlternateHero", lv_createdUnit, 1);
    }
    else {
    }
    UnitSetFacing(lv_createdUnit, UnitGetFacing(libGame_gv_players[lv_ownerOfCreatedUnit].lv_heroUnit), 0.0);
    UnitSetPropertyFixed(lv_createdUnit, c_unitPropXP, UnitXPTotal(libGame_gv_players[lv_ownerOfCreatedUnit].lv_heroUnit));
    UnitSetPropertyFixed(lv_createdUnit, c_unitPropLifeMax, UnitGetPropertyFixed(libGame_gv_players[lv_ownerOfCreatedUnit].lv_heroUnit, c_unitPropLifeMax, c_unitPropCurrent));
    UnitSetPropertyFixed(lv_createdUnit, c_unitPropLife, UnitGetPropertyFixed(libGame_gv_players[lv_ownerOfCreatedUnit].lv_heroUnit, c_unitPropLife, c_unitPropCurrent));
    UnitSetPropertyFixed(lv_createdUnit, c_unitPropEnergyMax, UnitGetPropertyFixed(libGame_gv_players[lv_ownerOfCreatedUnit].lv_heroUnit, c_unitPropEnergyMax, c_unitPropCurrent));
    UnitSetPropertyFixed(lv_createdUnit, c_unitPropEnergy, UnitGetPropertyFixed(libGame_gv_players[lv_ownerOfCreatedUnit].lv_heroUnit, c_unitPropEnergy, c_unitPropCurrent));
    UnitIssueOrder(lv_createdUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_createdUnit)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaHoloCloneSpawned_Init () {
    libGDHL_gt_HeroNovaHoloCloneSpawned = TriggerCreate("libGDHL_gt_HeroNovaHoloCloneSpawned_Func");
    TriggerAddEventUnitCreated(libGDHL_gt_HeroNovaHoloCloneSpawned, null, "NovaHoloDecoy", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Holo Clone Spawn Match Map Mechanics
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaHoloCloneSpawnMatchMapMechanics_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("NovaHoloClone", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "MapMechanicStack", EventPlayerEffectUsedUnit(c_effectUnitCaster), UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "MapMechanicStack"));
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("NovaHoloCloneCloaked", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "MapMechanicStack", EventPlayerEffectUsedUnit(c_effectUnitCaster), UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "MapMechanicStack"));
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaHoloCloneSpawnMatchMapMechanics_Init () {
    libGDHL_gt_HeroNovaHoloCloneSpawnMatchMapMechanics = TriggerCreate("libGDHL_gt_HeroNovaHoloCloneSpawnMatchMapMechanics_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroNovaHoloCloneSpawnMatchMapMechanics, c_playerAny, "HoloCloneSpawnSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Holo Decoy - Issue Order Ability
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaHoloDecoyIssueOrderAbility_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    unit lv_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsedUnit(c_effectUnitTarget) == null)) {
        UnitGroupLoopBegin(UnitGroup("NovaHoloClone", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)), c_orderQueueReplace);
        }
        UnitGroupLoopEnd();
    }
    else {
        UnitGroupLoopBegin(UnitGroup("NovaHoloClone", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_orderQueueReplace);
        }
        UnitGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaHoloDecoyIssueOrderAbility_Init () {
    libGDHL_gt_HeroNovaHoloDecoyIssueOrderAbility = TriggerCreate("libGDHL_gt_HeroNovaHoloDecoyIssueOrderAbility_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroNovaHoloDecoyIssueOrderAbility, c_playerAny, "HoloDecoyIssueOrder");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Holo Decoy Double Fake Apply Issue Order
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaHoloDecoyDoubleFakeApplyIssueOrder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "NovaHoloDecoyDoubleFakePersistent", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaHoloDecoyDoubleFakeApplyIssueOrder_Init () {
    libGDHL_gt_HeroNovaHoloDecoyDoubleFakeApplyIssueOrder = TriggerCreate("libGDHL_gt_HeroNovaHoloDecoyDoubleFakeApplyIssueOrder_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroNovaHoloDecoyDoubleFakeApplyIssueOrder, null, "NovaHoloDecoyDoubleFakeTimedLife", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Holo Decoy Expires
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaHoloDecoyExpires_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(libGame_gv_players[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)].lv_heroUnit, "HoloDecoyActive", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaHoloDecoyExpires_Init () {
    libGDHL_gt_HeroNovaHoloDecoyExpires = TriggerCreate("libGDHL_gt_HeroNovaHoloDecoyExpires_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroNovaHoloDecoyExpires, c_playerAny, "HoloCloneExpireSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Holo Decoy Overdrive Deactivate
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaHoloDecoyOverdriveDeactivate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroNova"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "NovaHoloCloneRemoveOverdriveSearch", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaHoloDecoyOverdriveDeactivate_Init () {
    libGDHL_gt_HeroNovaHoloDecoyOverdriveDeactivate = TriggerCreate("libGDHL_gt_HeroNovaHoloDecoyOverdriveDeactivate_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroNovaHoloDecoyOverdriveDeactivate, null, "BucketOverdrive", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Pinning Shot Covert Ops Modify Cost
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaPinningShotCovertOpsModifyCost_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((CatalogFieldValueGetAsInt(c_gameCatalogAbil, "NovaPinningShot", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)) >= 5)) {
        CatalogFieldValueModify(c_gameCatalogAbil, "NovaPinningShot", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "-5", c_upgradeOperationAdd);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaPinningShotCovertOpsModifyCost_Init () {
    libGDHL_gt_HeroNovaPinningShotCovertOpsModifyCost = TriggerCreate("libGDHL_gt_HeroNovaPinningShotCovertOpsModifyCost_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroNovaPinningShotCovertOpsModifyCost, c_playerAny, "NovaPinningShotCovertOpsDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Pinning Shot Covert Ops Revert Cost
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaPinningShotCovertOpsRevertCost_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(EventPlayer(), "NovaMasteryCovertOpsPinningShot") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogAbil, "NovaPinningShot", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", EventPlayer(), "65");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaPinningShotCovertOpsRevertCost_Init () {
    libGDHL_gt_HeroNovaPinningShotCovertOpsRevertCost = TriggerCreate("libGDHL_gt_HeroNovaPinningShotCovertOpsRevertCost_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroNovaPinningShotCovertOpsRevertCost, null, AbilityCommand("NovaPinningShot", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Anti-Armor Shells Attack Cooldown
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaAntiArmorShellsAttackCooldown_Func (bool testConds, bool runActions) {
    fixed auto5EA1B378_at;

    // Actions
    if (!runActions) {
        return true;
    }

    auto5EA1B378_at = 0;
    while (!((UnitWeaponPeriodRemaining(EventUnit(), 2) == 0.0)) && auto5EA1B378_at <= 3.0) {
        Wait(0.0625, c_timeGame);
        auto5EA1B378_at = auto5EA1B378_at + 0.0625;
    }
    UnitBehaviorRemove(EventUnit(), "NovaAntiArmorShellsWeaponSuppression", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaAntiArmorShellsAttackCooldown_Init () {
    libGDHL_gt_HeroNovaAntiArmorShellsAttackCooldown = TriggerCreate("libGDHL_gt_HeroNovaAntiArmorShellsAttackCooldown_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroNovaAntiArmorShellsAttackCooldown, null, "NovaAntiArmorShellsWeaponSuppression", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Raynor - Adrenaline Rush ActivatedRush Modify Cooldown
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRaynorAdrenalineRushActivatedRushModifyCooldown_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RaynorAdrenalineRushActivatedRushCarryBehavior") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitModifyCooldown(EventPlayerEffectUsedUnit(c_effectUnitCaster), "Abil/RaynorAdrenalineRush", 15.0, c_cooldownOperationAdd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRaynorAdrenalineRushActivatedRushModifyCooldown_Init () {
    libGDHL_gt_HeroRaynorAdrenalineRushActivatedRushModifyCooldown = TriggerCreate("libGDHL_gt_HeroRaynorAdrenalineRushActivatedRushModifyCooldown_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRaynorAdrenalineRushActivatedRushModifyCooldown, c_playerAny, "RaynorAdrenalineRushIssueCastOrder");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Raynor - Lead From The Front (Special Case Heroes)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRaynorLeadFromTheFrontSpecialCaseHeroes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_raynor;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventUnit(), "RaynorLeadFromTheFrontTargetHero") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_raynor = UnitBehaviorEffectUnit(EventUnit(), "RaynorLeadFromTheFrontTargetHero", c_effectUnitCaster, 0);
    UnitModifyCooldown(lv_raynor, "Abil/RaynorAdrenalineRush", -10.0, c_cooldownOperationAdd);
    UnitModifyCooldown(lv_raynor, "Abil/RaynorPenetratingRound", -10.0, c_cooldownOperationAdd);
    UnitModifyCooldown(lv_raynor, "Abil/RaynorInspire", -10.0, c_cooldownOperationAdd);
    UnitModifyCooldown(lv_raynor, "Abil/RaynorHyperion", -10.0, c_cooldownOperationAdd);
    UnitModifyCooldown(lv_raynor, "Abil/RaynorRaynorsRaiders", -10.0, c_cooldownOperationAdd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRaynorLeadFromTheFrontSpecialCaseHeroes_Init () {
    libGDHL_gt_HeroRaynorLeadFromTheFrontSpecialCaseHeroes = TriggerCreate("libGDHL_gt_HeroRaynorLeadFromTheFrontSpecialCaseHeroes_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRaynorLeadFromTheFrontSpecialCaseHeroes, null, "UtherEternalDevotionRezDelay", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRaynorLeadFromTheFrontSpecialCaseHeroes, null, "TyraelArchangelsWrathDeathActiveBuff", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Raynor - Lead From The Front [Combat Style] (Special Case Heroes)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRaynorLeadFromTheFrontCombatStyleSpecialCaseHeroes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_raynor;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventUnit(), "RaynorLeadFromTheFrontCombatStyleTargetHero") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_raynor = UnitBehaviorEffectUnit(EventUnit(), "RaynorLeadFromTheFrontCombatStyleTargetHero", c_effectUnitCaster, 0);
    UnitModifyCooldown(lv_raynor, "Abil/RaynorAdrenalineRush", -20.0, c_cooldownOperationAdd);
    UnitModifyCooldown(lv_raynor, "Abil/RaynorPenetratingRound", -20.0, c_cooldownOperationAdd);
    UnitModifyCooldown(lv_raynor, "Abil/RaynorInspire", -20.0, c_cooldownOperationAdd);
    UnitModifyCooldown(lv_raynor, "Abil/RaynorHyperion", -20.0, c_cooldownOperationAdd);
    UnitModifyCooldown(lv_raynor, "Abil/RaynorRaynorsRaiders", -20.0, c_cooldownOperationAdd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRaynorLeadFromTheFrontCombatStyleSpecialCaseHeroes_Init () {
    libGDHL_gt_HeroRaynorLeadFromTheFrontCombatStyleSpecialCaseHeroes = TriggerCreate("libGDHL_gt_HeroRaynorLeadFromTheFrontCombatStyleSpecialCaseHeroes_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRaynorLeadFromTheFrontCombatStyleSpecialCaseHeroes, null, "UtherEternalDevotionRezDelay", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRaynorLeadFromTheFrontCombatStyleSpecialCaseHeroes, null, "TyraelArchangelsWrathDeathActiveBuff", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Raynor - Raynor's Banshee Fly In
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRaynorRaynorsBansheeFlyIn_Func (bool testConds, bool runActions) {
    int autoB4A312FF_ae;
    int autoB4A312FF_ai;

    // Variable Declarations
    int lv_i;
    int lv_player;
    unit lv_banshee;
    unitgroup lv_bansheeGroup;
    point lv_dropPoint;
    int lv_increment;

    // Variable Initialization
    lv_bansheeGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_dropPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    autoB4A312FF_ae = 2;
    autoB4A312FF_ai = 1;
    lv_i = 1;
    for ( ; ( (autoB4A312FF_ai >= 0 && lv_i <= autoB4A312FF_ae) || (autoB4A312FF_ai <= 0 && lv_i >= autoB4A312FF_ae) ) ; lv_i += autoB4A312FF_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, "RaynorRaynorsBanshee", 0, lv_player, libNtve_gf_PointOffsetTowardsPoint(lv_dropPoint, 10.0, libGame_gv_players[EventPlayer()].lv_spawnPoint));
        libGame_gf_ArtifactsUpdateSiegeDamageArtifactForUnit(UnitLastCreated());
        if ((UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RaynorQuickFingers") == 1)) {
            UnitBehaviorAdd(UnitLastCreated(), "RaynorQuickFingers", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
        }
        else {
        }
        if ((lv_i == 1)) {
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(lv_dropPoint, 4.0, 90.0)), c_orderQueueReplace);
            UnitBehaviorAdd(UnitLastCreated(), "BansheeOffsetBehavior", UnitLastCreated(), 1);
        }
        else {
            UnitIssueOrder(UnitLastCreated(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(lv_dropPoint, 4.0, -90.0)), c_orderQueueReplace);
        }
    }
    Wait(0.5, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRaynorRaynorsBansheeFlyIn_Init () {
    libGDHL_gt_HeroRaynorRaynorsBansheeFlyIn = TriggerCreate("libGDHL_gt_HeroRaynorRaynorsBansheeFlyIn_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRaynorRaynorsBansheeFlyIn, c_playerAny, "RaynorBansheeApplyLeadershipBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Raynor - Raynor's Banshee Move Behavior 3
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRaynorRaynorsBansheeMoveBehavior3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    bool lv_isAttacking;
    unit lv_targetUnit;
    unit lv_banshee;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitBehaviorCount(EventUnit(), "RaynorRaynorsBansheeLeadershipBehavior") == 1) && (UnitGetType(EventUnit()) == "HeroRaynor") && (libGDHL_gv_heroRaynorRaynorsBansheeIsAttacking[UnitGetOwner(EventUnit())] == false)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("RaynorRaynorsBanshee", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitBehaviorCount(UnitGroupLoopCurrent(), "RaynorRaynorsBansheeFlyIn") == 1) && (UnitBehaviorCount(UnitGroupLoopCurrent(), "RaynorRaynorsBansheeAscend") == 1)) {
            return true;
        }
        else {
            if ((UnitIsAlive(EventUnit()) == false)) {
                UnitBehaviorAdd(lv_banshee, "RaynorRaynorsBansheeAscend", EventUnit(), 1);
                return true;
            }
            else {
                if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "BansheeOffsetBehavior") == true)) {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(EventUnitTargetPoint(), 4.0, 90.0)), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(EventUnitTargetPoint(), 4.0, -90.0)), c_orderQueueReplace);
                }
            }
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRaynorRaynorsBansheeMoveBehavior3_Init () {
    libGDHL_gt_HeroRaynorRaynorsBansheeMoveBehavior3 = TriggerCreate("libGDHL_gt_HeroRaynorRaynorsBansheeMoveBehavior3_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroRaynorRaynorsBansheeMoveBehavior3, null, AbilityCommand("move", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroRaynorRaynorsBansheeMoveBehavior3, null, AbilityCommand("move", 3), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Raynor - Raynor's Banshee - Update Orders On Attack
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRaynorRaynorsBansheeUpdateOrdersOnAttack_Func (bool testConds, bool runActions) {
    fixed auto7BE44625_at;

    // Variable Declarations
    int lv_raynorPlayer;
    int lv_targetPlayer;

    // Variable Initialization
    lv_raynorPlayer = UnitGetOwner(EventUnit());
    lv_targetPlayer = UnitGetOwner(EventUnitTargetUnit());

    // Conditions
    if (testConds) {
        if (!(((UnitBehaviorCount(EventUnit(), "RaynorRaynorsBansheeLeadershipBehavior") == 1) && (UnitGetType(EventUnit()) == "HeroRaynor")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("RaynorRaynorsBanshee", lv_raynorPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitBehaviorCount(UnitGroupLoopCurrent(), "RaynorRaynorsBansheeFlyIn") == 1) && (UnitBehaviorCount(UnitGroupLoopCurrent(), "RaynorRaynorsBansheeAscend") == 1)) {
            return true;
        }
        else {
            if ((UnitGetType(EventUnitTargetUnit()) != "DocksTreasureChest")) {
                UnitCreateEffectUnit(EventUnit(), "RaynorBansheeCopyOrders", UnitGroupLoopCurrent());
                libGDHL_gv_heroRaynorRaynorsBansheeIsAttacking[lv_raynorPlayer] = true;
            }
            else {
            }
        }
    }
    UnitGroupLoopEnd();
    auto7BE44625_at = 0;
    while (!(((UnitIsAlive(EventUnitTargetUnit()) == false) || (libNtve_gf_UnitIsVisibleToPlayer(EventUnitTargetUnit(), lv_raynorPlayer) == false))) && auto7BE44625_at <= 60.0) {
        Wait(0.25, c_timeGame);
        auto7BE44625_at = auto7BE44625_at + 0.25;
    }
    libGDHL_gv_heroRaynorRaynorsBansheeIsAttacking[lv_raynorPlayer] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRaynorRaynorsBansheeUpdateOrdersOnAttack_Init () {
    libGDHL_gt_HeroRaynorRaynorsBansheeUpdateOrdersOnAttack = TriggerCreate("libGDHL_gt_HeroRaynorRaynorsBansheeUpdateOrdersOnAttack_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroRaynorRaynorsBansheeUpdateOrdersOnAttack, null, AbilityCommand("attack", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Raynor - Raynor's Banshee - Update Orders On Attack 3
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRaynorRaynorsBansheeUpdateOrdersOnAttack3_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_OwnerUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RaynorRaynorsBansheeLeadershipBehavior") == 1))) {
            return false;
        }

        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == "HeroRaynor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_OwnerUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    UnitGroupLoopBegin(UnitGroup("RaynorRaynorsBanshee", UnitGetOwner(lv_OwnerUnit), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitBehaviorCount(UnitGroupLoopCurrent(), "RaynorRaynorsBansheeFlyIn") == 1) && (UnitBehaviorCount(UnitGroupLoopCurrent(), "RaynorRaynorsBansheeAscend") == 1)) {
            return true;
        }
        else {
            if ((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) != "DocksTreasureChest")) {
                UnitCreateEffectUnit(lv_OwnerUnit, "RaynorBansheeCopyOrders", UnitGroupLoopCurrent());
                libGDHL_gv_heroRaynorRaynorsBansheeIsAttacking[UnitGetOwner(lv_OwnerUnit)] = true;
            }
            else {
            }
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRaynorRaynorsBansheeUpdateOrdersOnAttack3_Init () {
    libGDHL_gt_HeroRaynorRaynorsBansheeUpdateOrdersOnAttack3 = TriggerCreate("libGDHL_gt_HeroRaynorRaynorsBansheeUpdateOrdersOnAttack3_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRaynorRaynorsBansheeUpdateOrdersOnAttack3, c_playerAny, "UniversalWeaponLaunchSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Raynor - Raynor's Banshee Fly Out
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRaynorRaynorsBansheeFlyOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_flyAway;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_flyAway = UnitGetPosition(EventUnit());
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(lv_flyAway, 20.0, libGame_gv_players[EventPlayer()].lv_spawnPoint)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRaynorRaynorsBansheeFlyOut_Init () {
    libGDHL_gt_HeroRaynorRaynorsBansheeFlyOut = TriggerCreate("libGDHL_gt_HeroRaynorRaynorsBansheeFlyOut_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRaynorRaynorsBansheeFlyOut, null, "RaynorRaynorsBansheeAscend", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Raynor - Lead From The Front Hyperion/Banshee Kills
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRaynorLeadFromTheFrontHyperionBansheeKills_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == "RaynorHyperionMissile") || (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == "RaynorRaynorsBanshee")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_heroUnit, EventPlayerEffectUsed(), libGame_gv_players[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRaynorLeadFromTheFrontHyperionBansheeKills_Init () {
    libGDHL_gt_HeroRaynorLeadFromTheFrontHyperionBansheeKills = TriggerCreate("libGDHL_gt_HeroRaynorLeadFromTheFrontHyperionBansheeKills_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRaynorLeadFromTheFrontHyperionBansheeKills, c_playerAny, "RaynorLeadFromTheFrontTargetHeroModifyCooldown");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRaynorLeadFromTheFrontHyperionBansheeKills, c_playerAny, "RaynorLeadFromTheFrontTargetHeroImprovedModifyCooldown");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRaynorLeadFromTheFrontHyperionBansheeKills, c_playerAny, "RaynorLeadFromTheFrontTargetModifyCooldown");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRaynorLeadFromTheFrontHyperionBansheeKills, c_playerAny, "RaynorLeadFromTheFrontTargetImprovedModifyCooldown");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRaynorLeadFromTheFrontHyperionBansheeKills, c_playerAny, "RaynorLeadFromTheFrontTargetMurkyHeroModifyCooldown");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRaynorLeadFromTheFrontHyperionBansheeKills, c_playerAny, "RaynorLeadFromTheFrontTargetMurkyHeroImprovedModifyCooldown");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - SgtHammer - Complete Hearthstone
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSgtHammerCompleteHearthstone_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroSgtHammer"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "SgtHammerHearthed", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSgtHammerCompleteHearthstone_Init () {
    libGDHL_gt_HeroSgtHammerCompleteHearthstone = TriggerCreate("libGDHL_gt_HeroSgtHammerCompleteHearthstone_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroSgtHammerCompleteHearthstone, null, AbilityCommand("PortBackToBase", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroSgtHammerCompleteHearthstone, null, AbilityCommand("PortBackToBase", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - SgtHammer - Siege Mode Update
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSgtHammerSiegeModeUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != ""))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!(((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate) || (EventUnitBehaviorChange() == c_unitBehaviorChangeDeactivate)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UIUpdateEventPlayerStatsChange(UnitGetOwner(EventUnit()));
    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeDeactivate)) {
        UnitAbilityReset(EventUnit(), AbilityCommand("SgtHammerSiegeMode", 0), c_spendLocationAll);
        UnitAbilitySpendExplicit(EventUnit(), AbilityCommand("SgtHammerSiegeMode", 0), c_spendLocationAll, 0.0, 1.0, 1.0, 1.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSgtHammerSiegeModeUpdate_Init () {
    libGDHL_gt_HeroSgtHammerSiegeModeUpdate = TriggerCreate("libGDHL_gt_HeroSgtHammerSiegeModeUpdate_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroSgtHammerSiegeModeUpdate, null, "SiegeMode", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - SgtHammer - Blunt Force Gun - Prep Start
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSgtHammerBluntForceGunPrepStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_casterPoint;
    point lv_targetPoint;

    // Variable Initialization
    lv_casterPoint = UnitGetPosition(EventUnit());
    lv_targetPoint = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(EventUnit(), "SgtHammerModifyUnitTankTurret", EventUnitTargetPoint());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSgtHammerBluntForceGunPrepStart_Init () {
    libGDHL_gt_HeroSgtHammerBluntForceGunPrepStart = TriggerCreate("libGDHL_gt_HeroSgtHammerBluntForceGunPrepStart_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroSgtHammerBluntForceGunPrepStart, null, AbilityCommand("SgtHammerBluntForceGun", 0), c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - SgtHammer - Blunt Force Gun - Target Calculation
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSgtHammerBluntForceGunTargetCalculation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_casterPoint;
    point lv_targetPoint;
    fixed lv_targetAngle;
    point lv_abilityTargetPoint;
    point lv_originTargetPoint;
    fixed lv_yPointOffset;
    fixed lv_xPointOffsetDistance;
    fixed lv_xofFoundPoint;
    fixed lv_yofFoundPoint;
    fixed lv_yTriangleOriginal;
    fixed lv_yTriangleNew;
    fixed lv_xTriangleOriginal;
    fixed lv_xTriangleNew;
    int lv_ping;
    fixed lv_distanceBetweenPoints;
    fixed lv_distanceBetweenPointsIncrement;
    fixed lv_pingDistance;
    int lv_pingLoop;
    int lv_pingIncrement;
    int lv_pingPlayer;

    // Variable Initialization
    lv_casterPoint = UnitGetPosition(EventUnit());
    lv_targetPoint = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    PathDestroy(libGDHL_gv_heroSgtHammerPathDisplay[EventPlayer()]);
    PathDestroy(libGDHL_gv_heroSgtHammerPathDisplayEnemies[EventPlayer()]);
    if ((libMapM_gf_MapMechanicExistsOnMap(libMapM_ge_MapMechanicType_Underworld) == true)) {
        if ((libNtve_gf_UnitInRegion(libMapM_gf_MMUnderworldPlayerHeroUnit(EventPlayer()), libMapM_gv_mMUnderworldUnderGroundPlayable) == true)) {
            lv_abilityTargetPoint = libGDHL_gf_TargetCalculation(lv_targetPoint, lv_casterPoint, RegionFromName("Underworld Below"));
            libGDHL_gv_heroSgtHammerOrbitalBFGTargetPoint[EventPlayer()] = lv_abilityTargetPoint;
            lv_targetAngle = AngleBetweenPoints(lv_casterPoint, lv_abilityTargetPoint);
            if ((lv_abilityTargetPoint != null)) {
                if ((UnitGetType(EventUnit()) == "SgtHammerBluntForceGunInvisibleOrbitalDummy")) {
                    UnitCreateEffectPoint(EventUnit(), "BluntForceGunLaunchMissileOrbital", lv_abilityTargetPoint);
                }
                else {
                    UnitCreateEffectPoint(EventUnit(), "BluntForceGunLaunchMissile", lv_abilityTargetPoint);
                }
                lv_originTargetPoint = libGDHL_gf_TargetCalculation(PointWithOffsetPolar(lv_casterPoint, 1.0, (lv_targetAngle + 180)), lv_casterPoint, RegionFromName("Underworld Below"));
                libGDHL_gv_heroSgtHammerOrbitalBFGOriginPoint[EventPlayer()] = lv_originTargetPoint;
            }
            else {
            }
            if ((PointGetY(lv_abilityTargetPoint) >= 130.0)) {
                lv_xofFoundPoint = PointGetX(lv_abilityTargetPoint);
                lv_yofFoundPoint = PointGetY(lv_abilityTargetPoint);
                if ((PointGetX(lv_abilityTargetPoint) > PointGetX(lv_casterPoint))) {
                    lv_yTriangleOriginal = (PointGetY(lv_casterPoint) - lv_yofFoundPoint);
                    lv_xTriangleOriginal = (PointGetX(lv_casterPoint) - lv_xofFoundPoint);
                    lv_yPointOffset = (130.0 - lv_yofFoundPoint);
                    lv_yTriangleNew = (PointGetY(lv_casterPoint) - 130.0);
                    lv_xTriangleNew = ((lv_yTriangleNew/lv_yTriangleOriginal) * lv_xTriangleOriginal);
                    lv_xPointOffsetDistance = (lv_xTriangleOriginal - lv_xTriangleNew);
                    lv_abilityTargetPoint = PointWithOffset(lv_abilityTargetPoint, lv_xPointOffsetDistance, lv_yPointOffset);
                }
                else {
                    if ((PointGetX(lv_abilityTargetPoint) < PointGetX(lv_casterPoint))) {
                        lv_yTriangleOriginal = (PointGetY(lv_casterPoint) - lv_yofFoundPoint);
                        lv_xTriangleOriginal = (lv_xofFoundPoint - PointGetX(lv_casterPoint));
                        lv_yPointOffset = (130.0 - lv_yofFoundPoint);
                        lv_yTriangleNew = (PointGetY(lv_casterPoint) - 130.0);
                        lv_xTriangleNew = ((lv_yTriangleNew/lv_yTriangleOriginal) * lv_xTriangleOriginal);
                        lv_xPointOffsetDistance = (lv_xTriangleOriginal - lv_xTriangleNew);
                        lv_xPointOffsetDistance = (-1.0 * lv_xPointOffsetDistance);
                        lv_abilityTargetPoint = PointWithOffset(lv_abilityTargetPoint, lv_xPointOffsetDistance, lv_yPointOffset);
                    }
                    else {
                    }
                }
            }
            else {
            }
            lv_distanceBetweenPoints = DistanceBetweenPoints(UnitGetPosition(EventUnit()), lv_abilityTargetPoint);
        }
        else {
            lv_abilityTargetPoint = libGDHL_gf_TargetCalculation(lv_targetPoint, lv_casterPoint, RegionFromName("Underworld Above"));
            libGDHL_gv_heroSgtHammerOrbitalBFGTargetPoint[EventPlayer()] = lv_abilityTargetPoint;
            lv_targetAngle = AngleBetweenPoints(lv_casterPoint, lv_abilityTargetPoint);
            if ((PointGetY(lv_abilityTargetPoint) <= 130.0)) {
                lv_xofFoundPoint = PointGetX(lv_abilityTargetPoint);
                lv_yofFoundPoint = PointGetY(lv_abilityTargetPoint);
                if ((PointGetX(lv_abilityTargetPoint) > PointGetX(lv_casterPoint))) {
                    lv_yTriangleOriginal = (PointGetY(lv_casterPoint) - lv_yofFoundPoint);
                    lv_xTriangleOriginal = (PointGetX(lv_casterPoint) - lv_xofFoundPoint);
                    lv_yPointOffset = (130.0 - lv_yofFoundPoint);
                    lv_yTriangleNew = (PointGetY(lv_casterPoint) - 130.0);
                    lv_xTriangleNew = ((lv_yTriangleNew/lv_yTriangleOriginal) * lv_xTriangleOriginal);
                    lv_xPointOffsetDistance = (lv_xTriangleOriginal - lv_xTriangleNew);
                    lv_abilityTargetPoint = PointWithOffset(lv_abilityTargetPoint, lv_xPointOffsetDistance, lv_yPointOffset);
                }
                else {
                    if ((PointGetX(lv_abilityTargetPoint) < PointGetX(lv_casterPoint))) {
                        lv_yTriangleOriginal = (PointGetY(lv_casterPoint) - lv_yofFoundPoint);
                        lv_xTriangleOriginal = (lv_xofFoundPoint - PointGetX(lv_casterPoint));
                        lv_yPointOffset = (130.0 - lv_yofFoundPoint);
                        lv_yTriangleNew = (PointGetY(lv_casterPoint) - 130.0);
                        lv_xTriangleNew = ((lv_yTriangleNew/lv_yTriangleOriginal) * lv_xTriangleOriginal);
                        lv_xPointOffsetDistance = (lv_xTriangleOriginal - lv_xTriangleNew);
                        lv_xPointOffsetDistance = (-1.0 * lv_xPointOffsetDistance);
                        lv_abilityTargetPoint = PointWithOffset(lv_abilityTargetPoint, lv_xPointOffsetDistance, lv_yPointOffset);
                    }
                    else {
                    }
                }
            }
            else {
            }
            lv_distanceBetweenPoints = DistanceBetweenPoints(UnitGetPosition(EventUnit()), lv_abilityTargetPoint);
            if ((lv_abilityTargetPoint != null)) {
                lv_originTargetPoint = libGDHL_gf_TargetCalculation(PointWithOffsetPolar(lv_casterPoint, 1.0, (lv_targetAngle + 180)), lv_casterPoint, RegionFromName("Underworld Above"));
                if ((PointGetY(lv_originTargetPoint) <= 130.0)) {
                    lv_xofFoundPoint = PointGetX(lv_originTargetPoint);
                    lv_yofFoundPoint = PointGetY(lv_originTargetPoint);
                    if ((PointGetX(lv_originTargetPoint) > PointGetX(lv_casterPoint))) {
                        lv_yTriangleOriginal = (PointGetY(lv_casterPoint) - lv_yofFoundPoint);
                        lv_xTriangleOriginal = (PointGetX(lv_casterPoint) - lv_xofFoundPoint);
                        lv_yPointOffset = (130.0 - lv_yofFoundPoint);
                        lv_yTriangleNew = (PointGetY(lv_casterPoint) - 130.0);
                        lv_xTriangleNew = ((lv_yTriangleNew/lv_yTriangleOriginal) * lv_xTriangleOriginal);
                        lv_xPointOffsetDistance = (lv_xTriangleOriginal - lv_xTriangleNew);
                        lv_originTargetPoint = PointWithOffset(lv_originTargetPoint, lv_xPointOffsetDistance, lv_yPointOffset);
                    }
                    else {
                        if ((PointGetX(lv_originTargetPoint) < PointGetX(lv_casterPoint))) {
                            lv_yTriangleOriginal = (PointGetY(lv_casterPoint) - lv_yofFoundPoint);
                            lv_xTriangleOriginal = (lv_xofFoundPoint - PointGetX(lv_casterPoint));
                            lv_yPointOffset = (130.0 - lv_yofFoundPoint);
                            lv_yTriangleNew = (PointGetY(lv_casterPoint) - 130.0);
                            lv_xTriangleNew = ((lv_yTriangleNew/lv_yTriangleOriginal) * lv_xTriangleOriginal);
                            lv_xPointOffsetDistance = (lv_xTriangleOriginal - lv_xTriangleNew);
                            lv_xPointOffsetDistance = (-1.0 * lv_xPointOffsetDistance);
                            lv_originTargetPoint = PointWithOffset(lv_originTargetPoint, lv_xPointOffsetDistance, lv_yPointOffset);
                        }
                        else {
                            if ((PointGetX(lv_originTargetPoint) == PointGetX(lv_casterPoint))) {
                                lv_originTargetPoint = PointWithOffset(lv_originTargetPoint, 0.0, lv_yPointOffset);
                            }
                            else {
                            }
                        }
                    }
                }
                else {
                }
                libGDHL_gv_heroSgtHammerOrbitalBFGOriginPoint[EventPlayer()] = lv_originTargetPoint;
                if ((UnitGetType(EventUnit()) == "SgtHammerBluntForceGunInvisibleOrbitalDummy")) {
                    UnitCreateEffectPoint(EventUnit(), "BluntForceGunLaunchMissileOrbital", lv_abilityTargetPoint);
                }
                else {
                    UnitCreateEffectPoint(EventUnit(), "BluntForceGunLaunchMissile", lv_abilityTargetPoint);
                }
            }
            else {
            }
        }
    }
    else {
        lv_abilityTargetPoint = libGDHL_gf_TargetCalculation(lv_targetPoint, lv_casterPoint, RegionPlayableMap());
        libGDHL_gv_heroSgtHammerOrbitalBFGTargetPoint[EventPlayer()] = lv_abilityTargetPoint;
        lv_targetAngle = AngleBetweenPoints(lv_casterPoint, lv_targetPoint);
        if ((lv_abilityTargetPoint != null)) {
            if ((UnitGetType(EventUnit()) == "SgtHammerBluntForceGunInvisibleOrbitalDummy")) {
                UnitCreateEffectPoint(EventUnit(), "BluntForceGunLaunchMissileOrbital", lv_abilityTargetPoint);
            }
            else {
                UnitCreateEffectPoint(EventUnit(), "BluntForceGunLaunchMissile", lv_abilityTargetPoint);
            }
            lv_originTargetPoint = libGDHL_gf_TargetCalculation(PointWithOffsetPolar(lv_casterPoint, 1.0, (lv_targetAngle + 180)), lv_casterPoint, RegionPlayableMap());
            libGDHL_gv_heroSgtHammerOrbitalBFGOriginPoint[EventPlayer()] = lv_originTargetPoint;
        }
        else {
        }
    }
    if ((UnitGetType(EventUnit()) == "SgtHammerBluntForceGunInvisibleOrbitalDummy")) {
        if ((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, EventPlayer()) == true)) {
            PathCreateForUnit(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), EventUnit());
            libGDHL_gv_heroSgtHammerPathDisplay[EventPlayer()] = PathLastCreated();
            PathSetColor(libGDHL_gv_heroSgtHammerPathDisplay[EventPlayer()], c_pathLocationMinimap, Color(0.00, 0.00, 100.00));
            PathSetDestinationPoint(libGDHL_gv_heroSgtHammerPathDisplay[EventPlayer()], lv_abilityTargetPoint);
            PathSetVisible(libGDHL_gv_heroSgtHammerPathDisplay[EventPlayer()], c_pathLocationWorld, false);
            if ((PlayerGroupCount(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers) > 0)) {
                PathCreateForUnit(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), EventUnit());
                libGDHL_gv_heroSgtHammerPathDisplayEnemies[EventPlayer()] = PathLastCreated();
                PathSetColor(libGDHL_gv_heroSgtHammerPathDisplayEnemies[EventPlayer()], c_pathLocationMinimap, Color(100.00, 0.00, 0.00));
                PathSetDestinationPoint(libGDHL_gv_heroSgtHammerPathDisplayEnemies[EventPlayer()], lv_abilityTargetPoint);
                PathSetVisible(libGDHL_gv_heroSgtHammerPathDisplayEnemies[EventPlayer()], c_pathLocationWorld, false);
            }
            else {
            }
        }
        else {
            PathCreateForUnit(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), EventUnit());
            libGDHL_gv_heroSgtHammerPathDisplay[EventPlayer()] = PathLastCreated();
            PathSetColor(libGDHL_gv_heroSgtHammerPathDisplay[EventPlayer()], c_pathLocationMinimap, Color(0.00, 0.00, 100.00));
            PathSetDestinationPoint(libGDHL_gv_heroSgtHammerPathDisplay[EventPlayer()], lv_abilityTargetPoint);
            PathSetVisible(libGDHL_gv_heroSgtHammerPathDisplay[EventPlayer()], c_pathLocationWorld, false);
            if ((PlayerGroupCount(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers) > 0)) {
                PathCreateForUnit(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), EventUnit());
                libGDHL_gv_heroSgtHammerPathDisplayEnemies[EventPlayer()] = PathLastCreated();
                PathSetColor(libGDHL_gv_heroSgtHammerPathDisplayEnemies[EventPlayer()], c_pathLocationMinimap, Color(100.00, 0.00, 0.00));
                PathSetDestinationPoint(libGDHL_gv_heroSgtHammerPathDisplayEnemies[EventPlayer()], lv_abilityTargetPoint);
                PathSetVisible(libGDHL_gv_heroSgtHammerPathDisplayEnemies[EventPlayer()], c_pathLocationWorld, false);
            }
            else {
            }
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSgtHammerBluntForceGunTargetCalculation_Init () {
    libGDHL_gt_HeroSgtHammerBluntForceGunTargetCalculation = TriggerCreate("libGDHL_gt_HeroSgtHammerBluntForceGunTargetCalculation_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroSgtHammerBluntForceGunTargetCalculation, null, AbilityCommand("SgtHammerBluntForceGun", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - SgtHammer - Blunt Force Gun Check For Location
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSgtHammerBluntForceGunCheckForLocation_Func (bool testConds, bool runActions) {
    fixed auto8AB055E4_at;

    // Variable Declarations
    unit lv_missile;
    unit lv_dummy;
    int lv_sgtHammerPlayer;
    bool lv_dummyBoolean;

    // Variable Initialization
    lv_missile = EventUnit();
    lv_sgtHammerPlayer = UnitGetOwner(lv_missile);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(libGame_gv_players[lv_sgtHammerPlayer].lv_heroUnit, "SgtHammerOrbitalBFGCarryBehavior") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroSgtHammerOrbitalBFGUnit[lv_sgtHammerPlayer] = lv_missile;
    auto8AB055E4_at = 0;
    while (!((UnitIsAlive(lv_missile) == false)) && auto8AB055E4_at <= 30.0) {
        Wait(0.0625, c_timeGame);
        auto8AB055E4_at = auto8AB055E4_at + 0.0625;
    }
    Wait(5.0, c_timeGame);
    if ((libGDHL_gv_heroSgtHammerOrbitalBFGUnit[lv_sgtHammerPlayer] == lv_missile)) {
        libNtve_gf_UnitCreateFacingPoint(1, "SgtHammerBluntForceGunInvisibleOrbitalDummy", c_unitCreateIgnorePlacement, lv_sgtHammerPlayer, libGDHL_gv_heroSgtHammerOrbitalBFGOriginPoint[lv_sgtHammerPlayer], libGDHL_gv_heroSgtHammerOrbitalBFGTargetPoint[lv_sgtHammerPlayer]);
        lv_dummy = UnitLastCreated();
        libGame_gf_ArtifactsUpdateSiegeDamageArtifactForUnit(lv_dummy);
        UnitIssueOrder(lv_dummy, OrderTargetingPoint(AbilityCommand("SgtHammerBluntForceGun", 0), libGDHL_gv_heroSgtHammerOrbitalBFGTargetPoint[lv_sgtHammerPlayer]), c_orderQueueReplace);
        Wait(45.0, c_timeGame);
        UnitRemove(lv_dummy);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSgtHammerBluntForceGunCheckForLocation_Init () {
    libGDHL_gt_HeroSgtHammerBluntForceGunCheckForLocation = TriggerCreate("libGDHL_gt_HeroSgtHammerBluntForceGunCheckForLocation_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroSgtHammerBluntForceGunCheckForLocation, null, "BluntForceGunMissileScan", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - SgtHammer - Concussive Blast - Cancel
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSgtHammerConcussiveBlastCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_soundPoint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("SgtHammerConcussiveBlastScrap", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SgtHammerConcussiveBlastScrapCenter", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSgtHammerConcussiveBlastCancel_Init () {
    libGDHL_gt_HeroSgtHammerConcussiveBlastCancel = TriggerCreate("libGDHL_gt_HeroSgtHammerConcussiveBlastCancel_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroSgtHammerConcussiveBlastCancel, c_playerAny, "ConcussiveBlastScrapCancelDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - SgtHammer - Concussive Blast - Cancel Delay
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSgtHammerConcussiveBlastCancelDelay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_soundPoint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAddCooldown(EventUnit(), "Abil/ConcussiveBlastRelicCancel", 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSgtHammerConcussiveBlastCancelDelay_Init () {
    libGDHL_gt_HeroSgtHammerConcussiveBlastCancelDelay = TriggerCreate("libGDHL_gt_HeroSgtHammerConcussiveBlastCancelDelay_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroSgtHammerConcussiveBlastCancelDelay, null, AbilityCommand("SgtHammerConcussiveBlast", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Stitches - Retchling Spawned
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroStitchesRetchlingSpawned_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gf_HeroStitchesReturnControlledUnittoLaneAI(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroStitchesRetchlingSpawned_Init () {
    libGDHL_gt_HeroStitchesRetchlingSpawned = TriggerCreate("libGDHL_gt_HeroStitchesRetchlingSpawned_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroStitchesRetchlingSpawned, c_playerAny, "DevourRetchlingTimedLife");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Stitches - Hook - Hook Vision
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroStitchesHookHookVision_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_stitches;
    point lv_effectPoint;
    int lv_stitchesTeam;
    int lv_enemyTeam;

    // Variable Initialization
    lv_stitches = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_effectPoint = EventPlayerEffectUsedPoint(c_effectLocationSourcePoint);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_stitchesTeam = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lv_stitches));
    if ((lv_stitchesTeam == 1)) {
        lv_enemyTeam = libCore_gv_cOMPUTER_TeamChaos;
    }
    else {
        lv_enemyTeam = libCore_gv_cOMPUTER_TeamOrder;
    }
    if ((VisIsVisibleForPlayer(lv_enemyTeam, lv_effectPoint) == true)) {
        VisRevealArea(lv_enemyTeam, RegionCircle(UnitGetPosition(lv_stitches), 0.5), 0.25, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroStitchesHookHookVision_Init () {
    libGDHL_gt_HeroStitchesHookHookVision = TriggerCreate("libGDHL_gt_HeroStitchesHookHookVision_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroStitchesHookHookVision, c_playerAny, "StitchesHookMissileScan");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Stitches - Gorge Decreases
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroStitchesGorgeDecreases_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimPlay Spell Spell,D 0 -1.000000 -1.000000 1.000000 AsTimeScale");
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimSetTime Spell 1.000000");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroStitchesGorgeDecreases_Init () {
    libGDHL_gt_HeroStitchesGorgeDecreases = TriggerCreate("libGDHL_gt_HeroStitchesGorgeDecreases_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroStitchesGorgeDecreases, null, "StitchesGorgeInitialCasterBehavior", c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Stitches - Set Height
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroStitchesSetHeight_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) != "HeroFalstad") && (UnitGetType(EventUnit()) != "HeroFaerieDragon")) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropHeight, 0.0);
        return true;
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "HeroFaerieDragon")) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropHeight, 1.0);
        return true;
    }
    else {
    }
    if ((UnitGetType(EventUnit()) == "HeroFalstad")) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropHeight, 2.0);
        return true;
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroStitchesSetHeight_Init () {
    libGDHL_gt_HeroStitchesSetHeight = TriggerCreate("libGDHL_gt_HeroStitchesSetHeight_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroStitchesSetHeight, null, "StitchesGorgeTarget", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Stitches - Gorge Activate
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroStitchesGorgeActivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_eatenUnit;
    unit lv_stitches;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_stitches = UnitBehaviorEffectUnit(EventUnit(), "StitchesGorgeTarget", c_effectUnitCaster, 0);
    lv_eatenUnit = UnitBehaviorEffectUnit(EventUnit(), "StitchesGorgeTarget", c_effectUnitTarget, 0);
    if ((UnitTestState(EventUnit(), c_unitStateHallucination) == false)) {
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(UnitGetOwner(lv_eatenUnit), libUIUI_ge_FullscreenOverlayPriorities_Stasis, "Cutscenes\\GameUI_GorgeOverlay.StormCutscene", EventUnitBehavior());
    }
    else {
    }
    while ((UnitIsAlive(lv_stitches) == true) && ((UnitHasBehavior2(lv_eatenUnit, "StitchesGorgeTarget") == true) || (UnitTestState(lv_stitches, c_unitStateInStasis) == true))) {
        if ((libGame_gv_players[UnitGetOwner(lv_stitches)].lv_activeVehicle != null)) {
            lv_stitches = libGame_gv_players[UnitGetOwner(lv_stitches)].lv_activeVehicle;
        }
        else {
        }
        if ((UnitHasBehavior2(lv_eatenUnit, "StitchesGorgeDummyBehavior") == true)) {
            UnitSetPosition(lv_eatenUnit, UnitGetPosition(lv_stitches), true);
        }
        else {
        }
        Wait(0.0625, c_timeGame);
    }
    UnitSetPosition(lv_eatenUnit, UnitGetPosition(lv_stitches), false);
    UnitCreateEffectPoint(lv_eatenUnit, "GorgeLaunchTargetOut", PointWithOffsetPolar(UnitGetPosition(lv_stitches), 1.75, UnitGetFacing(lv_stitches)));
    UnitBehaviorRemove(lv_eatenUnit, "StitchesGorgeTarget", 1);
    Wait(0.0625, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroStitchesGorgeActivate_Init () {
    libGDHL_gt_HeroStitchesGorgeActivate = TriggerCreate("libGDHL_gt_HeroStitchesGorgeActivate_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroStitchesGorgeActivate, null, "StitchesGorgeTarget", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Stitches - Gorge Off
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroStitchesGorgeOff_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(UnitGetOwner(EventUnit()), "Cutscenes\\GameUI_GorgeOverlay.StormCutscene", EventUnitBehavior());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroStitchesGorgeOff_Init () {
    libGDHL_gt_HeroStitchesGorgeOff = TriggerCreate("libGDHL_gt_HeroStitchesGorgeOff_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroStitchesGorgeOff, null, "StitchesGorgeTarget", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tassadar - Force Wall - Kill Force Wall
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTassadarForceWallKillForceWall_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "TassadarForceWall") || (UnitGetType(UnitGroupLoopCurrent()) == "TassadarGateWall") || (UnitGetType(UnitGroupLoopCurrent()) == "TassadarForceWallArtEndUnitLeft") || (UnitGetType(UnitGroupLoopCurrent()) == "TassadarForceWallArtEndUnitRight") || (UnitGetType(UnitGroupLoopCurrent()) == "TassadarForceWallArtUnitCenter") || (UnitGetType(UnitGroupLoopCurrent()) == "TassadarForceWallArtUnitLeft") || (UnitGetType(UnitGroupLoopCurrent()) == "TassadarForceWallArtUnitRight"))) {
            UnitKill(UnitGroupLoopCurrent());
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTassadarForceWallKillForceWall_Init () {
    libGDHL_gt_HeroTassadarForceWallKillForceWall = TriggerCreate("libGDHL_gt_HeroTassadarForceWallKillForceWall_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTassadarForceWallKillForceWall, c_playerAny, "ForceWallCancelDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tassadar - Add Force Wall Cancel Cooldown
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTassadarAddForceWallCancelCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_cooldown;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cooldown = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "TassadarForceWallCancel", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))));
    libNtve_gf_UnitRemoveCooldown(EventPlayerEffectUsedUnit(c_effectUnitCaster), "Abil/TassadarForceWallCancel");
    UnitAddCooldown(EventPlayerEffectUsedUnit(c_effectUnitCaster), "Abil/TassadarForceWallCancel", libCore_gv_bALCancelDelay);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTassadarAddForceWallCancelCooldown_Init () {
    libGDHL_gt_HeroTassadarAddForceWallCancelCooldown = TriggerCreate("libGDHL_gt_HeroTassadarAddForceWallCancelCooldown_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTassadarAddForceWallCancelCooldown, c_playerAny, "TassadarForceWallPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tassadar - Plasma Shield Relic Excess Shielding
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTassadarPlasmaShieldRelicExcessShielding_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitBehaviorDamageModifyRemaining(EventUnit(), "PlasmaShield") >= 1) || (UnitBehaviorDamageModifyRemaining(EventUnit(), "ReinforceStructure") >= 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorDamageModifyRemaining(EventUnit(), "PlasmaShield") >= 1)) {
        CatalogFieldValueSet(c_gameCatalogBehavior, "PlasmaShieldRelicShield", "DamageResponse.ModifyLimit", EventPlayer(), FixedToString((UnitBehaviorDamageModifyRemaining(EventUnit(), "PlasmaShield") / 2.0), c_fixedPrecisionAny));
    }
    else {
    }
    if ((UnitBehaviorDamageModifyRemaining(EventUnit(), "ReinforceStructure") >= 1)) {
        CatalogFieldValueSet(c_gameCatalogBehavior, "PlasmaShieldRelicShield", "DamageResponse.ModifyLimit", EventPlayer(), FixedToString((UnitBehaviorDamageModifyRemaining(EventUnit(), "ReinforceStructure") / 2.0), c_fixedPrecisionAny));
    }
    else {
    }
    Wait(0.07, c_timeGame);
    UnitBehaviorAdd(EventUnit(), "PlasmaShieldRelicShield", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTassadarPlasmaShieldRelicExcessShielding_Init () {
    libGDHL_gt_HeroTassadarPlasmaShieldRelicExcessShielding = TriggerCreate("libGDHL_gt_HeroTassadarPlasmaShieldRelicExcessShielding_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTassadarPlasmaShieldRelicExcessShielding, null, "PlasmaShieldKhalasEmbraceController", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTassadarPlasmaShieldRelicExcessShielding, null, "PlasmaShieldKhalasEmbraceReinforceStructureController", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tassadar - Plasma Shield Relic Modify Duration
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTassadarPlasmaShieldRelicModifyDuration_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehavior() == "PlasmaShieldKhalasEmbraceController")) {
        UnitBehaviorSetDuration(EventUnit(), "PlasmaShield", (StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "PlasmaShield", "Duration", c_playerAny)) + 0.07));
    }
    else {
        UnitBehaviorSetDuration(EventUnit(), "ReinforceStructure", (StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "ReinforceStructure", "Duration", c_playerAny)) + 0.07));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTassadarPlasmaShieldRelicModifyDuration_Init () {
    libGDHL_gt_HeroTassadarPlasmaShieldRelicModifyDuration = TriggerCreate("libGDHL_gt_HeroTassadarPlasmaShieldRelicModifyDuration_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTassadarPlasmaShieldRelicModifyDuration, null, "PlasmaShieldKhalasEmbraceController", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTassadarPlasmaShieldRelicModifyDuration, null, "PlasmaShieldKhalasEmbraceController", c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTassadarPlasmaShieldRelicModifyDuration, null, "PlasmaShieldKhalasEmbraceReinforceStructureController", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTassadarPlasmaShieldRelicModifyDuration, null, "PlasmaShieldKhalasEmbraceReinforceStructureController", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tassadar - Weapon Increment vs Tassadar
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTassadarWeaponIncrementvsTassadar_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "HeroTassadar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "StatusIncrement WeaponNext");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTassadarWeaponIncrementvsTassadar_Init () {
    libGDHL_gt_HeroTassadarWeaponIncrementvsTassadar = TriggerCreate("libGDHL_gt_HeroTassadarWeaponIncrementvsTassadar_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTassadarWeaponIncrementvsTassadar, c_playerAny, "TassadarWeaponLaunchMissile");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tassadar - Update Distortion Beam Period
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTassadarUpdateDistortionBeamPeriod_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroTassadar"))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "TassadarDistortionBeam") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gf_UpdateTassadarAbilityStats(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTassadarUpdateDistortionBeamPeriod_Init () {
    libGDHL_gt_HeroTassadarUpdateDistortionBeamPeriod = TriggerCreate("libGDHL_gt_HeroTassadarUpdateDistortionBeamPeriod_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTassadarUpdateDistortionBeamPeriod, null, "FuryoftheStormCarryBehavior", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTassadarUpdateDistortionBeamPeriod, null, "TalentBerserk", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTassadarUpdateDistortionBeamPeriod, null, "TalentBattleFury1Buff", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTassadarUpdateDistortionBeamPeriod, null, "TalentBattleFury2Buff", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tassadar - Static Charge Mastery Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTassadarStaticChargeMasteryProc_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitTarget) == UnitBehaviorEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitSource), "PsionicStormStaticChargeMasteryDebuff", c_effectUnitCaster, 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "PsionicStormStaticChargeProcSet", EventPlayerEffectUsedUnit(c_effectUnitSource));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTassadarStaticChargeMasteryProc_Init () {
    libGDHL_gt_HeroTassadarStaticChargeMasteryProc = TriggerCreate("libGDHL_gt_HeroTassadarStaticChargeMasteryProc_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTassadarStaticChargeMasteryProc, c_playerAny, "PsionicStormStaticChargeMasteryDummyProc");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tassadar - Second Strike Cooldown
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTassadarSecondStrikeCooldown_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitModifyCooldown(EventPlayerEffectUsedUnit(c_effectUnitCaster), "Abil/TassadarPsionicStorm", UnitGetCooldown(EventPlayerEffectUsedUnit(c_effectUnitCaster), "Abil/TassadarPsionicStormSecondStrike"), c_cooldownOperationSet);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTassadarSecondStrikeCooldown_Init () {
    libGDHL_gt_HeroTassadarSecondStrikeCooldown = TriggerCreate("libGDHL_gt_HeroTassadarSecondStrikeCooldown_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTassadarSecondStrikeCooldown, c_playerAny, "PsionicStormSecondStrikeFinishDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tassadar - Second Strike Mana Cost
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTassadarSecondStrikeManaCost_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        CatalogFieldValueSet(c_gameCatalogAbil, "TassadarPsionicStorm", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", UnitGetOwner(EventUnit()), "0");
    }
    else {
        CatalogFieldValueSet(c_gameCatalogAbil, "TassadarPsionicStorm", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", UnitGetOwner(EventUnit()), CatalogFieldValueGet(c_gameCatalogAbil, "TassadarPsionicStorm", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", 0));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTassadarSecondStrikeManaCost_Init () {
    libGDHL_gt_HeroTassadarSecondStrikeManaCost = TriggerCreate("libGDHL_gt_HeroTassadarSecondStrikeManaCost_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTassadarSecondStrikeManaCost, null, "TassadarPsionicStormSecondStrikeProc", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTassadarSecondStrikeManaCost, null, "TassadarPsionicStormSecondStrikeProc", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tinker - Overlock Turret
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTinkerOverlockTurret_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_duration;

    // Variable Initialization
    lv_duration = UnitBehaviorDuration(EventUnit(), "RockItTurretTimedLife");

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "TinkerRockItTurret") && (TechTreeBehaviorCount(UnitGetOwner(EventUnit()), "Ability3Rune3", c_techCountCompleteOnly) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorSetDurationRemaining(EventUnit(), "RockItTurretTimedLife", (lv_duration + 5.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTinkerOverlockTurret_Init () {
    libGDHL_gt_HeroTinkerOverlockTurret = TriggerCreate("libGDHL_gt_HeroTinkerOverlockTurret_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTinkerOverlockTurret, null, "Overclock", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tinker - Dismantle Turret
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTinkerDismantleTurret_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTinkerDismantleTurret_Init () {
    libGDHL_gt_HeroTinkerDismantleTurret = TriggerCreate("libGDHL_gt_HeroTinkerDismantleTurret_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTinkerDismantleTurret, c_playerAny, "TinkerSalvageDismantleSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tinker - Deth Lazor Scaling
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTinkerDethLazorScaling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stacks;
    int lv_offsets;
    string lv_searchEffect;
    int lv_i;
    fixed lv_offsetValue;

    // Variable Initialization
    lv_searchEffect = "DethLazorCharged1Search";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_stacks = UnitBehaviorCount(EventUnit(), "DethLazorStack");
    lv_offsets = (lv_stacks + 14);
    lv_offsetValue = ((lv_offsets + 1.0) / -2.0);
    if ((lv_stacks <= 7)) {
        if ((PlayerHasTalent(UnitGetOwner(EventUnit()), "TinkerMasteryEZPZDimensionalRipper") == true)) {
            lv_searchEffect = "DethLazorCharged1RelicSearch";
        }
        else {
            lv_searchEffect = "DethLazorCharged1Search";
        }
    }
    else if ((lv_stacks > 7) && (lv_stacks <= 15)) {
        if ((PlayerHasTalent(UnitGetOwner(EventUnit()), "TinkerMasteryEZPZDimensionalRipper") == true)) {
            lv_searchEffect = "DethLazorCharged2RelicSearch";
        }
        else {
            lv_searchEffect = "DethLazorCharged2Search";
        }
    }
    else if ((lv_stacks >= 15) && (UnitBehaviorCount(EventUnit(), "GoblinFusionBuff") == 0)) {
        if ((PlayerHasTalent(UnitGetOwner(EventUnit()), "TinkerMasteryEZPZDimensionalRipper") == true)) {
            lv_searchEffect = "DethLazorCharged3RelicSearch";
        }
        else {
            lv_searchEffect = "DethLazorCharged3Search";
        }
    }
    else if ((lv_stacks >= 15) && (UnitBehaviorCount(EventUnit(), "GoblinFusionBuff") == 1)) {
        if ((PlayerHasTalent(UnitGetOwner(EventUnit()), "TinkerMasteryEZPZDimensionalRipper") == true)) {
            lv_searchEffect = "DethLazorChargedGoblinFusionMasteryDimensionalRipperSearch";
        }
        else {
            lv_searchEffect = "DethLazorChargedGoblinFusionMasterySearch";
        }
    }
    CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeSearchPersistent", "PeriodCount", EventPlayer(), IntToString(lv_offsets));
    CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeSearchPersistent", "PeriodicEffectArray[" + IntToString(0) + "]", EventPlayer(), (lv_searchEffect));
    CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeBeamPersistent", "InitialOffset", EventPlayer(), ("0," + FixedToString(lv_offsetValue, 2) + ",0"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTinkerDethLazorScaling_Init () {
    libGDHL_gt_HeroTinkerDethLazorScaling = TriggerCreate("libGDHL_gt_HeroTinkerDethLazorScaling_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTinkerDethLazorScaling, null, "DethLazorStack", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tinker - Deth Lazor Goblin Fusion Scaling
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTinkerDethLazorGoblinFusionScaling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stacks;
    int lv_offsets;
    string lv_searchEffect;
    int lv_i;
    fixed lv_offsetValue;

    // Variable Initialization
    lv_searchEffect = "DethLazorCharged3Search";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_stacks = UnitBehaviorCount(EventUnit(), "DethLazorStack");
    if ((lv_stacks >= 15) && (UnitBehaviorCount(EventUnit(), "GoblinFusionBuff") == 1)) {
        if ((UnitBehaviorCount(EventUnit(), "TinkerDethLazorMasteryCarryBehavior") == 1)) {
            lv_searchEffect = "DethLazorChargedGoblinFusionMasteryDimensionalRipperSearch";
        }
        else {
            lv_searchEffect = "DethLazorChargedGoblinFusionMasterySearch";
        }
    }
    CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeSearchPersistent", "PeriodicEffectArray[" + IntToString(0) + "]", EventPlayer(), (lv_searchEffect));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTinkerDethLazorGoblinFusionScaling_Init () {
    libGDHL_gt_HeroTinkerDethLazorGoblinFusionScaling = TriggerCreate("libGDHL_gt_HeroTinkerDethLazorGoblinFusionScaling_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTinkerDethLazorGoblinFusionScaling, null, "GoblinFusionBuff", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tinker - Deth Lazor Turning Update
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTinkerDethLazorTurningUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_facingAngle;
    fixed lv_nextFacingAngle;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitHasBehavior2(EventUnit(), "DethLazorActive") == true)) {
        lv_facingAngle = UnitGetFacing(EventUnit());
        Wait(0.0625, c_timeGame);
        lv_nextFacingAngle = UnitGetFacing(EventUnit());
        if ((lv_facingAngle > lv_nextFacingAngle)) {
            libNtve_gf_SendActorMessageToUnit(EventUnit(), "Signal ShuffleRight");
        }
        else {
            if ((lv_facingAngle < lv_nextFacingAngle)) {
                libNtve_gf_SendActorMessageToUnit(EventUnit(), "Signal ShuffleLeft");
            }
            else {
                libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimClear Walk 0.000000");
            }
        }
    }
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimClear Walk");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTinkerDethLazorTurningUpdate_Init () {
    libGDHL_gt_HeroTinkerDethLazorTurningUpdate = TriggerCreate("libGDHL_gt_HeroTinkerDethLazorTurningUpdate_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTinkerDethLazorTurningUpdate, null, "DethLazorActive", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tinker - Deth Lazor Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTinkerDethLazorCast_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroTinkerDethLazorActive[EventPlayer()] = true;
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroTinker", "StationaryTurningRate", EventPlayer(), FixedToString(libGDHL_gv_heroTinkerDethLazorMaxTurnRate, 0));
    if ((libGDHL_gv_heroTinkerDethLazorEventAdded[EventPlayer()] == false)) {
        TriggerAddEventMouseMoved(libGDHL_gt_HeroTinkerDethLazorAim, EventPlayer());
    }
    else {
    }
    libGDHL_gv_heroTinkerDethLazorEventAdded[EventPlayer()] = true;
    TriggerEnable(libGDHL_gt_HeroTinkerDethLazorAim, true);
    TriggerEnable(libGDHL_gt_HeroTinkerDethLazorLeftClick, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTinkerDethLazorCast_Init () {
    libGDHL_gt_HeroTinkerDethLazorCast = TriggerCreate("libGDHL_gt_HeroTinkerDethLazorCast_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTinkerDethLazorCast, null, "DethLazorActive", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tinker - Deth Lazor Aim
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTinkerDethLazorAim_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libGDHL_gv_heroTinkerDethLazorActive[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libGame_gv_players[EventPlayer()].lv_heroUnit) == "HeroAbathur")) {
        UnitIssueOrder(libGame_gv_players[EventPlayer()].lv_activeVehicle, OrderTargetingPoint(AbilityCommand("move", 4), Point(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld())), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(libGame_gv_players[EventPlayer()].lv_heroUnit, OrderTargetingPoint(AbilityCommand("move", 4), Point(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld())), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTinkerDethLazorAim_Init () {
    libGDHL_gt_HeroTinkerDethLazorAim = TriggerCreate("libGDHL_gt_HeroTinkerDethLazorAim_Func");
    TriggerEnable(libGDHL_gt_HeroTinkerDethLazorAim, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tinker - Deth Lazor Left Click
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTinkerDethLazorLeftClick_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(libGame_gv_players[EventPlayer()].lv_heroUnit) == "HeroTinker") || (UnitGetType(libGame_gv_players[EventPlayer()].lv_activeVehicle) == "HeroTinker")))) {
            return false;
        }

        if (!(((UnitBehaviorCount(libGame_gv_players[EventPlayer()].lv_heroUnit, "DethLazorActive") == 1) || (UnitBehaviorCount(libGame_gv_players[EventPlayer()].lv_activeVehicle, "DethLazorActive") == 1)))) {
            return false;
        }

        if (!(((UnitBehaviorCount(libGame_gv_players[EventPlayer()].lv_heroUnit, "DethLazorStack") >= 2) || (UnitBehaviorCount(libGame_gv_players[EventPlayer()].lv_activeVehicle, "DethLazorStack") >= 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libGame_gv_players[EventPlayer()].lv_heroUnit) == "HeroAbathur")) {
        UnitCreateEffectUnit(libGame_gv_players[EventPlayer()].lv_activeVehicle, "DethLazorDestroyPersistent", libGame_gv_players[EventPlayer()].lv_activeVehicle);
    }
    else {
        UnitCreateEffectUnit(libGame_gv_players[EventPlayer()].lv_heroUnit, "DethLazorDestroyPersistent", libGame_gv_players[EventPlayer()].lv_heroUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTinkerDethLazorLeftClick_Init () {
    libGDHL_gt_HeroTinkerDethLazorLeftClick = TriggerCreate("libGDHL_gt_HeroTinkerDethLazorLeftClick_Func");
    TriggerEnable(libGDHL_gt_HeroTinkerDethLazorLeftClick, false);
    TriggerAddEventMouseClicked(libGDHL_gt_HeroTinkerDethLazorLeftClick, c_playerAny, c_mouseButtonLeft, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tinker - Deth Lazor End
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTinkerDethLazorEnd_Func (bool testConds, bool runActions) {
    int autoD05A2F49_ae;
    int autoD05A2F49_ai;
    int auto75C6A549_ae;
    int auto75C6A549_ai;

    // Variable Declarations
    int lv_i;
    bool lv_dethLazorAimTriggerEnabled;
    int lv_tinkerIndex;
    int lv_triggeringTinkerPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers)) {
        CatalogFieldValueSet(c_gameCatalogUnit, "HeroTinker", "StationaryTurningRate", EventPlayer(), CatalogFieldValueGet(c_gameCatalogUnit, "HeroDiablo", "StationaryTurningRate", 0));
        libGDHL_gv_heroTinkerDethLazorActive[EventPlayer()] = false;
    }
    else {
        autoD05A2F49_ae = libCore_gv_bALMaxPlayers;
        autoD05A2F49_ai = 1;
        lv_tinkerIndex = 1;
        for ( ; ( (autoD05A2F49_ai >= 0 && lv_tinkerIndex <= autoD05A2F49_ae) || (autoD05A2F49_ai <= 0 && lv_tinkerIndex >= autoD05A2F49_ae) ) ; lv_tinkerIndex += autoD05A2F49_ai ) {
            if ((TechTreeUnitCount(lv_tinkerIndex, "HeroAbathur", c_techCountCompleteOnly) == 1) && (TechTreeUnitCount(lv_tinkerIndex, "HeroTinker", c_techCountCompleteOnly) == 0) && (lv_tinkerIndex != EventPlayer()) && (libGDHL_gv_heroTinkerDethLazorActive[lv_tinkerIndex] == true)) {
                lv_triggeringTinkerPlayer = lv_tinkerIndex;
                CatalogFieldValueSet(c_gameCatalogUnit, "HeroTinker", "StationaryTurningRate", lv_tinkerIndex, CatalogFieldValueGet(c_gameCatalogUnit, "HeroDiablo", "StationaryTurningRate", 0));
                libGDHL_gv_heroTinkerDethLazorActive[lv_tinkerIndex] = false;
            }
            else {
            }
        }
    }
    auto75C6A549_ae = libCore_gv_bALMaxPlayers;
    auto75C6A549_ai = 1;
    lv_i = 1;
    for ( ; ( (auto75C6A549_ai >= 0 && lv_i <= auto75C6A549_ae) || (auto75C6A549_ai <= 0 && lv_i >= auto75C6A549_ae) ) ; lv_i += auto75C6A549_ai ) {
        if ((libGDHL_gv_heroTinkerDethLazorActive[lv_i] == true)) {
            lv_dethLazorAimTriggerEnabled = true;
            break;
        }
        else {
        }
    }
    if ((lv_dethLazorAimTriggerEnabled == false)) {
        TriggerEnable(libGDHL_gt_HeroTinkerDethLazorAim, false);
        TriggerEnable(libGDHL_gt_HeroTinkerDethLazorLeftClick, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTinkerDethLazorEnd_Init () {
    libGDHL_gt_HeroTinkerDethLazorEnd = TriggerCreate("libGDHL_gt_HeroTinkerDethLazorEnd_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTinkerDethLazorEnd, null, "DethLazorActive", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tinker - Deth Lazor Cancel Delay
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTinkerDethLazorCancelDelay_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAddCooldown(EventUnit(), "Abil/TinkerDethLazorChargeCancel", 0.5);
    Wait(0.5, c_timeGame);
    TriggerEnable(libGDHL_gt_HeroTinkerDethLazorLeftClick, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTinkerDethLazorCancelDelay_Init () {
    libGDHL_gt_HeroTinkerDethLazorCancelDelay = TriggerCreate("libGDHL_gt_HeroTinkerDethLazorCancelDelay_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroTinkerDethLazorCancelDelay, null, AbilityCommand("TinkerDethLazorCharged", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tychus - Odin Cancel Delay
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTychusOdinCancelDelay_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAddCooldown(EventUnit(), "Abil/TychusOdinCancel", 1.5);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTychusOdinCancelDelay_Init () {
    libGDHL_gt_HeroTychusOdinCancelDelay = TriggerCreate("libGDHL_gt_HeroTychusOdinCancelDelay_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroTychusOdinCancelDelay, null, AbilityCommand("TychusOdin", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tychus - Odin Created
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTychusOdinCreated_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_tychusHealthStore[UnitGetOwner(EventUnit())] = UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent);
    libGDHL_gv_tychusOdinHPStore[UnitGetOwner(EventUnit())] = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "TychusOdin", "Modification.VitalMaxArray[" + IntToString(0) + "]", UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTychusOdinCreated_Init () {
    libGDHL_gt_HeroTychusOdinCreated = TriggerCreate("libGDHL_gt_HeroTychusOdinCreated_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroTychusOdinCreated, null, AbilityCommand("TychusOdin", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tychus - Odin Dies
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTychusOdinDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_unitsLevel;
    fixed lv_odinMultiplier;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TychusOdin", 1);
    UnitSetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitCaster), c_unitPropLife, (libGDHL_gv_tychusHealthStore[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))] - libGDHL_gv_tychusOdinHPStore[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))]));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTychusOdinDies_Init () {
    libGDHL_gt_HeroTychusOdinDies = TriggerCreate("libGDHL_gt_HeroTychusOdinDies_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTychusOdinDies, c_playerAny, "TychusOdinRemoveBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tychus - Update Orders On Issue Order Ability
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTychusUpdateOrdersOnIssueOrderAbility_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("TychusLaserDrill", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_orderQueueReplace);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "LaserDrillDamageIncrease", 5);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTychusUpdateOrdersOnIssueOrderAbility_Init () {
    libGDHL_gt_HeroTychusUpdateOrdersOnIssueOrderAbility = TriggerCreate("libGDHL_gt_HeroTychusUpdateOrdersOnIssueOrderAbility_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTychusUpdateOrdersOnIssueOrderAbility, c_playerAny, "LaserDrillAttackOrderCreatePersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tychus - Overkill Targeted Retarget
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTychusOverkillTargetedRetarget_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true)) {
        CatalogFieldValueSet(c_gameCatalogEffect, "OverkillTargetedRetargetInitialPersistent", "InitialDelay", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), FixedToString(UnitBehaviorDuration(EventPlayerEffectUsedUnit(c_effectUnitCaster), "OverkillTargetedAmmoCooldown"), 2));
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "OverkillTargetedRetargetInitialPersistent", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTychusOverkillTargetedRetarget_Init () {
    libGDHL_gt_HeroTychusOverkillTargetedRetarget = TriggerCreate("libGDHL_gt_HeroTychusOverkillTargetedRetarget_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTychusOverkillTargetedRetarget, c_playerAny, "OverkillTargetedRetargetDestroyPersistentSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tyrael - Sanctification Facing
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTyraelSanctificationFacing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    libGame_gv_players[lv_player].lv_cameraCameraLockInterrupt = false;
    libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    UnitSetFacing(libGame_gv_players[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)].lv_heroUnit, 270.0, 0.05);
    Wait(0.05, c_timeGame);
    UnitSetFacing(libGame_gv_players[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)].lv_heroUnit, 270.0, 0.05);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTyraelSanctificationFacing_Init () {
    libGDHL_gt_HeroTyraelSanctificationFacing = TriggerCreate("libGDHL_gt_HeroTyraelSanctificationFacing_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTyraelSanctificationFacing, c_playerAny, "SanctificationInitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tyrael - Archangel's Wrath Suppress Collision
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTyraelArchangelsWrathSuppressCollision_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogUnit, "HeroTyrael", "Mover", UnitGetOwner(EventUnit()), "Fly");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroTyrael", "Collide[" + IntToString(1) + "]", UnitGetOwner(EventUnit()), "0");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroTyrael", "Collide[" + IntToString(8) + "]", UnitGetOwner(EventUnit()), "0");
    while (!((UnitHasBehavior2(EventUnit(), "TyraelArchangelsWrathDeathActiveBuff") == false))) {
        Wait(0.0625, c_timeGame);
    }
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroTyrael", "Mover", UnitGetOwner(EventUnit()), "Ground");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroTyrael", "Collide[" + IntToString(1) + "]", UnitGetOwner(EventUnit()), "1");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroTyrael", "Collide[" + IntToString(8) + "]", UnitGetOwner(EventUnit()), "1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTyraelArchangelsWrathSuppressCollision_Init () {
    libGDHL_gt_HeroTyraelArchangelsWrathSuppressCollision = TriggerCreate("libGDHL_gt_HeroTyraelArchangelsWrathSuppressCollision_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTyraelArchangelsWrathSuppressCollision, null, "TyraelArchangelsWrathDeathActiveBuff", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tyrande - Purging Arrow Ammo Destruction
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTyrandePurgingArrowAmmoDestruction_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitTarget), "TyrandeHuntersMarkPurgingMarkAmmoDrain") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "TyrandeHuntersMarkPurgingMarkDrainAmmo", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTyrandePurgingArrowAmmoDestruction_Init () {
    libGDHL_gt_HeroTyrandePurgingArrowAmmoDestruction = TriggerCreate("libGDHL_gt_HeroTyrandePurgingArrowAmmoDestruction_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTyrandePurgingArrowAmmoDestruction, c_playerAny, "UniversalWeaponImpact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tyrande - Sentinel Shot - Target Calculation
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTyrandeSentinelShotTargetCalculation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_cosineofTargetAngle;
    point lv_casterPoint;
    point lv_targetPoint;
    fixed lv_targetXToEdgeOfMap;
    fixed lv_targetYToEdgeOfMap;
    fixed lv_targetAngle;
    fixed lv_triangle1C;
    fixed lv_triangle2C;
    point lv_owlTargetPoint;

    // Variable Initialization
    lv_casterPoint = UnitGetPosition(EventUnit());
    lv_targetPoint = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_owlTargetPoint = libGDHL_gf_TargetCalculation(lv_targetPoint, lv_casterPoint, RegionPlayableMap());
    lv_targetAngle = AngleBetweenPoints(lv_casterPoint, lv_targetPoint);
    if ((lv_owlTargetPoint != null)) {
        if ((UnitBehaviorCount(EventUnit(), "Ability2Relic") == 1)) {
            UnitCreateEffectPoint(EventUnit(), "SentinelShotRelicLaunchMissile", lv_owlTargetPoint);
        }
        else {
            UnitCreateEffectPoint(EventUnit(), "SentinelShotLaunchMissile", lv_owlTargetPoint);
        }
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTyrandeSentinelShotTargetCalculation_Init () {
    libGDHL_gt_HeroTyrandeSentinelShotTargetCalculation = TriggerCreate("libGDHL_gt_HeroTyrandeSentinelShotTargetCalculation_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroTyrandeSentinelShotTargetCalculation, null, AbilityCommand("TyrandeSentinelShot", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Witch Doctor - Zombie Prison - Kill Zombies
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroWitchDoctorZombiePrisonKillZombies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_soundPoint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("WitchDoctorZombie", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_soundPoint = UnitGetPosition(UnitGroupLoopCurrent());
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    PlayerCreateEffectPoint(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "ZombiePrisonDeathSoundPersistent", lv_soundPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroWitchDoctorZombiePrisonKillZombies_Init () {
    libGDHL_gt_HeroWitchDoctorZombiePrisonKillZombies = TriggerCreate("libGDHL_gt_HeroWitchDoctorZombiePrisonKillZombies_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroWitchDoctorZombiePrisonKillZombies, c_playerAny, "ZombiePrisonCancelDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Witch Doctor - Zombie Prison - Relic Zombies Spawned
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroWitchDoctorZombiePrisonRelicZombiesSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_Zombie;
    int lv_ownerPlayer;
    point lv_positionOfAbility;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "ZombiePrisonRelicZombie"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_Zombie = EventUnitCreatedUnit();
    lv_ownerPlayer = UnitGetOwner(lv_Zombie);
    lv_positionOfAbility = UnitGetPosition(EventUnitCreatedUnit());
    libGame_gf_CalculateSpawnedMinionGoalPoints(lv_ownerPlayer, lv_positionOfAbility);
    libAIAI_gf_MinionAIStartMinionAI(lv_Zombie, libGame_gv_spawnedMinionLane, libGame_gv_spawnedMinionFirstWaypointIndex, false, true, 0);
    UnitIssueOrder(EventUnitCreatedUnit(), OrderTargetingPoint(AbilityCommand("attack", 0), libGame_gv_laneData[libGame_gv_spawnedMinionLane].lv_waypoints[libGame_gv_spawnedMinionFirstWaypointIndex]), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroWitchDoctorZombiePrisonRelicZombiesSpawned_Init () {
    libGDHL_gt_HeroWitchDoctorZombiePrisonRelicZombiesSpawned = TriggerCreate("libGDHL_gt_HeroWitchDoctorZombiePrisonRelicZombiesSpawned_Func");
    TriggerAddEventUnitCreated(libGDHL_gt_HeroWitchDoctorZombiePrisonRelicZombiesSpawned, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Witch Doctor - Ravenous Souls - Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroWitchDoctorRavenousSoulsCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_ravenousSoulsUnit;
    string lv_ravenousSoulsBehavior;
    fixed lv_ravenousSoulsDuration;
    unit lv_controllerUnit;

    // Variable Initialization
    lv_ravenousSoulsBehavior = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectUnitCaster);
    if ((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroAbathur")) {
        lv_controllerUnit = libGame_gv_players[lv_player].lv_activeVehicle;
    }
    else {
        lv_controllerUnit = libGame_gv_players[lv_player].lv_heroUnit;
    }
    UnitSelect(EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_player, true);
    lv_ravenousSoulsUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_ravenousSoulsBehavior = CatalogFieldValueGet(c_gameCatalogEffect, (EventPlayerEffectUsed()), "Behavior", lv_player);
    lv_ravenousSoulsDuration = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, lv_ravenousSoulsBehavior, "Duration", lv_player));
    UnitBehaviorSetDuration(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RavenousSoulsChannel", lv_ravenousSoulsDuration);
    UnitBehaviorSetDurationRemaining(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RavenousSoulsChannel", lv_ravenousSoulsDuration);
    libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lv_ravenousSoulsUnit);
    libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    while ((UnitHasBehavior2(lv_controllerUnit, "RavenousSoulsChannel") == true)) {
        if ((UnitHasBehavior2(lv_controllerUnit, "VoidPrison") == true)) {
            UnitBehaviorAdd(lv_ravenousSoulsUnit, "VoidPrison", lv_ravenousSoulsUnit, 1);
        }
        else {
            if ((UnitHasBehavior2(lv_ravenousSoulsUnit, "VoidPrison") == true)) {
                UnitBehaviorRemove(lv_ravenousSoulsUnit, "VoidPrison", 1);
            }
            else {
            }
        }
        Wait(0.0625, c_timeGame);
    }
    UnitBehaviorRemove(lv_ravenousSoulsUnit, "VoidPrison", 1);
    UnitKill(lv_ravenousSoulsUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroWitchDoctorRavenousSoulsCast_Init () {
    libGDHL_gt_HeroWitchDoctorRavenousSoulsCast = TriggerCreate("libGDHL_gt_HeroWitchDoctorRavenousSoulsCast_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroWitchDoctorRavenousSoulsCast, c_playerAny, "RavenousSoulsApplyBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Witch Doctor - Ravenous Souls - Expires
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroWitchDoctorRavenousSoulsExpires_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "WitchDoctorRavenousSouls"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(libGame_gv_players[EventPlayer()].lv_heroUnit, "RavenousSoulsChannel", 1);
    if ((UnitGetType(libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit) == "HeroAbathur")) {
        if ((UnitIsAlive(libGame_gv_players[UnitGetOwner(EventUnit())].lv_activeVehicle) == true)) {
            libGame_gv_players[EventPlayer()].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[EventPlayer()].lv_activeVehicle);
        }
        else {
            libGame_gv_players[EventPlayer()].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[EventPlayer()].lv_heroUnitGroup;
        }
    }
    else {
        libGame_gv_players[EventPlayer()].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[EventPlayer()].lv_heroUnitGroup;
    }
    libGame_gf_CameraUpdateCameraForPlayer(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroWitchDoctorRavenousSoulsExpires_Init () {
    libGDHL_gt_HeroWitchDoctorRavenousSoulsExpires = TriggerCreate("libGDHL_gt_HeroWitchDoctorRavenousSoulsExpires_Func");
    TriggerAddEventUnitDied(libGDHL_gt_HeroWitchDoctorRavenousSoulsExpires, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Witch Doctor - Passive (Caster)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroWitchDoctorPassiveCaster_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageDealt;
    fixed lv_damageModifier;

    // Variable Initialization
    lv_damageDealt = EventUnitDamageAbsorbed();
    lv_damageModifier = 0.075;

    // Conditions
    if (testConds) {
        if (!(((UnitTypeTestAttribute(UnitGetType(EventUnitDamageSourceUnit()), c_unitAttributeHeroic) == true) || (UnitTypeTestAttribute(UnitGetType(EventUnitDamageSourceUnit()), c_unitAttributeSummoned) == true)))) {
            return false;
        }

        if (!((UnitBehaviorCount(libGame_gv_players[UnitGetOwner(EventUnitDamageSourceUnit())].lv_heroUnit, "WitchDoctorDeathRitualCasterImproved") == 0))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "ImmunetoDoTsBehavior") == 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != UnitGetOwner(EventUnitDamageSourceUnit())))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DocksTreasureChest"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ShamanMinionTotem"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "DestructibleBehavior") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "WitchDoctorVoodooRitualTarget", libGame_gv_players[UnitGetOwner(EventUnitDamageSourceUnit())].lv_heroUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroWitchDoctorPassiveCaster_Init () {
    libGDHL_gt_HeroWitchDoctorPassiveCaster = TriggerCreate("libGDHL_gt_HeroWitchDoctorPassiveCaster_Func");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveCaster, null, c_unitDamageTypeRanged, c_unitDamageEither, "WitchDoctorWeaponDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveCaster, null, c_unitDamageTypeSpell, c_unitDamageEither, "WitchDoctorCorpseSpiderJarDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveCaster, null, c_unitDamageTypeAny, c_unitDamageEither, "WitchDoctorCorpseSpiderWeaponDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveCaster, null, c_unitDamageTypeAny, c_unitDamageEither, "GargantuanDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveCaster, null, c_unitDamageTypeSpell, c_unitDamageEither, "GargantuanThrowDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveCaster, null, c_unitDamageTypeSpell, c_unitDamageEither, "PlagueToadsExplodeDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveCaster, null, c_unitDamageTypeSpell, c_unitDamageEither, "PlagueToadsExplodeDamageRelicStack1");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveCaster, null, c_unitDamageTypeSpell, c_unitDamageEither, "PlagueToadsExplodeDamageRelicStack2");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveCaster, null, c_unitDamageTypeSpell, c_unitDamageEither, "PlagueToadsExplodeDamageRelicStack3");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveCaster, null, c_unitDamageTypeSpell, c_unitDamageEither, "PlagueToadsExplodeDamageRelicStack4");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveCaster, null, c_unitDamageTypeSpell, c_unitDamageEither, "PlagueToadsExplodeDamageRelicStack5");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveCaster, null, c_unitDamageTypeSpell, c_unitDamageEither, "RavenousSoulsDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveCaster, null, c_unitDamageTypeAny, c_unitDamageEither, "WitchDoctorZombieWeaponDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveCaster, null, c_unitDamageTypeAny, c_unitDamageEither, "ZombiePrisonRelicZombieWeaponDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Witch Doctor - Passive Improved (Caster)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroWitchDoctorPassiveImprovedCaster_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageDealt;
    fixed lv_damageModifier;

    // Variable Initialization
    lv_damageDealt = EventUnitDamageAbsorbed();
    lv_damageModifier = 0.075;

    // Conditions
    if (testConds) {
        if (!(((UnitTypeTestAttribute(UnitGetType(EventUnitDamageSourceUnit()), c_unitAttributeHeroic) == true) || (UnitTypeTestAttribute(UnitGetType(EventUnitDamageSourceUnit()), c_unitAttributeSummoned) == true)))) {
            return false;
        }

        if (!((UnitBehaviorCount(libGame_gv_players[UnitGetOwner(EventUnitDamageSourceUnit())].lv_heroUnit, "WitchDoctorDeathRitualCasterImproved") == 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != UnitGetOwner(EventUnitDamageSourceUnit())))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "DocksTreasureChest"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "ShamanMinionTotem"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "DestructibleBehavior") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "WitchDoctorDeathRitualTargetImproved", libGame_gv_players[UnitGetOwner(EventUnitDamageSourceUnit())].lv_heroUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroWitchDoctorPassiveImprovedCaster_Init () {
    libGDHL_gt_HeroWitchDoctorPassiveImprovedCaster = TriggerCreate("libGDHL_gt_HeroWitchDoctorPassiveImprovedCaster_Func");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveImprovedCaster, null, c_unitDamageTypeRanged, c_unitDamageEither, "WitchDoctorWeaponDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveImprovedCaster, null, c_unitDamageTypeAny, c_unitDamageEither, "WitchDoctorCorpseSpiderJarDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveImprovedCaster, null, c_unitDamageTypeAny, c_unitDamageEither, "WitchDoctorCorpseSpiderWeaponDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveImprovedCaster, null, c_unitDamageTypeAny, c_unitDamageEither, "GargantuanDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveImprovedCaster, null, c_unitDamageTypeSpell, c_unitDamageEither, "GargantuanThrowDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveImprovedCaster, null, c_unitDamageTypeSpell, c_unitDamageEither, "PlagueToadsExplodeDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveImprovedCaster, null, c_unitDamageTypeSpell, c_unitDamageEither, "PlagueToadsExplodeDamageRelicStack1");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveImprovedCaster, null, c_unitDamageTypeSpell, c_unitDamageEither, "PlagueToadsExplodeDamageRelicStack2");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveImprovedCaster, null, c_unitDamageTypeSpell, c_unitDamageEither, "PlagueToadsExplodeDamageRelicStack3");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveImprovedCaster, null, c_unitDamageTypeSpell, c_unitDamageEither, "PlagueToadsExplodeDamageRelicStack4");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveImprovedCaster, null, c_unitDamageTypeSpell, c_unitDamageEither, "PlagueToadsExplodeDamageRelicStack5");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveImprovedCaster, null, c_unitDamageTypeSpell, c_unitDamageEither, "RavenousSoulsDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveImprovedCaster, null, c_unitDamageTypeAny, c_unitDamageEither, "WitchDoctorZombieWeaponDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveImprovedCaster, null, c_unitDamageTypeAny, c_unitDamageEither, "ZombiePrisonRelicZombieWeaponDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Witch Doctor - Passive (Target)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroWitchDoctorPassiveTarget_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitBehaviorCount(EventUnit(), "WitchDoctorVoodooRitualTarget") == 1) || (UnitBehaviorCount(EventUnit(), "WitchDoctorDeathRitualTargetImproved") == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(EventUnit(), "WitchDoctorDeathRitualTargetImproved") == 1)) {
        UnitCreateEffectUnit(EventUnitDamageSourceUnit(), "WitchDoctorPassive2Dummy", EventUnit());
        if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeBiological) == true)) {
            UnitCreateEffectUnit(UnitBehaviorEffectUnit(EventUnit(), "WitchDoctorDeathRitualTargetImproved", c_effectUnitCaster, 0), "DeathRitualApplyIncreasedAttributesBehavior", UnitBehaviorEffectUnit(EventUnit(), "WitchDoctorDeathRitualTargetImproved", c_effectUnitCaster, 0));
        }
        else {
        }
        UnitCreateEffectUnit(UnitBehaviorEffectUnit(EventUnit(), "WitchDoctorDeathRitualTargetImproved", c_effectUnitCaster, 0), "WitchDoctorDeathRitualImprovedApplyBehavior", UnitBehaviorEffectUnit(EventUnit(), "WitchDoctorDeathRitualTargetImproved", c_effectUnitCaster, 0));
        UnitBehaviorRemove(EventUnit(), "WitchDoctorDeathRitualTargetImproved", 1);
    }
    else {
        UnitCreateEffectUnit(EventUnitDamageSourceUnit(), "WitchDoctorPassive1Dummy", EventUnit());
        UnitCreateEffectUnit(UnitBehaviorEffectUnit(EventUnit(), "WitchDoctorVoodooRitualTarget", c_effectUnitCaster, 0), "WitchDoctorDeathRitualApplyBehavior", UnitBehaviorEffectUnit(EventUnit(), "WitchDoctorVoodooRitualTarget", c_effectUnitCaster, 0));
        UnitBehaviorRemove(EventUnit(), "WitchDoctorVoodooRitualTarget", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroWitchDoctorPassiveTarget_Init () {
    libGDHL_gt_HeroWitchDoctorPassiveTarget = TriggerCreate("libGDHL_gt_HeroWitchDoctorPassiveTarget_Func");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveTarget, null, c_unitDamageTypeRanged, c_unitDamageFatal, null);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveTarget, null, c_unitDamageTypeSpell, c_unitDamageFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Witch Doctor- Gargantuan - Created
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroWitchDoctorGargantuanCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_triggeringPlayer;
    unit lv_witchDoctor;

    // Variable Initialization
    lv_triggeringPlayer = UnitGetOwner(EventUnitCreatedUnit());
    lv_witchDoctor = libGame_gv_players[lv_triggeringPlayer].lv_heroUnit;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(EventUnit(), "AbathurUltimateEvolutionControlBehavior") == 1)) {
        lv_witchDoctor = libGame_gv_players[UnitGetOwner(EventUnit())].lv_activeVehicle;
    }
    else {
    }
    libGDHL_gf_HeroWitchDoctorGargantuanIdle(lv_witchDoctor, lv_triggeringPlayer);
    while (!((UnitIsAlive(EventUnitCreatedUnit()) == false))) {
        Wait(1.0, c_timeGame);
    }
    UnitBehaviorRemove(lv_witchDoctor, "WitchDoctorGargantuanActive", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroWitchDoctorGargantuanCreated_Init () {
    libGDHL_gt_HeroWitchDoctorGargantuanCreated = TriggerCreate("libGDHL_gt_HeroWitchDoctorGargantuanCreated_Func");
    TriggerAddEventUnitCreated(libGDHL_gt_HeroWitchDoctorGargantuanCreated, null, "WitchDoctorGargantuan", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Witch Doctor- Gargantuan - Port
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroWitchDoctorGargantuanPort_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroWitchDoctor"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("WitchDoctorGargantuan", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(libGame_gv_players[lv_player].lv_heroUnit), false);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroWitchDoctorGargantuanPort_Init () {
    libGDHL_gt_HeroWitchDoctorGargantuanPort = TriggerCreate("libGDHL_gt_HeroWitchDoctorGargantuanPort_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroWitchDoctorGargantuanPort, c_playerAny, "PortBackToBaseTeleport");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Uther - Blessed Champion Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroUtherBlessedChampionProc_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventUnitDamageSourceUnit(), "BlessedChampionCarryBehavior") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, "BlessedChampionCreateHealer", "RechargeVitalRate", UnitGetOwner(EventUnitDamageSourceUnit()), FixedToString((EventUnitDamageAttemptedVitals() * libGDHL_gv_bALHeroUtherBlessedChampionHeal), c_fixedPrecisionAny));
    UnitCreateEffectUnit(EventUnitDamageSourceUnit(), "BlessedChampionSearch", EventUnitDamageSourceUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroUtherBlessedChampionProc_Init () {
    libGDHL_gt_HeroUtherBlessedChampionProc = TriggerCreate("libGDHL_gt_HeroUtherBlessedChampionProc_Func");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroUtherBlessedChampionProc, null, c_unitDamageTypeRanged, c_unitDamageEither, "UtherWeaponDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Uther - Holy Radiance Relic Reset Damage Increment
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroUtherHolyRadianceRelicResetDamageIncrement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_k;
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroUtherHolyRadianceDamageIncrement[EventPlayer()] = 0;
    libGDHL_gv_heroUtherHolyRadianceHealingIncrement[EventPlayer()] = 0;
    libGDHL_gv_heroUtherHolyRadianceCombinedIncrement[EventPlayer()] = 0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroUtherHolyRadianceRelicResetDamageIncrement_Init () {
    libGDHL_gt_HeroUtherHolyRadianceRelicResetDamageIncrement = TriggerCreate("libGDHL_gt_HeroUtherHolyRadianceRelicResetDamageIncrement_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroUtherHolyRadianceRelicResetDamageIncrement, null, AbilityCommand("UtherHolyRadiance", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Uther - Holy Radiance Relic Damage/Healing
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroUtherHolyRadianceRelicDamageHealing_Func (bool testConds, bool runActions) {
    int autoEB028A3D_ae;
    int autoEB028A3D_ai;

    // Variable Declarations
    int lv_itPlayer;
    fixed lv_damageDealt;
    fixed lv_desiredAmountHealed;
    fixed lv_pickedUnitCurrentLife;
    fixed lv_actualAmountHealed;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoEB028A3D_ae = libCore_gv_bALMaxPlayers;
    autoEB028A3D_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoEB028A3D_ai >= 0 && lv_itPlayer <= autoEB028A3D_ae) || (autoEB028A3D_ai <= 0 && lv_itPlayer >= autoEB028A3D_ae) ) ; lv_itPlayer += autoEB028A3D_ai ) {
        if ((UnitGetType(libGame_gv_players[lv_itPlayer].lv_heroUnit) == "HeroUther") && (UnitGroupCount(libGDHL_gv_heroUtherHolyRadianceUnitGroup[lv_itPlayer], c_unitCountAlive) > 0)) {
            UnitGroupLoopBegin(libGDHL_gv_heroUtherHolyRadianceUnitGroup[lv_itPlayer]);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((libNtve_gf_PlayerIsEnemy(lv_itPlayer, UnitGetOwner(UnitGroupLoopCurrent()), libNtve_ge_PlayerRelation_Enemy) == true)) {
                    lv_damageDealt = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "HolyRadianceEnemyDamage", "Amount", lv_itPlayer)) + (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "HolyRadianceEnemyDamage", "Amount", lv_itPlayer)) * (libGDHL_gv_heroUtherHolyRadianceDamageIncrement[lv_itPlayer] * libGDHL_gv_bALHeroUtherHolyRadianceRelicDamageHealingIncrement)));
                    UnitDamage(libGame_gv_players[lv_itPlayer].lv_heroUnit, "HolyRadianceEnemyRelicDamage", UnitGroupLoopCurrent(), lv_damageDealt);
                    if ((libGDHL_gv_heroUtherHolyRadianceDamageIncrement[lv_itPlayer] < libGDHL_gv_bALHeroUtherHolyRadianceRelicMaxIncrementCount)) {
                        libGDHL_gv_heroUtherHolyRadianceDamageIncrement[lv_itPlayer] += 1;
                    }
                    else {
                    }
                }
                else {
                    lv_desiredAmountHealed = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "HolyRadianceCreateHealer", "RechargeVitalRate", lv_itPlayer)) + (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "HolyRadianceCreateHealer", "RechargeVitalRate", lv_itPlayer)) * (libGDHL_gv_heroUtherHolyRadianceHealingIncrement[lv_itPlayer] * libGDHL_gv_bALHeroUtherHolyRadianceRelicDamageHealingIncrement)));
                    if ((libGDHL_gv_heroUtherHolyRadianceHealingIncrement[lv_itPlayer] < libGDHL_gv_bALHeroUtherHolyRadianceRelicMaxIncrementCount)) {
                        libGDHL_gv_heroUtherHolyRadianceHealingIncrement[lv_itPlayer] += 1;
                    }
                    else {
                    }
                    if ((UnitBehaviorCount(UnitGroupLoopCurrent(), "TalentBucketAmplifiedHealing") == 1)) {
                        lv_desiredAmountHealed *= StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "TalentBucketAmplifiedHealing", "Modification.HealTakenMultiplier", c_playerAny));
                    }
                    else {
                    }
                    lv_pickedUnitCurrentLife = UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent);
                    lv_actualAmountHealed = MinF((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, c_unitPropCurrent) - lv_pickedUnitCurrentLife), lv_desiredAmountHealed);
                    if ((lv_actualAmountHealed > 0.0)) {
                        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (lv_pickedUnitCurrentLife + lv_actualAmountHealed));
                        PlayerScoreValueSetFromFixed(lv_itPlayer, "Healing", (PlayerScoreValueGetAsFixed(lv_itPlayer, "Healing") + lv_actualAmountHealed));
                        libUIUI_gf_UIFloatingCombatTextCreateTextTag(UnitGetOwner(libGame_gv_players[lv_itPlayer].lv_heroUnit), libCore_gv_floatingCombatTextStandardDuration, FixedToText(lv_actualAmountHealed, 0), UnitGroupLoopCurrent(), 2.0, RandomFixed(-0.4, -0.6), libCore_ge_FloatingTextType_Healing, false);
                        if ((UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "ItemArcaneHealerCarryBehavior") == true)) {
                            UnitBehaviorAdd(UnitGroupLoopCurrent(), "ItemArcaneHealerBuff", libGame_gv_players[lv_itPlayer].lv_heroUnit, 1);
                        }
                        else {
                        }
                    }
                    else {
                    }
                }
                UnitGroupRemove(libGDHL_gv_heroUtherHolyRadianceUnitGroup[lv_itPlayer], UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroUtherHolyRadianceRelicDamageHealing_Init () {
    libGDHL_gt_HeroUtherHolyRadianceRelicDamageHealing = TriggerCreate("libGDHL_gt_HeroUtherHolyRadianceRelicDamageHealing_Func");
    TriggerEnable(libGDHL_gt_HeroUtherHolyRadianceRelicDamageHealing, false);
    TriggerAddEventTimePeriodic(libGDHL_gt_HeroUtherHolyRadianceRelicDamageHealing, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Uther - Holy Radiance Relic Combined Damage/Healing
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroUtherHolyRadianceRelicCombinedDamageHealing_Func (bool testConds, bool runActions) {
    int autoBAF78DFA_ae;
    int autoBAF78DFA_ai;

    // Variable Declarations
    int lv_itPlayer;
    fixed lv_damageDealt;
    fixed lv_desiredAmountHealed;
    fixed lv_pickedUnitCurrentLife;
    fixed lv_actualAmountHealed;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoBAF78DFA_ae = libCore_gv_bALMaxPlayers;
    autoBAF78DFA_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoBAF78DFA_ai >= 0 && lv_itPlayer <= autoBAF78DFA_ae) || (autoBAF78DFA_ai <= 0 && lv_itPlayer >= autoBAF78DFA_ae) ) ; lv_itPlayer += autoBAF78DFA_ai ) {
        if ((UnitGetType(libGame_gv_players[lv_itPlayer].lv_heroUnit) == "HeroUther") && (UnitGroupCount(libGDHL_gv_heroUtherHolyRadianceUnitGroup[lv_itPlayer], c_unitCountAlive) > 0)) {
            UnitGroupLoopBegin(libGDHL_gv_heroUtherHolyRadianceUnitGroup[lv_itPlayer]);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((libNtve_gf_PlayerIsEnemy(lv_itPlayer, UnitGetOwner(UnitGroupLoopCurrent()), libNtve_ge_PlayerRelation_Enemy) == true)) {
                    lv_damageDealt = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "HolyRadianceEnemyDamage", "Amount", lv_itPlayer)) + (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "HolyRadianceEnemyDamage", "Amount", lv_itPlayer)) * (libGDHL_gv_heroUtherHolyRadianceCombinedIncrement[lv_itPlayer] * libGDHL_gv_bALHeroUtherHolyRadianceRelicDamageHealingIncrement)));
                    UnitDamage(libGame_gv_players[lv_itPlayer].lv_heroUnit, "HolyRadianceEnemyRelicDamage", UnitGroupLoopCurrent(), lv_damageDealt);
                    if ((libGDHL_gv_heroUtherHolyRadianceCombinedIncrement[lv_itPlayer] < libGDHL_gv_bALHeroUtherHolyRadianceRelicMaxIncrementCount)) {
                        libGDHL_gv_heroUtherHolyRadianceCombinedIncrement[lv_itPlayer] += 1;
                    }
                    else {
                    }
                }
                else {
                    lv_desiredAmountHealed = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "HolyRadianceCreateHealer", "RechargeVitalRate", lv_itPlayer)) + (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "HolyRadianceCreateHealer", "RechargeVitalRate", lv_itPlayer)) * (libGDHL_gv_heroUtherHolyRadianceCombinedIncrement[lv_itPlayer] * libGDHL_gv_bALHeroUtherHolyRadianceRelicDamageHealingIncrement)));
                    if ((libGDHL_gv_heroUtherHolyRadianceCombinedIncrement[lv_itPlayer] < libGDHL_gv_bALHeroUtherHolyRadianceRelicMaxIncrementCount)) {
                        libGDHL_gv_heroUtherHolyRadianceCombinedIncrement[lv_itPlayer] += 1;
                    }
                    else {
                    }
                    if ((UnitBehaviorCount(UnitGroupLoopCurrent(), "TalentBucketAmplifiedHealing") == 1)) {
                        lv_desiredAmountHealed *= StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "TalentBucketAmplifiedHealing", "Modification.HealTakenMultiplier", c_playerAny));
                    }
                    else {
                    }
                    lv_pickedUnitCurrentLife = UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, c_unitPropCurrent);
                    lv_actualAmountHealed = MinF((UnitGetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifeMax, c_unitPropCurrent) - lv_pickedUnitCurrentLife), lv_desiredAmountHealed);
                    if ((lv_actualAmountHealed > 0.0)) {
                        UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLife, (lv_pickedUnitCurrentLife + lv_actualAmountHealed));
                        PlayerScoreValueSetFromFixed(lv_itPlayer, "Healing", (PlayerScoreValueGetAsFixed(lv_itPlayer, "Healing") + lv_actualAmountHealed));
                        libUIUI_gf_UIFloatingCombatTextCreateTextTag(UnitGetOwner(libGame_gv_players[lv_itPlayer].lv_heroUnit), libCore_gv_floatingCombatTextStandardDuration, FixedToText(lv_actualAmountHealed, 0), UnitGroupLoopCurrent(), 2.0, RandomFixed(-0.4, -0.6), libCore_ge_FloatingTextType_Healing, false);
                        if ((UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "ItemArcaneHealerCarryBehavior") == true)) {
                            UnitBehaviorAdd(UnitGroupLoopCurrent(), "ItemArcaneHealerBuff", libGame_gv_players[lv_itPlayer].lv_heroUnit, 1);
                        }
                        else {
                        }
                    }
                    else {
                    }
                }
                UnitGroupRemove(libGDHL_gv_heroUtherHolyRadianceUnitGroup[lv_itPlayer], UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroUtherHolyRadianceRelicCombinedDamageHealing_Init () {
    libGDHL_gt_HeroUtherHolyRadianceRelicCombinedDamageHealing = TriggerCreate("libGDHL_gt_HeroUtherHolyRadianceRelicCombinedDamageHealing_Func");
    TriggerEnable(libGDHL_gt_HeroUtherHolyRadianceRelicCombinedDamageHealing, false);
    TriggerAddEventTimePeriodic(libGDHL_gt_HeroUtherHolyRadianceRelicCombinedDamageHealing, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Uther - Holy Radiance Relic Turn On/Off
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroUtherHolyRadianceRelicTurnOnOff_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroUther"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libGDHL_gt_HeroUtherHolyRadianceRelicCombinedDamageHealing, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroUtherHolyRadianceRelicTurnOnOff_Init () {
    libGDHL_gt_HeroUtherHolyRadianceRelicTurnOnOff = TriggerCreate("libGDHL_gt_HeroUtherHolyRadianceRelicTurnOnOff_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroUtherHolyRadianceRelicTurnOnOff, null, "UtherHolyRadianceMasteryCarryBehavior", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Uther - Holy Radiance Dummy Damage
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroUtherHolyRadianceDummyDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libGDHL_gv_heroUtherHolyRadianceUnitGroup[lv_player], EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroUtherHolyRadianceDummyDamage_Init () {
    libGDHL_gt_HeroUtherHolyRadianceDummyDamage = TriggerCreate("libGDHL_gt_HeroUtherHolyRadianceDummyDamage_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroUtherHolyRadianceDummyDamage, c_playerAny, "HolyRadianceEnemyDummyDamage");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroUtherHolyRadianceDummyDamage, c_playerAny, "HolyRadianceAllyDummyHeal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Uther - Spirit of Redemption Cooldown Reset
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroUtherSpiritofRedemptionCooldownReset_Func (bool testConds, bool runActions) {
    int auto5E5F8669_ae;
    int auto5E5F8669_ai;

    // Variable Declarations
    int lv_i;
    unit lv_hero;
    int lv_heroIndex;
    string lv_abilLink;
    string lv_cooldownLink;
    fixed lv_currentCooldownAmount;
    fixed lv_newCooldownAmount;
    string lv_chargeLink;
    fixed lv_currentChargeAmount;
    fixed lv_newChargeAmount;

    // Variable Initialization
    lv_hero = EventUnit();
    lv_cooldownLink = "";
    lv_chargeLink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        lv_heroIndex = libCore_gf_GetHeroIndexForUnitType(UnitGetType(lv_hero));
        libGame_gf_UpdateHeroManaCosts(lv_hero);
        libNtve_gf_UnitRemoveCooldown(EventUnit(), "Abil/UtherHolyShock");
        auto5E5F8669_ae = libCore_gv_dataHeroesMaxAbilitiesPerHero;
        auto5E5F8669_ai = 1;
        lv_i = 1;
        for ( ; ( (auto5E5F8669_ai >= 0 && lv_i <= auto5E5F8669_ae) || (auto5E5F8669_ai <= 0 && lv_i >= auto5E5F8669_ae) ) ; lv_i += auto5E5F8669_ai ) {
            lv_abilLink = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilities[lv_i].lv_ability;
            if ((lv_abilLink != null)) {
                if ((lv_abilLink != "UtherDivineStorm") && (lv_abilLink != "UtherDivineIntervention")) {
                    lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.Link", UnitGetOwner(lv_hero));
                    libNtve_gf_UnitRemoveCooldown(lv_hero, lv_cooldownLink);
                }
                else {
                }
                lv_chargeLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Charge.Link", UnitGetOwner(lv_hero));
                UnitAddChargeUsed(lv_hero, lv_chargeLink, -1.0);
            }
            else {
            }
        }
    }
    else {
        libGame_gf_UpdateHeroManaCosts(lv_hero);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroUtherSpiritofRedemptionCooldownReset_Init () {
    libGDHL_gt_HeroUtherSpiritofRedemptionCooldownReset = TriggerCreate("libGDHL_gt_HeroUtherSpiritofRedemptionCooldownReset_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroUtherSpiritofRedemptionCooldownReset, null, "SpiritOfRedemptionSpiritFormBuff", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroUtherSpiritofRedemptionCooldownReset, null, "SpiritOfRedemptionSpiritFormBuffImproved", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Uther - Eternal Devotion Suppress Collision
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroUtherEternalDevotionSuppressCollision_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogUnit, "HeroUther", "Mover", UnitGetOwner(EventUnit()), "Fly");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroUther", "Collide[" + IntToString(1) + "]", UnitGetOwner(EventUnit()), "0");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroUther", "Collide[" + IntToString(8) + "]", UnitGetOwner(EventUnit()), "0");
    while (!((UnitHasBehavior2(EventUnit(), "SpiritOfRedemptionSpiritFormBuff") == false))) {
        Wait(0.0625, c_timeGame);
    }
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroUther", "Mover", UnitGetOwner(EventUnit()), "Ground");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroUther", "Collide[" + IntToString(1) + "]", UnitGetOwner(EventUnit()), "1");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroUther", "Collide[" + IntToString(8) + "]", UnitGetOwner(EventUnit()), "1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroUtherEternalDevotionSuppressCollision_Init () {
    libGDHL_gt_HeroUtherEternalDevotionSuppressCollision = TriggerCreate("libGDHL_gt_HeroUtherEternalDevotionSuppressCollision_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroUtherEternalDevotionSuppressCollision, null, "SpiritOfRedemptionSpiritFormBuff", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Uther - Eternal Devotion Suppress Collision (Improved)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroUtherEternalDevotionSuppressCollisionImproved_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogUnit, "HeroUther", "Mover", UnitGetOwner(EventUnit()), "Fly");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroUther", "Collide[" + IntToString(1) + "]", UnitGetOwner(EventUnit()), "0");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroUther", "Collide[" + IntToString(8) + "]", UnitGetOwner(EventUnit()), "0");
    while (!((UnitHasBehavior2(EventUnit(), "SpiritOfRedemptionSpiritFormBuffImproved") == false))) {
        Wait(0.0625, c_timeGame);
    }
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroUther", "Mover", UnitGetOwner(EventUnit()), "Ground");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroUther", "Collide[" + IntToString(1) + "]", UnitGetOwner(EventUnit()), "1");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroUther", "Collide[" + IntToString(8) + "]", UnitGetOwner(EventUnit()), "1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroUtherEternalDevotionSuppressCollisionImproved_Init () {
    libGDHL_gt_HeroUtherEternalDevotionSuppressCollisionImproved = TriggerCreate("libGDHL_gt_HeroUtherEternalDevotionSuppressCollisionImproved_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroUtherEternalDevotionSuppressCollisionImproved, null, "SpiritOfRedemptionSpiritFormBuffImproved", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zeratul - Void Prison - Kill Prison
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZeratulVoidPrisonKillPrison_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("ZeratulVoidPrisonDome", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "VoidPrisonDomeBehavior", 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("ZeratulVoidPrisonDomeProtectivePrison", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "VoidPrisonDomeBehaviorProtectivePrison", 1);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZeratulVoidPrisonKillPrison_Init () {
    libGDHL_gt_HeroZeratulVoidPrisonKillPrison = TriggerCreate("libGDHL_gt_HeroZeratulVoidPrisonKillPrison_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroZeratulVoidPrisonKillPrison, c_playerAny, "VoidPrisonCancelSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zeratul- Blink Return Cancel Delay
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZeratulBlinkReturnCancelDelay_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAddCooldown(EventUnit(), "Abil/ZeratulBlinkReturn", 0.25);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZeratulBlinkReturnCancelDelay_Init () {
    libGDHL_gt_HeroZeratulBlinkReturnCancelDelay = TriggerCreate("libGDHL_gt_HeroZeratulBlinkReturnCancelDelay_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroZeratulBlinkReturnCancelDelay, null, AbilityCommand("ZeratulBlinkStorm", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Moonwell Cooldown On/Off
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMoonwellCooldownOnOff_Func (bool testConds, bool runActions) {
    int auto0520E1D2_ae;
    int auto0520E1D2_ai;

    // Variable Declarations
    int lv_index;
    int lv_itPlayerIndex;
    bool lv_isHeroUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto0520E1D2_ae = libCore_gv_bALMaxPlayers;
    auto0520E1D2_ai = 1;
    lv_itPlayerIndex = 1;
    for ( ; ( (auto0520E1D2_ai >= 0 && lv_itPlayerIndex <= auto0520E1D2_ae) || (auto0520E1D2_ai <= 0 && lv_itPlayerIndex >= auto0520E1D2_ae) ) ; lv_itPlayerIndex += auto0520E1D2_ai ) {
        if ((EventUnit() == libGame_gv_players[lv_itPlayerIndex].lv_heroUnit)) {
            lv_isHeroUnit = true;
            break;
        }
        else {
        }
    }
    if (((UnitIsValid(EventUnit()) == false) || (lv_isHeroUnit == false))) {
        return true;
    }
    else {
    }
    UIFlyerHelperOverride(PlayerGroupAll(), libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone);
    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        UIFlyerHelperOverride(PlayerGroupSingle(UnitGetOwner(EventUnit())), libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll);
        if (((UnitGetOwner(EventUnit()) < 1) || (UnitGetOwner(EventUnit()) > libCore_gv_bALMaxPlayers))) {
            TextExpressionSetToken("Param/Expression/lib_GDHL_75201919", "A", IntToText(UnitGetOwner(EventUnit())));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_GDHL_75201919"), true);
        }
        else {
        }
        UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("TownMoonwell", "TownMoonwellL2", "TownMoonwellL3", UnitGetOwner(EventUnit()), c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "Signal MoonwellDrink");
            UnitGroupAdd(libGDHL_gv_moonwellTextTagsUnitGroup[UnitGetOwner(EventUnit())], UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(libGDHL_gv_moonwellTextTagsUnitGroup[UnitGetOwner(EventUnit())]);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            lv_index += 1;
            TextTagCreate((StringExternal("Param/Value/lib_GDHL_E0EACE16") + FixedToText(UnitBehaviorDuration(UnitGroupLoopCurrent(), "HealingFountainCooldown"), 0)), 20, UnitGetPosition(UnitGroupLoopCurrent()), 4.2, false, false, PlayerGroupSingle(UnitGetOwner(EventUnit())));
            libGDHL_gv_moonwellTextTags[UnitGetOwner(EventUnit())][lv_index] = TextTagLastCreated();
            libGDHL_gv_moonwellTextTagsUnit[UnitGetOwner(EventUnit())][lv_index] = UnitGroupLoopCurrent();
        }
        UnitGroupLoopEnd();
    }
    else {
        UIFlyerHelperOverride(PlayerGroupSingle(UnitGetOwner(EventUnit())), libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll);
        UnitGroupLoopBegin(libGDHL_gv_moonwellTextTagsUnitGroup[UnitGetOwner(EventUnit())]);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "Signal MoonwellReset");
            UnitGroupRemove(libGDHL_gv_moonwellTextTagsUnitGroup[UnitGetOwner(EventUnit())], UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        IntLoopBegin(1, 12);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            libGDHL_gv_moonwellTextTagsUnit[UnitGetOwner(EventUnit())][IntLoopCurrent()] = null;
        }
        IntLoopEnd();
        IntLoopBegin(1, 12);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            TextTagDestroy(libGDHL_gv_moonwellTextTags[UnitGetOwner(EventUnit())][IntLoopCurrent()]);
        }
        IntLoopEnd();
    }
    Wait(0.0625, c_timeGame);
    UIFlyerHelperClearOverride(PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMoonwellCooldownOnOff_Init () {
    libGDHL_gt_HeroMoonwellCooldownOnOff = TriggerCreate("libGDHL_gt_HeroMoonwellCooldownOnOff_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMoonwellCooldownOnOff, null, "HealingFountainCooldown", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Moonwell Duration Text Tag Updates
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMoonwellDurationTextTagUpdates_Func (bool testConds, bool runActions) {
    int auto24BACF5C_ae;
    int auto24BACF5C_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto24BACF5C_ae = 10;
    auto24BACF5C_ai = 1;
    lv_i = 1;
    for ( ; ( (auto24BACF5C_ai >= 0 && lv_i <= auto24BACF5C_ae) || (auto24BACF5C_ai <= 0 && lv_i >= auto24BACF5C_ae) ) ; lv_i += auto24BACF5C_ai ) {
        if ((UnitGroupCount(libGDHL_gv_moonwellTextTagsUnitGroup[lv_i], c_unitCountAlive) > 0)) {
            IntLoopBegin(1, 12);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                if ((UnitIsAlive(libGDHL_gv_moonwellTextTagsUnit[lv_i][IntLoopCurrent()]) == true)) {
                    TextTagShow(libGDHL_gv_moonwellTextTags[lv_i][IntLoopCurrent()], PlayerGroupSingle(lv_i), true);
                    TextTagSetText(libGDHL_gv_moonwellTextTags[lv_i][IntLoopCurrent()], (StringExternal("Param/Value/lib_GDHL_2CA6CBA0") + FixedToText(UnitBehaviorDuration(libGame_gv_players[lv_i].lv_heroUnit, "HealingFountainCooldown"), 0)));
                }
                else {
                    TextTagDestroy(libGDHL_gv_moonwellTextTags[lv_i][IntLoopCurrent()]);
                }
            }
            IntLoopEnd();
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMoonwellDurationTextTagUpdates_Init () {
    libGDHL_gt_HeroMoonwellDurationTextTagUpdates = TriggerCreate("libGDHL_gt_HeroMoonwellDurationTextTagUpdates_Func");
    TriggerAddEventTimePeriodic(libGDHL_gt_HeroMoonwellDurationTextTagUpdates, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Overdrive Update Mana And AP
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentOverdriveUpdateManaAndAP_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventUnit(), "OverdriveManaCostOverride") == 0))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) != "HeroIllidan") && (UnitGetType(EventUnit()) != "HeroBarbarian")))) {
            return false;
        }

        if (!(((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate) || (EventUnitBehaviorChange() == c_unitBehaviorChangeDeactivate)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_UpdateHeroManaCosts(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentOverdriveUpdateManaAndAP_Init () {
    libGDHL_gt_TalentOverdriveUpdateManaAndAP = TriggerCreate("libGDHL_gt_TalentOverdriveUpdateManaAndAP_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_TalentOverdriveUpdateManaAndAP, null, "BucketOverdrive", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent Bucket - Marksman On (Update Stats)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentBucketMarksmanOnUpdateStats_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "HeroTassadar")) {
        UnitBehaviorRemove(EventUnit(), "TalentBucketMarksman", 1);
        UnitBehaviorAdd(EventUnit(), "FocusedAttackDamageResponseDistortionBeam", EventUnit(), 1);
    }
    else {
    }
    libUIUI_gf_UIUpdateEventPlayerStatsChange(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentBucketMarksmanOnUpdateStats_Init () {
    libGDHL_gt_TalentBucketMarksmanOnUpdateStats = TriggerCreate("libGDHL_gt_TalentBucketMarksmanOnUpdateStats_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_TalentBucketMarksmanOnUpdateStats, null, "TalentBucketMarksman", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent Bucket - Marksman Damage Response On (Update Stats)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentBucketMarksmanDamageResponseOnUpdateStats_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UIUpdateEventPlayerStatsChange(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentBucketMarksmanDamageResponseOnUpdateStats_Init () {
    libGDHL_gt_TalentBucketMarksmanDamageResponseOnUpdateStats = TriggerCreate("libGDHL_gt_TalentBucketMarksmanDamageResponseOnUpdateStats_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_TalentBucketMarksmanDamageResponseOnUpdateStats, null, "FocusedAttackDamageResponseDistortionBeam", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent Bucket - Marksman Attack Proc (Add Cooldown Behavior)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentBucketMarksmanAttackProcAddCooldownBehavior_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TalentBucketMarksman") == 1))) {
            return false;
        }

        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)) != "HeroTassadar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TalentBucketMarksmanCooldown", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentBucketMarksmanAttackProcAddCooldownBehavior_Init () {
    libGDHL_gt_TalentBucketMarksmanAttackProcAddCooldownBehavior = TriggerCreate("libGDHL_gt_TalentBucketMarksmanAttackProcAddCooldownBehavior_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_TalentBucketMarksmanAttackProcAddCooldownBehavior, c_playerAny, "TalentGenericMarksmanDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent Bucket - Distortion Beam Damage (Add Cooldown Behavior) 
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentBucketDistortionBeamDamageAddCooldownBehavior_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventUnitDamageSourceUnit(), "FocusedAttackDamageResponseDistortionBeam") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitDamageSourceUnit(), "TalentBucketMarksmanCooldown", EventUnitDamageSourceUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentBucketDistortionBeamDamageAddCooldownBehavior_Init () {
    libGDHL_gt_TalentBucketDistortionBeamDamageAddCooldownBehavior = TriggerCreate("libGDHL_gt_TalentBucketDistortionBeamDamageAddCooldownBehavior_Func");
    TriggerAddEventUnitDamaged(libGDHL_gt_TalentBucketDistortionBeamDamageAddCooldownBehavior, null, c_unitDamageTypeAny, c_unitDamageEither, "TassadarWeaponDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_TalentBucketDistortionBeamDamageAddCooldownBehavior, null, c_unitDamageTypeAny, c_unitDamageEither, "DistortionBeamDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_TalentBucketDistortionBeamDamageAddCooldownBehavior, null, c_unitDamageTypeAny, c_unitDamageEither, "TassadarArchonWeaponDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_TalentBucketDistortionBeamDamageAddCooldownBehavior, null, c_unitDamageTypeAny, c_unitDamageEither, "TwilightArchonDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Rewind Activate
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentRewindActivate_Func (bool testConds, bool runActions) {
    int auto17161144_ae;
    int auto17161144_ai;

    // Variable Declarations
    int lv_itAbility;
    unit lv_hero;
    int lv_heroIndex;
    string lv_abilLink;
    string lv_cooldownLink;
    fixed lv_currentCooldownAmount;
    fixed lv_newCooldownAmount;
    string lv_chargeLink;
    fixed lv_currentChargeAmount;
    fixed lv_newChargeAmount;

    // Variable Initialization
    lv_cooldownLink = "";
    lv_chargeLink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_heroIndex = libCore_gf_GetHeroIndexForUnitType(UnitGetType(lv_hero));
    auto17161144_ae = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_numberOfAbilities;
    auto17161144_ai = 1;
    lv_itAbility = 1;
    for ( ; ( (auto17161144_ai >= 0 && lv_itAbility <= auto17161144_ae) || (auto17161144_ai <= 0 && lv_itAbility >= auto17161144_ae) ) ; lv_itAbility += auto17161144_ai ) {
        if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilities[lv_itAbility].lv_isAffectedByCooldownReduction == true) && (libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilities[lv_itAbility].lv_isHeroic == false)) {
            lv_abilLink = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilities[lv_itAbility].lv_ability;
            lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.Link", UnitGetOwner(lv_hero));
            UnitModifyCooldown(lv_hero, lv_cooldownLink, -60.0, c_cooldownOperationAdd);
            if ((libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilities[lv_itAbility].lv_usesCharges == true)) {
                lv_chargeLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Charge.Link", UnitGetOwner(lv_hero));
                UnitAddChargeUsed(lv_hero, lv_chargeLink, -1.0);
            }
            else {
            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentRewindActivate_Init () {
    libGDHL_gt_TalentRewindActivate = TriggerCreate("libGDHL_gt_TalentRewindActivate_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_TalentRewindActivate, c_playerAny, "TalentRewindSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Giant Killer Updated Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentGiantKillerUpdatedProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_lifePercentage;
    fixed lv_shields;
    fixed lv_life;
    fixed lv_customShield;
    fixed lv_totalVitals;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitTarget), "GenericVehicleBehaviorOccupied") == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitTarget), "GenericVehicleBehaviorEmpty") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "GiantKillerDamageResponseDummySet")) {
        lv_lifePercentage = 0.015;
    }
    else if ((EventPlayerEffectUsed() == "GiantKillerDamageResponseDummySetTychus")) {
        lv_lifePercentage = 0.005;
    }
    lv_life = UnitGetPropertyFixed(EventPlayerEffectUsedUnit(c_effectUnitTarget), c_unitPropLifeMax, c_unitPropCurrent);
    lv_totalVitals = (lv_life);
    UnitDamage(EventPlayerEffectUsedUnit(c_effectUnitCaster), "GiantKillerDummyDamage", EventPlayerEffectUsedUnit(c_effectUnitTarget), (lv_totalVitals * lv_lifePercentage));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentGiantKillerUpdatedProc_Init () {
    libGDHL_gt_TalentGiantKillerUpdatedProc = TriggerCreate("libGDHL_gt_TalentGiantKillerUpdatedProc_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_TalentGiantKillerUpdatedProc, c_playerAny, "GiantKillerDamageResponseDummySet");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_TalentGiantKillerUpdatedProc, c_playerAny, "GiantKillerDamageResponseDummySetTychus");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Focused Attack Cooldown
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_FocusedAttackCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    fixed lv_currentCooldownAmount;
    fixed lv_newCooldownAmount;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    if ((UnitHasBehavior2(lv_hero, "TalentBucketMarksmanCooldown") == true)) {
        lv_currentCooldownAmount = UnitBehaviorDuration(lv_hero, "TalentBucketMarksmanCooldown");
        lv_newCooldownAmount = (lv_currentCooldownAmount - 1.0);
        UnitBehaviorSetDuration(lv_hero, "TalentBucketMarksmanCooldown", MaxF(lv_newCooldownAmount, 0.1));
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_FocusedAttackCooldown_Init () {
    libGDHL_gt_FocusedAttackCooldown = TriggerCreate("libGDHL_gt_FocusedAttackCooldown_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_FocusedAttackCooldown, c_playerAny, "FocusedAttackCooldownReductionDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Fury of the Storm
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentFuryoftheStorm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damage;
    fixed lv_modifiedDamage;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitBehaviorCount(EventUnitDamageSourceUnit(), "FuryoftheStormCarryBehavior") == 1) || (UnitBehaviorCount(EventUnitDamageSourceUnit(), "TalentBucketFuryoftheStormCarryBehavior") == 1) || (UnitBehaviorCount(EventUnitDamageSourceUnit(), "DemonHunterFuryoftheStormCarryBehavior") == 1) || (UnitBehaviorCount(EventUnitDamageSourceUnit(), "TalentBucketFuryoftheStormCarryBehaviorTychus") == 1)))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnitDamageSourceUnit(), "FuryoftheStormCooldown") == 0))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnitDamageSourceUnit(), "FuryoftheStormCooldownTychus") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damage = EventUnitDamageAttempted();
    lv_modifiedDamage = (lv_damage * (1.0 - libCore_gv_talents_FuryOfTheStormBounceDamagePercent_C));
    CatalogFieldValueSet(c_gameCatalogEffect, "FuryoftheStormHop1Damage", "Amount", UnitGetOwner(EventUnitDamageSourceUnit()), FixedToString(lv_modifiedDamage, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "FuryoftheStormHop2Damage", "Amount", UnitGetOwner(EventUnitDamageSourceUnit()), FixedToString(lv_modifiedDamage, c_fixedPrecisionAny));
    UnitCreateEffectUnit(EventUnitDamageSourceUnit(), "FuryoftheStormHop1Delay", EventUnit());
    if (((UnitBehaviorCount(EventUnitDamageSourceUnit(), "FuryoftheStormCarryBehavior") == 1) || (UnitBehaviorCount(EventUnitDamageSourceUnit(), "TalentBucketFuryoftheStormCarryBehavior") == 1) || (UnitBehaviorCount(EventUnitDamageSourceUnit(), "DemonHunterFuryoftheStormCarryBehavior") == 1))) {
        UnitBehaviorAdd(EventUnitDamageSourceUnit(), "FuryoftheStormCooldown", EventUnitDamageSourceUnit(), 1);
    }
    else if ((UnitBehaviorCount(EventUnitDamageSourceUnit(), "TalentBucketFuryoftheStormCarryBehaviorTychus") == 1)) {
        UnitBehaviorAdd(EventUnitDamageSourceUnit(), "FuryoftheStormCooldownTychus", EventUnitDamageSourceUnit(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentFuryoftheStorm_Init () {
    libGDHL_gt_TalentFuryoftheStorm = TriggerCreate("libGDHL_gt_TalentFuryoftheStorm_Func");
    TriggerAddEventUnitDamaged(libGDHL_gt_TalentFuryoftheStorm, null, c_unitDamageTypeRanged, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Call of the Storm Explosion
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentCalloftheStormExplosion_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!(((UnitBehaviorCount(EventUnitDamageSourceUnit(), "TalentCalloftheStorm") == 1) || (UnitBehaviorCount(libGame_gv_players[UnitGetOwner(EventUnitDamageSourceUnit())].lv_heroUnit, "TalentBucketCalloftheStorm") == 1) || (UnitBehaviorCount(libGame_gv_players[UnitGetOwner(EventUnitDamageSourceUnit())].lv_heroUnit, "BarbarianTalentCalloftheStorm") == 1) || (UnitBehaviorCount(libGame_gv_players[UnitGetOwner(EventUnitDamageSourceUnit())].lv_heroUnit, "IllidanTalentCalloftheStorm") == 1) || (UnitBehaviorCount(libGame_gv_players[UnitGetOwner(EventUnitDamageSourceUnit())].lv_heroUnit, "AbathurTalentCalloftheStorm") == 1) || (TechTreeBehaviorCount(EventUnitDamageSourcePlayer(), "AbathurTalentCalloftheStorm", c_techCountCompleteOnly) >= 1)))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) != UnitGetOwner(EventUnitDamageSourceUnit())))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "TalentCalloftheStormDamage"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "SuicideRemoveCaster"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "Suicide"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "SuicideRemove"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "BurningRageDamage1"))) {
            return false;
        }

        if (!((EventUnitDamageEffect() != "BurningRageDamage2"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "StormKingsCrestDestructibleBarrel"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "VehicleDragon"))) {
            return false;
        }

        if (!((UnitGetType(EventUnitDamageSourceUnit()) != "VehicleDragon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(EventUnitDamageSourceUnit(), "TalentCalloftheStormSet", UnitGetPosition(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentCalloftheStormExplosion_Init () {
    libGDHL_gt_TalentCalloftheStormExplosion = TriggerCreate("libGDHL_gt_TalentCalloftheStormExplosion_Func");
    TriggerAddEventUnitDamaged(libGDHL_gt_TalentCalloftheStormExplosion, null, c_unitDamageTypeSpell, c_unitDamageFatal, null);
    TriggerAddEventUnitDamaged(libGDHL_gt_TalentCalloftheStormExplosion, null, c_unitDamageTypeRanged, c_unitDamageFatal, "BarbarianSeismicSlamDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Eye of the Storm Explosion Damage Update
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentEyeoftheStormExplosionDamageUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, "EyeoftheStormExplodeDamage", "Amount", EventPlayer(), FixedToString((UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) * libCore_gv_talents_EyeOfTheStormExplosionDamagePercentage), c_fixedPrecisionAny));
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 0.125, -1, 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentEyeoftheStormExplosionDamageUpdate_Init () {
    libGDHL_gt_TalentEyeoftheStormExplosionDamageUpdate = TriggerCreate("libGDHL_gt_TalentEyeoftheStormExplosionDamageUpdate_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_TalentEyeoftheStormExplosionDamageUpdate, null, "ResurgenceoftheStormRezDelay", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Eye of the Storm Cloak Suppression
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentEyeoftheStormCloakSuppression_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "HeroZeratul") || (UnitGetType(EventUnit()) == "HeroNova")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "HoldFire", 1);
    UnitBehaviorRemove(EventUnit(), "HoldFireInitial", 1);
    UnitBehaviorAdd(EventUnit(), "ZeratulPermanentCloakReveal", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentEyeoftheStormCloakSuppression_Init () {
    libGDHL_gt_TalentEyeoftheStormCloakSuppression = TriggerCreate("libGDHL_gt_TalentEyeoftheStormCloakSuppression_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_TalentEyeoftheStormCloakSuppression, null, "ResurgenceoftheStormRezDelay", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Arcane Teachings Apply Slow
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentArcaneTeachingsApplySlow_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitTypeTestAttribute(UnitGetType(EventUnitDamageSourceUnit()), c_unitAttributeHeroic) == true) || (UnitTypeTestAttribute(UnitGetType(EventUnitDamageSourceUnit()), c_unitAttributeSummoned) == true)))) {
            return false;
        }

        if (!((UnitBehaviorCount(libGame_gv_players[UnitGetOwner(EventUnitDamageSourceUnit())].lv_heroUnit, "TalentBucketArcaneTeachings") == 1))) {
            return false;
        }

        if (!(((EventUnitDamageEffect() != "WitchDoctorDeathRitualDamage") && (EventUnitDamageEffect() != "WitchDoctorDeathRitualImprovedDamage") && (UnitGetType(EventUnit()) != "JungleGraveGolemDefender") && (EventUnitDamageEffect() != "TalentBloodForBloodDamage") && (EventUnitDamageEffect() != "BurningRageDamage1") && (EventUnitDamageEffect() != "BurningRageDamage2") && (EventUnitDamageEffect() != "FuryoftheStormHop1Damage") && (EventUnitDamageEffect() != "FuryoftheStormHop2Damage") && (EventUnitDamageEffect() != "FuryoftheStormHop3Damage") && (EventUnitDamageEffect() != "VehicleDragonKnightBullRushDamage") && (EventUnitDamageEffect() != "DragonBurninateDamage") && (EventUnitDamageEffect() != "DragonFireBreathDamage") && (EventUnitDamageEffect() != "VehicleDragonKnightAttackDamage") && (EventUnitDamageAmount() != 0.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "TalentBucketArcaneTeachingsSlow", libGame_gv_players[UnitGetOwner(EventUnitDamageSourceUnit())].lv_heroUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentArcaneTeachingsApplySlow_Init () {
    libGDHL_gt_TalentArcaneTeachingsApplySlow = TriggerCreate("libGDHL_gt_TalentArcaneTeachingsApplySlow_Func");
    TriggerAddEventUnitDamaged(libGDHL_gt_TalentArcaneTeachingsApplySlow, null, c_unitDamageTypeSpell, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Swift Storm
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentSwiftStorm_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueModify(c_gameCatalogBehavior, "Mounted", "Modification.UnifiedMoveSpeedFactor", UnitGetOwner(EventUnit()), FixedToString(libGDHL_gv_bALHeroSwiftStormMountSpeedIncrease, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogBehavior, "SummonedUnitMountBehavior", "Modification.UnifiedMoveSpeedFactor", UnitGetOwner(EventUnit()), FixedToString(libGDHL_gv_bALHeroSwiftStormMountSpeedIncrease, c_fixedPrecisionAny), c_upgradeOperationAdd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentSwiftStorm_Init () {
    libGDHL_gt_TalentSwiftStorm = TriggerCreate("libGDHL_gt_TalentSwiftStorm_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_TalentSwiftStorm, null, "TalentBucketSwiftStormCarryBehavior", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Follow Through
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentFollowThrough_Func (bool testConds, bool runActions) {
    int auto98ECC35E_ae;
    int auto98ECC35E_ai;

    // Variable Declarations
    int lv_i;
    unit lv_hero;
    int lv_heroIndex;
    string lv_abilLink;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "TalentBucketFollowThroughCooldown") == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "TalentBucketFollowThroughCarryBehavior") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hero = EventUnit();
    lv_heroIndex = libCore_gf_GetHeroIndexForUnitType(UnitGetType(lv_hero));
    auto98ECC35E_ae = libCore_gv_dataHeroesMaxAbilitiesPerHero;
    auto98ECC35E_ai = 1;
    lv_i = 1;
    for ( ; ( (auto98ECC35E_ai >= 0 && lv_i <= auto98ECC35E_ae) || (auto98ECC35E_ai <= 0 && lv_i >= auto98ECC35E_ae) ) ; lv_i += auto98ECC35E_ai ) {
        lv_abilLink = libCore_gv_dataHeroesHeroData[lv_heroIndex].lv_abilities[lv_i].lv_ability;
        if ((lv_abilLink == AbilityCommandGetAbility(EventUnitAbility()))) {
            UnitBehaviorAdd(lv_hero, "TalentBucketFollowThrough", lv_hero, 1);
            break;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentFollowThrough_Init () {
    libGDHL_gt_TalentFollowThrough = TriggerCreate("libGDHL_gt_TalentFollowThrough_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_TalentFollowThrough, null, null, c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Gathering Power
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentGatheringPower_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;

    // Variable Initialization
    lv_player = libGame_gf_HeroParticipatedInTakedownKillingPlayer();
    lv_unit = libGame_gv_players[lv_player].lv_heroUnit;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libGame_gv_players[lv_player].lv_isDead == true) || (UnitHasBehavior2(lv_unit, "TalentGatheringPowerCarry") == false) || (UnitBehaviorCount(libGame_gf_HeroParticipatedInTakedownKilledHero(), "LowValueHero") == 1))) {
        return true;
    }
    else {
    }
    if ((UnitGetType(lv_unit) == "HeroMurky")) {
        if (((UnitIsAlive(lv_unit) == true) || (UnitIsAlive(libGame_gv_heroDeathMurkyRespawnEggs[lv_player]) == true) || (libGame_gv_heroDeathMurkyRespawnEggs[lv_player] != null))) {
            UnitBehaviorAdd(lv_unit, "TalentGatheringPowerMurky", lv_unit, 1);
        }
        else {
        }
    }
    else {
        if ((UnitIsAlive(lv_unit) == true)) {
            UnitBehaviorAdd(lv_unit, "TalentGatheringPowerStack", lv_unit, 1);
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentGatheringPower_Init () {
    libGDHL_gt_TalentGatheringPower = TriggerCreate("libGDHL_gt_TalentGatheringPower_Func");
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_TalentGatheringPower);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Scouting Drone Self Revealer
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentScoutingDroneSelfRevealer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ScoutingDroneSelfRevealer") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "ScoutingDroneApplySelfRevealer", EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentScoutingDroneSelfRevealer_Init () {
    libGDHL_gt_TalentScoutingDroneSelfRevealer = TriggerCreate("libGDHL_gt_TalentScoutingDroneSelfRevealer_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_TalentScoutingDroneSelfRevealer, c_playerAny, "TalentScoutingDroneDummySet");
}

void libGDHL_InitTriggers () {
    libGDHL_gt_IncludeGameDataHelper_Init();
    libGDHL_gt_NeutralRegenGlobe_Init();
    libGDHL_gt_SiegeArtifactApplication_Init();
    libGDHL_gt_HeroGenericCameraShakeLightTarget_Init();
    libGDHL_gt_HeroGenericCameraShakeMediumTarget_Init();
    libGDHL_gt_HeroGenericCameraShakeHeavyTarget_Init();
    libGDHL_gt_HeroGenericCameraShakeAutoCaster_Init();
    libGDHL_gt_HeroGenericCameraShakeLightCaster_Init();
    libGDHL_gt_HeroGenericCameraShakeMediumCaster_Init();
    libGDHL_gt_HeroGenericCameraShakeHeavyCaster_Init();
    libGDHL_gt_CombatStyleFaerieDragonDreamDustUpdate_Init();
    libGDHL_gt_CombatStyleTinkerClockwerkSteamFistsDuration_Init();
    libGDHL_gt_CombatStyleTinkerMechaLordMasteryDuration_Init();
    libGDHL_gt_CombatStyleZeratulAssassinsBlade_Init();
    libGDHL_gt_HeroPortBackToBase_Init();
    libGDHL_gt_HeroPortBackToBaseStart_Init();
    libGDHL_gt_HeroPortBackToBaseEnd_Init();
    libGDHL_gt_HeroPortBackToBaseFizzle_Init();
    libGDHL_gt_HeroGenericApplyFlashbangEffect_Init();
    libGDHL_gt_HeroGenericRemoveFlashBangEffect_Init();
    libGDHL_gt_HeroAbathurSymbioteScreenEffect_Init();
    libGDHL_gt_HeroAbathurDeepTunnelCooldownPerversionMoveCancel_Init();
    libGDHL_gt_HeroAbathurDeepTunnelCooldownPerversionCompletionCooldownAdd_Init();
    libGDHL_gt_HeroAbathurDeepTunnelCooldownPerversionSymbioteCancel_Init();
    libGDHL_gt_HeroAbathurLocustSpawned_Init();
    libGDHL_gt_HeroAbathurSymbiote_Init();
    libGDHL_gt_HeroAbathurCarapaceRegenerativeMicrobes_Init();
    libGDHL_gt_HeroAbathurStabFacer_Init();
    libGDHL_gt_HeroAbathurUltimateEvolutionStartControl_Init();
    libGDHL_gt_HeroAbathurUltimateEvolutionGainsBoltoftheStorms_Init();
    libGDHL_gt_HeroAbathurUltimateEvolutionStopControl_Init();
    libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead_Init();
    libGDHL_gt_HeroAbathurUltimateEvolutionHeroicAbilityDetection_Init();
    libGDHL_gt_HeroArthasArmyoftheDeadPortGhouls_Init();
    libGDHL_gt_HeroArthasArmyoftheDeadCliffHeightTeleport_Init();
    libGDHL_gt_HeroArthasArmyoftheDeadStartSacrificeCooldown_Init();
    libGDHL_gt_HeroArthasEndlessWinterPassiveProc_Init();
    libGDHL_gt_HeroBarbarianLeap_Init();
    libGDHL_gt_HeroBarbarianWhirlwindAnimation_Init();
    libGDHL_gt_HeroBarbarianWhirlwindAnimationStop_Init();
    libGDHL_gt_HeroBarbarianSlamApplyCostReduction_Init();
    libGDHL_gt_HeroBarbarianSlamRemoveCostReduction_Init();
    libGDHL_gt_HeroBarbarianWrathoftheBerserkerBuffDurationExtension_Init();
    libGDHL_gt_HeroBarbarianLeapArreatCraterCancelModifyCooldown_Init();
    libGDHL_gt_HeroDiabloDemonicChargeImpactChangeFacing_Init();
    libGDHL_gt_HeroDiabloOverPowerFacing_Init();
    libGDHL_gt_HeroDiabloFireStompFacing_Init();
    libGDHL_gt_HeroDiabloLightningBreathTargetedCancelDelay_Init();
    libGDHL_gt_HeroDiabloInfernoBreathCast_Init();
    libGDHL_gt_HeroDiabloInfernoBreathAim_Init();
    libGDHL_gt_HeroDiabloInfernoBreathEnd_Init();
    libGDHL_gt_HeroFaerieDragonPolymorph_Init();
    libGDHL_gt_HeroFaerieDragonPhaseShiftCamera_Init();
    libGDHL_gt_HeroFalstadThunderstormRefresh_Init();
    libGDHL_gt_HeroFalstadPreparationShield_Init();
    libGDHL_gt_HeroIllidanApplyFotBCooldownonInventoryUse_Init();
    libGDHL_gt_HeroIllidanMetamorphosisAvatarApplyHealthBuff_Init();
    libGDHL_gt_HeroNewIllidanTheHuntAbilityUsed_Init();
    libGDHL_gt_HeroNewIllidanTheHuntLaunchMissileUsed_Init();
    libGDHL_gt_HeroNewIllidanTheHuntImpacts_Init();
    libGDHL_gt_HeroNewIllidanTheHuntCreateRevealer_Init();
    libGDHL_gt_HeroKerriganAssimilationPassiveAddShields_Init();
    libGDHL_gt_HeroKerriganRavageCDR_Init();
    libGDHL_gt_HeroKerriganSicUltralisk_Init();
    libGDHL_gt_HeroL90ETCPowerslideTargetCheck_Init();
    libGDHL_gt_HeroL90ETCStageDiveTeleportUnit_Init();
    libGDHL_gt_HeroL90ETCStageDiveFinalSet_Init();
    libGDHL_gt_HeroLiLiCloudSerpentSummonandSimplifiedAI_Init();
    libGDHL_gt_HeroLiLiCloudSerpentAttackMimic_Init();
    libGDHL_gt_HeroMalfurionTwilightDreamSilenceTarget_Init();
    libGDHL_gt_HeroMalfurionTwilightDreamSilenceEnd_Init();
    libGDHL_gt_HeroMalfurionEntanglingRootsTreantSpawned_Init();
    libGDHL_gt_HeroMuradinDwarfToss_Init();
    libGDHL_gt_HeroMuradinHaymaker_Init();
    libGDHL_gt_HeroMuradinHaymakerFaceCaster_Init();
    libGDHL_gt_HeroMuradinAvatarApplyHealthBuff_Init();
    libGDHL_gt_HeroMuradinPerfectStormMasteryEffect_Init();
    libGDHL_gt_HeroNovaTripleTapAbilityUsed_Init();
    libGDHL_gt_HeroNovaTripleTapMissiles_Init();
    libGDHL_gt_HeroNovaTripleTapAbilityCompletes_Init();
    libGDHL_gt_HeroNovaTripleTapCasterDies_Init();
    libGDHL_gt_HeroNovaCloakFinished_Init();
    libGDHL_gt_HeroNovaHoloCloneSpawned_Init();
    libGDHL_gt_HeroNovaHoloCloneSpawnMatchMapMechanics_Init();
    libGDHL_gt_HeroNovaHoloDecoyIssueOrderAbility_Init();
    libGDHL_gt_HeroNovaHoloDecoyDoubleFakeApplyIssueOrder_Init();
    libGDHL_gt_HeroNovaHoloDecoyExpires_Init();
    libGDHL_gt_HeroNovaHoloDecoyOverdriveDeactivate_Init();
    libGDHL_gt_HeroNovaPinningShotCovertOpsModifyCost_Init();
    libGDHL_gt_HeroNovaPinningShotCovertOpsRevertCost_Init();
    libGDHL_gt_HeroNovaAntiArmorShellsAttackCooldown_Init();
    libGDHL_gt_HeroRaynorAdrenalineRushActivatedRushModifyCooldown_Init();
    libGDHL_gt_HeroRaynorLeadFromTheFrontSpecialCaseHeroes_Init();
    libGDHL_gt_HeroRaynorLeadFromTheFrontCombatStyleSpecialCaseHeroes_Init();
    libGDHL_gt_HeroRaynorRaynorsBansheeFlyIn_Init();
    libGDHL_gt_HeroRaynorRaynorsBansheeMoveBehavior3_Init();
    libGDHL_gt_HeroRaynorRaynorsBansheeUpdateOrdersOnAttack_Init();
    libGDHL_gt_HeroRaynorRaynorsBansheeUpdateOrdersOnAttack3_Init();
    libGDHL_gt_HeroRaynorRaynorsBansheeFlyOut_Init();
    libGDHL_gt_HeroRaynorLeadFromTheFrontHyperionBansheeKills_Init();
    libGDHL_gt_HeroSgtHammerCompleteHearthstone_Init();
    libGDHL_gt_HeroSgtHammerSiegeModeUpdate_Init();
    libGDHL_gt_HeroSgtHammerBluntForceGunPrepStart_Init();
    libGDHL_gt_HeroSgtHammerBluntForceGunTargetCalculation_Init();
    libGDHL_gt_HeroSgtHammerBluntForceGunCheckForLocation_Init();
    libGDHL_gt_HeroSgtHammerConcussiveBlastCancel_Init();
    libGDHL_gt_HeroSgtHammerConcussiveBlastCancelDelay_Init();
    libGDHL_gt_HeroStitchesRetchlingSpawned_Init();
    libGDHL_gt_HeroStitchesHookHookVision_Init();
    libGDHL_gt_HeroStitchesGorgeDecreases_Init();
    libGDHL_gt_HeroStitchesSetHeight_Init();
    libGDHL_gt_HeroStitchesGorgeActivate_Init();
    libGDHL_gt_HeroStitchesGorgeOff_Init();
    libGDHL_gt_HeroTassadarForceWallKillForceWall_Init();
    libGDHL_gt_HeroTassadarAddForceWallCancelCooldown_Init();
    libGDHL_gt_HeroTassadarPlasmaShieldRelicExcessShielding_Init();
    libGDHL_gt_HeroTassadarPlasmaShieldRelicModifyDuration_Init();
    libGDHL_gt_HeroTassadarWeaponIncrementvsTassadar_Init();
    libGDHL_gt_HeroTassadarUpdateDistortionBeamPeriod_Init();
    libGDHL_gt_HeroTassadarStaticChargeMasteryProc_Init();
    libGDHL_gt_HeroTassadarSecondStrikeCooldown_Init();
    libGDHL_gt_HeroTassadarSecondStrikeManaCost_Init();
    libGDHL_gt_HeroTinkerOverlockTurret_Init();
    libGDHL_gt_HeroTinkerDismantleTurret_Init();
    libGDHL_gt_HeroTinkerDethLazorScaling_Init();
    libGDHL_gt_HeroTinkerDethLazorGoblinFusionScaling_Init();
    libGDHL_gt_HeroTinkerDethLazorTurningUpdate_Init();
    libGDHL_gt_HeroTinkerDethLazorCast_Init();
    libGDHL_gt_HeroTinkerDethLazorAim_Init();
    libGDHL_gt_HeroTinkerDethLazorLeftClick_Init();
    libGDHL_gt_HeroTinkerDethLazorEnd_Init();
    libGDHL_gt_HeroTinkerDethLazorCancelDelay_Init();
    libGDHL_gt_HeroTychusOdinCancelDelay_Init();
    libGDHL_gt_HeroTychusOdinCreated_Init();
    libGDHL_gt_HeroTychusOdinDies_Init();
    libGDHL_gt_HeroTychusUpdateOrdersOnIssueOrderAbility_Init();
    libGDHL_gt_HeroTychusOverkillTargetedRetarget_Init();
    libGDHL_gt_HeroTyraelSanctificationFacing_Init();
    libGDHL_gt_HeroTyraelArchangelsWrathSuppressCollision_Init();
    libGDHL_gt_HeroTyrandePurgingArrowAmmoDestruction_Init();
    libGDHL_gt_HeroTyrandeSentinelShotTargetCalculation_Init();
    libGDHL_gt_HeroWitchDoctorZombiePrisonKillZombies_Init();
    libGDHL_gt_HeroWitchDoctorZombiePrisonRelicZombiesSpawned_Init();
    libGDHL_gt_HeroWitchDoctorRavenousSoulsCast_Init();
    libGDHL_gt_HeroWitchDoctorRavenousSoulsExpires_Init();
    libGDHL_gt_HeroWitchDoctorPassiveCaster_Init();
    libGDHL_gt_HeroWitchDoctorPassiveImprovedCaster_Init();
    libGDHL_gt_HeroWitchDoctorPassiveTarget_Init();
    libGDHL_gt_HeroWitchDoctorGargantuanCreated_Init();
    libGDHL_gt_HeroWitchDoctorGargantuanPort_Init();
    libGDHL_gt_HeroUtherBlessedChampionProc_Init();
    libGDHL_gt_HeroUtherHolyRadianceRelicResetDamageIncrement_Init();
    libGDHL_gt_HeroUtherHolyRadianceRelicDamageHealing_Init();
    libGDHL_gt_HeroUtherHolyRadianceRelicCombinedDamageHealing_Init();
    libGDHL_gt_HeroUtherHolyRadianceRelicTurnOnOff_Init();
    libGDHL_gt_HeroUtherHolyRadianceDummyDamage_Init();
    libGDHL_gt_HeroUtherSpiritofRedemptionCooldownReset_Init();
    libGDHL_gt_HeroUtherEternalDevotionSuppressCollision_Init();
    libGDHL_gt_HeroUtherEternalDevotionSuppressCollisionImproved_Init();
    libGDHL_gt_HeroZeratulVoidPrisonKillPrison_Init();
    libGDHL_gt_HeroZeratulBlinkReturnCancelDelay_Init();
    libGDHL_gt_HeroMoonwellCooldownOnOff_Init();
    libGDHL_gt_HeroMoonwellDurationTextTagUpdates_Init();
    libGDHL_gt_TalentOverdriveUpdateManaAndAP_Init();
    libGDHL_gt_TalentBucketMarksmanOnUpdateStats_Init();
    libGDHL_gt_TalentBucketMarksmanDamageResponseOnUpdateStats_Init();
    libGDHL_gt_TalentBucketMarksmanAttackProcAddCooldownBehavior_Init();
    libGDHL_gt_TalentBucketDistortionBeamDamageAddCooldownBehavior_Init();
    libGDHL_gt_TalentRewindActivate_Init();
    libGDHL_gt_TalentGiantKillerUpdatedProc_Init();
    libGDHL_gt_FocusedAttackCooldown_Init();
    libGDHL_gt_TalentFuryoftheStorm_Init();
    libGDHL_gt_TalentCalloftheStormExplosion_Init();
    libGDHL_gt_TalentEyeoftheStormExplosionDamageUpdate_Init();
    libGDHL_gt_TalentEyeoftheStormCloakSuppression_Init();
    libGDHL_gt_TalentArcaneTeachingsApplySlow_Init();
    libGDHL_gt_TalentSwiftStorm_Init();
    libGDHL_gt_TalentFollowThrough_Init();
    libGDHL_gt_TalentGatheringPower_Init();
    libGDHL_gt_TalentScoutingDroneSelfRevealer_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libGDHL_InitLib_completed = false;

void libGDHL_InitLib () {
    if (libGDHL_InitLib_completed) {
        return;
    }

    libGDHL_InitLib_completed = true;

    libGDHL_InitLibraries();
    libGDHL_InitVariables();
    libGDHL_InitTriggers();
}

include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/MapMechanicsLib"
include "TriggerLibs/AILib"
include "TriggerLibs/UILib"

