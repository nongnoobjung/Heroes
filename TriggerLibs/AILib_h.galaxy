include "TriggerLibs/HeroesLib_h"
include "TriggerLibs/GameLib_h"
include "TriggerLibs/MapMechanicsLib_h"

//--------------------------------------------------------------------------------------------------
// Library: AI
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libAIAI_ge_MinionAIStates_Advancing = 0;
const int libAIAI_ge_MinionAIStates_AttackingMinions = 1;
const int libAIAI_ge_MinionAIStates_AttackingStructure = 2;
const int libAIAI_ge_MinionAIStates_AttackingHero = 3;
const int libAIAI_ge_MinionAIStates_FollowHero = 4;
const int libAIAI_ge_MinionAIStates_HoldPosition = 5;
string libAIAI_ge_MinionAIStates_Ident (int lp_val);
const int libAIAI_ge_DefenderAIState_Idle = 0;
const int libAIAI_ge_DefenderAIState_Fighting = 1;
const int libAIAI_ge_DefenderAIState_Leashing = 2;
string libAIAI_ge_DefenderAIState_Ident (int lp_val);
const int libAIAI_ge_HeroAIRavenLordTributeState_None = 0;
const int libAIAI_ge_HeroAIRavenLordTributeState_Warning = 1;
const int libAIAI_ge_HeroAIRavenLordTributeState_Spawned = 2;
const int libAIAI_ge_HeroAIGhostShipBeaconStatus_Closed = 0;
const int libAIAI_ge_HeroAIGhostShipBeaconStatus_Open = 1;
const int libAIAI_ge_HeroAIUnderworldBossState_Dead = 0;
const int libAIAI_ge_HeroAIUnderworldBossState_Warning = 1;
const int libAIAI_ge_HeroAIUnderworldBossState_Spawned = 2;
const int libAIAI_ge_HeroAIGameState_Act1 = 0;
const int libAIAI_ge_HeroAIGameState_Act2 = 1;
const int libAIAI_ge_HeroAIGameState_Act3 = 2;
const int libAIAI_ge_HeroAIDifficulty_Null = 0;
const int libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy = 1;
const int libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally = 2;
const int libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Enemy = 3;
const int libAIAI_ge_HeroAIDifficulty_HeroAITutorial2Ally = 4;
const int libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode = 5;
const int libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly = 6;
const int libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy = 7;
const int libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly = 8;
const int libAIAI_ge_HeroAIDifficulty_HeroAIEasy = 9;
const int libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly = 10;
const int libAIAI_ge_HeroAIDifficulty_HeroAIMedium = 11;
const int libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard = 12;
const int libAIAI_ge_HeroAIDifficulty_HeroAIElite = 13;
string libAIAI_ge_HeroAIDifficulty_Ident (int lp_val);
const int libAIAI_ge_HeroAISpellType_Null = 0;
const int libAIAI_ge_HeroAISpellType_TargetEnemy = 1;
const int libAIAI_ge_HeroAISpellType_PointEnemy = 2;
const int libAIAI_ge_HeroAISpellType_PBaoeEnemy = 3;
const int libAIAI_ge_HeroAISpellType_TargetEnemyTower = 4;
const int libAIAI_ge_HeroAISpellType_TargetFriendlyTower = 5;
const int libAIAI_ge_HeroAISpellType_TargetFriendly = 6;
const int libAIAI_ge_HeroAISpellType_PointFriendly = 7;
const int libAIAI_ge_HeroAISpellType_PBaoeFriendly = 8;
const int libAIAI_ge_HeroAISpellType_PointFriendlyMinion = 9;
const int libAIAI_ge_HeroAISpellType_SelfBuff = 10;
const int libAIAI_ge_HeroAISpellType_Other = 11;
const int libAIAI_ge_HeroAIObjective_PushLane = 0;
const int libAIAI_ge_HeroAIObjective_WaitInSpawn = 1;
const int libAIAI_ge_HeroAIObjective_CaptureDragon = 2;
const int libAIAI_ge_HeroAIObjective_DefendCore = 3;
const int libAIAI_ge_HeroAIObjective_TakeCamp = 4;
const int libAIAI_ge_HeroAIObjective_CaptureWatchTower = 5;
const int libAIAI_ge_HeroAIObjective_CaptureTearOfElune = 6;
const int libAIAI_ge_HeroAIObjective_CaptureObelisk = 7;
const int libAIAI_ge_HeroAIObjective_TurnInDoubloons = 8;
const int libAIAI_ge_HeroAIObjective_FollowHero = 9;
const int libAIAI_ge_HeroAIObjective_CollectSkulls = 10;
const int libAIAI_ge_HeroAIObjective_AttackTreasureChest = 11;
const int libAIAI_ge_HeroAIObjective_UseAbathurLogic = 12;
const int libAIAI_ge_HeroAIObjective_CustomMapObj = 13;
string libAIAI_ge_HeroAIObjective_Ident (int lp_val);
const int libAIAI_ge_HeroAIPriority_GenericUninterruptable = 0;
const int libAIAI_ge_HeroAIPriority_CollectSkullsInUnderworld = 1;
const int libAIAI_ge_HeroAIPriority_CustomMapVital = 2;
const int libAIAI_ge_HeroAIPriority_WaitInSpawnAnyState = 3;
const int libAIAI_ge_HeroAIPriority_AbathurLogicAnyState = 4;
const int libAIAI_ge_HeroAIPriority_FollowHeroFollowState = 5;
const int libAIAI_ge_HeroAIPriority_FollowHeroOtherState = 6;
const int libAIAI_ge_HeroAIPriority_PushLaneAttackCore = 7;
const int libAIAI_ge_HeroAIPriority_DefendCoreAnyState = 8;
const int libAIAI_ge_HeroAIPriority_CustomMapHigh = 9;
const int libAIAI_ge_HeroAIPriority_TakeCampTakingCamp = 10;
const int libAIAI_ge_HeroAIPriority_PushLaneDefendingBase = 11;
const int libAIAI_ge_HeroAIPriority_CaptureTearOfEluneHeadingToTribute = 12;
const int libAIAI_ge_HeroAIPriority_TakeCampMoveToCampWithHuman = 13;
const int libAIAI_ge_HeroAIPriority_CollectSkullsHeadingToUnderworld = 14;
const int libAIAI_ge_HeroAIPriority_CaptureDragonMoveToDragon = 15;
const int libAIAI_ge_HeroAIPriority_CaptureObeliskAnyState = 16;
const int libAIAI_ge_HeroAIPriority_CustomMapRegular = 17;
const int libAIAI_ge_HeroAIPriority_PushLanePushWithTeam = 18;
const int libAIAI_ge_HeroAIPriority_PushLaneTeamFightLikely = 19;
const int libAIAI_ge_HeroAIPriority_PushLaneDefendTown = 20;
const int libAIAI_ge_HeroAIPriority_PushLaneAttackTown = 21;
const int libAIAI_ge_HeroAIPriority_PushLaneRavenKingsCurseActive = 22;
const int libAIAI_ge_HeroAIPriority_PushLaneUnderworldBossActive = 23;
const int libAIAI_ge_HeroAIPriority_PushLanePushWithAllyMercs = 24;
const int libAIAI_ge_HeroAIPriority_PushLaneClearEnemyMercs = 25;
const int libAIAI_ge_HeroAIPriority_PushLaneNearActiveObelisk = 26;
const int libAIAI_ge_HeroAIPriority_TurnInDoubloonsHeadingToBeacon = 27;
const int libAIAI_ge_HeroAIPriority_CustomMapLow = 28;
const int libAIAI_ge_HeroAIPriority_TakeCampMoveToCampOnlyAI = 29;
const int libAIAI_ge_HeroAIPriority_GenericPreformTeamStrategy = 30;
const int libAIAI_ge_HeroAIPriority_AttackTreasureChestAnyState = 31;
const int libAIAI_ge_HeroAIPriority_PushLaneInMinionBattle = 32;
const int libAIAI_ge_HeroAIPriority_PushLaneChangingLanes = 33;
const int libAIAI_ge_HeroAIPriority_CaptureWatchTowerAnyState = 34;
const int libAIAI_ge_HeroAIPriority_PushLaneNormalLogic = 35;
string libAIAI_ge_HeroAIPriority_Ident (int lp_val);
const int libAIAI_ge_HeroAIStates_HSUnused = 0;
const int libAIAI_ge_HeroAIStates_HSDead = 1;
const int libAIAI_ge_HeroAIStates_HSAfterDeathAttack = 2;
const int libAIAI_ge_HeroAIStates_HSReturnToSpawn = 3;
const int libAIAI_ge_HeroAIStates_HSWaitForGameToStart = 4;
const int libAIAI_ge_HeroAIStates_HSWaitToHeal = 5;
const int libAIAI_ge_HeroAIStates_HSWaitInSpawn = 6;
const int libAIAI_ge_HeroAIStates_HSAdvance = 7;
const int libAIAI_ge_HeroAIStates_HSRetreat = 8;
const int libAIAI_ge_HeroAIStates_HSAvoidAOE = 9;
const int libAIAI_ge_HeroAIStates_HSMinionBattleRetreat = 10;
const int libAIAI_ge_HeroAIStates_HSMinionBattleReposition = 11;
const int libAIAI_ge_HeroAIStates_HSMinionBattleAttack = 12;
const int libAIAI_ge_HeroAIStates_HSMinionBattleHarass = 13;
const int libAIAI_ge_HeroAIStates_HSHarassSiegeEnemy = 14;
const int libAIAI_ge_HeroAIStates_HSWaitForMinions = 15;
const int libAIAI_ge_HeroAIStates_HSReturnToLane = 16;
const int libAIAI_ge_HeroAIStates_HSPickUpHealthGlobeJungle = 17;
const int libAIAI_ge_HeroAIStates_HSFocusHero = 18;
const int libAIAI_ge_HeroAIStates_HSFocusCore = 19;
const int libAIAI_ge_HeroAIStates_HSDefendCoreAttack = 20;
const int libAIAI_ge_HeroAIStates_HSDefendCoreLeash = 21;
const int libAIAI_ge_HeroAIStates_HSVehicleReturnToLane = 22;
const int libAIAI_ge_HeroAIStates_HSVehicleAdvanceInLane = 23;
const int libAIAI_ge_HeroAIStates_HSCaptureWatchTower = 24;
const int libAIAI_ge_HeroAIStates_HSPortHomeLane = 25;
const int libAIAI_ge_HeroAIStates_HSDrinkMoonwell = 26;
const int libAIAI_ge_HeroAIStates_HSTearOfEluneMoveToTear = 27;
const int libAIAI_ge_HeroAIStates_HSTearOfEluneCapture = 28;
const int libAIAI_ge_HeroAIStates_HSTearOfEluneGuard = 29;
const int libAIAI_ge_HeroAIStates_HSTearOfEluneDefend = 30;
const int libAIAI_ge_HeroAIStates_HSPickUpDoubloon = 31;
const int libAIAI_ge_HeroAIStates_HSTurnInDoubloons = 32;
const int libAIAI_ge_HeroAIStates_HSTurnInDoubloonsDefend = 33;
const int libAIAI_ge_HeroAIStates_HSTreasureChestMoveToChest = 34;
const int libAIAI_ge_HeroAIStates_HSTreasureChestAttackChest = 35;
const int libAIAI_ge_HeroAIStates_HSTreasureChestDefend = 36;
const int libAIAI_ge_HeroAIStates_HSMCampInit = 37;
const int libAIAI_ge_HeroAIStates_HSMoveToCamp = 38;
const int libAIAI_ge_HeroAIStates_HSWaitAtCamp = 39;
const int libAIAI_ge_HeroAIStates_HSAttackSoloCamp = 40;
const int libAIAI_ge_HeroAIStates_HSCaptureCampBeacon = 41;
const int libAIAI_ge_HeroAIStates_HSDefendCampAttack = 42;
const int libAIAI_ge_HeroAIStates_HSDefendCampLeash = 43;
const int libAIAI_ge_HeroAIStates_HSFleeInJungle = 44;
const int libAIAI_ge_HeroAIStates_HSPortHomeJungle = 45;
const int libAIAI_ge_HeroAIStates_HSHarassInJungle = 46;
const int libAIAI_ge_HeroAIStates_HSPaceAround = 47;
const int libAIAI_ge_HeroAIStates_HSObeliskMoveToObelisk = 48;
const int libAIAI_ge_HeroAIStates_HSObeliskCapture = 49;
const int libAIAI_ge_HeroAIStates_HSObeliskDefend = 50;
const int libAIAI_ge_HeroAIStates_HSDragonMoveToDragon = 51;
const int libAIAI_ge_HeroAIStates_HSDragonEnter = 52;
const int libAIAI_ge_HeroAIStates_HSDragonDefend = 53;
const int libAIAI_ge_HeroAIStates_HSDragonGuard = 54;
const int libAIAI_ge_HeroAIStates_HSFollowerGuardLeader = 55;
const int libAIAI_ge_HeroAIStates_HSFollowerGuardLeaderLeash = 56;
const int libAIAI_ge_HeroAIStates_HSUnderworldEnter = 57;
const int libAIAI_ge_HeroAIStates_HSUnderworldKillMinions = 58;
const int libAIAI_ge_HeroAIStates_HSUnderworldFocusHero = 59;
const int libAIAI_ge_HeroAIStates_HSUnderworldPickupSkull = 60;
const int libAIAI_ge_HeroAIStates_HSUnderworldMoveToExit = 61;
const int libAIAI_ge_HeroAIStates_HSUnderworldTeleportHome = 62;
const int libAIAI_ge_HeroAIStates_HSUnderworldExit = 63;
const int libAIAI_ge_HeroAIStates_HSAbathurAdvanceInLane = 64;
const int libAIAI_ge_HeroAIStates_HSAbathurRetreatInLane = 65;
const int libAIAI_ge_HeroAIStates_HSAbathurHideInTown = 66;
const int libAIAI_ge_HeroAIStates_HSAbathurChangeLanes = 67;
const int libAIAI_ge_HeroAIStates_HSCustomMapState = 68;
string libAIAI_ge_HeroAIStates_Ident (int lp_val);
const int libAIAI_ge_HeroAIHeroTiers_TierInvalid = 0;
const int libAIAI_ge_HeroAIHeroTiers_TierLow = 1;
const int libAIAI_ge_HeroAIHeroTiers_TierMid = 2;
const int libAIAI_ge_HeroAIHeroTiers_TierHigh = 3;

// Constants
const int libAIAI_gv_aIWaveIndexMod = 4;
const fixed libAIAI_gv_aIMinionWaypointAdvanceDistance = 4.0;
const fixed libAIAI_gv_aIMinionAttackStructureBonusScanRange = 1.5;
const fixed libAIAI_gv_aIMinionLeashingOnDistance = 9.0;
const fixed libAIAI_gv_aIMinionLeashingOffDistance = 3.5;
const int libAIAI_gv_aIDefenderIndexMod = 2;
const fixed libAIAI_gv_aIDefenderCloseEnoughDistance = 0.5;
const fixed libAIAI_gv_aIDefenderFarFromLeashPosition = 2.5;
const int libAIAI_gv_aIDefenderMaxLeashCount = 3;
const fixed libAIAI_gv_aIDefenderMinAgroTime = 5.0;
const fixed libAIAI_gv_aIDefenderMinLeashTime = 1.0;
const fixed libAIAI_gv_aIDefenderLeashReAnnounceTime = 4.0;
const fixed libAIAI_gv_aIDefenderMinTimeBeforeCasting = 3.0;
const fixed libAIAI_gv_aIHeroNearbyEvalFrequency = 0.4;
const fixed libAIAI_gv_aIHeroLaneEvalFrequency = 0.5;
const fixed libAIAI_gv_aIHeroSightRange = 12.0;
const fixed libAIAI_gv_aIHeroLeashDistance = 12.0;
const fixed libAIAI_gv_aIHeroAdvanceLaneStepDistance = 10.0;
const fixed libAIAI_gv_aIHeroRetreatLaneStepDistance = 6.5;
const fixed libAIAI_gv_aIHeroJungleStepDistance = 7.0;
const fixed libAIAI_gv_aIHeroCloseEnoughDist = 3.0;
const fixed libAIAI_gv_aIHeroLaneLeashDistance = 12.0;
const fixed libAIAI_gv_aIHeroCloseToLaneDistance = 8.0;
const fixed libAIAI_gv_aIHeroMinRetreatDuration = 1.0;
const fixed libAIAI_gv_aIHeroExtraRetreatLaneTimeBeforeTeleporting = 2.5;
const fixed libAIAI_gv_aIHeroExtraRetreatJungleTimeBeforeTeleporting = 3.0;
const fixed libAIAI_gv_aIHeroMissingDelay = 30.0;
const fixed libAIAI_gv_aIHeroSamePositionDist = 0.25;
const fixed libAIAI_gv_aIHeroChooseTalentDelayBetweenPicks = 1.0;
const fixed libAIAI_gv_aIHeroChooseTalentDelayInCaseOfRejoin = 90.0;
const fixed libAIAI_gv_aIHeroAvoidAOEMinResponseTime = 0.15;
const int libAIAI_gv_aIHeroNumberOfAOERetreatTestPoints = 12;
const fixed libAIAI_gv_aIHeroAvoidAOEAvoidExtraDistance = 1.0;
const fixed libAIAI_gv_aIHeroAvoidAOERetreatExtraDistance = 2.0;
const fixed libAIAI_gv_aIHeroMountingCloseToEnemies = 10.0;
const fixed libAIAI_gv_aIHeroMountingFarFromEnemies = 15.0;
const fixed libAIAI_gv_aIHeroMaximumLaneOffset = 5.0;
const int libAIAI_gv_aIHeroNumberofLaneBuckets = 10;
const fixed libAIAI_gv_aIHeroLaneOffsetEnemyTowerScore = 40.0;
const fixed libAIAI_gv_aIHeroLaneOffsetEnemyHeroScore = 100.0;
const fixed libAIAI_gv_aIHeroLaneOffsetAllyHeroScore = 20.0;
const fixed libAIAI_gv_aIHeroAdvanceChangeLaneOffsetFrequency = 5.0;
const fixed libAIAI_gv_aIHeroRetreatChangeLaneOffsetFrequency = 0.75;
const fixed libAIAI_gv_aIHeroAvoidAllyHeroesSearchRadius = 12.0;
const fixed libAIAI_gv_aIHeroAvoidNearbyEnemyTowerSearchRadius = 16.0;
const fixed libAIAI_gv_aIHeroWalkDirectlyToLaneDistance = 60.0;
const int libAIAI_gv_aIHeroLargeEvalDifference = 33;
const fixed libAIAI_gv_aIHeroChangeLanesDelay = 0.0;
const fixed libAIAI_gv_aIHeroStayInLaneAfterHumanArrivesDuration = 90.0;
const fixed libAIAI_gv_aIHeroInitialLaneChoosingTime = 90.0;
const fixed libAIAI_gv_aIHeroRetreatDistanceToChangeLanes = 30.0;
const int libAIAI_gv_aIHeroLevelEvalValue = 150;
const int libAIAI_gv_aIMissingHeroLevelEvalValue = 30;
const int libAIAI_gv_aIHeroEnemyMinionSummonEvalValue = 100;
const int libAIAI_gv_aIHeroAllyMinionSummonEvalValue = 90;
const int libAIAI_gv_aIHeroEnemyTowerEvalValue = 750;
const int libAIAI_gv_aIHeroAllyTowerEvalValue = 1750;
const int libAIAI_gv_aIHeroAllyUnderworldBossEvalValue = 2500;
const fixed libAIAI_gv_aIHeroHighEnergyPercent = 85.0;
const fixed libAIAI_gv_aIHeroLowEnergyPercent = 40.0;
const fixed libAIAI_gv_aIHeroChangeTargetDistanceWeight = 35.0;
const fixed libAIAI_gv_aIHeroChangeTargetTowerDistanceWeight = 15.0;
const fixed libAIAI_gv_aIHeroMinionBattleHarassDuration = 1.5;
const fixed libAIAI_gv_aIHeroMinionBattleMinRepositionRetreatDuration = 0.35;
const fixed libAIAI_gv_aIHeroMinionBattleMinDamagedRetreatDuration = 0.75;
const fixed libAIAI_gv_aIHeroMinionBattleRepositionRecalculateDelay = 0.6;
const fixed libAIAI_gv_aIHeroMeleeMinionBattleRepositionDuration = 0.7;
const fixed libAIAI_gv_aIHeroRangedMinionBattleRepositionDuration = 0.5;
const fixed libAIAI_gv_aIHeroFocusHeroHealth = 30.0;
const int libAIAI_gv_aIHeroMinAggresiveFocusHeroLevel = 5;
const fixed libAIAI_gv_aIHeroFocusHeroMaxChaseTime = 3.0;
const fixed libAIAI_gv_aIHeroFocusHeroMapMaxChaseTime = 6.0;
const fixed libAIAI_gv_aIHeroFocusHeroDelayAfterGivingUp = 2.0;
const fixed libAIAI_gv_aIHeroFocusHeroRecruitDistance = 12.0;
const fixed libAIAI_gv_aIHeroFocusHeroGiveUpDistance = 14.0;
const fixed libAIAI_gv_aIHeroCloseToTowerDistance = 7.0;
const fixed libAIAI_gv_aIHeroFarFromTowerDistance = 9.0;
const fixed libAIAI_gv_aIHeroPingDuration = 1.0;
const fixed libAIAI_gv_aIHeroFocusCorePingDuration = 5.0;
const fixed libAIAI_gv_aIHeroFocusCoreAlwaysHealth = 40.0;
const fixed libAIAI_gv_aIHeroFocusCoreDistractedHeatlh = 85.0;
const fixed libAIAI_gv_aIHeroFocusCorePingHealth = 99.0;
const fixed libAIAI_gv_aIHeroFocusCoreRecruitDistance = 20.0;
const fixed libAIAI_gv_aIHeroFocusHeroCoreUpDistance = 20.0;
const fixed libAIAI_gv_aIHeroDefendCorePingDuration = 15.0;
const fixed libAIAI_gv_aIHeroDefendCloseToCoreDistance = 15.0;
const fixed libAIAI_gv_aIHeroDefendFarFromCoreDistance = 30.0;
const fixed libAIAI_gv_aIHeroDefendPingExtendedCloseCoreDistance = 25.0;
const fixed libAIAI_gv_aIHeroMoonwellSearchRadius = 25.0;
const fixed libAIAI_gv_aIMoonwellHealPercent = 25.0;
const fixed libAIAI_gv_aIHeroWatchTowerCloseRadius = 40.0;
const fixed libAIAI_gv_aIHeroWatchTowerConsiderFrequencyStart = 3.0;
const fixed libAIAI_gv_aIHeroWatchTowerConsiderFrequency = 15.0;
const fixed libAIAI_gv_aIHeroWatchTowerDelay = 40.0;
const fixed libAIAI_gv_aIHeroSiegeEnemyMinWeaponRange = 9.0;
const fixed libAIAI_gv_aIHeroSiegeEnemySearchRadius = 16.0;
const fixed libAIAI_gv_aIHeroCloseToSiegeEnemyDistance = 6.0;
const fixed libAIAI_gv_aIHeroHarassInJungleDuration = 1.5;
const fixed libAIAI_gv_aIHeroHarassInJungleTimeout = 4.0;
const fixed libAIAI_gv_aIHeroPaceAroundDuration = 2.5;
const fixed libAIAI_gv_aIHeroPaceAroundDelay = 2.0;
const fixed libAIAI_gv_aIHeroPaceAroundRepositionFrequency = 1.0;
const fixed libAIAI_gv_aIHeroPaceAroundRadius = 2.5;
const fixed libAIAI_gv_aIHeroCampPingDuration = 25.0;
const fixed libAIAI_gv_aIHeroCampConsiderFrequency = 12.0;
const fixed libAIAI_gv_aIHeroJoinCampConsiderFrequency = 1.5;
const fixed libAIAI_gv_aIHeroCampAttackDelay = 30.0;
const fixed libAIAI_gv_aIHeroHeadStraightToCampDist = 75.0;
const fixed libAIAI_gv_aIHeroHelpAITakeCampDist = 90.0;
const fixed libAIAI_gv_aIHeroHelpHumanTakeCampDist = 150.0;
const fixed libAIAI_gv_aIHeroEnemiesNearCampDistance = 20.0;
const fixed libAIAI_gv_aIHeroStopCampAttackPercent = 15.0;
const fixed libAIAI_gv_aIHeroCampCloseEnoughDist = 3.0;
const fixed libAIAI_gv_aIHeroMoveToCampTimeout = 60.0;
const fixed libAIAI_gv_aIHeroNearCampDistance = 6.0;
const fixed libAIAI_gv_aIHeroFarFromCampDistance = 16.0;
const fixed libAIAI_gv_aIHeroHighCampEval = 75.0;
const fixed libAIAI_gv_aIHeroHumanPlayerAssistingCheckFrequency = 1.0;
const int libAIAI_gv_aIHeroNumberOfCaptureBeaconGuardTestPoints = 12;
const int libAIAI_gv_aIHeroMinHelpHumanTakeCampLevel = 1;
const int libAIAI_gv_aIHeroMinHelpAITakeCampLevel = 3;
const int libAIAI_gv_aIHeroDoubloonTotalLevelNeeded = 5;
const int libAIAI_gv_aIHeroSiegeGiantTotalLevelNeeded = 10;
const int libAIAI_gv_aIHeroKnightsTotalLevelNeeded = 20;
const int libAIAI_gv_aIHeroGolemTotalLevelNeeded = 40;
const int libAIAI_gv_aIHeroOtherTotalLevelNeeded = 30;
const int libAIAI_gv_aIHeroCampTwoAttackerBonus = 2;
const int libAIAI_gv_aIHeroCampThreeAttackerBonus = 4;
const int libAIAI_gv_aIHeroCampFourAttackerBonus = 7;
const int libAIAI_gv_aIHeroCampFiveAttackerBonus = 10;
const fixed libAIAI_gv_aIHeroTeamStrategyConsiderFrequency = 20.0;
const fixed libAIAI_gv_aIHeroTeamStrategyDelay = 80.0;
const int libAIAI_gv_aIHeroDoubloonSearchRadius = 12;
const fixed libAIAI_gv_aIHeroDoubloonCloseToEnemyDistance = 6.0;
const int libAIAI_gv_aIHeroWantToTurnInDoubloonsAmountHumanTeam = 3;
const int libAIAI_gv_aIHeroWantToTurnInDoubloonsAmountAllAITeam = 5;
const fixed libAIAI_gv_aIHeroTurnInDoubloonsInterruptedTimeout = 45.0;
const fixed libAIAI_gv_aIHeroTurnInDoubloonsConsiderFrequency = 15.0;
const fixed libAIAI_gv_aIHeroWalkDirectlyToGhostShipBeaconDistance = 50.0;
const fixed libAIAI_gv_aIHeroCloseToGhostShipBeaconDistance = 12.0;
const fixed libAIAI_gv_aIHeroFarFromGhostShipBeaconDistance = 15.0;
const fixed libAIAI_gv_aIHeroTreasureChestRecruitDistance = 20.0;
const fixed libAIAI_gv_aIHeroCloseToTreasureChestDistance = 10.0;
const fixed libAIAI_gv_aIHeroFarFromTreasureChestDistance = 13.0;
const fixed libAIAI_gv_aIHeroStandNearTreasureChestDistance = 6.0;
const fixed libAIAI_gv_aIHeroNearDoubloonDistance = 7.0;
const fixed libAIAI_gv_aIHeroTearOfEluneConsiderFrequency = 2.0;
const fixed libAIAI_gv_aIHeroTearOfEluneRecruitDistance = 75.0;
const fixed libAIAI_gv_aIHeroCloseToTearOfEluneDistance = 12.0;
const fixed libAIAI_gv_aIHeroFarFromTearOfEluneDistance = 15.0;
const fixed libAIAI_gv_aIHeroGuardPositionUpdateFrequency = 3.0;
const fixed libAIAI_gv_aIHeroObeliskConsiderFrequency = 2.0;
const fixed libAIAI_gv_aIHeroObeliskRecruitDistance = 25.0;
const fixed libAIAI_gv_aIHeroCloseToObeliskDistance = 10.0;
const fixed libAIAI_gv_aIHeroFarFromObeliskDistance = 13.0;
const fixed libAIAI_gv_aIHeroObeliskGuardDistance = 2.0;
const fixed libAIAI_gv_aIHeroEnterDragonVehicleConsiderFrequency = 2.0;
const fixed libAIAI_gv_aIHeroEnterDragonRecruitDistance = 20.0;
const fixed libAIAI_gv_aIHeroCloseToDragonStatueDistance = 13.0;
const fixed libAIAI_gv_aIHeroFarFromDragonStatueDistance = 16.0;
const fixed libAIAI_gv_aIHeroFollowerCloseEnoughDistance = 5.0;
const fixed libAIAI_gv_aIHeroFollowerNearbyDistance = 10.0;
const fixed libAIAI_gv_aIHeroFollowerLeashDistance = 12.0;
const fixed libAIAI_gv_aIHeroFollowerFarDistance = 60.0;
const fixed libAIAI_gv_aIHeroUnderworldConsiderFrequency = 2.0;
const fixed libAIAI_gv_aIHeroSkullSearchRadius = 12.0;
const fixed libAIAI_gv_aIHeroUnderworldCloseToExitDistance = 12.0;
const fixed libAIAI_gv_aIHeroAbathurFarBehindFrontTowerDistance = 14.0;
const fixed libAIAI_gv_aIHeroAbathurCloseToHideInTownPosition = 10.0;
const fixed libAIAI_gv_aIHeroAbathurFarFromHideInTownPosition = 12.0;
const fixed libAIAI_gv_aIHeroAbathurChangeLanesDelay = 30.0;
const fixed libAIAI_gv_aIHeroAbathurCloseToEnemiesDistance = 12.0;
const fixed libAIAI_gv_aIHeorAbathurFarFromEnemiesDistance = 16.0;
const fixed libAIAI_gv_aIHeroGravestoneSearchRadius = 12.0;
const fixed libAIAI_gv_aIHeroHealthGlobeSearchRadius = 6.0;
const int libAIAI_gv_aIHeroMaxWeaponChoices = 2;
const fixed libAIAI_gv_aIHeroVODelay = 20.0;
const fixed libAIAI_gv_aIHeroWaitForGameToStartRepositionFrequency = 6.0;
const fixed libAIAI_gv_aIHeroWaitForGameToStartMoveToGateTime = 15.0;
const fixed libAIAI_gv_aIHeroNearBuildingRange = 8.0;
const int libAIAI_gv_aITowerIndexMod = 2;
const fixed libAIAI_gv_aIGateNearbyRange = 5.0;
const int libAIAI_gv_aIMaxPathDistance = 65536;
const int libAIAI_gv_minionAIMaxActiveMinions = 511;
const int libAIAI_gv_towerMaxTowerCount = 125;
const int libAIAI_gv_defenderAIMaxNumberOfDefenderAI = 200;
const int libAIAI_gv_defenderAIMaxNumberOfDefendersPerGroup = 20;
const int libAIAI_gv_heroAIMaxNumberofAvoidAreas = 10;
const int libAIAI_gv_heroAIMaxCampPingCount = 10;
const int libAIAI_gv_heroAIMaxHeroPingCount = 10;
const int libAIAI_gv_heroAIHumanPlayerType = 1;
const int libAIAI_gv_heroAIComputerPlayerType = 2;
const int libAIAI_gv_heroAINumberofDifficultyLevels = 13;
const int libAIAI_gv_heroAINumberofHeroTiers = 3;
const int libAIAI_gv_heroAIMaxAOEAvoidEffects = 50;

// Structures
struct libAIAI_gs_MinionAI {
    bool lv_isAlive;
    int lv_state;
    int lv_nextWaypoint;
    point lv_unitPosition;
    unit lv_targetUnit;
    bool lv_leashing;
    bool lv_forceStateTransition;
    fixed lv_battleStandardDistancePercentage;
    point lv_battleStandardPoint;
    fixed lv_battleStandardLastUpdate;
    int lv_ownerPlayer;
    int lv_teamToAttack;
    fixed lv_attackRange;
    int lv_lane;
    unit lv_minionUnit;
    string lv_minionUnitType;
    int lv_initialWaypoint;
    int lv_debugLabel;
    unit lv_debugUnit;
};

struct libAIAI_gs_Towers {
    unit lv_towerUnit;
    unit lv_targetUnit;
    fixed lv_range;
    bool lv_dead;
};

struct libAIAI_gs_DefenderAI {
    bool lv_used;
    unitgroup lv_defendersGroup;
    int lv_numberOfDefendersAlive;
    int lv_defenderCount;
    unit[libAIAI_gv_defenderAIMaxNumberOfDefendersPerGroup + 1] lv_defenderUnits;
    point[libAIAI_gv_defenderAIMaxNumberOfDefendersPerGroup + 1] lv_leashPositions;
    region lv_leashRegion;
    region lv_aggoRegion;
    bool lv_healOnLeash;
    bool lv_canSeeCloaked;
    int lv_state;
    int lv_leashCount;
    unitgroup lv_validTargets;
    bool[libCore_gv_bALMaxPlayers + 1] lv_playerIsThreat;
    fixed lv_timeStarted;
    fixed lv_minAgroTime;
    fixed lv_minLeashTime;
    fixed lv_lastAnnouncedLeashing;
    fixed lv_fightStartTime;
    int lv_debugLabel;
    unit lv_debugUnit;
};

struct libAIAI_gs_HeroAIDamageTracking {
    unit lv_lastAttacker;
    fixed lv_lastTimeAttacked;
};

struct libAIAI_gs_AIHeroRavenLordTributeStatus {
    int lv_tributeState;
    point lv_tributeWarningPosition;
    unit lv_tributeUnit;
};

struct libAIAI_gs_AIHeroRavenLordCurseStatus {
    bool lv_curseActive;
    int lv_activatedTeam;
};

struct libAIAI_gs_HeroAIGhostShipStatus {
    int lv_beaconStatus;
    unit lv_beaconUnit;
    int[libCore_gv_bALMaxTeams + 1] lv_doubloonsTurnedIn;
};

struct libAIAI_gs_HeroAIDragonShrineStatus {
    int lv_untitledVariable001;
};

struct libAIAI_gs_HeroAIUnderworldStatus {
    bool lv_opened;
    int lv_totalSkulls;
    int lv_skullsRemaining;
    int[3] lv_skullsCollected;
    region lv_underworldRegion;
    unitgroup lv_entrances;
    unitgroup lv_exits;
};

struct libAIAI_gs_HeroAIUnderworldBossStatus {
    int lv_state;
    int lv_lane;
    unit lv_underworldBossUnit;
};

struct libAIAI_gs_AIHeroItemData {
    string lv_item;
    int lv_itemType;
};

struct libAIAI_gs_AIHeroLaneInfo {
    int lv_numAllyTowns;
    int lv_numAllyHeroes;
    int lv_numAllyHumanHeroes;
    playergroup lv_allyHeroes;
    int lv_numEnemyTowns;
    int lv_numEnemyHeroes;
    int lv_numEnemySiegeGiants;
    int lv_numEnemyOgres;
    int lv_numEnemyOgreKings;
    int lv_numEnemyDragonKnights;
    int lv_numEnemyUnderworldBossSkulls;
    int lv_numAllySiegeGiants;
    int lv_numAllyOgres;
    int lv_numAllyOgreKings;
    int lv_numAllyDragonKnights;
    int lv_numAllyUnderworldBossSkulls;
    fixed lv_eval;
    fixed lv_contentionPointLanePosition;
    point lv_contentionPoint;
    int lv_numEnemyHeroesNearContentionPoint;
    int lv_numEnemyMinionsNearContentionPoint;
    int lv_numAllyMinionsNearContentionPoint;
    int lv_numNonSiegeAllyMinionsNearContentionPoint;
    fixed lv_frontTowerPosition;
    fixed lv_frontMinionPosition;
    fixed lv_frontHumanAllyPosition;
    fixed lv_coreDefensePosition;
    fixed lv_lastTimeHumanAllyEnteredLane;
};

struct libAIAI_gs_AIHeroLocationInfo {
    fixed lv_lastSeenTime;
    point lv_lastSeenLocation;
    int lv_lastSeenLane;
};

struct libAIAI_gs_AIHeroAvoidArea {
    unit lv_unit;
    point lv_position;
    fixed lv_radius;
    fixed lv_startTime;
    fixed lv_expireTime;
    bool lv_fleeImmediately;
};

struct libAIAI_gs_AIHeroHomeEval {
    int lv_numAllyHeroes;
    int lv_numAllyMinionsAndSummons;
    int lv_numEnemyHeroes;
    int lv_numEnemyMinionsAndSummons;
};

struct libAIAI_gs_AIHeroTeamData {
    int lv_difficulty;
    int lv_gameState;
    fixed lv_nextLaneEvalUpdateTime;
    libAIAI_gs_AIHeroLaneInfo[libGame_gv_laneMaxCount + 1] lv_laneData;
    libAIAI_gs_AIHeroHomeEval lv_homeEval;
    libAIAI_gs_AIHeroLocationInfo[libCore_gv_bALMaxPlayers + 1] lv_heroTrackingData;
    int lv_numberOfMissingEnemies;
    fixed lv_nextTeamStrategyTime;
    int lv_weakestLane;
    int lv_avoidPlayer;
    int lv_avoidLane;
    libAIAI_gs_AIHeroAvoidArea[libAIAI_gv_heroAIMaxNumberofAvoidAreas + 1] lv_avoidAreas;
    int lv_numberofAvoidAreas;
    fixed lv_lastTimePlayedAttackVO;
    fixed lv_nextTearOfEluneConsiderTime;
    fixed lv_nextObeliskConsiderTime;
    fixed lv_nextUseDragonVehicleConsiderTime;
    fixed lv_nextUnderworldConsiderTime;
    fixed lv_nextWatchTowerConsiderTime;
    fixed lv_nextDoubloonChestConsiderTime;
    fixed lv_nextMapMechanicConsiderTime;
    int lv_additionalCoreDefendersNeeded;
};

struct libAIAI_gs_AIHeroTeamPlayerData {
    playergroup lv_players;
    playergroup lv_humanPlayers;
    playergroup lv_aIPlayers;
};

struct libAIAI_gs_AIHeroCampPing {
    int lv_playerWhoPinged;
    int lv_campPinged;
    fixed lv_pingTime;
};

struct libAIAI_gs_AIHeroCampData {
    fixed lv_startCampCheckTimer;
    fixed lv_joinCampCheckTimer;
    int lv_numberofCampPings;
    libAIAI_gs_AIHeroCampPing[libAIAI_gv_heroAIMaxCampPingCount + 1] lv_campPings;
};

struct libAIAI_gs_AIHeroHeroPing {
    fixed lv_pingExpireTime;
    int lv_playerWhoPinged;
    unit lv_pingedHero;
};

struct libAIAI_gs_AIHeroHeroPingData {
    libAIAI_gs_AIHeroHeroPing[libAIAI_gv_heroAIMaxHeroPingCount + 1] lv_heroPings;
};

struct libAIAI_gs_AIHeroCorePing {
    fixed lv_pingExpireTime;
    int lv_playerWhoPinged;
    unit lv_pingedCore;
};

struct libAIAI_gs_AIHeroData {
    unit lv_heroUnit;
    int lv_heroState;
    fixed lv_timeEnteredState;
    int lv_difficulty;
    bool lv_wantsToGoHome;
    bool lv_hasMount;
    abilcmd lv_mountAbility;
    abilcmd lv_dismountAbility;
    string lv_mountBehavior;
    bool lv_hasTactical;
    int[5] lv_abilityType;
    abilcmd[libCore_gv_dataHeroesMaxAbilitiesPerHero + 1] lv_castAbility;
    fixed lv_nextOffensiveSpellCheckTime;
    int lv_startingLane;
    bool lv_shouldWaitInSpawn;
    bool lv_wantsToWaitInSpawn;
    fixed lv_allowedToChooseTalentsTime;
    int lv_currentLane;
    int lv_desiredLane;
    int lv_tutorialForceFollowPlayer;
    int lv_pingFollowPlayer;
    fixed lv_nextChangeLanesConsiderTime;
    fixed lv_lastRetreatStartTime;
    bool lv_safeInLaneRetreating;
    fixed lv_safeInLaneStartTime;
    fixed lv_laneOffset;
    fixed lv_nextLaneOffsetChangeTime;
    int lv_curWaypointIndex;
    point lv_curWaypointPoint;
    point lv_laneTargetPosition;
    bool lv_safeInJungleRetreating;
    fixed lv_safeInJungleStartTime;
    int lv_returnToLaneLane;
    point lv_returnToLanePosition;
    point lv_jungleTargetPosition;
    unit lv_curTargetHealthGlobe;
    fixed lv_nextWaitingRepositionTime;
    fixed lv_nextMinionBattleAttackTime;
    fixed lv_minionBattleAttackTimeout;
    unit lv_minionBattleHarassTarget;
    fixed lv_minionBattleHarassTimeout;
    fixed lv_minionBattleRetreatTimeout;
    fixed lv_nextMinionBattleRepositionRecalculateTime;
    fixed lv_minionBattleRepositionPositionOffset;
    unit lv_siegeHarassTarget;
    unit lv_harassInJungleTarget;
    fixed lv_harassInJungleTimeout;
    fixed lv_nextHarassInJungleCheckTime;
    point lv_paceAroundStartPosition;
    fixed lv_paceAroundTimeout;
    fixed lv_nextPaceAroundRepositionTime;
    bool lv_wantsToDefendCore;
    int lv_curMinionCamp;
    int lv_humanPlayerAssisting;
    int lv_humanPlayerAssistingDistance;
    fixed lv_nextHumanPlayerAssistingDistanceCheckTime;
    int lv_cancelCampAttackCounter;
    fixed lv_moveToCampStartTime;
    fixed lv_arrivedAtCampTime;
    int lv_curTargetWatchTower;
    unit lv_curTargetMoonwell;
    fixed lv_avoidAOETimeout;
    fixed lv_nextWaitForGameToStartRepositionTime;
    point lv_waitForGameToStartPosition;
    fixed lv_leaveSpawnTime;
    unit lv_targetHero;
    point lv_targetHeroCheckPosition;
    fixed lv_focusHeroTimeout;
    fixed lv_nextFocusHeroCheckTime;
    bool lv_wantsToUseAbathurLogic;
    bool lv_wantsToCaptureTearOfElune;
    point lv_tearGuardPosition;
    fixed lv_nextTearGuardPositionUpdateTime;
    fixed lv_nextTurnInDoubloonsConsiderTime;
    unit lv_curTargetDoubloon;
    bool lv_wantsToTurnInDoubloons;
    unit lv_curTargetTreasureChest;
    unit lv_curTargetObelisk;
    unit lv_curTargetDragonStatue;
    unit lv_curTargetUnderworldEntrance;
    unit lv_curTargetUnderworldExit;
    bool lv_wantsToCollectSkulls;
    unit lv_curTargetSkull;
    unit lv_underworldTargetMinion;
    unit lv_underworldTargetHero;
    point lv_underworldExitTargetPosition;
    trigger lv_hSMapStateTrigger;
    int lv_hSMapStateTimeSpent;
    int lv_hSMapStateCurrentState;
    unit lv_hSMapStateCurrentTargetUnit;
    int lv_hSMapStateCurrentTargetIndex;
    int lv_hSMapStatePriority;
    fixed lv_hSMapStateNextConsiderTime;
    bool lv_wantsToDoCustomMapLogic;
    bool lv_announcedRetreat;
    fixed lv_nextEvalUpdateTime;
    point lv_heroLaneDirection;
    point lv_heroClosestLanePoint;
    fixed lv_heroLanePosition;
    fixed lv_totalEnemyEval;
    fixed lv_enemyHeroEval;
    fixed lv_enemyTowerEval;
    unitgroup lv_enemies;
    unitgroup lv_enemyHeroes;
    unitgroup lv_enemyMinionsSummons;
    unitgroup lv_enemyTowers;
    fixed lv_totalAllyEval;
    fixed lv_allyHeroEval;
    fixed lv_allyTowerEval;
    unitgroup lv_allies;
    unitgroup lv_allyHeroes;
    unitgroup lv_allyMinionsSummons;
    unitgroup lv_allyTowers;
    fixed lv_selfEval;
};

struct libAIAI_gs_AIHeroAOEEffectAvoidData {
    string lv_effect;
    bool lv_followsUnit;
    fixed lv_radius;
    fixed lv_duration;
    fixed lv_startOffset;
    bool lv_fleeImmediately;
};

// Variable Declarations
fixed libAIAI_gv_aIMinionRangedMinionWeaponRange;
fixed libAIAI_gv_aIMinionEnemyMinionAttackRange;
fixed libAIAI_gv_aIMinionAttackHeroDistance;
fixed libAIAI_gv_aIMinionHeroOutOfRangeDistance;
fixed libAIAI_gv_aIHeroLaneBucketWidth;
int[6] libAIAI_gv_aIHeroCampNumAttackersBonus;
int[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroAct2StartLevel;
int[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroAct3StartLevel;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroUseUltimates;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroMinSpellFrequency;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroMinTeamSpellFrequency;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroFudgeTarget;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroSkillshotMissRate;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroLineUpClearShotForSkillShots;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroPercent;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroTeleportPercent;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroMinOffensiveHealth;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroWatchforMissingEnemyHeroes;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroPathAroundDanger;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroStayBehindMinionsNearTowers;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroMinionBattleAttackDurationMelee;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroMinionBattleAttackDurationRanged;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroEnterTeamFights;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroAvoidEarlyGameTeamFights;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroFocusWeakHeroes;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroFocusWeakCore;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroNoticesCloakedHeroes;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroPickUpHealthGlobes;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroSmartLaneTargetting;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroAvoidTargettingHeroes;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroAvoidTargettingFountains;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroOnlyInitiateEasyCamps;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroChanceNearbyMinionCamp;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroChanceMiddleMinionCamp;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroChanceFarMinionCamp;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroCampWaitTimeout;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon;
int[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroMaxTributeCaptureAIHeroes;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroTributeCaptureDelay;
int[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroMaxObeliskCaptureAIHeroes;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroObeliskRecaptureDelay;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroUseDragonVehicleDelay;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroEnterUnderworldDelay;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroDoubloonPickupSoloDelay;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroDoubloonPickupHumanDelay;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroDoubloonChestDelay;
int[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroMaxDefendCoreAIHeroes;
int[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroHighestHeroSelectTier;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroPerformTeamStrategies;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroNeverEnterLateGame;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroDodgeAOEAbilities;
bool[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroUseMoonwells;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroChanceCaptureWatchTower;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroExtraWaitAfterRespawn;
fixed[libAIAI_gv_heroAINumberofDifficultyLevels + 1] libAIAI_gv_aIHeroUseMountDelay;
libAIAI_gs_MinionAI[libAIAI_gv_minionAIMaxActiveMinions + 1] libAIAI_gv_minionAIActiveMinions;
int libAIAI_gv_minionAIActiveMinionsUpperBound;
unitfilter libAIAI_gv_uF_MinionAI_AnyEnemyMinions;
unitfilter libAIAI_gv_uF_MinionAI_AnyEnemySummoned;
unitfilter libAIAI_gv_uF_MinionAI_GetNearestEnemyStructure;
unitfilter libAIAI_gv_uF_MinionAI_GetNearestEnemyHero;
bool libAIAI_gv_minionAIDisplayAIStatus;
int libAIAI_gv_towerTowerCount;
libAIAI_gs_Towers[libAIAI_gv_towerMaxTowerCount + 1] libAIAI_gv_towerTowers;
bool libAIAI_gv_towerSystemOn;
unitfilter libAIAI_gv_uF_TowerAI_Scan_Group;
unitfilter libAIAI_gv_uF_TowerAI_Required_Summoned;
unitfilter libAIAI_gv_uF_TowerAI_Required_Heroic;
unitfilter libAIAI_gv_uF_TowerAI_Required_Biological;
unitfilter libAIAI_gv_uF_TowerAI_Required_Invulnerable;
unitfilter libAIAI_gv_uF_TowerAI_Required_Stasis;
unitfilter libAIAI_gv_uF_TowerAI_Required_Visible;
libAIAI_gs_DefenderAI[libAIAI_gv_defenderAIMaxNumberOfDefenderAI + 1] libAIAI_gv_defenderAI;
int libAIAI_gv_defenderAIDefenderAIUpperBound;
string libAIAI_gv_defenderAILastCreatedDefenderAIIndex;
bool libAIAI_gv_defenderAICreepNeedsNewOrder;
bool libAIAI_gv_defenderAIDisplayAIStatus;
bool libAIAI_gv_heroAIActive;
bool libAIAI_gv_heroAIDidEval;
libAIAI_gs_HeroAIDamageTracking[libCore_gv_bALMaxPlayers + 1] libAIAI_gv_heroAIDamageTracking;
int[libMapM_gv_jungleMaxCamps + 1] libAIAI_gv_heroAIOrderMercCampList;
int[libMapM_gv_jungleMaxCamps + 1] libAIAI_gv_heroAIChaosMercCampList;
int[libMapM_gv_jungleMaxCamps + 1] libAIAI_gv_heroAIMiddleMercCampList;
libAIAI_gs_AIHeroRavenLordCurseStatus libAIAI_gv_heroAIRavenLordCurseStatus;
libAIAI_gs_AIHeroRavenLordTributeStatus libAIAI_gv_heroAIRavenLordTributeStatus;
libAIAI_gs_HeroAIGhostShipStatus libAIAI_gv_heroAIGhostShipStatus;
unitgroup libAIAI_gv_heroAITreasureChests;
unitgroup libAIAI_gv_heroAIDragonShireObelisks;
unit libAIAI_gv_heroAIDragonShireDragon;
libAIAI_gs_HeroAIUnderworldStatus libAIAI_gv_heroAIUnderworldStatus;
libAIAI_gs_HeroAIUnderworldBossStatus[3] libAIAI_gv_heroAIUnderworldBossStatus;
trigger libAIAI_gv_heroAITeamMapLogicTrigger;
int libAIAI_gv_heroAITeamMapLogicFaction;
int libAIAI_gv_heroAIMapCurrentPlayer;
libAIAI_gs_AIHeroItemData[libCore_gv_talents_MaxTalentEntryCount_C + 1] libAIAI_gv_heroAIItemData;
libAIAI_gs_AIHeroTeamData[3] libAIAI_gv_heroAITeamData;
libAIAI_gs_AIHeroTeamPlayerData[3] libAIAI_gv_heroAITeamPlayerData;
libAIAI_gs_AIHeroCampData[3] libAIAI_gv_heroAITeamCampData;
libAIAI_gs_AIHeroHeroPingData[3] libAIAI_gv_heroAITeamHeroPingData;
libAIAI_gs_AIHeroCorePing[3] libAIAI_gv_heroAITeamFocusCorePingData;
libAIAI_gs_AIHeroCorePing[3] libAIAI_gv_heroAITeamDefendCorePingData;
bool libAIAI_gv_heroAIFollowerNearbyMapObjectiveFound;
libAIAI_gs_AIHeroData[11] libAIAI_gv_aIHeroes;
string[libAIAI_gv_heroAINumberofHeroTiers + 1][libCore_gv_dataHeroesMaxHeroCount + 1] libAIAI_gv_heroAIHeroTierData;
bool libAIAI_gv_heroAIInitAbilitesHeroFound;
libAIAI_gs_AIHeroAOEEffectAvoidData[libAIAI_gv_heroAIMaxAOEAvoidEffects + 1] libAIAI_gv_heroAIAOEAvoidEffectList;
int libAIAI_gv_heroAINumRegisteredAOEAvoidEffects;
bool libAIAI_gv_heroAIDisplayAIStatus;
abilcmd libAIAI_gv_aIMoveAbil;
abilcmd libAIAI_gv_aITurnAbil;
abilcmd libAIAI_gv_aIAttackAbil;
abilcmd libAIAI_gv_aIAttackAllyAbil;
abilcmd libAIAI_gv_aIStopAbil;

// Function Declarations
int libAIAI_gf_MinionAINewMinionIndex ();
point libAIAI_gf_MinionAIGetNextWaypointForMinion (int lp_minionIndex);
point libAIAI_gf_MinionAIGetPreviousWaypointForMinion (int lp_minionIndex);
unit libAIAI_gf_MinionAIGetHeroToFollow (int lp_minionIndex);
bool libAIAI_gf_MinionAIIsValidTarget (int lp_minionIndex, unit lp_targetUnit);
unit libAIAI_gf_MinionAIGetNearestEnemyMinionSummonedInRangeOfMinion (int lp_minionIndex, fixed lp_range);
unit libAIAI_gf_MinionAIGetNearestEnemyStructureInRangeOfMinion (int lp_minionIndex, fixed lp_range);
unit libAIAI_gf_MinionAIGetNearestEnemyHeroInRangeOfMinion (int lp_minionIndex, fixed lp_range);
bool libAIAI_gf_MinionAIWithinLeashingDistanceofLane (int lp_minionIndex);
void libAIAI_gf_MinionAIUpdateBattleStandardDataForMinion (int lp_minionIndex);
bool libAIAI_gf_MinionAITestPastNextWaypoint (int lp_minionIndex);
void libAIAI_gf_MinionAIAdvanceMinionToNextWaypoint (int lp_minionIndex);
int libAIAI_gf_MinionAIDetermineState (int lp_minionIndex, int lp_oldState);
int libAIAI_gf_MinionAIDetermineAttackStateAndTarget (int lp_minionIndex);
bool libAIAI_gf_MinionAIShouldAttackMinions (int lp_minionIndex, unit lp_currentTarget);
bool libAIAI_gf_MinionAIShouldAttackStructure (int lp_minionIndex, unit lp_currentTarget);
int libAIAI_gf_MinionAIAttackHeroState (int lp_minionIndex, unit lp_currentTarget);
void libAIAI_gf_MinionAITransitionMinionIntoState (int lp_minionIndex, int lp_state);
int libAIAI_gf_MinionAIGetIndexForMinion (unit lp_minion);
void libAIAI_gf_MinionAIFreeMinionIndex (int lp_minionIndex);
void libAIAI_gf_MinionAIUnhookUnitFromMinionAI (unit lp_unit);
void libAIAI_gf_MinionAIStartMinionAI (unit lp_unit, int lp_lane, int lp_nextWaypoint, bool lp_pathToInitialWaypoint, bool lp_aggresiveLeashing, int lp_teamToAttack);
void libAIAI_gf_MinionAIStartMinionAISimple (unit lp_unit);
void libAIAI_gf_MinionAITurnMinionAISystemOnOff (bool lp_onOff);
void libAIAI_gf_MinionAIPauseUnpauseMinionAISystem (bool lp_pauseUnpause);
void libAIAI_gf_MinionAIUpdateAIStatus (int lp_minionIndex);
void libAIAI_gf_MinionAIToggleAIStatus (bool lp_show);
void libAIAI_gf_TowerTurnTowerSystemOnOff (bool lp_onOff);
int libAIAI_gf_DefenderAIDetermineState (int lp_defenderAIIndex, int lp_oldState);
void libAIAI_gf_DefenderAIStateLogic (int lp_defenderAIIndex);
void libAIAI_gf_DefenderAIUpdateValidTargetList (int lp_defenderAIIndex);
void libAIAI_gf_DefenderAITransitionDefenderAIIntoState (int lp_defenderAIIndex, int lp_state);
void libAIAI_gf_DefenderAIIssueFightingOrderToCreep (int lp_defenderAIIndex, int lp_creep);
void libAIAI_gf_DefenderAICreepDies (int lp_defenderAIIndex, unit lp_unit, int lp_killingPlayer);
int libAIAI_gf_DefenderAINewIndex ();
void libAIAI_gf_StartDefenderAI (unitgroup lp_defenders, region lp_leashRegion, region lp_aggroRegion, bool lp_healOnLeash);
void libAIAI_gf_AddUnitsToDefenderAI (int lp_defenderAIIndex, unitgroup lp_defenders);
int libAIAI_gf_LastCreatedDefenderAI ();
int libAIAI_gf_DefenderAIIndexOfUnit (unit lp_unit);
unitgroup libAIAI_gf_DefenderGroup (int lp_defenderAIIndex);
unit libAIAI_gf_DefenderUnit (int lp_defenderAIIndex, int lp_index);
int libAIAI_gf_DefenderUnitCount (int lp_defenderAIIndex);
region libAIAI_gf_DefenderAgroRegion (int lp_defenderAIIndex);
region libAIAI_gf_DefenderLeashRegion (int lp_defenderAIIndex);
unitgroup libAIAI_gf_DefenderValidTargets (int lp_defenderAIIndex);
bool libAIAI_gf_DefendersAreFighting (int lp_defenderAIIndex);
bool libAIAI_gf_DefendersAreLeashing (int lp_defenderAIIndex);
point libAIAI_gf_DefenderMovePointIntoRegion (point lp_point, region lp_region);
void libAIAI_gf_SetDefenderLeashLocation (int lp_defenderAIIndex, int lp_index, point lp_loc);
void libAIAI_gf_DefenderAIUpdateAIStatus (int lp_defenderIndex);
void libAIAI_gf_DefenderAIToggleAIStatus (bool lp_show);
void libAIAI_gf_HeroAIInitializeItemData ();
text libAIAI_gf_HeroAIDifficultyDisplayText (int lp_player);
void libAIAI_gf_HeroAIInitializeHeroTierData ();
void libAIAI_gf_HeroAIAddHeroToTierData (int lp_tier, string lp_heroType);
void libAIAI_gf_HeroAIGeneralPreInit ();
void libAIAI_gf_HeroAIInitAbilities (int lp_player);
void libAIAI_gf_HeroAIEnableAIForPlayer (int lp_trigPlayer);
void libAIAI_gf_HeroAIDisableAIForPlayer (int lp_trigPlayer);
void libAIAI_gf_HeroAISetAIDifficultyLevel (int lp_player, int lp_difficulty);
void libAIAI_gf_HeroAISetupUnitDangerTracking (unit lp_unit);
void libAIAI_gf_HeroAISetStartingLane (int lp_trigPlayer, int lp_laneIndex);
void libAIAI_gf_HeroAIAssistPlayerInLane (int lp_trigPlayer, int lp_playerToAssist);
void libAIAI_gf_HeroAIAssistHumanPlayerWithCamp (playergroup lp_players, int lp_humanPlayer, int lp_campIndex);
void libAIAI_gf_HeroAIStartWaitInSpawn (int lp_trigPlayer);
void libAIAI_gf_HeroAIStopWaitInSpawn (int lp_trigPlayer);
void libAIAI_gf_HeroAIStartAI ();
void libAIAI_gf_HeroAISetupTownData ();
void libAIAI_gf_HeroAITakeOverHeroForPlayer (int lp_player);
void libAIAI_gf_HeroAIReleaseHeroControl (int lp_player);
void libAIAI_gf_HeroAINotifyHeroDamaged (int lp_trigPlayer, unit lp_damagingUnit);
int libAIAI_gf_HeroAIGetCurrentPriority (int lp_trigPlayer);
int libAIAI_gf_HeroAIGetCurrentObjective (int lp_trigPlayer);
bool libAIAI_gf_HeroAIIsHigherPriority (int lp_trigPlayer, int lp_priority);
void libAIAI_gf_HeroAILeaveCurrentObjective (int lp_trigPlayer);
void libAIAI_gf_HeroAIReturnToCurrentObjective (int lp_trigPlayer);
int libAIAI_gf_HeroAIDead (int lp_trigPlayer);
int libAIAI_gf_HeroAIAfterDeathAttack (int lp_trigPlayer);
int libAIAI_gf_HeroAIReturnToSpawn (int lp_trigPlayer);
int libAIAI_gf_HeroAIWaitForGameToStart (int lp_trigPlayer);
int libAIAI_gf_HeroAIWaitToHeal (int lp_trigPlayer);
int libAIAI_gf_HeroAIAdvanceInLane (int lp_trigPlayer);
int libAIAI_gf_HeroAIRetreatInLane (int lp_trigPlayer);
int libAIAI_gf_HeroAIAvoidAOE (int lp_trigPlayer);
int libAIAI_gf_HeroAIHarassSiegeEnemy (int lp_trigPlayer);
int libAIAI_gf_HeroAIWaitForMinions (int lp_trigPlayer);
int libAIAI_gf_HeroAIReturnToLane (int lp_trigPlayer);
int libAIAI_gf_HeroAIPickUpHealthGlobeJungle (int lp_trigPlayer);
int libAIAI_gf_HeroAIFocusHero (int lp_trigPlayer);
int libAIAI_gf_HeroAIFocusCore (int lp_trigPlayer);
int libAIAI_gf_HeroAITeleportHomeLane (int lp_trigPlayer);
int libAIAI_gf_HeroAIDrinkMoonwell (int lp_trigPlayer);
int libAIAI_gf_HeroAIFleeInJungle (int lp_trigPlayer);
int libAIAI_gf_HeroAITeleportHomeJungle (int lp_trigPlayer);
int libAIAI_gf_HeroAIHarassInJungle (int lp_trigPlayer);
int libAIAI_gf_HeroAIPaceAround (int lp_trigPlayer);
int libAIAI_gf_HeroAIWaitInSpawn (int lp_trigPlayer);
int libAIAI_gf_HeroAICaptureWatchTower (int lp_trigPlayer);
int libAIAI_gf_HeroAIVehicleReturnToLane (int lp_trigPlayer);
int libAIAI_gf_HeroAIVehicleAdvanceInLane (int lp_trigPlayer);
int libAIAI_gf_HeroAIDefendCoreAttack (int lp_trigPlayer);
int libAIAI_gf_HeroAIDefendCoreLeash (int lp_trigPlayer);
int libAIAI_gf_HeroAIMinionBattleRetreat (int lp_trigPlayer);
int libAIAI_gf_HeroAIMinionBattleReposition (int lp_trigPlayer);
int libAIAI_gf_HeroAIMinionBattleAttack (int lp_trigPlayer);
int libAIAI_gf_HeroAIMinionBattleHarass (int lp_trigPlayer);
int libAIAI_gf_HeroAIMinionCampInit (int lp_trigPlayer);
int libAIAI_gf_HeroAIMoveToCamp (int lp_trigPlayer);
int libAIAI_gf_HeroAIWaitAtCamp (int lp_trigPlayer);
int libAIAI_gf_HeroAIAttackSoloCamp (int lp_trigPlayer);
int libAIAI_gf_HeroAICaptureCampBeacon (int lp_trigPlayer);
int libAIAI_gf_HeroAIDefendCampAttack (int lp_trigPlayer);
int libAIAI_gf_HeroAIDefendCampLeash (int lp_trigPlayer);
int libAIAI_gf_HeroAIFollowerGuardLeader (int lp_trigPlayer);
int libAIAI_gf_HeroAIFollowerGuardLeaderLeash (int lp_trigPlayer);
int libAIAI_gf_HeroAITearOfEluneMoveToTear (int lp_trigPlayer);
int libAIAI_gf_HeroAITearOfEluneGuard (int lp_trigPlayer);
int libAIAI_gf_HeroAITearOfEluneCapture (int lp_trigPlayer);
int libAIAI_gf_HeroAITearOfEluneDefend (int lp_trigPlayer);
int libAIAI_gf_HeroAITurnInDoubloons (int lp_trigPlayer);
int libAIAI_gf_HeroAITurnInDoubloonsDefend (int lp_trigPlayer);
int libAIAI_gf_HeroAIPickUpDoubloon (int lp_trigPlayer);
int libAIAI_gf_HeroAITreasureChestMoveToChest (int lp_trigPlayer);
int libAIAI_gf_HeroAITreasureChestAttackChest (int lp_trigPlayer);
int libAIAI_gf_HeroAITreasureChestDefend (int lp_trigPlayer);
int libAIAI_gf_HeroAIObeliskMoveToObelisk (int lp_trigPlayer);
int libAIAI_gf_HeroAIObeliskCapture (int lp_trigPlayer);
int libAIAI_gf_HeroAIObeliskDefend (int lp_trigPlayer);
int libAIAI_gf_HeroAIDragonMoveToDragon (int lp_trigPlayer);
int libAIAI_gf_HeroAIDragonEnter (int lp_trigPlayer);
int libAIAI_gf_HeroAIDragonGuard (int lp_trigPlayer);
int libAIAI_gf_HeroAIDragonDefend (int lp_trigPlayer);
int libAIAI_gf_HeroAIUnderworldEnter (int lp_trigPlayer);
int libAIAI_gf_HeroAIUnderworldKillMinions (int lp_trigPlayer);
int libAIAI_gf_HeroAIUnderworldFocusHero (int lp_trigPlayer);
int libAIAI_gf_HeroAIUnderworldPickupSkull (int lp_trigPlayer);
int libAIAI_gf_HeroAIUnderworldMoveToExit (int lp_trigPlayer);
int libAIAI_gf_HeroAIUnderworldTeleportHome (int lp_trigPlayer);
int libAIAI_gf_HeroAIUnderworldExit (int lp_trigPlayer);
int libAIAI_gf_HeroAIAbathurAdvanceInLane (int lp_trigPlayer);
int libAIAI_gf_HeroAIAbathurRetreatInLane (int lp_trigPlayer);
int libAIAI_gf_HeroAIAbathurHideInTown (int lp_trigPlayer);
int libAIAI_gf_HeroAIAbathurChangeLanes (int lp_trigPlayer);
bool libAIAI_gf_HeroAIHasGameStarted ();
void libAIAI_gf_HeroAIChangeState (int lp_player, int lp_state);
void libAIAI_gf_HeroAIChangeDesiredLane (int lp_trigPlayer, int lp_laneIndex);
bool libAIAI_gf_HeroAIIsInFollowerState (int lp_trigPlayer);
bool libAIAI_gf_HeroAIIsInAdvancingState (int lp_trigPlayer);
fixed libAIAI_gf_HeroAITimeInCurrentState (int lp_trigPlayer);
void libAIAI_gf_HeroAIChooseWaitForGameToStartPosition (int lp_trigPlayer);
void libAIAI_gf_HeroAIStartWaitToHeal (int lp_trigPlayer);
unit libAIAI_gf_HeroAIAfterDeathAttackChooseTarget (int lp_trigPlayer);
bool libAIAI_gf_HeroAISafeWhileRetreatingInLaneLogic (int lp_trigPlayer);
bool libAIAI_gf_HeroAISafeWhileRetreatingInJungleLogic (int lp_trigPlayer);
bool libAIAI_gf_HeroAIBetterToWalkDirectlyToLane (int lp_trigPlayer, int lp_laneIndex);
bool libAIAI_gf_HeroAILaneChangeTarget (int lp_trigPlayer);
bool libAIAI_gf_HeroAIJungleChooseTarget (int lp_trigPlayer, point lp_location, fixed lp_radius);
bool libAIAI_gf_HeroAIAggroEnemyCore (int lp_trigPlayer);
bool libAIAI_gf_HeroAIHarassSiegeEnemyLogic (int lp_trigPlayer);
bool libAIAI_gf_HeroAIHealthGlobeLogic (int lp_trigPlayer);
bool libAIAI_gf_HeroAIPickUpHealthGlobeJungleLogic (int lp_trigPlayer);
bool libAIAI_gf_HeroAIDrinkMoonwellLogic (int lp_trigPlayer, region lp_nearbyRegion);
bool libAIAI_gf_HeroAIShouldWaitForMinions (int lp_trigPlayer);
void libAIAI_gf_HeroAIStartWaitForMinions (int lp_trigPlayer);
void libAIAI_gf_HeroAIChooseNewWaitingPosition (int lp_trigPlayer);
bool libAIAI_gf_HeroAIHarassInJungleLogic (int lp_trigPlayer, bool lp_aggresivelyHarass);
void libAIAI_gf_HeroAIStartHarassInJungle (int lp_trigPlayer, unit lp_target);
bool libAIAI_gf_HeroAIPaceAroundLogic (int lp_trigPlayer);
void libAIAI_gf_HeroAIStartPaceAround (int lp_trigPlayer);
void libAIAI_gf_HeroAITeamLogic (int lp_faction);
void libAIAI_gf_HeroAITeamStrategyLogic (int lp_faction);
void libAIAI_gf_HeroAICleanUp (int lp_faction);
void libAIAI_gf_HeroAICalcCurrentLaneInfo (int lp_player);
void libAIAI_gf_HeroAIEval (int lp_player);
void libAIAI_gf_HeroAINearbyEval (int lp_trigPlayer, region lp_enemyRegion, region lp_friendlyRegion);
void libAIAI_gf_HeroAIClearEval (int lp_player);
fixed libAIAI_gf_HeroAIEnemyEvalInArea (int lp_trigPlayer, point lp_position, fixed lp_radius, bool lp_includeHeroes, bool lp_includeMinionsSummons, bool lp_includeTowers);
fixed libAIAI_gf_HeroAIAllyEvalInArea (int lp_trigPlayer, point lp_position, fixed lp_radius, bool lp_includeHeroes, bool lp_includeMinionsSummons, bool lp_includeTowers);
bool libAIAI_gf_HeroAIHumanAllyInArea (int lp_trigPlayer, point lp_position, fixed lp_radius);
unitgroup libAIAI_gf_HeroAIAllyHeroesinArea (int lp_trigPlayer, fixed lp_radius);
fixed libAIAI_gf_HeroAIHeroEval (unit lp_heroUnit);
void libAIAI_gf_HeroAIUpdateHomeEval (int lp_team);
void libAIAI_gf_HeroAIUpdateTeamPlayerData (int lp_team);
void libAIAI_gf_HeroAIUpdateHeroTracking (int lp_team);
void libAIAI_gf_HeroAIUpdateLaneEvals (int lp_team);
void libAIAI_gf_HeroAIUpdateLaneHeroCounts (int lp_team);
void libAIAI_gf_HeroAIUpdateFrontMinion (int lp_team);
void libAIAI_gf_HeroAIUpdateFrontTower (int lp_team);
void libAIAI_gf_HeroAIUpdateFrontHumanAlly (int lp_team);
void libAIAI_gf_HeroAICalcCoreDefensePosition (int lp_team);
void libAIAI_gf_HeroAIUpdateContentionPoints (int lp_team);
bool libAIAI_gf_HeroAIOneTownPerLaneRemaining (int lp_faction);
void libAIAI_gf_HeroAIUpdateGameState (int lp_faction);
void libAIAI_gf_HeroAIEvalLanes (int lp_team);
fixed libAIAI_gf_HeroAICalcLaneEval (int lp_numAllyTowns, int lp_numAllyHeroes, int lp_numEnemyHeroes, int lp_numEnemySiegeGiants, int lp_numEnemyOgres, int lp_numEnemyOgreKings, int lp_numEnemyDragonKnights, int lp_numEnemyUnderworldBossSkulls, fixed lp_underestimateEnemyPercent);
void libAIAI_gf_HeroAIUpdateTeamDifficulty (int lp_faction);
bool libAIAI_gf_HeroAIExcludeHeroFromLaneEvals (int lp_trigPlayer);
bool libAIAI_gf_HeroAIHaveEnemiesBeenSeenInLane (int lp_faction);
void libAIAI_gf_HeroAIPlayerPingsHero (int lp_pingingPlayer, unit lp_pingedHero);
void libAIAI_gf_HeroAIFocusPingedHeroLogic (int lp_faction);
void libAIAI_gf_HeroAIFocusWeakHeroLogic (int lp_faction);
void libAIAI_gf_HeroAIInitiateTeamFightLogic (int lp_faction);
void libAIAI_gf_HeroAIStartFocusHero (int lp_pingingPlayer, unit lp_targetHero);
bool libAIAI_gf_HeroAIShouldGiveUpOnFocusHero (int lp_trigPlayer);
bool libAIAI_gf_HeroAIHeroCanBeFocused (unit lp_targetHero);
bool libAIAI_gf_HeroAIHeroAvailableToStartFocus (int lp_trigPlayer);
bool libAIAI_gf_HeroAIHeroWantsToFocusHero (int lp_trigPlayer, unit lp_targetHero);
unit libAIAI_gf_HeroAIFindBestFocusHeroTarget (int lp_trigPlayer);
void libAIAI_gf_HeroAIFocusPingedCore (int lp_faction);
void libAIAI_gf_HeroAIFocusWeakCore (int lp_faction);
void libAIAI_gf_HeroAIStartFocusCore (int lp_pingingPlayer, unit lp_targetCore);
bool libAIAI_gf_HeroAIShouldFocusCore (int lp_trigPlayer, unit lp_targetCore);
bool libAIAI_gf_HeroAIShouldGiveUpOnFocusCore (int lp_trigPlayer, unit lp_targetCore);
bool libAIAI_gf_HeroAIHeroWillingToFocusCore (int lp_trigPlayer, unit lp_targetCore);
bool libAIAI_gf_HeroAIRandomlyCastAbilityOnTarget (int lp_trigPlayer, unit lp_targetUnit);
bool libAIAI_gf_HeroAIRandomlyCastAbilityOnCloakedEnemy (int lp_trigPlayer);
order libAIAI_gf_HeroAIRandomlyChooseTarget (int lp_trigPlayer, abilcmd lp_ability, int lp_abilityType, fixed lp_range);
int libAIAI_gf_HeroAIGetItemIndex (unit lp_item);
fixed libAIAI_gf_HeroAIGetAbilityRange (int lp_player, int lp_spellIndex);
fixed libAIAI_gf_HeroAIGetItemRange (int lp_player, int lp_itemIndex);
bool libAIAI_gf_HeroAIInWeaponRangeOfTarget (int lp_trigPlayer, unit lp_targetUnit, fixed lp_rangeSlop);
int libAIAI_gf_HeroAINumEnemiesInRange (int lp_player, fixed lp_range);
unit libAIAI_gf_HeroAIRandomlyChooseUnitInRange (int lp_player, unitgroup lp_unitGroup, fixed lp_range);
point libAIAI_gf_HeroAIFudgeTargetPosition (int lp_player, point lp_pos);
bool libAIAI_gf_HeroAIShouldSkipTactical (int lp_trigPlayer);
bool libAIAI_gf_HeroAIShouldTacticalAITargetCreeps (int lp_player);
void libAIAI_gf_HeroAIUpdateNextSpellCheckTime (int lp_trigPlayer);
void libAIAI_gf_HeroAIChooseABChoices (int lp_faction);
void libAIAI_gf_HeroAIAdvanceWaypoint (int lp_player);
void libAIAI_gf_HeroAIRetreatWaypoint (int lp_player);
void libAIAI_gf_HeroAIResetWaypoint (int lp_player, bool lp_advancing);
void libAIAI_gf_HeroAIStartAdvanceLane (int lp_player);
void libAIAI_gf_HeroAIStartRetreatLane (int lp_player);
void libAIAI_gf_HeroAIStartFleeInJungle (int lp_player);
void libAIAI_gf_HeroAIStartReturnToLane (int lp_player, int lp_laneIndex);
int libAIAI_gf_HeroAIGetClosestMinionLane (point lp_testPoint);
void libAIAI_gf_HeroAIReturnToClosestLane (int lp_player);
point libAIAI_gf_HeroAIGetReturnToLanePosition (int lp_player, int lp_laneIndex);
void libAIAI_gf_HeroAIChangeLaneOffset (int lp_player, fixed lp_laneOffset);
void libAIAI_gf_HeroAIUpdateLaneTargetPosition (int lp_player, bool lp_advancing);
void libAIAI_gf_HeroAIMoveLaneTargetPosition (int lp_trigPlayer, fixed lp_distance, bool lp_advancing);
void libAIAI_gf_HeroAIUpdateJungleTargetPosition (int lp_trigPlayer, point lp_destination);
bool libAIAI_gf_HeroAIIsAtLastWaypoint (int lp_trigPlayer, bool lp_advancing);
fixed libAIAI_gf_HeroAIChooseNewLaneOffset (int lp_trigPlayer, unitgroup lp_heroesToAvoid, unitgroup lp_towersToAvoid);
int libAIAI_gf_HeroAIGetClosestLaneOffsetBucket (fixed lp_laneOffset);
bool libAIAI_gf_HeroAIIsInRangeofLaneOffsetBucket (fixed lp_laneOffset, fixed lp_range, int lp_testBucket);
bool libAIAI_gf_HeroAIIsSafe (int lp_trigPlayer);
bool libAIAI_gf_HeroAIIsSafeLane (int lp_trigPlayer);
bool libAIAI_gf_HeroAIIsSafeJungle (int lp_trigPlayer);
bool libAIAI_gf_HeroAIIsSideOfMapSafe (int lp_faction, fixed lp_modifier);
bool libAIAI_gf_HeroAIIsNearbyLaneSafe (int lp_faction, point lp_testPoint, int lp_laneIndex);
bool libAIAI_gf_HeroAIShouldRetreatLane (int lp_trigPlayer);
bool libAIAI_gf_HeroAIShouldRetreatFromAttacker (int lp_trigPlayer);
bool libAIAI_gf_HeroAIShouldRetreatJungle (int lp_trigPlayer);
bool libAIAI_gf_HeroAIMountLogic (int lp_trigPlayer);
bool libAIAI_gf_HeroAIShouldMount (int lp_trigPlayer);
bool libAIAI_gf_HeroAIShouldDismount (int lp_trigPlayer);
bool libAIAI_gf_HeroAIDismount (int lp_trigPlayer);
void libAIAI_gf_HeroAISwapLanesLogic (int lp_faction);
bool libAIAI_gf_HeroAILaneChangingLogic (int lp_trigPlayer);
int libAIAI_gf_HeroAIChooseLaneLogic (int lp_player);
bool libAIAI_gf_HeroAINeedstoDefendBase (int lp_player);
bool libAIAI_gf_HeroAINeedstoSwitchLanes (int lp_player);
bool libAIAI_gf_HeroAIDoesLaneWantHelpFromPlayer (int lp_trigPlayer, int lp_laneIndex);
int libAIAI_gf_HeroAIGetLaneThatPlayerShouldHelp (int lp_trigPlayer);
int libAIAI_gf_HeroAIChooseStartingLaneLogic (int lp_trigPlayer);
int libAIAI_gf_HeroAIGetLaneWithNoAllyHeroes (int lp_team);
int libAIAI_gf_HeroAIGetLaneWithLeastAllyHeroes (int lp_team);
int libAIAI_gf_HeroAIGetLaneWithSoloMelee (int lp_team);
int libAIAI_gf_HeroAIGetLaneWithSoloRanged (int lp_team);
int libAIAI_gf_HeroAIGetLaneWithSoloMeleeSupport (int lp_team);
int libAIAI_gf_HeroAIGetLaneWithSoloRangedSupport (int lp_team);
bool libAIAI_gf_HeroAIShouldEnterMinionBattle (int lp_trigPlayer);
bool libAIAI_gf_HeroAIMinionBattleFinished (int lp_trigPlayer);
void libAIAI_gf_HeroAIStartMinionBattleAttack (int lp_trigPlayer);
void libAIAI_gf_HeroAIStartMinionBattleHarass (int lp_trigPlayer, unit lp_targetUnit);
void libAIAI_gf_HeroAIStartMinionBattleRetreat (int lp_trigPlayer, fixed lp_retreatTime);
void libAIAI_gf_HeroAIStartMinionBattleReposition (int lp_trigPlayer);
void libAIAI_gf_HeroAIUpdateMinionBattleRepositionPosition (int lp_trigPlayer);
void libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger (string lp_effectType, fixed lp_radius, fixed lp_duration, fixed lp_startOffset, bool lp_followsUnit, bool lp_fleeImmediately);
void libAIAI_gf_HeroAIRegisterDataModAOEEffects ();
void libAIAI_gf_HeroAINotifyAOEStarting (int lp_faction, point lp_position, fixed lp_radius, fixed lp_expireTime, bool lp_fleeImmediately);
bool libAIAI_gf_HeroAIAvoidAreaLogic (int lp_trigPlayer);
bool libAIAI_gf_HeroAIAvoidCircleArea (int lp_trigPlayer, point lp_position, fixed lp_radius, fixed lp_expireTime, bool lp_fleeImmediately);
point libAIAI_gf_HeroAIGetAvoidCircleAreaRetreatPosition (int lp_trigPlayer, point lp_avoidPosition, fixed lp_avoidRadius, bool lp_fleeImmediately);
void libAIAI_gf_HeroAIWatchTowerPinged (int lp_pingingPlayer, unit lp_watchTowerUnit);
void libAIAI_gf_HeroAICaptureWatchTowerLogic (int lp_faction);
bool libAIAI_gf_HeroAIShouldCaptureWatchTower (int lp_trigPlayer, int lp_watchTowerIndex, bool lp_soloCapture);
void libAIAI_gf_HeroAIMinionCampPinged (int lp_pingingPlayer, unit lp_targetUnit);
void libAIAI_gf_HeroAIMinionCampLogic (int lp_faction);
void libAIAI_gf_HeroAIJoinCampLogic (int lp_faction);
bool libAIAI_gf_HeroAIAttackCampLogic (int lp_faction, fixed lp_searchRadius);
bool libAIAI_gf_HeroAITeamAttackCampLogic (int lp_faction, fixed lp_searchRadius);
void libAIAI_gf_HeroAIStartTakeCamp (int lp_trigPlayer, int lp_campIndex, int lp_humanPlayerAssisting);
bool libAIAI_gf_HeroAICanAttackCamp (int lp_faction, int lp_campIndex, int lp_pingIndex, fixed lp_searchRadius, bool lp_recruitAll);
void libAIAI_gf_HeroAINotifyTeamHeadingToCamp (int lp_playerWhoPinged, int lp_faction, int lp_campIndex);
int libAIAI_gf_HeroAITotalHeroLevelsNeededForCamp (int lp_campIndex);
bool libAIAI_gf_HeroAIShouldInitiateCamp (int lp_trigPlayer);
bool libAIAI_gf_HeroAIShouldDefendCamp (int lp_trigPlayer);
void libAIAI_gf_HeroAIStartCaptureCampBeacon (int lp_trigPlayer);
void libAIAI_gf_HeroAIStartWaitAtCamp (int lp_trigPlayer);
point libAIAI_gf_HeroAIChooseCampGuardPosition (int lp_trigPlayer);
point libAIAI_gf_HeroAIChooseCampCaptureStandPosition (int lp_trigPlayer);
unit libAIAI_gf_HeroAIAttackCampChooseTarget (int lp_trigPlayer);
void libAIAI_gf_HeroAIHeroStoppingCampAttack (int lp_trigPlayer);
bool libAIAI_gf_HeroAIShouldCancelCampAttack (int lp_trigPlayer);
void libAIAI_gf_HeroAICancelCampAttack (int lp_campIndex, int lp_faction);
void libAIAI_gf_HeroAILeaveCamp (int lp_trigPlayer);
fixed libAIAI_gf_HeroAICampEval (int lp_campIndex);
bool libAIAI_gf_HeroAIIsEasyCamp (int lp_campIndex);
bool libAIAI_gf_HeroAIIsPushWithTeamCamp (int lp_campIndex);
bool libAIAI_gf_HeroAICampDefendersAreHibrinating (int lp_campIndex);
bool libAIAI_gf_HeroAIEnemiesNearCamp (int lp_campIndex, int lp_faction, fixed lp_searchRadius, bool lp_visionCheat);
int libAIAI_gf_HeroAIEnemyHeroesNearCamp (int lp_faction, int lp_campIndex, fixed lp_searchRadius, bool lp_visionCheat);
int libAIAI_gf_HeroAIAllyHeroesNearCamp (int lp_faction, int lp_campIndex, fixed lp_searchRadius);
bool libAIAI_gf_HeroAIAllRecruitedAIHaveArrivedAtCamp (int lp_faction, int lp_campIndex);
bool libAIAI_gf_HeroAINoOtherAllyAITakingCamp (int lp_trigPlayer, int lp_campIndex);
void libAIAI_gf_HeroAIDefendCoreLogic (int lp_faction);
void libAIAI_gf_HeroAIReturnToDefendCoreLogic (int lp_faction);
unit libAIAI_gf_HeroAIDefendCoreChooseTarget (int lp_trigPlayer, fixed lp_distance);
bool libAIAI_gf_HeroAIInDefendCoreState (int lp_trigPlayer);
void libAIAI_gf_HeroAILeashFollowers (int lp_faction);
bool libAIAI_gf_HeroAIShouldStopFollowingLeader (int lp_trigPlayer);
void libAIAI_gf_HeroAIStartFollowingLeader (int lp_trigPlayer, int lp_leaderPlayer);
void libAIAI_gf_HeroAIStopFollowingLeader (int lp_trigPlayer);
bool libAIAI_gf_HeroAIMapSpecificTryingToJoinPlayer (int lp_trigPlayer);
int libAIAI_gf_HeroAIGetPlayerToFollow (int lp_trigPlayer);
unit libAIAI_gf_HeroAIGetUnitToFollow (int lp_trigPlayer);
void libAIAI_gf_HeroAITearOfElunePinged (int lp_pingingPlayer);
void libAIAI_gf_HeroAICaptureTearOfEluneLogic (int lp_faction);
bool libAIAI_gf_HeroAIShouldCaptureTearOfElune (int lp_trigPlayer, bool lp_playerPigned);
bool libAIAI_gf_HeroAIShouldGiveUpOnTearOfElune (int lp_trigPlayer);
bool libAIAI_gf_HeroAIShouldDefendTearOfElune (int lp_trigPlayer);
void libAIAI_gf_HeroAIStartGuardTear (int lp_trigPlayer);
bool libAIAI_gf_HeroAIIsAllyCapturingTear (int lp_trigPlayer);
int libAIAI_gf_HeroAINumberOfAIAlliesCapturingTear (int lp_trigPlayer);
void libAIAI_gf_HeroAIChooseTearOfEluneGuardPostion (int lp_trigPlayer);
bool libAIAI_gf_HeroAIEnemyTeamCursed (int lp_trigPlayer);
bool libAIAI_gf_HeroAIOurTeamCursed (int lp_trigPlayer);
void libAIAI_gf_HeroAIGhostShipBeaconPinged (int lp_pingingPlayer);
void libAIAI_gf_HeroAITurnInDoubloonsLogic (int lp_faction);
bool libAIAI_gf_HeroAIShouldTurnInDoubloons (int lp_trigPlayer, bool lp_playerPinged);
bool libAIAI_gf_HeroAIShouldGiveUpOnTurningInDoubloons (int lp_trigPlayer);
void libAIAI_gf_HeroAIStartTurnInDoubloons (int lp_trigPlayer);
int libAIAI_gf_HeroAINumberOfDoubloonsHeroIsHolding (int lp_trigPlayer);
int libAIAI_gf_HeroAINumberOfDoubloonsTeamIsHolding (int lp_faction);
bool libAIAI_gf_HeroAIFollowShouldTurnInDoubloons (int lp_trigPlayer);
void libAIAI_gf_HeroAIPickUpDoubloonsLogic (int lp_faction);
unit libAIAI_gf_HeroAISearchForNearbyDoubloon (int lp_trigPlayer);
bool libAIAI_gf_HeroAIIsAllyPickingUpDoubloon (int lp_trigPlayer, unit lp_doubloon);
bool libAIAI_gf_HeroAIIsHumanAllyPickingUpDoubloon (int lp_trigPlayer, unit lp_doubloon);
void libAIAI_gf_HeroAIAttackTreasureChestLogic (int lp_faction);
bool libAIAI_gf_HeroAIShouldAttackTreasureChest (int lp_trigPlayer, unit lp_treasureChest);
bool libAIAI_gf_HeroAIShouldGiveUpOnTreasureChest (int lp_trigPlayer);
void libAIAI_gf_HeroAIObeliskPinged (int lp_pingingPlayer, unit lp_obeliskUnit);
void libAIAI_gf_HeroAICaptureObeliskLogic (int lp_faction);
bool libAIAI_gf_HeroAIShouldCaptureObelisk (int lp_trigPlayer, unit lp_obelisk, bool lp_playerPinged);
bool libAIAI_gf_HeroAIShouldGiveUpOnObelisk (int lp_trigPlayer);
bool libAIAI_gf_HeroAITeamOwnsAllObelisks (int lp_faction);
bool libAIAI_gf_HeroAITeamIsCapturingAllObelisks (int lp_faction);
bool libAIAI_gf_HeroAIIsNearActiveObelisk (int lp_trigPlayer);
point libAIAI_gf_HeroAIChooseDragonShrineGuardPosition (unit lp_obelisk);
int libAIAI_gf_HeroAINumberOfAIAlliesCapturingObelisk (int lp_trigPlayer, unit lp_obelisk);
void libAIAI_gf_HeroAICaptureDragonLogic (int lp_faction);
bool libAIAI_gf_HeroAIShouldGiveUpOnDragon (int lp_trigPlayer);
bool libAIAI_gf_HeroAIIsAllyEnteringDragon (int lp_faction, unit lp_dragonStatue);
bool libAIAI_gf_HeroAIIsHumanAllyEnteringDragon (int lp_faction, unit lp_dragonStatue);
int libAIAI_gf_HeroAINumberOfAlliesCapturingDragon (int lp_faction, unit lp_dragonStatue);
void libAIAI_gf_HeroAIEnterUnderworldLogic (int lp_faction);
bool libAIAI_gf_HeroAIStartEnterUnderworld (int lp_trigPlayer);
bool libAIAI_gf_HeroAIShouldEnterUnderworld (int lp_trigPlayer);
bool libAIAI_gf_HeroAIShouldRetreatUnderworld (int lp_trigPlayer);
bool libAIAI_gf_HeroAIIsSafeUnderworld (int lp_trigPlayer);
bool libAIAI_gf_HeroAIIsUnitInUnderworld (unit lp_unit);
int libAIAI_gf_HeroAINumberOfAIAlliesCollectingSkulls (int lp_trigPlayer);
void libAIAI_gf_HeroAIStartUnderworldKillMinions (int lp_trigPlayer);
void libAIAI_gf_HeroAIStartExitUnderworld (int lp_trigPlayer);
void libAIAI_gf_HeroAILeaveExitUnderworld (int lp_trigPlayer);
void libAIAI_gf_HeroAIUpdateUnderworldExitTargetPosition (int lp_trigPlayer);
bool libAIAI_gf_HeroAIIsEnteringUnderworld (int lp_trigPlayer);
bool libAIAI_gf_HeroAIIsExitingUnderworld (int lp_trigPlayer);
void libAIAI_gf_HeroAIUnderworldBossPinged (int lp_pingingPlayer, unit lp_targetUnit);
unit libAIAI_gf_HeroAIUnderworldChooseTarget (int lp_trigPlayer);
bool libAIAI_gf_HeroAIUnderworldFocusNearbyHero (int lp_trigPlayer);
unit libAIAI_gf_HeroAIUnderworldFocusHeroChooseTarget (int lp_trigPlayer);
int libAIAI_gf_HeroAINumberOfAIAlliesChasingUnderworldHeroTarget (int lp_trigPlayer, unit lp_target);
void libAIAI_gf_HeroAIPickupSkullsLogic (int lp_faction);
bool libAIAI_gf_HeroAISearchForNearbySkull (int lp_trigPlayer, region lp_searchRegion, bool lp_ignoreAllies);
bool libAIAI_gf_HeroAIIsAllyPickingUpSkull (int lp_trigPlayer, unit lp_skull);
void libAIAI_gf_HeroAIAbathurLogic (int lp_faction);
void libAIAI_gf_HeroAIStartAbathurAdvanceLane (int lp_trigPlayer);
void libAIAI_gf_HeroAIStartAbathurRetreatLane (int lp_trigPlayer);
void libAIAI_gf_HeroAIStartAbathurHideInTown (int lp_trigPlayer);
point libAIAI_gf_HeroAIGetHideInTownPosition (int lp_trigPlayer, int lp_laneIndex);
void libAIAI_gf_HeroAIWaitInSpawnLogic (int lp_faction);
void libAIAI_gf_HeroAIPlayerPingsCore (int lp_pingingPlayer, unit lp_pingedCore);
bool libAIAI_gf_HeroAIIsPlayerActive (int lp_trigPlayer, int lp_type);
bool libAIAI_gf_HeroAIIsTeamBusy (int lp_faction);
bool libAIAI_gf_HeroAIIsPlayerBehindLanePosition (int lp_player, fixed lp_lanePosition);
bool libAIAI_gf_HeroAIIsPlayerDefendingTown (int lp_trigPlayer);
bool libAIAI_gf_HeroAIIsPlayerAttackingTown (int lp_trigPlayer);
bool libAIAI_gf_HeroAIIsPlayerInsideEnemyTown (int lp_trigPlayer);
bool libAIAI_gf_HeroAIIsPlayerInsideBase (int lp_trigPlayer);
bool libAIAI_gf_HeroAIIsPlayerInsideEnemyBase (int lp_trigPlayer);
bool libAIAI_gf_HeroAIIsPlayerAtSpawn (int lp_trigPlayer);
bool libAIAI_gf_HeroAIIsUnitBehindGate (unit lp_unit);
fixed libAIAI_gf_HeroAIEvaluateTarget (int lp_trigPlayer, unit lp_target, fixed lp_distanceWeight);
bool libAIAI_gf_HeroAIAIDifficultyLevelShouldUseHero (int lp_player, int lp_heroIndex, bool lp_allowAnyTier);
int libAIAI_gf_HeroAIGetAllyTeamIndex (int lp_player);
int libAIAI_gf_HeroAIGetEnemyTeamIndex (int lp_player);
int libAIAI_gf_HeroAIGetLaneWithMostAllies (int lp_player);
bool libAIAI_gf_HeroAIMercsAttackingLane (int lp_faction, int lp_laneIndex);
bool libAIAI_gf_HeroAIInLaneWithAllyMercs (int lp_trigPlayer);
bool libAIAI_gf_HeroAIInLaneWithEnemyMercs (int lp_trigPlayer);
bool libAIAI_gf_HeroAILaneHasAllMeleeHeroes (int lp_faction, int lp_laneIndex);
bool libAIAI_gf_HeroAIInLaneWithAllMeleeHeroes (int lp_trigPlayer);
unitgroup libAIAI_gf_HeroAIEnemyTowersInRange (int lp_trigPlayer, fixed lp_radius, bool lp_ignoreSameLane);
bool libAIAI_gf_HeroAIUnitProtectedByTower (unit lp_unit, fixed lp_towerSearchRadius);
bool libAIAI_gf_HeroAIInRangeOfAnEnemyTower (int lp_player, point lp_position);
bool libAIAI_gf_HeroAICloseToTowerWithoutMinions (int lp_trigPlayer, unit lp_tower);
bool libAIAI_gf_HeroAICloseToAnyTowerWithoutMinions (int lp_trigPlayer);
bool libAIAI_gf_HeroAIAlliesNearEnemyBuilding (int lp_trigPlayer, unit lp_building);
bool libAIAI_gf_HeroAIEnemiesNearBuilding (unit lp_building);
bool libAIAI_gf_HeroAIIsTowerAThreat (unit lp_tower);
point libAIAI_gf_HeroAIGetPositionBehindContentionPoint (int lp_trigPlayer, int lp_laneIndex, fixed lp_distance, fixed lp_laneOffset);
point libAIAI_gf_HeroAIGetRetreatPosition (int lp_trigPlayer, fixed lp_distance, point lp_awayFrom);
unitgroup libAIAI_gf_HeroAIGetEnemyHeroesInRetreatPath (int lp_trigPlayer);
bool libAIAI_gf_HeroAIEnemiesInHomeRegion (int lp_faction);
bool libAIAI_gf_HeroAIShouldUseUltimates (int lp_trigPlayer);
bool libAIAI_gf_HeroAIIsAIEnabledForPlayer (int lp_trigPlayer);
bool libAIAI_gf_HeroAIIsAllyTargettingUnit (int lp_trigPlayer, unit lp_targetUnit);
bool libAIAI_gf_HeroAIIsHeroMelee (int lp_trigPlayer);
bool libAIAI_gf_HeroAIAttackingBadTarget (int lp_trigPlayer);
bool libAIAI_gf_HeroAIAttackingWeakHumanHero (int lp_trigPlayer, fixed lp_healthPercent);
bool libAIAI_gf_HeroAIAttackingFountain (int lp_trigPlayer);
bool libAIAI_gf_HeroAIEnemiesNearCore (int lp_faction);
bool libAIAI_gf_HeroAIHeroHasBeenAttackedRecently (int lp_trigPlayer, fixed lp_time);
bool libAIAI_gf_HeroAITeamHasHumanPlayers (int lp_faction);
bool libAIAI_gf_HeroAITeamHasAIPlayers (int lp_faction);
int libAIAI_gf_HeroAITeamIndexOfFaction (int lp_faction);
point libAIAI_gf_HeroAIFindNearbyPathablePoint (int lp_trigPlayer, point lp_point, fixed lp_maxDistance, bool lp_checkVision);
bool libAIAI_gf_HeroAIBeingTargettedByDangerousAbility (int lp_trigPlayer);
int libAIAI_gf_HeroAINumberofEnemyHeroesNearLocation (int lp_trigPlayer, point lp_location, fixed lp_range);
unit libAIAI_gf_HeroAIFindNearbyGate (point lp_position, fixed lp_range);
void libAIAI_gf_HeroAIMapMechanicPinged (int lp_pingingPlayer, unit lp_targetUnit);
unit libAIAI_gf_HeroAIGetRandomAllyHeroInBattle (int lp_trigPlayer, fixed lp_range);
point libAIAI_gf_HeroAIGetRandomContentionPoint (int lp_trigPlayer, fixed lp_range);
void libAIAI_gf_HeroAIUpdateAIStatus (int lp_trigPlayer);
void libAIAI_gf_HeroAIUpdateAIStatusHelper (int lp_trigPlayer, int lp_statusLabel, int lp_difficultyLabel);
fixed libAIAI_gf_AIGetActiveWeaponRange (unit lp_unit);
fixed libAIAI_gf_AIGetAnyWeaponRangeIncludesNonActive (unit lp_unit);
bool libAIAI_gf_AIUnitBehindEnemyGateEstimate (point lp_selfPosition, int lp_selfPlayer, unit lp_enemyUnit);
bool libAIAI_gf_AIHeroNearContentionPoint (int lp_player, fixed lp_range);
fixed libAIAI_gf_AIGetClosestLanePosition (int lp_laneIndex, point lp_point);
fixed libAIAI_gf_AIGetLaneOffsetOfPoint (int lp_laneIndex, point lp_testPoint);
fixed libAIAI_gf_AIAdvanceLanePosition (int lp_faction, int lp_laneIndex, fixed lp_lanePosition, fixed lp_distance);
fixed libAIAI_gf_AIRetreatLanePosition (int lp_faction, int lp_laneIndex, fixed lp_lanePosition, fixed lp_distance);
fixed libAIAI_gf_AIMoveAlongLane (int lp_laneIndex, fixed lp_lanePosition, fixed lp_distance);

// Trigger Declarations
trigger libAIAI_gt_IncludeAI;
trigger libAIAI_gt_MinionAIAIRoutine;
trigger libAIAI_gt_TowerAIRoutine;
trigger libAIAI_gt_InitializeTowerAISystem;
trigger libAIAI_gt_DefenderAICreepsAttacked;
trigger libAIAI_gt_DefenderAIDefenderAILogic;
trigger libAIAI_gt_HeroAIInitializeDifficultyLevelData;
trigger libAIAI_gt_HeroAIGameStarted;
trigger libAIAI_gt_HeroAIRunMainGroupLoop;
trigger libAIAI_gt_HeroAITakeOverHero;
trigger libAIAI_gt_HeroAIReleaseHeroControl;
trigger libAIAI_gt_HeroAITownDataInitialized;
trigger libAIAI_gt_HeroAITowerDies;
trigger libAIAI_gt_HeroAIFollowerCommand;
trigger libAIAI_gt_HeroAIHeroTakesDamage;
trigger libAIAI_gt_HeroAIHeroEntersAfterDeathState;
trigger libAIAI_gt_HeroAIHeroDies;
trigger libAIAI_gt_HeroAIHumanAllyInitiatesFight;
trigger libAIAI_gt_HeroAITributeWarning;
trigger libAIAI_gt_HeroAITributeSpawned;
trigger libAIAI_gt_HeroAITributePickedUp;
trigger libAIAI_gt_HeroAIRavenLordCurseStarts;
trigger libAIAI_gt_HeroAIRavenLordCurseEnds;
trigger libAIAI_gt_HeroAIGhostShipShowsUp;
trigger libAIAI_gt_HeroAIGhostShipShootingStarts;
trigger libAIAI_gt_HeroAIGhostShipShootingEnds;
trigger libAIAI_gt_HeroAIDoubloonsTurnedIn;
trigger libAIAI_gt_HeroAITreasureChestsSpawns;
trigger libAIAI_gt_HeroAIDragonShireObelisksSpawned;
trigger libAIAI_gt_HeroAIDragonShrireObeliskChangesOwner;
trigger libAIAI_gt_HeroAIDragonShireDragonActivated;
trigger libAIAI_gt_HeroAIDragonShireDragonEnds;
trigger libAIAI_gt_HeroAIUnderworldUndeadSpawned;
trigger libAIAI_gt_HeroAIUnderworldSkullCollected;
trigger libAIAI_gt_HeroAIUnderworldBossWarning;
trigger libAIAI_gt_HeroAIUnderworldBossSpawned;
trigger libAIAI_gt_HeroAIUnderworldBossDies;
trigger libAIAI_gt_HeroAIWatchForAOEAbilityCasted;

// Library Initialization
void libAIAI_InitVariables ();

