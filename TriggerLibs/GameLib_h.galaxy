include "TriggerLibs/HeroesLib_h"

//--------------------------------------------------------------------------------------------------
// Library: Game
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int libGame_ge_AnnouncementPriorities_Critical = 0;
const int libGame_ge_AnnouncementPriorities_High = 1;
const int libGame_ge_AnnouncementPriorities_Normal = 2;
const int libGame_ge_AnnouncementPriorities_Low = 3;
string libGame_ge_BehaviorCategoriesStorm_Ident (int lp_val);
const int libGame_ge_CapturePointState_Neutral = 0;
const int libGame_ge_CapturePointState_Captured = 1;
const int libGame_ge_CapturePointState_RevertingtoNeutral = 2;
const int libGame_ge_CapturePointState_Capturing = 3;
const int libGame_ge_DebuffCategories_Null = 0;
const int libGame_ge_DebuffCategories_Stun = 1;
const int libGame_ge_DebuffCategories_Root = 2;
const int libGame_ge_DebuffCategories_Slow = 3;
const int libGame_ge_DebuffCategories_Vulnerable = 4;
const int libGame_ge_DebuffCategories_Revealed = 5;
const int libGame_ge_DebuffCategories_Silence = 6;
const int libGame_ge_DebuffCategories_Blind = 7;
const int libGame_ge_DebuffCategories_Stasis = 8;
const int libGame_ge_DebuffCategories_Enfeebled = 9;
const int libGame_ge_EncouragementStatCalloutThresholds_Null = 0;
const int libGame_ge_EncouragementStatCalloutThresholds_Display = 1;
const int libGame_ge_EncouragementStatCalloutThresholds_GreatJob = 2;
const int libGame_ge_EncouragementStatCalloutThresholds_Amazing = 3;
const int libGame_ge_EncouragementStatCalloutThresholds_Count = 4;
const int libGame_ge_EncouragementStatCallouts_Null = 0;
const int libGame_ge_EncouragementStatCallouts_TimeSpentAlive = 1;
const int libGame_ge_EncouragementStatCallouts_PercentOfTeamsXPGathered = 2;
const int libGame_ge_EncouragementStatCallouts_Takedowns = 3;
const int libGame_ge_EncouragementStatCallouts_DamageDoneToHeroes = 4;
const int libGame_ge_EncouragementStatCallouts_HealingDoneToHeroes = 5;
const int libGame_ge_EncouragementStatCallouts_MapTributesCollected = 6;
const int libGame_ge_EncouragementStatCallouts_MapDoubloonsTurnedIn = 7;
const int libGame_ge_EncouragementStatCallouts_MapDragonShrineCaptures = 8;
const int libGame_ge_EncouragementStatCallouts_MapSkullsCollected = 9;
const int libGame_ge_EncouragementStatCallouts_MercCampsCaptured = 10;
const int libGame_ge_EncouragementStatCallouts_DamageDoneToTowns = 11;
const int libGame_ge_EncouragementStatCallouts_ShieldingDoneToHeroes = 12;
const int libGame_ge_EncouragementStatCallouts_Count = 13;
string libGame_ge_EncouragementStatCallouts_Ident (int lp_val);
const int libGame_ge_EncouragementDeathTipsNames_Null = 0;
const int libGame_ge_EncouragementDeathTipsNames_Gangups = 1;
const int libGame_ge_EncouragementDeathTipsNames_FollowMinions = 2;
const int libGame_ge_EncouragementDeathTipsNames_MinionsvsTowns = 3;
const int libGame_ge_EncouragementDeathTipsNames_UseYourAbilities = 4;
const int libGame_ge_EncouragementDeathTipsNames_Moonwell = 5;
const int libGame_ge_EncouragementDeathTipsNames_Retreat = 6;
const int libGame_ge_EncouragementDeathTipsNames_TrainTalents = 7;
const int libGame_ge_EncouragementDeathTipsNames_Mount = 8;
const int libGame_ge_EncouragementDeathTipsNames_EnemyFountainDeath = 9;
const int libGame_ge_EncouragementDeathTipsNames_Count = 10;
string libGame_ge_EncouragementDeathTipsNames_Ident (int lp_val);
const int libGame_ge_HeroDeathKillStingerQueueType_Ally = 0;
const int libGame_ge_HeroDeathKillStingerQueueType_Enemy = 1;
const int libGame_ge_PlayerStatusStorm_Unused = 0;
const int libGame_ge_PlayerStatusStorm_ChoosingaHero = 1;
const int libGame_ge_PlayerStatusStorm_Playing = 2;
const int libGame_ge_PlayerStatusStorm_LefttheGame = 3;
const int libGame_ge_Faction_Order = 0;
const int libGame_ge_Faction_Chaos = 1;
const int libGame_ge_Faction_HostileCreeps = 2;
const int libGame_ge_Faction_Neutral = 3;
const int libGame_ge_XPSources_Debug = 0;
const int libGame_ge_XPSources_Trickle = 1;
const int libGame_ge_XPSources_Minion = 2;
const int libGame_ge_XPSources_Creep = 3;
const int libGame_ge_XPSources_Hero = 4;
const int libGame_ge_XPSources_Structure = 5;
const int libGame_ge_MMScalingType_MINION = 0;
const int libGame_ge_MMScalingType_BOSS = 1;
const int libGame_ge_MMScalingType_SUMMONEDBOSS = 2;
const int libGame_ge_TownStates_Idle = 0;
const int libGame_ge_TownStates_Fighting = 1;
const int libGame_ge_TownStates_Leashing = 2;
const int libGame_ge_TownStates_Dead = 3;
const int libGame_ge_TownStructureTypes_None = 0;
const int libGame_ge_TownStructureTypes_TownHall = 1;
const int libGame_ge_TownStructureTypes_Wall = 2;
const int libGame_ge_TownStructureTypes_Gate = 3;
const int libGame_ge_TownStructureTypes_InvisibleGate = 4;
const int libGame_ge_TownStructureTypes_CannonTower = 5;
const int libGame_ge_TownStructureTypes_Moonwell = 6;
const int libGame_ge_TownStructureTypes_VehicleBuildPad = 7;
const int libGame_ge_TownStructureTypes_Core = 8;
const int libGame_ge_TownHallTypes_None = 0;
const int libGame_ge_TownHallTypes_FrontTown = 1;
const int libGame_ge_TownHallTypes_BackTown = 2;
const int libGame_ge_VehicleLocationType_JungleCamp = 0;
const int libGame_ge_VehicleLocationType_Town = 1;

// Constants
const int libGame_gv_teamOrderIndex_C = 1;
const int libGame_gv_teamChaosIndex_C = 2;
const fixed libGame_gv_afk_AfkInitialTimerStartDelay_C = 30.0;
const fixed libGame_gv_afk_AfkWarningTimerDuration_C = 120.0;
const fixed libGame_gv_afk_AfkKickTimerDuration_C = 30.0;
const fixed libGame_gv_afk_AfkReviveTimerResumeDelay_C = 15.0;
const int libGame_gv_afk_AfkMaxWarnCount_C = 2;
const int libGame_gv_announcement_QueueMaxCount_C = 32;
const fixed libGame_gv_announcement_StandardTimerDuration_C = 2.0;
const fixed libGame_gv_announcement_QuickSoundOnlyTimerDuration_C = 1.625;
const fixed libGame_gv_announcement_KillAnnouncementDuration_C = 1.5;
const fixed libGame_gv_announcement_LongAnnouncementDuration_C = 4.0;
const fixed libGame_gv_announcement_NoDelay_C = 0.0625;
const fixed libGame_gv_announcement_KillAnnouncementTimerThreshold_C = 0.25;
const fixed libGame_gv_announcement_HeroTakedownVODelay_C = 2.0;
const int libGame_gv_announcement_MinimumLevelForTeamKillHeroVO_C = 8;
const int libGame_gv_behaviorCategoryCount_C = 24;
const int libGame_gv_cameraBound_MaxCount_C = 10;
const int libGame_gv_capturePointMaxCount_C = 15;
const int libGame_gv_deathRecap_DebuffCategoryCount_C = 9;
const int libGame_gv_deathRecap_MaxDeathHistorySize_C = 30;
const int libGame_gv_deathRecap_MaxDebuffBars_C = 20;
const int libGame_gv_deathRecap_MaxDamageTakenBars_C = 6;
const int libGame_gv_deathRecap_MaxDebuffDetailsAbilities_C = 6;
const int libGame_gv_deathRecap_MaxDamageDetailsAbilities_C = 6;
const fixed libGame_gv_deathRecap_Timeframe_C = 20.0;
const int libGame_gv_encouragement_NumberOfStatCalloutThresholds_C = 3;
const int libGame_gv_encouragement_NumberOfStatCallouts_C = 12;
const fixed libGame_gv_encouragement_DeathTipInCombatTimeoutTime_C = 2.0;
const fixed libGame_gv_encouragement_DeathTipNearbyScanRadius_C = 10.0;
const fixed libGame_gv_encouragement_DeathTipNearbyHeroesTimeThreshold_C = 3.0;
const fixed libGame_gv_encouragement_DeathTipNearbyMinionsTimeThreshold_C = 1.5;
const fixed libGame_gv_encouragement_DeathTipEnemyMinionPercentDamageThreshold_C = 0.2;
const fixed libGame_gv_encouragement_DeathTipRecentHeroKillTimeout_C = 5.0;
const fixed libGame_gv_encouragement_DeathTipRecentStructureDamageTimeout_C = 3.0;
const int libGame_gv_encouragement_NumberOfDeathTips_C = 9;
const fixed libGame_gv_encouragement_PeriodicUpdateFrequency_C = 0.0625;
const fixed libGame_gv_encouragement_LowHealthPercentThreshold_C = 65.0;
const fixed libGame_gv_encouragement_LowManaPercentThreshold_C = 45.0;
const fixed libGame_gv_encouragement_SuperLowHealthPercentThreshold_C = 30.0;
const fixed libGame_gv_encouragement_MoonwellNearbyRangeThreshold_C = 35.0;
const int libGame_gv_encouragement_MountTipMaxCheckTimeBufferSize_C = 10;
const fixed libGame_gv_encouragement_MountTipThresholdDistance_C = 30.0;
const int libGame_gv_encouragement_DeathTipMaxDisplayCount_C = 5;
const int libGame_gv_encouragement_DeathTipGamesPlayedThreshold_C = 40;
const string libGame_gv_eventID_CameraPannedFromScript_C = "Camera Panned From Script";
const string libGame_gv_eventParam_CameraPannedFromScript_Player_C = "Player";
const string libGame_gv_eventParam_CameraPannedFromScript_Point_C = "Point";
const string libGame_gv_eventID_CapturePointChangesOwner_C = "CapturePointChangesOwner";
const string libGame_gv_eventParam_CapturePointChangesOwner_CapturePointIndex_C = "Capture Point Index";
const string libGame_gv_eventParam_CapturePointChangesOwner_Owner_C = "Owner";
const string libGame_gv_eventParam_CapturePointChangesOwner_CapturingPlayers_C = "CapturingPlayers";
const string libGame_gv_eventParam_CapturePointChangesOwner_HasMercLordTalent_C = "HasMercLordTalent";
const string libGame_gv_eventID_CapturePointBecomesFullyOverCaptured_C = "CapturePointBecomesFullyOverCaptured";
const string libGame_gv_eventParam_CapturePointBecomesFullyOverCaptured_CapturePointIndex_C = "Capture Point Index";
const string libGame_gv_eventParam_CapturePointBecomesFullyOverCaptured_HasMercLordTalent_C = "Has Merc Lord Talent";
const string libGame_gv_eventID_DebugHeroSwapped_C = "Debug Player Swapped";
const string libGame_gv_eventParam_DebugHeroSwapped_Player_C = "Player";
const string libGame_gv_eventID_JungleDefenderAIDefendersBeginFighting_C = "JungleDefenderAIDefendersBeginFighting";
const string libGame_gv_eventParam_JungleDefenderAIDefendersBeginFighting_Index_C = "Index";
const string libGame_gv_eventID_JungleDefenderAIDefendersEndFighting_C = "JungleDefenderAIDefendersEndFighting";
const string libGame_gv_eventParam_JungleDefenderAIDefendersEndFighting_Index_C = "Index";
const string libGame_gv_eventID_JungleDefenderAIDefenderKilled_C = "JungleDefenderAIDefenderKilled";
const string libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Index_C = "Index";
const string libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Unit_C = "Unit";
const string libGame_gv_eventParam_JungleDefenderAIDefenderKilled_KillingPlayer_C = "Killing Player";
const string libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C = "JungleDefenderAIAllDefendersKilled";
const string libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_Index_C = "Index";
const string libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_KillingPlayer_C = "Killing Player";
const string libGame_gv_eventID_GateOpenTimerStarted_C = "GateOpenTimerStart";
const string libGame_gv_eventID_TownDataInitialized_C = "TownDataInitialized";
const string libGame_gv_eventID_HeroAIStartingCampAttack_C = "HeroAIStartingCampAttack";
const string libGame_gv_eventParam_HeroAIStartingCampAttack_TeamIndex_C = "TeamIndex";
const string libGame_gv_eventParam_HeroAIStartingCampAttack_CampIndex_C = "CampIndex";
const string libGame_gv_eventID_HeroAIEndingCampAttack_C = "HeroAIEndingCampAttack";
const string libGame_gv_eventParam_HeroAIEndingCampAttack_TeamIndex_C = "TeamIndex";
const string libGame_gv_eventParam_HeroAIEndingCampAttack_CampIndex_C = "CampIndex";
const string libGame_gv_eventParam_HeroAIEndingCampAttack_Success_C = "Success";
const string libGame_gv_eventID_HeroLevelUp_C = "HeroLevelUp";
const string libGame_gv_eventParam_HeroLevelUp_Player = "Player";
const string libGame_gv_eventID_HeroSpecialCaseMounting_C = "HeroSpecialCaseMounting";
const string libGame_gv_eventParam_HeroSpecialCaseMounting_Player_C = "Player";
const string libGame_gv_eventID_HeroPortedBackToTown_C = "HeroPortedBackToTown";
const string libGame_gv_eventParam_HeroPortedBackToTown_Player_C = "Player";
const string libGame_gv_eventID_HeroParticipatedInNPCTakedown_C = "HeroParticipatedInNPCTakedown";
const string libGame_gv_eventParam_HeroParticipatedInNPCTakedown_Player_C = "PlayerKilling";
const string libGame_gv_eventParam_HeroParticipatedInNPCTakedown_NPC_C = "DeadUnit";
const string libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C = "SpecialCaseUnitParticipatedInNPCTakedown";
const string libGame_gv_eventParam_SpecialCaseUnitParticipatedInNPCTakedown_Player_C = "PlayerParticipant";
const string libGame_gv_eventParam_SpecialCaseUnitParticipatedInNPCTakedown_NPC_C = "DeadUnit";
const string libGame_gv_eventID_HeroParticipatedInTakedown_C = "HeroParticipatedInTakedown";
const string libGame_gv_eventParam_HeroParticipatedInTakedown_PlayerKilling_C = "PlayerKilling";
const string libGame_gv_eventParam_HeroParticipatedInTakedown_PlayerKilled_C = "PlayerKilled";
const string libGame_gv_eventParam_HeroParticipatedInTakedown_HeroKilled_C = "HeroKilled";
const string libGame_gv_eventID_HeroKilled_C = "HeroKilled";
const string libGame_gv_eventParam_HeroKilled_PlayerKilled_C = "PlayerKilled";
const string libGame_gv_eventParam_HeroKilled_KilledUnit_C = "KilledUnit";
const string libGame_gv_eventParam_HeroKilled_PlayerKilling_C = "PlayerKilling";
const string libGame_gv_eventParam_HeroKilled_Location_C = "Location";
const string libGame_gv_eventID_HeroRespawn_C = "HeroRespawn";
const string libGame_gv_eventParam_HeroRespawn_Player_C = "Player";
const string libGame_gv_eventID_HeroGainTalent_C = "HeroGainTalent";
const string libGame_gv_eventParam_HeroGainTalent_Player = "Player";
const string libGame_gv_eventID_JungleCampSpawned_C = "JungleCampSpawned";
const string libGame_gv_eventParam_JungleCampSpawned_Camp_C = "Camp";
const string libGame_gv_eventID_JungleCampDefenderCreated_C = "JungleCampDefenderCreated";
const string libGame_gv_eventParam_JungleCampDefenderCreated_C = "Unit";
const string libGame_gv_eventID_JungleCampLanerCreated_C = "JungleCampLanerCreated";
const string libGame_gv_eventParam_JungleCampLanerCreated_C = "Unit";
const string libGame_gv_eventID_MercCampCaptured_C = "MercCampCaptured";
const string libGame_gv_eventParam_MercCampCaptured_Index_C = "Index";
const string libGame_gv_eventParam_MercCampCaptured_Owner_C = "Owner";
const string libGame_gv_eventParam_MercCampCaptured_CapturingPlayers_C = "CapturingPlayers";
const string libGame_gv_eventID_MapMechanicInit_C = "MapMechanicInit";
const string libGame_gv_eventParam_MapMechanicInit_Mechanic_C = "Mechanic";
const string libGame_gv_eventID_MapTributeWarning_C = "MapTributeSpawnWarning";
const string libGame_gv_eventParam_MapTributeWarning_Position_C = "Position";
const string libGame_gv_eventID_MapTributeSpawned_C = "MapTributeSpawned";
const string libGame_gv_eventParam_MapTributeSpawned_Tribute_C = "Tribute";
const string libGame_gv_eventID_MapTributePickedup_C = "MapTributePickedUp";
const string libGame_gv_eventParam_MapTributePickedup_Player_C = "Player";
const string libGame_gv_eventParam_MapTributePickedup_Position_C = "Position";
const string libGame_gv_eventID_MapRavenCurseStarts_C = "MapRavenCurseStarts";
const string libGame_gv_eventParam_MapRavenCurseStarts_Team_C = "Team";
const string libGame_gv_eventID_MapRavenCurseEnds_C = "MapRavenCurseEnds";
const string libGame_gv_eventID_MapChestSpawned_C = "MapChestSpawned";
const string libGame_gv_eventParam_MapChestSpawned_Tribute_C = "Tribute";
const string libGame_gv_eventID_MapDoubloonsGhostShipShowsUp_C = "MapDoubloonsGhostShipShowsUp";
const string libGame_gv_eventParam_MapDoubloonsGhostShipShowsUp_Ship_C = "GhostShip";
const string libGame_gv_eventID_MapDoubloonsGhostShipShootingStart_C = "MapDoubloonsGhostShipShootingStart";
const string libGame_gv_eventParam_MapDoubloonsGhostShipShootingStart_ForPlayer_C = "ForPlayer";
const string libGame_gv_eventID_MapDoubloonsGhostShipShootingEnd_C = "MapDoubloonsGhostShipShootingEnd";
const string libGame_gv_eventID_MapDoubloonsDoubloonCollected_C = "MapDoubloonsDoubloonCollected";
const string libGame_gv_eventParam_MapDoubloonsDoubloonCollected_Player_C = "Player";
const string libGame_gv_eventID_MapDoubloonsDoubloonsDropped_C = "MapDoubloonsDoubloonsDropped";
const string libGame_gv_eventParam_MapDoubloonsDoubloonsDropped_Player_C = "Player";
const string libGame_gv_eventParam_MapDoubloonsDoubloonsDropped_Count_C = "Count";
const string libGame_gv_eventID_MapDoubloonsDoubloonsTurnedIn_C = "MapDoubloonsDoubloonsTurnedIn";
const string libGame_gv_eventParam_MapDoubloonsDoubloonsTurnedIn_Player_C = "Player";
const string libGame_gv_eventParam_MapDoubloonsDoubloonsTurnedIn_Count_C = "Count";
const string libGame_gv_eventID_MapUnderworldOpen_C = "MapUnderworldOpen";
const string libGame_gv_eventParam_MapUnderworldOpen_Entrances_C = "UnderworldEntrances";
const string libGame_gv_eventParam_MapUnderworldOpen_Underworld_C = "UnderworldRegion";
const string libGame_gv_eventParam_MapUnderworldOpen_TotalSkull_C = "UnderworldTotalSkull";
const string libGame_gv_eventID_MapUnderworldSkullCollected_C = "MapUnderworldSkullCollected";
const string libGame_gv_eventParam_MapUnderworldSkullCollected_Team1Skulls_C = "Team1Skulls";
const string libGame_gv_eventParam_MapUnderworldSkullCollected_Team2Skulls_C = "Team2Skulls";
const string libGame_gv_eventParam_MapUnderworldSkullCollected_CollectingPlayer_C = "Player";
const string libGame_gv_eventID_MapUnderworldCleared_C = "MapUnderworldCleared";
const string libGame_gv_eventID_MapUnderworldBossStartSummoning_C = "MapUnderworldBossStartSummoning";
const string libGame_gv_eventParam_MapUnderworldBossStartSummoning_Team_C = "Team";
const string libGame_gv_eventParam_MapUnderworldBossStartSummoning_Location_C = "Location";
const string libGame_gv_eventParam_MapUnderworldBossStartSummoning_Lane_C = "Lane";
const string libGame_gv_eventID_MapUnderworldBossSummoned_C = "MapUnderworldBossSummoned";
const string libGame_gv_eventParam_MapUnderworldBossSummoned_Boss_C = "SummonedBoss";
const string libGame_gv_eventID_MapUnderworldPlayerUsesGate_C = "MapUnderworldPlayerUsesGate";
const string libGame_gv_eventParam_MapUnderworldPlayerUsesGate_Player_C = "Player";
const string libGame_gv_eventParam_MapUnderworldPlayerUsesGate_HeroUnit_C = "HeroUnit";
const string libGame_gv_eventID_MapObeliskSpawned_C = "MapObeliskSpawned";
const string libGame_gv_eventParam_MapObeliskSpawned_Obelisk_C = "Obelisk";
const string libGame_gv_eventID_MapObeliskOwnershipChange_C = "MapObeliskOwnerShipChnage";
const string libGame_gv_eventParam_MapObeliskOwnershipChange_Team_C = "Team";
const string libGame_gv_eventParam_MapObeliskOwnershipChange_Obelisk_C = "Obelisk";
const string libGame_gv_eventParam_MapObeliskOwnershipChange_CapturingPlayers_C = "CapturingPlayers";
const string libGame_gv_eventID_MapDragonActivated_C = "MapDragonActivated";
const string libGame_gv_eventParam_MapDragonActivated_Dragon_C = "Dragon";
const string libGame_gv_eventParam_MapDragonActivated_Player_C = "Player";
const string libGame_gv_eventID_MapDragonShireDragonEnds_C = "MapDragonShireDragonEnds";
const string libGame_gv_eventID_MapHauntedWoodsNightStarts_C = "MapHauntedWoodsNightStarts";
const string libGame_gv_eventID_MapHauntedWoodsNightEnds_C = "MapHauntedWoodsNightEnds";
const string libGame_gv_eventID_MapGardensSeedCollected_C = "MapGardensSeedCollected";
const string libGame_gv_eventParam_MapGardensSeedCollected_CollectingPlayer_C = "Player";
const string libGame_gv_eventID_MapSoulCagesSoulCollected_C = "MapSoulCagesSoulCollected";
const string libGame_gv_eventParam_MapSoulCagesSoulCollected_CollectingPlayer_C = "Player";
const string libGame_gv_eventParam_MapSoulCagesSoulCollected_Count_C = "Count";
const string libGame_gv_eventID_MinionGroupCreated_C = "MinionGroupCreated";
const string libGame_gv_eventParam_MinionGroupCreated_C = "UnitGroup";
const string libGame_gv_eventID_TalentPanelVisibilityChanged_C = "TalentPanelVisibilityChange";
const string libGame_gv_eventParam_TalentPanelVisibilityChanged_Player_C = "Player";
const string libGame_gv_eventParam_TalentPanelVisibilityChanged_Visibility_C = "Visibility";
const int libGame_gv_mapMechanicHelpNumberOfGamesToDisplay_C = 1;
const fixed libGame_gv_heroSpawnDelay_C = 3.0;
const fixed libGame_gv_individualHeroSpawnMiniDelay_C = 0.5;
const fixed libGame_gv_heroIntroLineTimeframe_C = 21.0;
const fixed libGame_gv_mapMechanicHelpPanelDelayTime_C = 10.0;
const fixed libGame_gv_heroDeathActionCamActivationDelay = 1.0;
const fixed libGame_gv_heroDeathMultikillTimeoutDuration = 8.0;
const fixed libGame_gv_heroDeathTeamKilledVODelay = 4.0;
const fixed libGame_gv_heroDeathRespawnCueSoundTiming = 2.0;
const fixed libGame_gv_heroDeathKillStingerQueueTimerDuration = 0.125;
const int libGame_gv_laneMaxCount = 10;
const fixed libGame_gv_teamAbandonedTheGameTimerDuration_C = 20.0;
const string libGame_gv_mountModelActor = "MountModel";
const fixed libGame_gv_towerCoreUnderAttackAlertRepeatTime = 30.0;
const int libGame_gv_townMaxTownCount = 30;
const int libGame_gv_townMaxStructureCount = 63;
const int libGame_gv_watchTowersMaxCount = 10;

// Structures
struct libGame_gs_Team {
    unit lv_core;
    int lv_xPTotals;
    int lv_teamLevel;
    int lv_kills;
    int lv_revives;
    int lv_townKills;
    int lv_townsRemaining;
    int lv_map_MercCampCaptures;
    int lv_map_CursesPlacedOnEnemyTeam;
    int lv_map_CannonFirings;
    int lv_map_DragonCaptures;
    int lv_map_SkullsCollected;
    int lv_map_SeedsCollected;
    playergroup lv_teamPlayerGroup;
    playergroup lv_teamPlayerGroupNoNPCPlayers;
    int lv_teamPlayerCount;
    int lv_nPCPlayer;
    int lv_multikillStreak;
    timer lv_multikillTimer;
    int lv_activeHumanPlayers;
    timer lv_abandonedTheGameTimer;
};

struct libGame_gs_AfkScoreValues {
    fixed lv_healing;
    fixed lv_siegeDamage;
    fixed lv_creepDamage;
    fixed lv_heroDamage;
};

struct libGame_gs_AnnouncementQueue {
    timer lv_messageTimer;
    int lv_numberOfItemsInQueue;
    int[libGame_gv_announcement_QueueMaxCount_C + 1] lv_priority;
    int[libGame_gv_announcement_QueueMaxCount_C + 1] lv_announcerVOEvent;
    string[libGame_gv_announcement_QueueMaxCount_C + 1] lv_animName;
    text[libGame_gv_announcement_QueueMaxCount_C + 1] lv_textParam1;
    text[libGame_gv_announcement_QueueMaxCount_C + 1] lv_textParam2;
    text[libGame_gv_announcement_QueueMaxCount_C + 1] lv_textParam3;
    text[libGame_gv_announcement_QueueMaxCount_C + 1] lv_textParam4;
    fixed[libGame_gv_announcement_QueueMaxCount_C + 1] lv_duration;
    bool[libGame_gv_announcement_QueueMaxCount_C + 1] lv_isKillAnnouncement;
};

struct libGame_gs_CapturePoint {
    bool lv_enabled;
    unit lv_captureBeaconUnit;
    region lv_captureRegion;
    int lv_captureCounter;
    int lv_pointsNeededToCapture;
    int lv_maximumPoints;
    bool lv_decayToOwner;
    bool lv_alwaysDecay;
    bool lv_rememberLastOwner;
    int lv_captureProgressBar;
    int lv_capturePointState;
    bool lv_contested;
};

struct libGame_gs_DeathRecapDebuffBarData {
    int lv_category;
    fixed lv_startTime;
    fixed lv_duration;
    int lv_numberOfAbilities;
    string[libGame_gv_deathRecap_MaxDebuffDetailsAbilities_C + 1] lv_abilityLinks;
    fixed[libGame_gv_deathRecap_MaxDebuffDetailsAbilities_C + 1] lv_abilityStartTimes;
    fixed[libGame_gv_deathRecap_MaxDebuffDetailsAbilities_C + 1] lv_abilityDurations;
    int[libGame_gv_deathRecap_MaxDebuffDetailsAbilities_C + 1] lv_abilityHeroIndexes;
};

struct libGame_gs_DeathRecapDamageTakenData {
    int lv_amount;
    int lv_heroIndex;
    int lv_numberOfAbilities;
    string[libGame_gv_deathRecap_MaxDamageDetailsAbilities_C + 1] lv_abilityLinks;
    int[libGame_gv_deathRecap_MaxDamageDetailsAbilities_C + 1] lv_abilityCounts;
    int[libGame_gv_deathRecap_MaxDamageDetailsAbilities_C + 1] lv_abilityAmounts;
    int[libGame_gv_deathRecap_MaxDamageTakenBars_C + 1] lv_abilitySortOrder;
};

struct libGame_gs_DeathRecapData {
    int lv_debuffBarCount;
    libGame_gs_DeathRecapDebuffBarData[libGame_gv_deathRecap_MaxDebuffBars_C + 1] lv_debuffBars;
    int lv_damageTakenBarCount;
    libGame_gs_DeathRecapDamageTakenData[libGame_gv_deathRecap_MaxDamageTakenBars_C + 1] lv_damageTakenBars;
    int[libGame_gv_deathRecap_MaxDamageTakenBars_C + 1] lv_damageTakenBarSortOrder;
    int lv_totalDamageTaken;
    fixed lv_totalDamageTakenTime;
};

struct libGame_gs_EncouragementRegisteredDeathTips {
    bool lv_isRegistered;
    fixed lv_registerTime;
};

struct libGame_gs_EncouragementDeathTipData {
    fixed lv_timeSpentAlive;
    bool lv_inCombat;
    timer lv_inCombatDurationTimer;
    timer lv_inCombatTimeoutTimer;
    bool lv_alliedHeroesNearby;
    timer lv_timeWithNoAlliedHeroesNearby;
    bool lv_alliedMinionsNearby;
    timer lv_timeWithNoAlliedMinionsNearby;
    fixed lv_enemyMinionDamageTaken;
    int lv_recentHeroKills;
    timer lv_recentHeroKillTimer;
    bool lv_recentStructureDamageTaken;
    timer lv_recentStructureDamageTimer;
    bool lv_usedAnAbility;
    bool lv_usedAMoonwell;
    fixed lv_timeSpentBelowLowHealthThreshold;
    fixed lv_timeSpentBelowLowManaThreshold;
    fixed lv_timeSpentBelowSuperLowHealthThresholdWithoutUsableMoonwellNearby;
    bool[libGame_gv_encouragement_MountTipMaxCheckTimeBufferSize_C + 1] lv_mountTipTrackingWasMounted;
    bool[libGame_gv_encouragement_MountTipMaxCheckTimeBufferSize_C + 1] lv_mountTipTrackingWasInCombat;
    bool[libGame_gv_encouragement_MountTipMaxCheckTimeBufferSize_C + 1] lv_mountTipTrackingUsedUnderworldGate;
    point[libGame_gv_encouragement_MountTipMaxCheckTimeBufferSize_C + 1] lv_mountTipTrackingPosition;
    int lv_mountTipTrackingCurrentBufferIndex;
};

struct libGame_gs_HeroDeathKillStingerQueue {
    timer[libCore_gv_bALMaxTeams + 1] lv_killStingerTimer;
    int[libCore_gv_bALMaxTeams + 1] lv_numberOfItemsInQueue;
    int[libCore_gv_bALMaxTeams + 1] lv_nextPlayIndex;
    soundlink[libCore_gv_bALMaxTeams + 1][libCore_gv_bALMaxPlayersOnATeam + 1] lv_soundQueue;
};

struct libGame_gs_LaneData {
    text lv_laneName;
    int lv_waypointCount;
    point[31] lv_waypoints;
    int lv_structureCount;
    unit[11] lv_orderStructures;
    unit[11] lv_chaosStructures;
    fixed lv_spawnDelay;
    int[libCore_gv_bALMaxTeams + 1] lv_bruiserMinionLevel;
    bool lv_minionSpawningEnabled;
};

struct libGame_gs_LaneClosestPointInfo {
    int lv_closestIndex;
    int lv_secondaryIndex;
    point lv_closestPoint;
    fixed lv_closestDist;
};

struct libGame_gs_ClosestLaneInfo {
    libGame_gs_LaneClosestPointInfo[libGame_gv_laneMaxCount + 1] lv_laneData;
    int lv_closestLane;
    int lv_closestMinionLane;
};

struct libGame_gs_TalentBucketABChoice {
    int lv_unlockLevel;
    int lv_numberOfButtons;
    int[libCore_gv_talents_MaxABChoiceButtonCount_DEBUG_C + 1] lv_talentIndexArray;
    libCore_gs_ABChoiceData lv_talentChoiceData;
    int lv_selection;
};

struct libGame_gs_PlayerArtifactData {
    string lv_artifact;
    int lv_rank;
};

struct libGame_gs_PlayerBankData {
    bank lv_bank;
    bool lv_settingDeathActionCam;
    bool lv_settingMinimapCommandsEnabled;
    int lv_totalPlayCount;
    int lv_mapPlayCount;
    int[libGame_gv_encouragement_NumberOfDeathTips_C + 1] lv_deathTipDisplayCount;
};

struct libGame_gs_Player {
    int lv_playerStatus;
    int lv_victoryDefeat;
    bool lv_gameEndedForPlayer;
    text lv_name;
    int lv_faction;
    int lv_heroIndex;
    unit lv_heroUnit;
    unitgroup lv_heroUnitGroup;
    unit lv_activeVehicle;
    unit lv_gravestone;
    int lv_gravestoneTextTag;
    string lv_portraitIcon;
    int lv_pathDisplay;
    point lv_spawnPoint;
    int lv_rosterSlot;
    int lv_teamPlayerSlot;
    bool lv_isSwappingHero;
    bool lv_suppressLevelUpFXAndTeamXPTracking;
    libGame_gs_PlayerArtifactData[libCore_gv_artifacts_MaxArtifactsPerPlayer_C + 1] lv_artifacts;
    fixed lv_artifacts_DeathTimerReduction;
    fixed lv_artifacts_CCReduction;
    int[libCore_gv_talentsBucket_MaxTalentEntryCount_C + 1] lv_activeProfileTalents;
    int lv_activeProfileTalentsPointsSpent;
    int[libCore_gv_talents_MaxTalentEntryCount_C + 1] lv_talentsCurrentTalentRanks;
    int[libCore_gv_dataHeroesMaxHeroCount + 1] lv_talentsCustomProfileCount;
    libCore_gs_TalentProfileData[libCore_gv_dataHeroesMaxHeroCount + 1][libCore_gv_talents_MaxCustomTalentProfilesPerHero_C + 1] lv_talentsCustomProfiles;
    int[libCore_gv_talents_NumberOfABChoices_C + 1] lv_talentsABChoices;
    libGame_gs_TalentBucketABChoice[libCore_gv_talentsBucket_MaxTiers_C + 1] lv_talentsBucketABChoices;
    int lv_talentsBucketMaxButtonsPerABChoice;
    int lv_killingSpreeCount;
    point lv_lastKnownPosition;
    unit lv_cameraPlayerUnitToFocusOn;
    unitgroup lv_cameraPlayerUnitGroupToFocusOn;
    int lv_cameraAllyPlayerToTrack;
    unit lv_cameraCurrentTarget;
    unitgroup lv_cameraCurrentTargetGroup;
    bool lv_cameraPlayerHasControl;
    bool lv_cameraForcedLock;
    bool lv_cameraCameraLockInterrupt;
    bool lv_vOPissedSoundIsPlaying;
    int lv_vOPissedSoundIndex;
    int lv_vOPissedClickCount;
    fixed lv_lowHPHPAmount;
    sound lv_lowHPStartSound;
    sound lv_lowHPBreathLoop;
    sound lv_lowHPHeartBeatLoop;
    bool lv_lowHPSoundPlaying;
    int lv_selectedAnnouncerVOPack;
    int lv_selectedMount;
    int lv_selectedSkin;
    bool lv_isDead;
    timer lv_respawnTimer;
    timer lv_respawnSoundCueTimer;
    timer lv_downedStateTimer;
    int lv_lastKillingPlayer;
    fixed[libCore_gv_bALMaxPlayers + 1] lv_lastTimeHeroWasWithinXPRadius;
    timer lv_recentDamageResetTimer;
    fixed[libCore_gv_bALMaxPlayers + 1] lv_recentPlayerDamageReceived;
    int lv_multikillStreak;
    timer lv_multikillTimer;
    unit lv_currentVampiricTouchTarget;
    libGame_gs_PlayerBankData lv_bankData;
    fixed lv_timeSpentDead;
    fixed lv_xPRecievedFromMinions;
    fixed lv_xPRecievedFromCreeps;
    fixed lv_xPRecievedFromStructures;
    fixed lv_xPRecievedFromHeroes;
    fixed lv_xPRecievedFromTrickle;
    fixed lv_individualXPEarned;
    int lv_regenGlobes;
    int lv_mULEsUsed;
    fixed lv_plaguebringerHealingPrevention;
    bool lv_isViewingLeaderboard;
    bool lv_heroSpawnReady;
};

struct libGame_gs_MMScaling {
    int lv_hPFlat;
    int lv_hPPercent;
    int lv_damageFlat;
    int lv_damagePercent;
    fixed lv_xP;
    int lv_damageSpellFlat;
    int lv_damageSpellPercent;
    int lv_hPFlatSpitter;
    int lv_damageFlatSpitter;
    int lv_hPFlatVine;
};

struct libGame_gs_ScoreValues {
    int lv_kills;
    int lv_assists;
    int lv_creepCampsCaptured;
    int lv_watchTowersCaptured;
    int lv_takedowns;
    int lv_deaths;
    int lv_level;
    int lv_townKills;
    fixed lv_individualXPEarned;
    fixed lv_timeCCdEnemyHeroes;
    int lv_tributesCollected;
    int lv_doubloonsCollected;
    int lv_doubloonsDropped;
    int lv_doubloonsTurnedIn;
    int lv_dragonCaptures;
    int lv_dragonShrineCaptures;
    int lv_skullsCollected;
    int lv_seedsCollected;
};

struct libGame_gs_TownData {
    int lv_lane;
    int lv_owner;
    region lv_townRegion;
    point lv_flagBearerTroopRallyPoint;
    bool lv_makesCoreVulnerableWhenKilled;
    int lv_structureCount;
    int[libGame_gv_townMaxStructureCount + 1] lv_structureTypes;
    unit[libGame_gv_townMaxStructureCount + 1] lv_structureUnits;
    string[libGame_gv_townMaxStructureCount + 1] lv_structureUnitIDs;
    point[libGame_gv_townMaxStructureCount + 1] lv_structureSpawnPoints;
    int lv_townHallIndex;
    point lv_townHallPosition;
    int lv_structuresAlive;
    int[libGame_gv_townMaxStructureCount + 1] lv_militaRespawnTextTag;
    point lv_townAggroReferencePoint;
    unitgroup lv_vehiclePadUnitGroup;
    int lv_vehicleSpawnNodes;
    point[libCore_gv_data_Vehicles_MaxVehicleSpawnPoints_C + 1] lv_vehicleSpawnPoint;
    int[libCore_gv_data_Vehicles_MaxVehicleSpawnPoints_C + 1] lv_vehicleType;
    fixed[libCore_gv_data_Vehicles_MaxVehicleSpawnPoints_C + 1] lv_vehicleRespawnTime;
    unitgroup lv_vehicleUnitGroup;
    timer[libCore_gv_data_Vehicles_MaxVehicleSpawnPoints_C + 1] lv_vehicleRespawnTimer;
    int[libCore_gv_data_Vehicles_MaxVehicleSpawnPoints_C + 1] lv_vehicleStatusTextTag;
};

struct libGame_gs_WatchTowers {
    unit lv_watchTowerUnit;
    unit lv_captureBeaconUnit;
    region lv_captureRegion;
    int lv_captureCounter;
    bool lv_enabled;
    int lv_capturePointIndex;
};

// Variable Declarations
libGame_gs_Team[libCore_gv_bALMaxTeams + 1] libGame_gv_teams;
revealer[13] libGame_gv_baseRevealers;
bool libGame_gv_firstBloodAvailable;
bool libGame_gv_gameOver;
bool libGame_gv_xPTrickleEnabled;
fixed[libCore_gv_bALMaxTeams + 1] libGame_gv_xPTrickleModifier;
timer libGame_gv_totalTime;
timer libGame_gv_gameTimer;
timer libGame_gv_gobalTimer;
timer libGame_gv_xPTrickleStartTimer;
bool libGame_gv_afk_AfkDetectionSystemEnabled;
timer[libCore_gv_bALMaxPlayers + 1] libGame_gv_afk_PlayerAfkWarningTimer;
timer[libCore_gv_bALMaxPlayers + 1] libGame_gv_afk_PlayerAfkKickTimer;
libGame_gs_AfkScoreValues[libCore_gv_bALMaxPlayers + 1] libGame_gv_afk_PlayerScoreValueTracking;
int[libCore_gv_bALMaxPlayers + 1] libGame_gv_afk_PlayerAfkWarnCount;
bool libGame_gv_announcement_SystemEnabled;
libGame_gs_AnnouncementQueue[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_announcementQueue;
int[libGame_gv_behaviorCategoryCount_C + 1] libGame_gv_behaviorCategoryBitFlagValues;
bool[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_cameraFollowForced;
region[libGame_gv_cameraBound_MaxCount_C + 1] libGame_gv_cameraBound_Regions;
int libGame_gv_cameraBound_Count;
int[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_cameraBound_CurrentCameraBoundForPlayer;
int libGame_gv_capturePointCurrentCount;
libGame_gs_CapturePoint[libGame_gv_capturePointMaxCount_C + 1] libGame_gv_capturePoints;
string libGame_gv_capturePointLastCreatedCapturePointIndex_C;
timer[libCore_gv_bALMaxPlayers + 1] libGame_gv_encouragement_TimeSpentAliveTimer;
fixed[libCore_gv_bALMaxPlayers + 1] libGame_gv_encouragement_XPGathered;
fixed[libCore_gv_bALMaxPlayers + 1] libGame_gv_encouragement_TotalTeamXPGathered;
fixed[libCore_gv_bALMaxPlayers + 1][libGame_gv_encouragement_NumberOfStatCallouts_C + 1] libGame_gv_encouragement_CalloutStatTracking;
fixed[libGame_gv_encouragement_NumberOfStatCalloutThresholds_C + 1][libGame_gv_encouragement_NumberOfStatCallouts_C + 1] libGame_gv_encouragement_CalloutStatThresholds;
libGame_gs_EncouragementRegisteredDeathTips[libCore_gv_bALMaxPlayers + 1][libGame_gv_encouragement_NumberOfDeathTips_C + 1] libGame_gv_encouragement_RegisteredDeathTips;
libGame_gs_EncouragementDeathTipData[libCore_gv_bALMaxPlayers + 1] libGame_gv_encouragement_DeathTipData;
timer libGame_gv_minionSpawnStartTimer;
timer libGame_gv_openTheGatesTimer;
timer libGame_gv_jungleCampStartTimer;
timer libGame_gv_graveGolemCampStartTimer;
timer libGame_gv_jungleWatchTowerStartTimer;
trigger libGame_gv_gameOverCallback;
bool libGame_gv_heroSpawnReady;
bool libGame_gv_heroPickDone;
bool libGame_gv_gateTimerReady;
bool libGame_gv_heroSpawnBlockGame;
bool libGame_gv_gameStarted;
libCore_gs_HeroCatalogChangeData[libCore_gv_dataHeroesMaxHeroCount + 1] libGame_gv_dataHeroesVehicleLevelUpData;
unit[libCore_gv_bALMaxPlayers + 1] libGame_gv_heroDeathMurkyRespawnEggs;
fixed[libCore_gv_bALMaxPlayers + 1] libGame_gv_heroDeathMurkyRespawnEggDeathTimeStamp;
point[libCore_gv_bALMaxPlayers + 1] libGame_gv_heroDeathMurkyRespawnEggPoint;
bool libGame_gv_heroDeath_UpdateStats;
bool libGame_gv_heroDeath_RespawnMounted;
sound[libCore_gv_bALMaxPlayers + 1] libGame_gv_heroDeath_DeathAmbientSound;
sound[libCore_gv_bALMaxPlayers + 1] libGame_gv_heroDeath_DeathMusicSound;
bool[libCore_gv_bALMaxPlayers + 1][libCore_gv_killingSpree_KillThresholdCount_C + 1] libGame_gv_heroDeathKillStreakRegistered;
libGame_gs_HeroDeathKillStingerQueue[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_heroDeathKillStingerQueue;
int libGame_gv_laneCount;
libGame_gs_LaneData[libGame_gv_laneMaxCount + 1] libGame_gv_laneData;
libGame_gs_ClosestLaneInfo libGame_gv_closestLaneData;
string[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_stormMapLightingSpecial;
string[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_stormMapLightingCurrent;
int[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_stormMapHeroDeathOverlay;
int libGame_gv_minionWaveSpawnCounter;
bool libGame_gv_minionSystemStarted;
bool libGame_gv_minionSystemPaused;
bool libGame_gv_minionSpawningEnabled;
bool libGame_gv_minionScalingEnabled;
int libGame_gv_spawnedMinionLane;
int libGame_gv_spawnedMinionFirstWaypointIndex;
libGame_gs_Player[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_players;
unitgroup libGame_gv_heroes;
int libGame_gv_gameSpawnHeroCount;
timer libGame_gv_scalingTimer;
int libGame_gv_scalingTicks;
fixed libGame_gv_bALScalingTimerDuration;
int libGame_gv_mMScalingCurrentTicks;
libGame_gs_MMScaling[libCore_gv_dataScalingMaxScalingTicks + 1] libGame_gv_mMMinionScalingChanges;
libGame_gs_MMScaling libGame_gv_mMMinionScalingCurrent;
libGame_gs_MMScaling[libCore_gv_dataScalingMaxScalingTicks + 1] libGame_gv_mMBossScalingChanges;
libGame_gs_MMScaling libGame_gv_mMBossScalingCurrent;
libGame_gs_MMScaling[libCore_gv_dataScalingMaxScalingTicks + 1] libGame_gv_mMSummonedBossScalingChanges;
libGame_gs_MMScaling libGame_gv_mMSummonedBossScalingCurrent;
libGame_gs_ScoreValues[libCore_gv_bALMaxEnginePlayerCount + 1] libGame_gv_scoreValues;
timer libGame_gv_towerTeamOrderCoreAlertTimer;
timer libGame_gv_towerTeamChaosCoreAlertTimer;
int libGame_gv_townTownCount;
libGame_gs_TownData[libGame_gv_townMaxTownCount + 1] libGame_gv_townTownData;
fixed libGame_gv_baseRepulserFieldLaunchDistance;
fixed libGame_gv_baseRepulserFieldLaunchCutoffDistance;
int libGame_gv_vehiclesNumberOfVehicles;
fixed libGame_gv_vehicleDragonKnightBullRushLaunchDistance;
fixed libGame_gv_vehicleDragonKnightBullRushCutoffDistance;
int libGame_gv_watchTowersCurrentCount;
libGame_gs_WatchTowers[libGame_gv_watchTowersMaxCount + 1] libGame_gv_watchTowers;

// Function Declarations
playergroup libGame_gf_PlayersOnTeamHeroes (int lp_team, bool lp_nPCOption);
void libGame_gf_ModifyTeamXPTrickle (int lp_team);
void libGame_gf_AfkStartAfkWarningSystem ();
void libGame_gf_AfkResetWarningTimerForPlayer (int lp_player);
void libGame_gf_AfkPauseWarningTimerForPlayer (int lp_player);
void libGame_gf_AfkResumeWarningTimerForPlayer (int lp_player);
void libGame_gf_AfkKickPlayer (int lp_player);
void libGame_gf_AnnouncementAddItemForPlayerGroup (playergroup lp_playerGroup, int lp_priority, int lp_vOEvent, string lp_animName, text lp_textParam1, text lp_textParam2, text lp_textParam3, text lp_textParam4, fixed lp_duration, bool lp_isKillAnnouncement);
void libGame_gf_AnnouncementClearQueueForPlayer (int lp_player);
void libGame_gf_AnnouncementInsertItemIntoQueueForPlayer (int lp_player, int lp_priority, int lp_vOEvent, string lp_animName, text lp_textParam1, text lp_textParam2, text lp_textParam3, text lp_textParam4, fixed lp_duration, int lp_desiredInsertPosition, bool lp_isKillAnnouncement);
void libGame_gf_AnnouncementSetTextOnAnnouncementFrameLabelsForPlayer (int lp_player, string lp_animName, text lp_textParam1, text lp_textParam2, text lp_textParam3, text lp_textParam4);
void libGame_gf_AnnouncementPlayNextItemForPlayer (int lp_player);
void libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary (int lp_player, point lp_point, fixed lp_duration, fixed lp_initialVelocity, fixed lp_decelerate, bool lp_smart);
void libGame_gf_CameraTrackNextAliveAllyForPlayer (int lp_player);
void libGame_gf_CameraTrackPreviousAliveAllyForPlayer (int lp_player);
void libGame_gf_CameraUpdateCameraForPlayer (int lp_player);
int libGame_gf_CameraBoundStormIndex (region lp_bound);
void libGame_gf_AddCameraBoundsStorm (region lp_bounds);
void libGame_gf_SetCameraBoundsStorm (int lp_index, region lp_bounds);
void libGame_gf_SetCameraBoundStormIndexForPlayer (int lp_player, int lp_boundsIndex);
void libGame_gf_SetCameraBoundStormForPlayer (int lp_player, region lp_bound);
void libGame_gf_CapturePointChangeOwnership (int lp_capturePointIndex, int lp_newOwner, playergroup lp_capturingPlayers, bool lp_hasMercLordTalent);
void libGame_gf_CapturePointCreate (unit lp_beaconUnit, fixed lp_captureRadius, fixed lp_captureTime, fixed lp_overCaptureTime, bool lp_decayToOwner, bool lp_rememberLastOwner);
void libGame_gf_CapturePointEnable (int lp_capturePointIndex);
void libGame_gf_CapturePointDisable (int lp_capturePointIndex);
void libGame_gf_CapturePointSetAlwaysDecay (int lp_index, bool lp_always);
int libGame_gf_LastCreatedCapturePoint ();
bool libGame_gf_CapturePointFullyCaptured (int lp_capturePointIndex);
int libGame_gf_CapturePointCounter (int lp_capturePointIndex);
int libGame_gf_CapturePointCounterMax (int lp_capturePointIndex);
bool libGame_gf_CapturePointContested (int lp_capturePointIndex);
void libGame_gf_CCRecognitionCCReduction (unit lp_unit, string lp_cCBehavior);
text libGame_gf_EncouragementFormatStatCalloutText (int lp_calloutStatIndex, int lp_thresholdIndex, fixed lp_statValue);
void libGame_gf_EncouragementDataTrackingResetCalloutValuesForPlayer (int lp_player);
int libGame_gf_EncouragementConvertIntegerToDeathTipNamePreset (int lp_int);
text libGame_gf_EncouragementGetDeathTipText (int lp_deathTip);
void libGame_gf_EncouragementRegisterDeathTipForPlayer (int lp_player, int lp_tip);
void libGame_gf_EncouragementRegisterDeathTipsOnPlayerDeath (int lp_player);
void libGame_gf_EncouragementClearRegisteredDeathTipsForPlayer (int lp_player);
void libGame_gf_EncouragementDataTrackingRegisterMinionDamageForPlayer (int lp_player, fixed lp_damage);
void libGame_gf_EncouragementDataTrackingRegisterRecentHeroKillForPlayer (int lp_player);
void libGame_gf_EncouragementDataTrackingRegisterRecentStructureDamageForPlayer (int lp_player);
void libGame_gf_CameraPannedFromScript (trigger t);
void libGame_gf_SendEventCameraPannedFromScript (int lp_player, point lp_point);
point libGame_gf_CameraPannedFromScriptPoint ();
int libGame_gf_CameraPannedFromScriptPlayer ();
void libGame_gf_CapturePointChangesOwner (trigger t);
void libGame_gf_SendEventCapturePointChangesOwner (int lp_capturePointIndex, int lp_owner, playergroup lp_capturingPlayers, bool lp_hasMercLordTalent);
int libGame_gf_CapturePointChangesOwnerCapturePointIndex ();
int libGame_gf_CapturePointChangesOwnerOwner ();
playergroup libGame_gf_CapturePointChangesOwnerCapturingPlayers ();
bool libGame_gf_CapturePointChangesOwnerHasMercLordTalent ();
void libGame_gf_CapturePointBecomesFullyOverCaptured (trigger t);
void libGame_gf_SendEventCapturePointBecomesFullyOverCaptured (int lp_capturePointIndex);
int libGame_gf_CapturePointBecomesFullyOverCapturedCapturePointIndex ();
void libGame_gf_DebugHeroSwapped (trigger t);
void libGame_gf_SendEventDebugHeroSwapped (int lp_player);
int libGame_gf_DebugHeroSwappedPlayer ();
void libGame_gf_JungleDefenderAIDefendersBeginFighting (trigger t);
void libGame_gf_SendEventJungleDefenderAIDefendersBeginFighting (int lp_defenderAIIndex);
int libGame_gf_JungleDefenderAIDefendersBeginFightingIndex ();
void libGame_gf_JungleDefenderAIDefendersEndFighting (trigger t);
void libGame_gf_SendEventJungleDefenderAIDefendersEndFighting (int lp_defenderAIIndex);
int libGame_gf_JungleDefenderAIDefendersEndFightingIndex ();
void libGame_gf_JungleDefenderAIDefenderKilled (trigger t);
void libGame_gf_SendEventJungleDefenderAIDefenderKilled (int lp_defenderAIIndex, unit lp_unit, int lp_killingPlayer);
int libGame_gf_JungleDefenderAIDefenderKilledIndex ();
unit libGame_gf_JungleDefenderAIDefenderKilledUnit ();
int libGame_gf_JungleDefenderAIDefenderKilledKillingPlayer ();
void libGame_gf_JungleDefenderAIAllDefendersKilled (trigger t);
void libGame_gf_SendEventJungleDefenderAIAllDefendersKilled (int lp_defenderAIIndex, int lp_killingPlayer);
int libGame_gf_JungleDefenderAIAllDefendersKilledIndex ();
int libGame_gf_JungleDefenderAIAllDefendersKilledKillingPlayer ();
void libGame_gf_GameOpenTimerStarted (trigger t);
void libGame_gf_SendEventGameOpenTimerStarted ();
void libGame_gf_TownDataInitialized (trigger t);
void libGame_gf_SendEventTownDataInitialized ();
void libGame_gf_HeroAIStartingCampAttack (trigger t);
void libGame_gf_SendEventHeroAIStartingCampAttack (int lp_teamIndex, int lp_campIndex);
int libGame_gf_HeroAIStartingCampAttackTeamIndex ();
int libGame_gf_HeroAIStartingCampAttackCampIndex ();
void libGame_gf_HeroAIEndingCampAttack (trigger t);
void libGame_gf_SendEventHeroAIEndingCampAttack (int lp_teamIndex, int lp_campIndex, bool lp_success);
int libGame_gf_HeroAIEndingCampAttackTeamIndex ();
int libGame_gf_HeroAIEndingCampAttackCampIndex ();
bool libGame_gf_HeroAIEndingCampAttackSuccess ();
void libGame_gf_HeroLevelUp (trigger t);
void libGame_gf_SendEventHeroLevelUp (int lp_player);
int libGame_gf_HeroLevelUpPlayer ();
void libGame_gf_HeroSpecialCaseMounting (trigger t);
void libGame_gf_SendEventHeroSpecialCaseMounting (int lp_player);
int libGame_gf_HeroSpecialCaseMountingPlayer ();
void libGame_gf_HeroPortedBackToTown (trigger t);
void libGame_gf_SendEventHeroPortedBackToTown (int lp_player);
int libGame_gf_HeroPortedBackToTownPlayer ();
void libGame_gf_HeroParticipatedInNPCTakedown (trigger t);
void libGame_gf_SendEventHeroParticipatedInNPCTakedown (int lp_player, unit lp_unit);
int libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer ();
unit libGame_gf_HeroParticipatedInNPCTakedownMinion ();
void libGame_gf_SpecialCaseParticipatedInNPCTakedown (trigger t);
void libGame_gf_SendEventSpecialCaseUnitParticipatedInNPCTakedown (int lp_player, unit lp_unit);
int libGame_gf_SpecialCaseUnitParticipatedInNPCTakedownPlayerParticipant ();
unit libGame_gf_SpecialCaseUnitParticipatedInNPCTakedownMinion ();
void libGame_gf_HeroParticipatedInTakedown (trigger t);
void libGame_gf_SendEventHeroParticipatedInTakedown (int lp_playerKilling, int lp_playerKilled, unit lp_heroKilled);
int libGame_gf_HeroParticipatedInTakedownKillingPlayer ();
int libGame_gf_HeroParticipatedInTakedownKilledPlayer ();
unit libGame_gf_HeroParticipatedInTakedownKilledHero ();
void libGame_gf_HeroKilled (trigger t);
void libGame_gf_SendEventHeroKilled (int lp_playerKilling, unit lp_killedUnit);
int libGame_gf_HeroKilledKillingPlayer ();
int libGame_gf_HeroKilledPlayer ();
point libGame_gf_HeroKilledLocaiton ();
unit libGame_gf_HeroKilledUnit ();
void libGame_gf_HeroRespawn (trigger t);
void libGame_gf_SendEventHeroRespawn (int lp_player);
int libGame_gf_HeroRespawnPlayer ();
void libGame_gf_HeroGainTalent (trigger t);
void libGame_gf_SendEventHeroGainTalent (int lp_player);
int libGame_gf_HeroGainTalentPlayer ();
void libGame_gf_JungleCampSpawned (trigger t);
void libGame_gf_SendEventJungleCampSpawned (int lp_camp);
int libGame_gf_JungleCampSpawnedIndex ();
void libGame_gf_JungleCampDefenderCreated (trigger t);
void libGame_gf_SendEventJungleCampDefenderCreated (unit lp_unit);
unit libGame_gf_JungleCampDefenderUnit ();
void libGame_gf_JungleCampLanerCreated (trigger t);
void libGame_gf_SendEventJungleCampLanerCreated (unit lp_unit);
unit libGame_gf_JungleCampLanerUnit ();
void libGame_gf_MercCampCaptured (trigger t);
void libGame_gf_SendEventMercCampCaptured (int lp_camp, int lp_owner, playergroup lp_capturingPlayers);
int libGame_gf_MercCampCapturedIndex ();
int libGame_gf_MercCampCapturedOwner ();
playergroup libGame_gf_MercCampCapturedCapturingPlayers ();
void libGame_gf_MapMechanicInitialization (trigger t);
void libGame_gf_SendEventMapMechanicInitialization (int lp_mechanic);
int libGame_gf_MapMechanicInitializationMechanicType ();
void libGame_gf_MapRavenLordTributeWarning (trigger t);
void libGame_gf_SendEventMapTributeWarning (point lp_position);
point libGame_gf_MapTributeWarningPosition ();
void libGame_gf_MapRavenLordTributeSpawned (trigger t);
void libGame_gf_SendEventMapTributeSpawned (unit lp_tribute);
unit libGame_gf_MapTributeSpawnedUnit ();
void libGame_gf_MapRavenLordTributePickedUp (trigger t);
void libGame_gf_SendEventMapTributePickedUp (int lp_player, point lp_positioin);
int libGame_gf_MapTributePickedUpPlayer ();
point libGame_gf_MapTributePickedUpPosition ();
void libGame_gf_MapRavenLordCurseStarts (trigger t);
void libGame_gf_SendEventMapRavenLordCurseStarts (int lp_team);
int libGame_gf_MapRavenLordCurseActivatedTeam ();
void libGame_gf_MapRavenLordCurseEnds (trigger t);
void libGame_gf_SendEventMapRavenLordCurseEnds ();
void libGame_gf_MapDoubloonChestSpawned (trigger t);
void libGame_gf_SendEventMapChestSpawned (unit lp_chest);
unit libGame_gf_MapChestSpawnedUnit ();
void libGame_gf_MapDoubloonsGhostShipShowsUp (trigger t);
void libGame_gf_SendEventDoubloonsGhostShipShowsUp (unit lp_ship);
unit libGame_gf_MapDoubloonsGhostShipShowsUpShip ();
void libGame_gf_MapDoubloonsGhostShipShootingStart (trigger t);
void libGame_gf_SendEventDoubloonsGhostShipShootingStart (int lp_forPlayer);
int libGame_gf_MapDoubloonsGhostShipShootingStartPlayer ();
void libGame_gf_MapDoubloonsGhostShipShootingEnd (trigger t);
void libGame_gf_SendEventDoubloonsGhostShipShootingEnd ();
void libGame_gf_MapDoubloonsDoubloonCollected (trigger t);
void libGame_gf_SendEventDoubloonsDoubloonCollected (int lp_player);
int libGame_gf_MapDoubloonsDoubloonCollectedPlayer ();
void libGame_gf_MapDoubloonsDoubloonsDropped (trigger t);
void libGame_gf_SendEventDoubloonsDoubloonsDropped (int lp_player, int lp_count);
int libGame_gf_MapDoubloonsDoubloonsDroppedPlayer ();
int libGame_gf_MapDoubloonsDoubloonsDroppedCount ();
void libGame_gf_MapDoubloonsDoubloonsTurnedIn (trigger t);
void libGame_gf_SendEventDoubloonsDoubloonsTurnedIn (int lp_player, int lp_count);
int libGame_gf_MapDoubloonsDoubloonsTurnedInPlayer ();
int libGame_gf_MapDoubloonsDoubloonsTurnedInCount ();
void libGame_gf_MapUnderworldUndeadSpawned (trigger t);
void libGame_gf_SendEventMapUnderworldUndeadSpawned (unitgroup lp_entrances, region lp_underworld, int lp_totalSkull);
unitgroup libGame_gf_MapUnderworldUndeadSpawnedEntrances ();
region libGame_gf_MapUnderworldUndeadSpawnedUnderworldRegion ();
int libGame_gf_MapUnderworldUndeadSpawnedTotalSkull ();
void libGame_gf_MapUnderworldSkullCollected (trigger t);
void libGame_gf_SendEventMapUnderworldSkullCollected (int lp_team1, int lp_team2, int lp_collectingPlayer);
int libGame_gf_MapUnderworldSkullCollectedTeam1Skulls ();
int libGame_gf_MapUnderworldSkullCollectedTeam2Skulls ();
int libGame_gf_MapUnderworldSkullCollectedCollectingPlayer ();
void libGame_gf_MapUnderworldCleared (trigger t);
void libGame_gf_SendEventMapUnderworldCleared ();
void libGame_gf_MapUnderworldBossStartSummoning (trigger t);
void libGame_gf_SendEventMapUnderworldBossStartSummoning (int lp_team, point lp_location, int lp_lane);
int libGame_gf_MapUnderworldBossStartSummoningTeam ();
point libGame_gf_MapUnderworldBossStartSummoningLocation ();
int libGame_gf_MapUnderworldBossStartSummoningLane ();
void libGame_gf_MapUnderworldBossSummoned (trigger t);
void libGame_gf_SendEventMapUnderworldBossSummoned (unit lp_boss);
unit libGame_gf_MapUnderworldBossSummonedBoss ();
void libGame_gf_MapUnderworldPlayerUsesGate (trigger t);
void libGame_gf_SendEventMapUnderworldPlayerUsesGate (int lp_player, unit lp_heroUnit);
int libGame_gf_MapUnderworldPlayerUsesGatePlayer ();
unit libGame_gf_MapUnderworldPlayerUsesGateHeroUnit ();
void libGame_gf_MapDragonShireObeliskSpawned (trigger t);
void libGame_gf_SendEventMapObeliskSpawned (unit lp_obelisk);
unit libGame_gf_MapObeliskSpawnedUnit ();
void libGame_gf_MapDragonShireObeliskOwnershipChange (trigger t);
void libGame_gf_SendEventMapDragonShireObeliskOwnershipChange (int lp_team, unit lp_obelisk, playergroup lp_capturingPlayers);
int libGame_gf_MapDragonShireObeliskOwnershipChangeTeam ();
unit libGame_gf_MapDragonShireObeliskOwnershipChangeObelisk ();
playergroup libGame_gf_MapDragonShireObeliskOwnershipChangeCapturingPlayers ();
void libGame_gf_MapDragonShireDragonActivated (trigger t);
void libGame_gf_SendEventMapDragonActivated (unit lp_dragon, int lp_activatingPlayer);
unit libGame_gf_MapDragonActivatedDragonUnit ();
int libGame_gf_MapDragonActivatedDragonPlayer ();
void libGame_gf_MapDragonShireDragonEnds (trigger t);
void libGame_gf_SendEventMapDragonShireDragonEnds ();
void libGame_gf_MapHauntedWoodsNightStarts (trigger t);
void libGame_gf_SendEventMapHauntedWoodsNightStarts ();
void libGame_gf_MapHauntedWoodsNightEnds (trigger t);
void libGame_gf_SendEventMapHauntedWoodsNightEnds ();
void libGame_gf_MapGardensSeedsCollected (trigger t);
void libGame_gf_SendEventMapGardensSeedsCollected (int lp_collectingPlayer);
int libGame_gf_MapGardensSeedsCollectedCollectingPlayer ();
void libGame_gf_MapSoulCagesSoulCollected (trigger t);
void libGame_gf_SendEventMapSoulCagesSoulCollected (int lp_collectingPlayer, int lp_count);
int libGame_gf_MapSoulCagesSoulCollectedCollectingPlayer ();
int libGame_gf_MapSoulCagesSoulCollectedCount ();
void libGame_gf_MinionGroupCreated (trigger t);
void libGame_gf_SendEventMinionGroupCreated (unitgroup lp_unitGroup);
unitgroup libGame_gf_MinionUnitGroup ();
void libGame_gf_TalentPanelVisibilityChanged (trigger t);
void libGame_gf_SendEventTalentPanelVisibilityChanged (int lp_player, bool lp_visible);
int libGame_gf_TalentPanelVisibilityChangedPlayer ();
bool libGame_gf_TalentPanelVisibilityChangedVisible ();
void libGame_gf_GameOver (int lp_winningTeam);
bool libGame_gf_UnitTypeIsTownGate (string lp_unitType);
fixed libGame_gf_GetAbilityPowerMultiplierForHero (unit lp_hero);
fixed libGame_gf_GetCDRMultiplierForHero (unit lp_hero);
int libGame_gf_GetShieldsByTalentsForHero (unit lp_hero);
void libGame_gf_ApplyAbilityModificationsForPlayerAtTalent (int lp_player, int lp_talentIndex);
void libGame_gf_RemoveTalentAbilityModificationsForPlayerAtTalent (int lp_player, int lp_talentIndex);
void libGame_gf_ApplyAbilityPowerModificationsForPlayerAtTalent (int lp_player, int lp_talentIndex);
void libGame_gf_RemoveAbilityPowerModificationsForPlayer (int lp_player);
void libGame_gf_ApplyLevelUpHeroStatsForHero (unit lp_hero);
void libGame_gf_RemoveLevelUpHeroStatsForPlayer (int lp_player);
void libGame_gf_UpdateArtifactPercentLifeStatsForHero (unit lp_hero);
void libGame_gf_UpdateHeroStatsSpecialCasesForHero (unit lp_hero);
void libGame_gf_UpdateHeroWeaponStats (unit lp_hero);
void libGame_gf_UpdateHeroManaCosts (unit lp_unit);
void libGame_gf_UpdateVehicleStats (unit lp_hero);
bool libGame_gf_ArtifactSlotIsValidForArtifactType (string lp_artifact, int lp_slot);
void libGame_gf_ArtifactsSetAPBehaviorsToRankForHero (unit lp_hero, int lp_rank);
void libGame_gf_ArtifactsSetADBehaviorsToRankForHero (unit lp_hero, int lp_rank);
void libGame_gf_ArtifactsSetIASBehaviorsToRankForHero (unit lp_hero, int lp_rank);
void libGame_gf_ArtifactsSetMovespeedBehaviorsToRankForHero (unit lp_hero, int lp_rank);
void libGame_gf_ArtifactsSetSiegeDmgBehaviorsToRankForHero (unit lp_hero, int lp_rank);
void libGame_gf_ArtifactsSetLifestealBehaviorsToRankForHero (unit lp_hero, int lp_rank);
void libGame_gf_ArtifactsSetHPBehaviorsToRankForHero (unit lp_hero, int lp_rank);
void libGame_gf_ArtifactsSetMANABehaviorsToRankForHero (unit lp_hero, int lp_rank);
void libGame_gf_ArtifactsSetMRBehaviorsToRankForHero (unit lp_hero, int lp_rank);
void libGame_gf_ArtifactsSetCDRModificationToRankForHero (unit lp_hero, int lp_rank);
void libGame_gf_ArtifactsSetDeathTimeReductionModificationToRankForHero (unit lp_hero, int lp_rank);
void libGame_gf_ArtifactsSetMountSpeedModificationToRankForHero (unit lp_hero, int lp_rank);
void libGame_gf_ArtifactsUpdateSiegeDamageArtifactForUnit (unit lp_unit);
void libGame_gf_ArtifactsResetArtifactModificationsForPlayer (int lp_player);
void libGame_gf_TurnDeathTimerCapOnOff (bool lp_onOff, fixed lp_cap);
void libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE (unit lp_deadHero, int lp_killingPlayer);
playergroup libGame_gf_HeroDeathGetKillingGroupFromKillingTeamGroupAndDeadUnit (playergroup lp_killingTeamGroup, int lp_killingPlayer, unit lp_deadHero);
void libGame_gf_HeroDeathUpdateTeamStats (unit lp_deadHero, int lp_killingFaction);
void libGame_gf_HeroDeathUpdatePlayerStats (unit lp_deadHero, int lp_killingPlayer, playergroup lp_killingTeamGroup, playergroup lp_killingGroup);
void libGame_gf_HeroDeathAwardXP (unit lp_deadHero, playergroup lp_awardGroup);
void libGame_gf_HeroDeathDeadTeamAnnouncements (unit lp_deadHero, playergroup lp_deadPlayerTeamGroup, int lp_killingFaction);
void libGame_gf_HeroDeathCheckForTeamDominatedAnnouncement (int lp_deadPlayerTeam);
void libGame_gf_HeroDeathStartRespawnTimer (int lp_player);
void libGame_gf_HeroDeathUpdateUIElementsForDeath (int lp_player, int lp_killingPlayer);
void libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer (bool lp_enableDisable, int lp_player);
void libGame_gf_HeroDeathPortHeroBackAndSetDeathState (int lp_player);
void libGame_gf_HeroDeathModifyRespawnTimer (int lp_respawningPlayer, fixed lp_modificationAmount);
void libGame_gf_HeroDeathUpdateRespawnTimer (int lp_respawningPlayer, fixed lp_newRespawnTimerDuration);
void libGame_gf_HeroDeathRespawnHeroforPlayer (int lp_player);
void libGame_gf_HeroDeathHeroKilledAnnouncementToKillingTeamPlayer (int lp_deadPlayer, unit lp_deadHero, int lp_killingTeamPlayer, bool lp_playerWasInvolvedInKill, fixed lp_xPValue);
void libGame_gf_HeroDeathHeroKilledAnnouncementToObserver (int lp_deadPlayer, unit lp_deadHero);
void libGame_gf_HeroDeathHeroDiedAnnouncementToAlliedPlayerGroup (int lp_deadPlayer, unit lp_deadHero, playergroup lp_alliedPlayerGroup);
void libGame_gf_HeroDeathYouHaveDiedAnnouncementToDeadPlayer (int lp_deadPlayer);
void libGame_gf_HeroDeathHeroHasDiedAnnouncementToDeadPlayer (int lp_deadPlayer, unit lp_deadHero);
void libGame_gf_HeroDeathCheckForKillingSpree (int lp_killingPlayer);
void libGame_gf_HeroDeathDispatchKillingSpreeAnnouncement (int lp_player);
void libGame_gf_HeroDeathStartMultikillTimerForPlayer (int lp_player);
void libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer (soundlink lp_sound, int lp_queueType, int lp_player);
void libGame_gf_HeroDeathPlayNextSoundInQueueForPlayer (int lp_queueType, int lp_player);
bool libGame_gf_HeroSelectionIsHeroSelectedForAnyPlayer (int lp_heroIndex);
bool libGame_gf_HeroSelectionIsHeroSelectedForPlayersTeam (int lp_heroIndex, int lp_player);
int libGame_gf_HeroSelectionRandomlyPickAnyUnusedHero (int lp_choosingPlayer, bool lp_allowAnyTier, bool lp_ignoreCheck);
int libGame_gf_HeroSelectionRandomlyPickUnusedHeroFromClass (int lp_choosingPlayer, int lp_class);
int libGame_gf_HeroSelectionRandomlyPickUnusedHeroWithFilter (int lp_choosingPlayer, bool lp_allowMelee, bool lp_allowTank, bool lp_allowDamage, bool lp_allowSupport, bool lp_allowSiege);
int libGame_gf_HeroSelectionRandomlyPickComplementaryUnusedHero (int lp_choosingPlayer);
void libGame_gf_HeroSelectionSetBNetHeroAndSkinSelectionsForAllPlayers ();
void libGame_gf_HeroSelectionSetBNetMountSelectionsForAllPlayers ();
void libGame_gf_HeroSelectionComputersRandomlyPickSkinsMounts ();
void libGame_gf_HeroSelectionRandomlyPickSkin (int lp_choosingPlayer);
void libGame_gf_HeroSelectionRandomlyPickMount (int lp_choosingPlayer);
void libGame_gf_CalculateClosestLaneDataForLane (point lp_testPoint, int lp_curLane);
void libGame_gf_CalculateClosestLaneData (point lp_testPoint);
void libGame_gf_SetStormMapLighting (string lp_lighting, playergroup lp_players, fixed lp_blendtime);
void libGame_gf_UpdateStormMapLighting (playergroup lp_players, fixed lp_blendtime);
void libGame_gf_SpecialLightingEventStart (string lp_lighting, playergroup lp_players, fixed lp_blendtime);
void libGame_gf_SpecialLightingEventEnd (string lp_lighting, playergroup lp_players, fixed lp_blendtime);
int libGame_gf_MinionDetermineWaveComposition ();
bool libGame_gf_MinionSystemStarted ();
void libGame_gf_MinionEnableDisableWaveCompositionType (bool lp_enableDisable, int lp_compositionType);
void libGame_gf_MinionStartStopMinionSystem (bool lp_startStop);
void libGame_gf_MinionStartStopMinionSpawnCycle (bool lp_startStop);
void libGame_gf_MinionPauseUnpauseMinionSystem (bool lp_pauseUnpause);
void libGame_gf_MinionSpawnMinion (int lp_lane, int lp_owner, int lp_type, point lp_spawnPoint);
void libGame_gf_MinionSpawnWave (int lp_lane, int lp_owner, int lp_composition);
void libGame_gf_MinionTurnMinionScalingOnOff (bool lp_onOff);
void libGame_gf_MinionPauseUnpauseMinionScaling (bool lp_pauseUnpause);
void libGame_gf_CalculateSpawnedMinionGoalPoints (int lp_ownerPlayer, point lp_positionofSpawner);
void libGame_gf_ApplyMountBehaviorToPlayer (int lp_player);
void libGame_gf_ApplyMountBehaviorToHero (unit lp_hero);
void libGame_gf_AwardXPForNPCKill (unit lp_killedUnit, int lp_killedUnitPlayer, int lp_killedUnitClassification, int lp_killingPlayer);
void libGame_gf_BuildingDiesCameraShake (fixed lp_delay, string lp_intensity, playergroup lp_playerGroup);
void libGame_gf_GazloweSalvageProc (int lp_killingPlayer, unit lp_minion);
void libGame_gf_GazloweReduceReuseRecycleProc (int lp_killingPlayer, unit lp_minion);
void libGame_gf_BribeProc (int lp_killingPlayer, unit lp_minion);
void libGame_gf_DiabloBlackSoulstoneProc (int lp_killingPlayer, unit lp_minion);
void libGame_gf_GenericSeasonedMarksmanProc (int lp_killingPlayer, unit lp_minion);
int libGame_gf_EnemyTeam (int lp_team);
playergroup libGame_gf_AlliedPlayerGroupOfPlayer (int lp_player);
playergroup libGame_gf_EnemyPlayerGroupOfPlayer (int lp_player);
int libGame_gf_TeamNumberOfPlayer (int lp_player);
bool libGame_gf_TeamNumberIsValid (int lp_team);
int libGame_gf_EnemyTeamNumberOfPlayer (int lp_player);
int libGame_gf_ComputerPlayerInTeam (int lp_team);
int libGame_gf_PlayersAliveOnTeam (int lp_team);
int libGame_gf_GetPlayerNumberFromRosterSlot (int lp_rosterSlot);
bool libGame_gf_UnitIsHero (unit lp_testUnit);
int libGame_gf_TalentBucketFindTalentInBucketForPlayer (int lp_talentIndex, int lp_player);
void libGame_gf_InitializePlayer (int lp_player, int lp_team);
void libGame_gf_GrantXPToPlayer (fixed lp_xP, int lp_player, int lp_source);
void libGame_gf_LevelUpHero (unit lp_hero);
void libGame_gf_PreloadTalentModelAssets (int lp_player, int lp_talentTier);
void libGame_gf_ArtifactsSetArtifactsForPlayer (int lp_player);
void libGame_gf_ArtifactsApplyArtifactModificationsForPlayerOnUnit (int lp_player, unit lp_unit);
void libGame_gf_DataPlayersSetABTalentChociesFromHeroDataForPlayer (int lp_heroIndex, int lp_player);
void libGame_gf_DataPlayersSetABTalentChoicesFromProfileDataForPlayer (int lp_heroIndex, int lp_player, int lp_talentProfileIndex);
void libGame_gf_DataPlayersSetBucketsABChoiceDataForPlayer (int lp_player);
void libGame_gf_DataPlayersClearBucketsABChoiceDataForPlayer (int lp_player);
void libGame_gf_SpawnHero (int lp_player, int lp_heroIndex, point lp_spawnLocation);
void libGame_gf_SpawnHeroesForTeam (int lp_team);
void libGame_gf_SpawnHeroesForBothTeams ();
void libGame_gf_PreloadHeroesForTeam (int lp_team);
void libGame_gf_ShareUnshareVisionOfAlliesForPlayer (bool lp_onOff, int lp_player);
void libGame_gf_EndGameForPlayerStorm (int lp_player);
void libGame_gf_PlayerHeroDisplacementCameraUnlock (int lp_player, string lp_displacingBehavior);
void libGame_gf_UpdateScalingForUnit (unit lp_unit, int lp_desiredLevel, int lp_existingLevel, int lp_desiredXPBuffAmount);
void libGame_gf_UpdateUpgradesForPlayer (int lp_player, unit lp_unit, int lp_level);
void libGame_gf_JungleUpdateScalingForCamp (int lp_camp, int lp_scalingTicks);
void libGame_gf_JungleUpdateScalingForCamps ();
void libGame_gf_CoreUpdateScaling ();
void libGame_gf_MMInitializeScalingDataForHostileNPCs (int lp_scalingType, string lp_scalingBehavior);
void libGame_gf_ScoreValuesReportIntegerValueAndLog (int lp_player, string lp_score, int lp_value);
void libGame_gf_ScoreValuesReportRealValueAndLog (int lp_player, string lp_score, fixed lp_value);
void libGame_gf_ScoreValuesReportForPlayer (int lp_player);
void libGame_gf_ScoreValuesRecordXPContributionForPlayer (int lp_player, fixed lp_amount);
void libGame_gf_ShrubNearbyEnemyHeroRevealCheck (int lp_player, unit lp_unit, point lp_position);
int libGame_gf_TownGetTownForUnit (unit lp_unit);
int libGame_gf_TownGetTownStructureIndexForUnit (unit lp_unit);
int libGame_gf_TownGetBarracksIndexForUnit (unit lp_unit);
int libGame_gf_TownGetTownStructurePresetFromUnitID (string lp_unitType);
int libGame_gf_TownGetTownHallPresetFromUnitID (string lp_unitType);
int libGame_gf_TownGetTownFromPoint (point lp_point);
void libGame_gf_TownUpgradeBruiserMinions (int lp_town);
void libGame_gf_TownAnnounceTownDestroyed (int lp_town, int lp_townType);
void libGame_gf_TownSetTrainingTextTag (int lp_town, int lp_structureIndex);
int libGame_gf_VehiclesGetVehicleLocationTypeIndex (unit lp_unit);
string libGame_gf_VehiclesGetVehicleStringfromPreset (int lp_unitType);
string libGame_gf_VehiclesGetVehicleUnitIDFromPreset (int lp_unitType);
int libGame_gf_VehiclesGetVehicleSpawnNodeIndex (unit lp_unit);
void libGame_gf_VehiclesSetVehicleStatusTextTag (unit lp_vehicle);
void libGame_gf_VehiclesReturnPlayerFromVehicleAtPoint (int lp_player, point lp_vehicleLocation);
void libGame_gf_WatchTowersChangeWatchTowerOwnership (int lp_watchTower, int lp_newOwner);
int libGame_gf_WatchTowersGetWatchTowerIndexForUnit (unit lp_unit);

// Trigger Declarations
trigger libGame_gt_IncludeGame;
trigger libGame_gt_InitializeBanks;
trigger libGame_gt_InitializeGameSystems;
trigger libGame_gt_InitializePlayers;
trigger libGame_gt_InitializeVisibility;
trigger libGame_gt_AfkCheckPlayerScoreValuesForActivity;
trigger libGame_gt_AfkPlayerAfkWarningTimerExpires;
trigger libGame_gt_AfkPlayerAfkKickTimerExpires;
trigger libGame_gt_AnnouncementMessageTimerExpires;
trigger libGame_gt_InitializeBehaviorCategoryBitFlagValues;
trigger libGame_gt_CapturePointLogic;
trigger libGame_gt_CCRecognitionSlow;
trigger libGame_gt_CCRecognitionRoot;
trigger libGame_gt_CCRecognitionStun;
trigger libGame_gt_CCRecognitionSilenced;
trigger libGame_gt_CCRecognitionDismountStun;
trigger libGame_gt_CCRecognitionStasis;
trigger libGame_gt_EncouragementDataInitializeThresholdValues;
trigger libGame_gt_EncouragementDataTrackingRavenTributeCollected;
trigger libGame_gt_EncouragementDataTrackingDoubloonsTurnedIn;
trigger libGame_gt_EncouragementDataTrackingDragonShrineCaptured;
trigger libGame_gt_EncouragementDataTrackingSkullCollected;
trigger libGame_gt_EncouragementDataTrackingMercCampCaptured;
trigger libGame_gt_EncouragementDataTrackingInCombatStart;
trigger libGame_gt_EncouragementDataTrackingInCombatTimeout;
trigger libGame_gt_EncouragementDataTrackingDeathTipPeriodicUpdate;
trigger libGame_gt_EncouragementDataTrackingPlayerUsesUnderworldGate;
trigger libGame_gt_EncouragementDataTrackingRecentHeroKillsTimeout;
trigger libGame_gt_EncouragementDataTrackingRecentStructureDamageTimeout;
trigger libGame_gt_EncouragementDataTrackingPlayerUsesAbility;
trigger libGame_gt_EncouragementDataTrackingPlayerUsesMoonwell;
trigger libGame_gt_StartGame;
trigger libGame_gt_AnnounceCountdown;
trigger libGame_gt_RunAnimations;
trigger libGame_gt_OpenTheGatesOpenTheGatesTimerExpires;
trigger libGame_gt_SpawnMinionsMinionSpawnStartTimerExpires;
trigger libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires;
trigger libGame_gt_ConfineHeroesToBaseUntilCountdownEnds;
trigger libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds;
trigger libGame_gt_ArtifactStatUpdatePlayerMaxLifeChanges;
trigger libGame_gt_HeroDeathDiabloParticipatedInTakedown;
trigger libGame_gt_HeroDeathSeasonedMarksmanParticipatedInTakedown;
trigger libGame_gt_HeroDeathHeroDies;
trigger libGame_gt_HeroDeathHeroDownedStateTimerExpires;
trigger libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires;
trigger libGame_gt_HeroDeathHeroRespawnTimerExpires;
trigger libGame_gt_HeroDeathTeamMultikillTimerExpires;
trigger libGame_gt_HeroDeathPlayerMultikillTimerExpires;
trigger libGame_gt_HeroDeathUpdateMultikillTimerUI;
trigger libGame_gt_HeroDeathKillStingerTimerExpires;
trigger libGame_gt_HeroDeathDiabloDiabloDies;
trigger libGame_gt_HeroDeathUtherEternalDevotionProc;
trigger libGame_gt_HeroDeathUtherEternalDevotionDies;
trigger libGame_gt_HeroDeathTyraelArchangelsWrathProc;
trigger libGame_gt_HeroDeathTyraelArchangelsWrathDies;
trigger libGame_gt_InitializeCodeLaneSystem;
trigger libGame_gt_PlayerLeavesGame;
trigger libGame_gt_PlayerRejoinsGame;
trigger libGame_gt_TeamAbandonedTheGameTimerExpires;
trigger libGame_gt_MinionSpawnCycle;
trigger libGame_gt_HeroMount;
trigger libGame_gt_HeroDismount;
trigger libGame_gt_HeroDismountOnAbilityUseAttack;
trigger libGame_gt_FlyingMountCooldownFly;
trigger libGame_gt_FlyingMountCooldownLand;
trigger libGame_gt_GameGeneralNPCProcListener;
trigger libGame_gt_CreepDies;
trigger libGame_gt_SummonedUnitDies;
trigger libGame_gt_MinionDies;
trigger libGame_gt_TownStructureDies;
trigger libGame_gt_CoreDiesGameOver;
trigger libGame_gt_LevelUp;
trigger libGame_gt_RecentDamageTimerExpires;
trigger libGame_gt_HeroDamageTracking;
trigger libGame_gt_HeroKillCreditProximityTracking;
trigger libGame_gt_HeroXPChanges;
trigger libGame_gt_XPTrickle;
trigger libGame_gt_PlayerHomeShieldProtectionOn;
trigger libGame_gt_PlayerHomeShieldProtectionOff;
trigger libGame_gt_PlayerHeroDisplacementCameraLock;
trigger libGame_gt_ScalingTimerExpiration;
trigger libGame_gt_JungleScalingTimerExpires;
trigger libGame_gt_CoreScalingTimerExpires;
trigger libGame_gt_ScoreTrackingTimeCCdEnemyHeroes;
trigger libGame_gt_ScoreTrackingRavenTributeCollected;
trigger libGame_gt_ScoreTrackingDoubloonCollected;
trigger libGame_gt_ScoreTrackingDoubloonsDropped;
trigger libGame_gt_ScoreTrackingDoubloonsTurnedIn;
trigger libGame_gt_ScoreTrackingDragonActivated;
trigger libGame_gt_ScoreTrackingDragonShrineCaptured;
trigger libGame_gt_ScoreTrackingSkullCollected;
trigger libGame_gt_ScoreTrackingSeedCollected;
trigger libGame_gt_ShrubProximityRevealer;
trigger libGame_gt_TowerTowerDeadStateGateCheck;
trigger libGame_gt_TowerTowerMorphToDeadStateStructureDies;
trigger libGame_gt_TowerHeroTargetingWarningSounds;
trigger libGame_gt_TowerCoreIsAttacked;
trigger libGame_gt_InitializeTownSystem;
trigger libGame_gt_TownVehiclePadKilled;
trigger libGame_gt_BaseRepulserFieldLaunchMissile;
trigger libGame_gt_VehiclesTownRespawnTimerCountdown;
trigger libGame_gt_VehiclesInitializeOccupiedVehicleCatalogValues;
trigger libGame_gt_VehiclesVehicleBuilt;
trigger libGame_gt_VehiclesUseVehicle;
trigger libGame_gt_VehiclesLeaveVehicle;
trigger libGame_gt_VehiclesVehicleDies;
trigger libGame_gt_VehicleDragonKnightBullRush;
trigger libGame_gt_InitializeWatchTowers;
trigger libGame_gt_WatchTowersTurnOnWatchTowers;
trigger libGame_gt_WatchTowersOwnershipChanges;

// Library Initialization
void libGame_InitVariables ();

