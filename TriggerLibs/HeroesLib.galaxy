include "TriggerLibs/NativeLib"
include "TriggerLibs/GameLib_h"
include "TriggerLibs/MapMechanicsLib_h"
include "TriggerLibs/AILib_h"
include "TriggerLibs/UILib_h"
include "TriggerLibs/StartingExperienceLib_h"
include "TriggerLibs/SoundLib_h"
include "TriggerLibs/SupportLib_h"

include "TriggerLibs/HeroesLib_h"

//--------------------------------------------------------------------------------------------------
// Library: Core
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libCore_InitLibraries () {
    libNtve_InitVariables();
    libGame_InitVariables();
    libMapM_InitVariables();
    libAIAI_InitVariables();
    libUIUI_InitVariables();
    libStEx_InitVariables();
    libSond_InitVariables();
    libSprt_InitVariables();
}

// Variable Initialization
bool libCore_InitVariables_completed = false;

void libCore_InitVariables () {
    int init_i;
    int init_i1;
    int init_i2;
    int init_j2;

    if (libCore_InitVariables_completed) {
        return;
    }

    libCore_InitVariables_completed = true;

    libCore_gv_dEBUGDebuggingEnabled = GameCheatsEnabled(c_gameCheatCategoryDevelopment);
    libCore_gv_sYSGameMode = libCore_ge_GameModes_Normal;
    libCore_gv_sYSStartGame = true;
    libCore_gv_sYSTalentsOn = true;
    libCore_gv_sYSUseEncouragementPanel = true;
    libCore_gv_sYSDataMiningListenForData = true;
    libCore_gv_mAPMapStringID = "";
    for (init_i = 0; init_i <= libCore_gv_dataAnnouncerVOMaxNumberOfAnnouncerEvents; init_i += 1) {
        libCore_gv_dataAnnouncerVODataFieldMap[init_i] = "";
    }
    for (init_i = 0; init_i <= libCore_gv_dataAnnouncerVONumberOfAnnouncerPacks; init_i += 1) {
        libCore_gv_dataAnnouncerVOPacks[init_i].lv_stringName = "";
    }
    for (init_i = 0; init_i <= libCore_gv_artifacts_MaxArtifactEntryCount; init_i += 1) {
        libCore_gv_artifacts_ArtifactData[init_i].lv_tier = libCore_ge_ArtifactTier_Gem;
    }
    libCore_gv_cOLORPlayerColor = Color(0,0,0);
    libCore_gv_cOLORAllyColor = Color(0,0,0);
    libCore_gv_cOLOREnemyColor = Color(0,0,0);
    libCore_gv_cOLORNeutralColor = Color(0,0,0);
    libCore_gv_cOLORJungleCreepColor = Color(0,0,0);
    libCore_gv_bALFaerieDragonFaerieDustHealPercentage = 0.2;
    libCore_gv_bALJungleCreepCampActivationDelay = 120.0;
    libCore_gv_bALGraveGolemCampActivationDelay = 180.0;
    for (init_i = 0; init_i <= libCore_gv_dataHeroesMaxHeroCount; init_i += 1) {
        libCore_gv_dataHeroesHeroData[init_i].lv_class = c_heroRoleWarrior;
        libCore_gv_dataHeroesHeroData[init_i].lv_universe = c_heroUniverseWarcraft;
        libCore_gv_dataHeroesHeroData[init_i].lv_gender = c_heroGenderMale;
        for (init_i1 = 0; init_i1 <= libCore_gv_dataHeroesMaxAbilitiesPerHero; init_i1 += 1) {
            libCore_gv_dataHeroesHeroData[init_i].lv_abilities[init_i1].lv_isAffectedByOverdrive = true;
        }
        libCore_gv_dataHeroesHeroData[init_i].lv_introCutsceneSize = c_heroCutsceneSizeSmall;
        for (init_i2 = 0; init_i2 <= libCore_gv_dataHeroesMaxAbilitiesPerHero; init_i2 += 1) {
            for (init_j2 = 0; init_j2 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j2 += 1) {
                libCore_gv_dataHeroesHeroData[init_i].lv_levelUpModificationData.lv_catalog[init_i2][init_j2] = c_gameCatalogUnit;
            }
        }
        for (init_i2 = 0; init_i2 <= libCore_gv_dataHeroesMaxAbilitiesPerHero; init_i2 += 1) {
            for (init_j2 = 0; init_j2 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j2 += 1) {
                libCore_gv_dataHeroesHeroData[init_i].lv_levelUpModificationData.lv_entry[init_i2][init_j2] = "";
            }
        }
        for (init_i2 = 0; init_i2 <= libCore_gv_dataHeroesMaxAbilitiesPerHero; init_i2 += 1) {
            for (init_j2 = 0; init_j2 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j2 += 1) {
                libCore_gv_dataHeroesHeroData[init_i].lv_levelUpModificationData.lv_field[init_i2][init_j2] = "";
            }
        }
        for (init_i2 = 0; init_i2 <= libCore_gv_dataHeroesMaxAbilitiesPerHero; init_i2 += 1) {
            for (init_j2 = 0; init_j2 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j2 += 1) {
                libCore_gv_dataHeroesHeroData[init_i].lv_levelUpModificationData.lv_affectedByAbilityPower[init_i2][init_j2] = true;
            }
        }
        for (init_i2 = 0; init_i2 <= libCore_gv_dataHeroesMaxAbilitiesPerHero; init_i2 += 1) {
            for (init_j2 = 0; init_j2 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j2 += 1) {
                libCore_gv_dataHeroesHeroData[init_i].lv_levelUpModificationData.lv_affectedByOverdrive[init_i2][init_j2] = true;
            }
        }
        for (init_i1 = 0; init_i1 <= libCore_gv_data_MaxHeroAllowedMountCategories_C; init_i1 += 1) {
            libCore_gv_dataHeroesHeroData[init_i].lv_allowedMountCategories[init_i1] = "";
        }
        libCore_gv_dataHeroesHeroData[init_i].lv_dEBUGPlayable = true;
    }
    for (init_i = 0; init_i <= libCore_gv_dataHeroVOMaxNumberOfHeroVOEvents; init_i += 1) {
        libCore_gv_dataHeroVODataFieldMap[init_i] = "";
    }
    libCore_gv_bALMinionWaveInterval = 30.0;
    libCore_gv_bALMinionScalingTimerDuration = 60.0;
    for (init_i = 0; init_i <= libCore_gv_dataMinionWaveCompositionCount; init_i += 1) {
        libCore_gv_dataMinionWaveCompositions[init_i].lv_enabled = true;
    }
    for (init_i = 0; init_i <= libCore_gv_dataMountsMaxMountCount; init_i += 1) {
        libCore_gv_dataMountsMountData[init_i].lv_mountModel = "CyberWolf";
        libCore_gv_dataMountsMountData[init_i].lv_mountModelScale = 1.0;
        libCore_gv_dataMountsMountData[init_i].lv_mountModelWalkAnimMoveSpeed = 1.0;
        libCore_gv_dataMountsMountData[init_i].lv_mountPoseAnimGroup = "Ride";
        for (init_i1 = 0; init_i1 <= libCore_gv_dataMountsMaxActorMessageCount; init_i1 += 1) {
            libCore_gv_dataMountsMountData[init_i].lv_actorMessageArray[init_i1] = "";
        }
        libCore_gv_dataMountsMountData[init_i].lv_category = "";
    }
    libCore_gv_allHeroPlayersPlusObserver = PlayerGroupEmpty();
    libCore_gv_activeHumanPlayers = PlayerGroupEmpty();
    libCore_gv_nPCPlayers = PlayerGroupEmpty();
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libCore_gv_playerGroupFromPlayer[init_i] = PlayerGroupEmpty();
    }
    libCore_gv_bALCancelDelay = 1.5;
    libCore_gv_bALHeroKillCreditTimeWindow = 5.0;
    for (init_i = 0; init_i <= libCore_gv_dataSkinsMaxSkinCount; init_i += 1) {
        for (init_i1 = 0; init_i1 <= libCore_gv_dataSkinsMaxActorMessageCount; init_i1 += 1) {
            libCore_gv_dataSkinsSkinData[init_i].lv_actorMessageArray[init_i1] = "";
        }
        for (init_i1 = 0; init_i1 <= libCore_gv_data_MaxSkinAllowedMountCategories_C; init_i1 += 1) {
            libCore_gv_dataSkinsSkinData[init_i].lv_allowedMountCategories[init_i1] = "";
        }
    }
    for (init_i = 0; init_i <= libCore_gv_talents_MaxTalentEntryCount_C; init_i += 1) {
        for (init_i2 = 0; init_i2 <= libCore_gv_talents_MaxModifedAbilitiesPerTalent_C; init_i2 += 1) {
            for (init_j2 = 0; init_j2 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j2 += 1) {
                libCore_gv_talents_TalentData[init_i].lv_abilityModificationData.lv_changeType[init_i2][init_j2] = c_talentModificationNone;
            }
        }
        for (init_i2 = 0; init_i2 <= libCore_gv_talents_MaxModifedAbilitiesPerTalent_C; init_i2 += 1) {
            for (init_j2 = 0; init_j2 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j2 += 1) {
                libCore_gv_talents_TalentData[init_i].lv_abilityModificationData.lv_catalog[init_i2][init_j2] = c_gameCatalogUnit;
            }
        }
        for (init_i2 = 0; init_i2 <= libCore_gv_talents_MaxModifedAbilitiesPerTalent_C; init_i2 += 1) {
            for (init_j2 = 0; init_j2 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j2 += 1) {
                libCore_gv_talents_TalentData[init_i].lv_abilityModificationData.lv_entry[init_i2][init_j2] = "";
            }
        }
        for (init_i2 = 0; init_i2 <= libCore_gv_talents_MaxModifedAbilitiesPerTalent_C; init_i2 += 1) {
            for (init_j2 = 0; init_j2 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j2 += 1) {
                libCore_gv_talents_TalentData[init_i].lv_abilityModificationData.lv_field[init_i2][init_j2] = "";
            }
        }
        for (init_i2 = 0; init_i2 <= libCore_gv_talents_MaxModifedAbilitiesPerTalent_C; init_i2 += 1) {
            for (init_j2 = 0; init_j2 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j2 += 1) {
                libCore_gv_talents_TalentData[init_i].lv_abilityModificationData.lv_stringReplacementValue[init_i2][init_j2] = "";
            }
        }
        for (init_i2 = 0; init_i2 <= libCore_gv_talents_MaxModifedAbilitiesPerTalent_C; init_i2 += 1) {
            for (init_j2 = 0; init_j2 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j2 += 1) {
                libCore_gv_talents_TalentData[init_i].lv_abilityModificationData.lv_catalogReplaceFrom[init_i2][init_j2] = "";
            }
        }
        for (init_i2 = 0; init_i2 <= libCore_gv_talents_MaxModifedAbilitiesPerTalent_C; init_i2 += 1) {
            for (init_j2 = 0; init_j2 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j2 += 1) {
                libCore_gv_talents_TalentData[init_i].lv_abilityModificationData.lv_catalogChangeTo[init_i2][init_j2] = "";
            }
        }
    }
    libCore_gv_talents_RelentlessCCReduction20_C = 0.2;
    libCore_gv_talents_RelentlessCCReduction40_C = 0.4;
    libCore_gv_talents_RelentlessCCReduction60_C = 0.6;
    libCore_gv_talents_RelentlessCCReduction75_C = 0.75;
    libCore_gv_talents_ResurganceOfTheStormDeathTime_C = 5.0;
    libCore_gv_talents_FuryOfTheStormBounceDamagePercent_C = 0.5;
    libCore_gv_metagame_DefaultRotationSlots_C = CatalogFieldValueGetAsInt(c_gameCatalogConfig, "HeroList", "FreeToPlayHeroBaseCount", c_playerAny);
    libCore_gv_zS_SendTransmissionCampaignPortrait = c_invalidPortraitId;
    libCore_gv_zS_SendTransmissionCampaignPlayingTick = 3;
    libCore_gv_zS_SendTransmissionCampaignChatBubbleOn = true;
}

// Presets
string libCore_ge_AnnouncerVOEvents_Ident (int lp_val) {
         if (lp_val == libCore_ge_AnnouncerVOEvents_Null) { return "Null"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_GetReadyForBattle) { return "GetReadyForBattle"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BattleStartingIn) { return "BattleStartingIn"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown10) { return "Countdown10"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown5) { return "Countdown5"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown4) { return "Countdown4"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown3) { return "Countdown3"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown2) { return "Countdown2"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Countdown1) { return "Countdown1"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_LetTheBattleBegin) { return "LetTheBattleBegin"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_YouHaveBeenKilled) { return "YouHaveBeenKilled"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AllyKilled) { return "AllyKilled"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EnemyKilledNonparticipants) { return "EnemyKilledNonparticipants"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EnemyKilledParticipants) { return "EnemyKilledParticipants"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_HeroKilledObserver) { return "HeroKilledObserver"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_DoubleKill) { return "DoubleKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_TripleKill) { return "TripleKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_QuadraKill) { return "QuadraKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_PentaKill) { return "PentaKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_TeamKill) { return "TeamKill"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamKilled) { return "BlueTeamKilled"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamKilled) { return "RedTeamKilled"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AllyFirstBlood) { return "AllyFirstBlood"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EnemyFirstBlood) { return "EnemyFirstBlood"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamFirstBlood) { return "BlueTeamFirstBlood"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamFirstBlood) { return "RedTeamFirstBlood"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeStart) { return "KillingSpreeStart"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeEndYou) { return "KillingSpreeEndYou"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade1Mayhem) { return "KillingSpreeUpgrade1Mayhem"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade2Untouchable) { return "KillingSpreeUpgrade2Untouchable"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade3HeroOfTheStorm) { return "KillingSpreeUpgrade3HeroOfTheStorm"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade4AllStarDEP) { return "KillingSpreeUpgrade4AllStarDEP"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_APlayerHasLeftTheGame) { return "APlayerHasLeftTheGame"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_APlayerHasRejoinedTheGame) { return "APlayerHasRejoinedTheGame"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_GravestoneRevive) { return "GravestoneRevive"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AlliedOutpostDestroyed) { return "AlliedOutpostDestroyed"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EnemyOutpostDestroyed) { return "EnemyOutpostDestroyed"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AlliedKeepDestroyed) { return "AlliedKeepDestroyed"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EnemyKeepDestroyed) { return "EnemyKeepDestroyed"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamDestroysTown) { return "BlueTeamDestroysTown"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamDestroysTown) { return "RedTeamDestroysTown"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AlliedCoreUnderAttack) { return "AlliedCoreUnderAttack"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamCoreUnderAttack) { return "BlueTeamCoreUnderAttack"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamCoreUnderAttack) { return "RedTeamCoreUnderAttack"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Victory) { return "Victory"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_Defeat) { return "Defeat"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamWins) { return "BlueTeamWins"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamWins) { return "RedTeamWins"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_AlliesCaptureMercCamp) { return "AlliesCaptureMercCamp"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EnemiesCaptureMercCamp) { return "EnemiesCaptureMercCamp"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_BlueTeamCapturesMercCamp) { return "BlueTeamCapturesMercCamp"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_RedTeamCapturesMercCamp) { return "RedTeamCapturesMercCamp"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_LevelUp) { return "LevelUp"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_TalentUnlocked) { return "TalentUnlocked"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_EventCount) { return "EventCount"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_GamePaused) { return "GamePaused"; }
    else if (lp_val == libCore_ge_AnnouncerVOEvents_GameResumed) { return "GameResumed"; }
    return null;
}

string libCore_ge_SegregationTriggerTypes_Ident (int lp_val) {
         if (lp_val == libCore_ge_SegregationTriggerTypes_DefenderAIIssueOrdersToCreep) { return "DefenderAIIssueOrdersToCreep"; }
    else if (lp_val == libCore_ge_SegregationTriggerTypes_HeroAIInitializeHeroTierData) { return "HeroAIInitializeHeroTierData"; }
    else if (lp_val == libCore_ge_SegregationTriggerTypes_HeroAIInitAbilities) { return "HeroAIInitAbilities"; }
    else if (lp_val == libCore_ge_SegregationTriggerTypes_HeroAIEnableAIForPlayer) { return "HeroAIEnableAIForPlayer"; }
    else if (lp_val == libCore_ge_SegregationTriggerTypes_HeroAIDebuggingUpdateStatus) { return "HeroAIDebuggingUpdateStatus"; }
    else if (lp_val == libCore_ge_SegregationTriggerTypes_HeroAIMapMechanicPinged) { return "HeroAIMapMechanicPinged"; }
    else if (lp_val == libCore_ge_SegregationTriggerTypes_HeroAIFollowerNearbyMapObjective) { return "HeroAIFollowerNearbyMapObjective"; }
    return null;
}

// Functions
int libCore_gf_CustomValueIndex (int lp_indexName) {
    // Implementation
    return (lp_indexName);
}

void libCore_gf_DataAnnouncerVOMapDataField (int lp_event, string lp_arrayIndexName) {
    // Implementation
    libCore_gv_dataAnnouncerVODataFieldMap[(lp_event)] = lp_arrayIndexName;
}

void libCore_gf_DataInitializeAnnouncerVOPackSingle (int lp_iDPack, string lp_stringID, text lp_name) {
    int autoEFD0FA2B_ae;
    int autoEFD0FA2B_ai;

    // Variable Declarations
    int lv_itEvent;
    string lv_dataFieldMapString;
    string lv_soundID;

    // Variable Initialization
    lv_dataFieldMapString = "";

    // Implementation
    libCore_gv_dataAnnouncerVOPacks[lp_iDPack].lv_name = lp_name;
    libCore_gv_dataAnnouncerVOPacks[lp_iDPack].lv_stringName = lp_stringID;
    autoEFD0FA2B_ae = libCore_gv_dataAnnouncerVOMaxNumberOfAnnouncerEvents;
    autoEFD0FA2B_ai = 1;
    lv_itEvent = 1;
    for ( ; ( (autoEFD0FA2B_ai >= 0 && lv_itEvent <= autoEFD0FA2B_ae) || (autoEFD0FA2B_ai <= 0 && lv_itEvent >= autoEFD0FA2B_ae) ) ; lv_itEvent += autoEFD0FA2B_ai ) {
        lv_dataFieldMapString = libCore_gv_dataAnnouncerVODataFieldMap[lv_itEvent];
        if ((lv_dataFieldMapString == "")) {
            continue;
        }
        else {
        }
        lv_soundID = ((libCore_gv_dataAnnouncerVOPacks[lp_iDPack].lv_stringName + "_" + lv_dataFieldMapString));
        if ((CatalogEntryIsValid(c_gameCatalogSound, lv_soundID) == true)) {
            libCore_gv_dataAnnouncerVOPacks[lp_iDPack].lv_soundLinkArray[lv_itEvent] = lv_soundID;
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Core_BC008C7D", "A", StringToText((lv_soundID)));
            TextExpressionSetToken("Param/Expression/lib_Core_BC008C7D", "B", StringToText(lp_stringID));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_BC008C7D"), false);
        }
    }
}

void libCore_gf_DataAnnouncerVOSetAnnouncerPackForPlayerGroup (playergroup lp_playerGroup, int lp_announcerPack) {
    playergroup auto693BAA6F_g;
    int auto693BAA6F_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    auto693BAA6F_g = lp_playerGroup; 
    auto693BAA6F_p = 1;
    for ( ; auto693BAA6F_p <= PlayerGroupCount(auto693BAA6F_g) ; auto693BAA6F_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto693BAA6F_g, auto693BAA6F_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto693BAA6F_g, auto693BAA6F_p);
        libGame_gv_players[lv_itPlayer].lv_selectedAnnouncerVOPack = lp_announcerPack;
    }
}

int libCore_gf_ArtifactsIndexFromArtifactLink (string lp_artifactLink) {
    int auto12478AFB_ae;

    // Variable Declarations
    int lv_itArtifact;

    // Variable Initialization

    // Implementation
    auto12478AFB_ae = libCore_gv_artifacts_ArtifactEntryCount;
    lv_itArtifact = 1;
    for ( ; lv_itArtifact <= auto12478AFB_ae ; lv_itArtifact += 1 ) {
        if ((libCore_gv_artifacts_ArtifactData[lv_itArtifact].lv_artifactCatalogLink == lp_artifactLink)) {
            return lv_itArtifact;
        }
        else {
        }
    }
    return 0;
}

string libCore_gf_ArtifactsArtifactLinkFromArtifactIndex (int lp_artifactIndex) {
    // Implementation
    return libCore_gv_artifacts_ArtifactData[lp_artifactIndex].lv_artifactCatalogLink;
}

int libCore_gf_ArtifactsRankOfSpecificArtifactForPlayer (string lp_artifact, int lp_player) {
    int auto157981AE_ae;
    int auto157981AE_ai;

    // Variable Declarations
    int lv_artifactIndex;
    int lv_itArtifactSlot;

    // Variable Initialization

    // Implementation
    lv_artifactIndex = libCore_gf_ArtifactsIndexFromArtifactLink(lp_artifact);
    if ((lv_artifactIndex > 0)) {
        auto157981AE_ae = libCore_gv_artifacts_MaxArtifactsPerPlayer_C;
        auto157981AE_ai = 1;
        lv_itArtifactSlot = 1;
        for ( ; ( (auto157981AE_ai >= 0 && lv_itArtifactSlot <= auto157981AE_ae) || (auto157981AE_ai <= 0 && lv_itArtifactSlot >= auto157981AE_ae) ) ; lv_itArtifactSlot += auto157981AE_ai ) {
            if ((libGame_gv_players[lp_player].lv_artifacts[lv_itArtifactSlot].lv_artifact == lp_artifact)) {
                return libGame_gv_players[lp_player].lv_artifacts[lv_itArtifactSlot].lv_rank;
            }
            else {
            }
        }
    }
    else {
    }
    return 0;
}

void libCore_gf_UpdateFaerieDragonAbilityStats (int lp_player, fixed lp_damage) {
    // Variable Declarations
    int lv_i;
    int lv_catalog;
    string lv_entryID;
    string lv_fieldPath;
    fixed lv_baseValue;
    fixed lv_newValue;
    fixed lv_weaponDamage;

    // Variable Initialization
    lv_catalog = c_gameCatalogUnit;
    lv_entryID = "";
    lv_fieldPath = "";

    // Implementation
    lv_catalog = c_gameCatalogEffect;
    lv_entryID = "FaerieDustAllyHeal";
    lv_fieldPath = "VitalArray[0].Change";
    lv_weaponDamage = libCore_gf_GetWeaponDamageForUnit(libGame_gv_players[lp_player].lv_heroUnit);
    lv_newValue = (lv_weaponDamage * libCore_gv_bALFaerieDragonFaerieDustHealPercentage);
    CatalogFieldValueSet(lv_catalog, (lv_entryID), (lv_fieldPath), lp_player, FixedToString(lv_newValue, 2));
}

void libCore_gf_UpdateTassadarAbilityStats (int lp_player) {
    // Variable Declarations
    int lv_i;
    int lv_catalog;
    string lv_entryID;
    string lv_fieldPath;
    fixed lv_baseValue;
    fixed lv_newValue;
    fixed lv_baseRate;
    fixed lv_newRate;
    fixed lv_mod;

    // Variable Initialization
    lv_catalog = c_gameCatalogUnit;
    lv_entryID = "";
    lv_fieldPath = "";
    lv_baseRate = 1.25;
    lv_mod = 1.0;

    // Implementation
    lv_catalog = c_gameCatalogEffect;
    lv_entryID = "DistortionBeamCreatePersistent";
    lv_fieldPath = "PeriodicPeriodArray[0]";
    lv_newRate = lv_baseRate;
    if ((UnitBehaviorCount(libGame_gv_players[lp_player].lv_heroUnit, "TalentBerserk") == 1)) {
        lv_mod += 0.4;
    }
    else {
    }
    if ((UnitBehaviorCount(libGame_gv_players[lp_player].lv_heroUnit, "FuryoftheStormCarryBehavior") == 1)) {
        lv_mod += 0.1;
    }
    else {
    }
    if ((UnitBehaviorCount(libGame_gv_players[lp_player].lv_heroUnit, "RaynorInspireAlly") == 1)) {
        lv_mod += 0.1;
    }
    else {
    }
    if ((UnitBehaviorCount(libGame_gv_players[lp_player].lv_heroUnit, "TalentBucketVampiricAssault") >= 1)) {
        lv_mod += 0.1;
    }
    else {
    }
    if ((UnitLevel(libGame_gv_players[lp_player].lv_heroUnit) >= 1)) {
        lv_mod += (UnitLevel(libGame_gv_players[lp_player].lv_heroUnit) * 0.0224);
    }
    else {
    }
    lv_newRate = (lv_baseRate / lv_mod);
    CatalogFieldValueSet(lv_catalog, (lv_entryID), (lv_fieldPath), lp_player, FixedToString(lv_newRate, 2));
}

int libCore_gf_DataHeroesExistingTalentButtonIndexForColumnAndTier (int lp_heroIndex, int lp_tier, int lp_column) {
    int autoFC9DB477_ae;
    int autoFC9DB477_ai;

    // Variable Declarations
    int lv_itTalentButton;

    // Variable Initialization

    // Implementation
    autoFC9DB477_ae = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentCount;
    autoFC9DB477_ai = 1;
    lv_itTalentButton = 1;
    for ( ; ( (autoFC9DB477_ai >= 0 && lv_itTalentButton <= autoFC9DB477_ae) || (autoFC9DB477_ai <= 0 && lv_itTalentButton >= autoFC9DB477_ae) ) ; lv_itTalentButton += autoFC9DB477_ai ) {
        if ((libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentBucket[lv_itTalentButton].lv_tier == lp_tier) && (libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentBucket[lv_itTalentButton].lv_column == lp_column)) {
            return lv_itTalentButton;
        }
        else {
        }
    }
    return 0;
}

void libCore_gf_DataHeroesAddSkinPlusVariationsToHero (int lp_heroIndex, string lp_skinLink) {
    int auto5ED658DB_ae;
    int auto5ED658DB_ai;

    // Variable Declarations
    int lv_itVariation;

    // Variable Initialization

    // Implementation
    libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_skinCount += 1;
    if ((libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_skinCount > libCore_gv_heroes_MaxSkinsPerHero_C)) {
        libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_skinCount -= 1;
        TextExpressionSetToken("Param/Expression/lib_Core_C791D4F7", "A", StringToText((libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_heroCatalogLink)));
        TextExpressionSetToken("Param/Expression/lib_Core_C791D4F7", "B", IntToText(libCore_gv_heroes_MaxSkinsPerHero_C));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_C791D4F7"), true);
        return ;
    }
    else {
    }
    libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_skinArray[libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_skinCount] = lp_skinLink;
    auto5ED658DB_ae = (CatalogFieldValueCount(c_gameCatalogSkin, lp_skinLink, "VariationArray", c_playerAny) - 1);
    auto5ED658DB_ai = 1;
    lv_itVariation = 0;
    for ( ; ( (auto5ED658DB_ai >= 0 && lv_itVariation <= auto5ED658DB_ae) || (auto5ED658DB_ai <= 0 && lv_itVariation >= auto5ED658DB_ae) ) ; lv_itVariation += auto5ED658DB_ai ) {
        libCore_gf_DataHeroesAddSkinPlusVariationsToHero(lp_heroIndex, (CatalogFieldValueGet(c_gameCatalogSkin, lp_skinLink, "VariationArray[" + IntToString(lv_itVariation) + "]", c_playerAny)));
    }
}

void libCore_gf_DataHeroesRemoveButtonFromTalentToButtonMapping (int lp_heroIndex, int lp_talentButtonIndex) {
    int auto6C4C0DDE_ae;
    int auto6C4C0DDE_ai;

    // Variable Declarations
    int lv_itTalent;

    // Variable Initialization

    // Implementation
    auto6C4C0DDE_ae = libCore_gv_talents_MaxTalentEntryCount_C;
    auto6C4C0DDE_ai = 1;
    lv_itTalent = 1;
    for ( ; ( (auto6C4C0DDE_ai >= 0 && lv_itTalent <= auto6C4C0DDE_ae) || (auto6C4C0DDE_ai <= 0 && lv_itTalent >= auto6C4C0DDE_ae) ) ; lv_itTalent += auto6C4C0DDE_ai ) {
        if ((libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentToButtonMap[lv_itTalent] == lp_talentButtonIndex)) {
            libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentToButtonMap[lv_itTalent] = 0;
        }
        else {
        }
    }
}

void libCore_gf_DataHeroesRemoveTalentFromHeroTalentArray (int lp_heroIndex, int lp_talentButtonIndex) {
    int autoA35E2AAF_ae;
    int autoA35E2AAF_ai;

    // Variable Declarations
    int lv_itTalentButton;
    int lv_itMutualExclusive;
    int lv_itPrerequisite;

    // Variable Initialization

    // Implementation
    autoA35E2AAF_ae = (libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentCount - 1);
    autoA35E2AAF_ai = 1;
    lv_itTalentButton = lp_talentButtonIndex;
    for ( ; ( (autoA35E2AAF_ai >= 0 && lv_itTalentButton <= autoA35E2AAF_ae) || (autoA35E2AAF_ai <= 0 && lv_itTalentButton >= autoA35E2AAF_ae) ) ; lv_itTalentButton += autoA35E2AAF_ai ) {
        libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentBucket[lv_itTalentButton].lv_talentIndex = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentBucket[(lv_itTalentButton + 1)].lv_column;
        libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentBucket[lv_itTalentButton].lv_talentIndex = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentBucket[(lv_itTalentButton + 1)].lv_column;
        libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentBucket[lv_itTalentButton].lv_talentIndex = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentBucket[(lv_itTalentButton + 1)].lv_column;
    }
    libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_talentCount -= 1;
}

void libCore_gf_DataHeroVOMapDataField (int lp_event, string lp_arrayIndexName) {
    // Implementation
    libCore_gv_dataHeroVODataFieldMap[(lp_event)] = ("VOArray[" + lp_arrayIndexName + "]");
}

void libCore_gf_DataHeroVOReloadHeroVODataForHero (int lp_heroIndex, int lp_player) {
    int auto6C6F056D_ae;
    int auto6C6F056D_ai;
    int auto25AB1093_ae;
    int auto25AB1093_ai;
    int autoC11FF9D7_ae;
    int autoC11FF9D7_ai;

    // Variable Declarations
    int lv_eventindex;
    int lv_lineindex;
    string lv_heroCatalogLink;
    string lv_dataField;

    // Variable Initialization
    lv_dataField = "";

    // Implementation
    lv_heroCatalogLink = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_heroCatalogLink;
    if ((lv_heroCatalogLink != null)) {
        auto6C6F056D_ae = libCore_gv_dataHeroVOMaxNumberOfHeroVOEvents;
        auto6C6F056D_ai = 1;
        lv_eventindex = 1;
        for ( ; ( (auto6C6F056D_ai >= 0 && lv_eventindex <= auto6C6F056D_ae) || (auto6C6F056D_ai <= 0 && lv_eventindex >= auto6C6F056D_ae) ) ; lv_eventindex += auto6C6F056D_ai ) {
            lv_dataField = libCore_gv_dataHeroVODataFieldMap[lv_eventindex];
            if ((lv_dataField != "")) {
                libCore_gv_dataHeroVO[lp_heroIndex][lp_player].lv_vOEventLines[lv_eventindex] = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroCatalogLink, lv_dataField, lp_player));
            }
            else {
            }
        }
        auto25AB1093_ae = CatalogFieldValueCount(c_gameCatalogHero, lv_heroCatalogLink, "SpecificKillVOArray", c_playerAny);
        auto25AB1093_ai = 1;
        lv_lineindex = 1;
        for ( ; ( (auto25AB1093_ai >= 0 && lv_lineindex <= auto25AB1093_ae) || (auto25AB1093_ai <= 0 && lv_lineindex >= auto25AB1093_ae) ) ; lv_lineindex += auto25AB1093_ai ) {
            libCore_gv_dataHeroVO[lp_heroIndex][lp_player].lv_specificHeroTakedownLines[libCore_gf_GetHeroIndexForUnitType((CatalogFieldValueGet(c_gameCatalogHero, lv_heroCatalogLink, "SpecificKillVOArray[" + IntToString((lv_lineindex - 1)) + "].Target", lp_player)))] = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroCatalogLink, "SpecificKillVOArray[" + IntToString((lv_lineindex - 1)) + "].Sound", lp_player));
        }
        autoC11FF9D7_ae = CatalogFieldValueCount(c_gameCatalogHero, lv_heroCatalogLink, "SpecificIntroVOArray", c_playerAny);
        autoC11FF9D7_ai = 1;
        lv_lineindex = 1;
        for ( ; ( (autoC11FF9D7_ai >= 0 && lv_lineindex <= autoC11FF9D7_ae) || (autoC11FF9D7_ai <= 0 && lv_lineindex >= autoC11FF9D7_ae) ) ; lv_lineindex += autoC11FF9D7_ai ) {
            libCore_gv_dataHeroVO[lp_heroIndex][lp_player].lv_specificHeroIntroQuestionLines[libCore_gf_GetHeroIndexForUnitType((CatalogFieldValueGet(c_gameCatalogHero, lv_heroCatalogLink, "SpecificIntroVOArray[" + IntToString((lv_lineindex - 1)) + "].Target", lp_player)))] = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroCatalogLink, "SpecificIntroVOArray[" + IntToString((lv_lineindex - 1)) + "].Question", lp_player));
            libCore_gv_dataHeroVO[lp_heroIndex][lp_player].lv_specificHeroIntroResponseLines[libCore_gf_GetHeroIndexForUnitType((CatalogFieldValueGet(c_gameCatalogHero, lv_heroCatalogLink, "SpecificIntroVOArray[" + IntToString((lv_lineindex - 1)) + "].Target", lp_player)))] = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroCatalogLink, "SpecificIntroVOArray[" + IntToString((lv_lineindex - 1)) + "].Response", lp_player));
        }
    }
    else {
    }
}

string libCore_gf_DataMinionUnitTypeFromPreset (int lp_type) {
    // Variable Declarations
    string lv_spawnUnitType;

    // Variable Initialization

    // Implementation
    return libCore_gv_dataMinionData[(lp_type)].lv_unitType;
}

void libCore_gf_DataInitializeScalingDataForMinion (string lp_unitType, int lp_minionType, string lp_scalingBehavior) {
    int auto111C6645_ae;
    int auto111C6645_ai;

    // Variable Declarations
    int lv_itRank;
    int lv_minionTypeIndex;
    int lv_totalXPBuffAmount;

    // Variable Initialization

    // Implementation
    libCore_gv_dataMinionData[(lp_minionType)].lv_unitType = lp_unitType;
    lv_minionTypeIndex = (lp_minionType);
    libCore_gv_dataMinionData[lv_minionTypeIndex].lv_numberOfScalingTicks = (CatalogFieldValueCount(c_gameCatalogBehavior, lp_scalingBehavior, "VeterancyLevelArray", c_playerAny) - 1);
    auto111C6645_ae = libCore_gv_dataMinionData[lv_minionTypeIndex].lv_numberOfScalingTicks;
    auto111C6645_ai = 1;
    lv_itRank = 1;
    for ( ; ( (auto111C6645_ai >= 0 && lv_itRank <= auto111C6645_ae) || (auto111C6645_ai <= 0 && lv_itRank >= auto111C6645_ae) ) ; lv_itRank += auto111C6645_ai ) {
        lv_totalXPBuffAmount += StringToInt(CatalogFieldValueGet(c_gameCatalogBehavior, lp_scalingBehavior, "VeterancyLevelArray[" + IntToString(lv_itRank) + "].Modification.Food", c_playerAny));
        libCore_gv_dataMinionData[lv_minionTypeIndex].lv_xPBuffAmount[lv_itRank] = lv_totalXPBuffAmount;
    }
}

int libCore_gf_DataMountGetMountIndexFromMountLink (string lp_mountLink) {
    int autoFA6CA96E_ae;
    int autoFA6CA96E_ai;

    // Variable Declarations
    int lv_itMount;

    // Variable Initialization

    // Implementation
    autoFA6CA96E_ae = libCore_gv_dataMountsMountCount;
    autoFA6CA96E_ai = 1;
    lv_itMount = 1;
    for ( ; ( (autoFA6CA96E_ai >= 0 && lv_itMount <= autoFA6CA96E_ae) || (autoFA6CA96E_ai <= 0 && lv_itMount >= autoFA6CA96E_ae) ) ; lv_itMount += autoFA6CA96E_ai ) {
        if ((lp_mountLink == libCore_gv_dataMountsMountData[lv_itMount].lv_mountID)) {
            return lv_itMount;
        }
        else {
        }
    }
    return 0;
}

bool libCore_gf_DataMountMountIsValidForHeroSkin (int lp_heroIndex, int lp_skinIndex, int lp_mountIndex) {
    int auto950A4F9B_ae;
    int auto950A4F9B_ai;
    int auto3191BE20_ae;
    int auto3191BE20_ai;

    // Variable Declarations
    int lv_itCategory;
    string lv_mountCategory;

    // Variable Initialization
    lv_mountCategory = "";

    // Implementation
    lv_mountCategory = libCore_gv_dataMountsMountData[lp_mountIndex].lv_category;
    auto950A4F9B_ae = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_allowedMountCategoryCount;
    auto950A4F9B_ai = 1;
    lv_itCategory = 1;
    for ( ; ( (auto950A4F9B_ai >= 0 && lv_itCategory <= auto950A4F9B_ae) || (auto950A4F9B_ai <= 0 && lv_itCategory >= auto950A4F9B_ae) ) ; lv_itCategory += auto950A4F9B_ai ) {
        if ((lv_mountCategory == libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_allowedMountCategories[lv_itCategory])) {
            return true;
        }
        else {
        }
    }
    auto3191BE20_ae = libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_allowedMountCategoryCount;
    auto3191BE20_ai = 1;
    lv_itCategory = 1;
    for ( ; ( (auto3191BE20_ai >= 0 && lv_itCategory <= auto3191BE20_ae) || (auto3191BE20_ai <= 0 && lv_itCategory >= auto3191BE20_ae) ) ; lv_itCategory += auto3191BE20_ai ) {
        if ((lv_mountCategory == libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_allowedMountCategories[lv_itCategory])) {
            return true;
        }
        else {
        }
    }
    return false;
}

void libCore_gf_DataMountsAddMountPlusVariationsToMountList (string lp_mountLink, fixed lp_mountModelScale, fixed lp_walkAnimMoveSpeed, string lp_poseAnimGroup) {
    int autoC48F836E_ae;
    int autoC48F836E_ai;
    int autoEADBEAC8_ae;
    int autoEADBEAC8_ai;
    int autoB5384E20_ae;
    int autoB5384E20_ai;

    // Variable Declarations
    int lv_itReward;
    int lv_itActorMessage;
    int lv_itVariation;
    int lv_requiredRewardCount;
    int lv_actorMessageCount;

    // Variable Initialization

    // Implementation
    libCore_gv_dataMountsMountCount += 1;
    if ((libCore_gv_dataMountsMountCount > libCore_gv_dataMountsMaxMountCount)) {
        libCore_gv_dataMountsMountCount -= 1;
        TextExpressionSetToken("Param/Expression/lib_Core_9A43904D", "A", IntToText(libCore_gv_dataMountsMaxMountCount));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_9A43904D"), true);
        return ;
    }
    else {
    }
    libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountModelScale = lp_mountModelScale;
    libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountModelWalkAnimMoveSpeed = lp_walkAnimMoveSpeed;
    libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountPoseAnimGroup = lp_poseAnimGroup;
    libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountID = lp_mountLink;
    libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_isFree = (CatalogFieldValueGetAsInt(c_gameCatalogMount, lp_mountLink, "Flags[FreePlay]", c_playerAny) == 1);
    libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountName = StringExternal(("Mount/Name/" + (lp_mountLink)));
    libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountModel = (CatalogFieldValueGet(c_gameCatalogMount, lp_mountLink, "Model", c_playerAny));
    libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_noAttachedMountModel = (CatalogFieldValueGetAsInt(c_gameCatalogMount, lp_mountLink, "Attached", c_playerAny) == 0);
    lv_requiredRewardCount = CatalogFieldValueCount(c_gameCatalogMount, lp_mountLink, "RequiredRewardArray", c_playerAny);
    if ((lv_requiredRewardCount > libCore_gv_data_MaxRequiredRewards_C)) {
        TextExpressionSetToken("Param/Expression/lib_Core_6C48F7A8", "A", StringToText((lp_mountLink)));
        TextExpressionSetToken("Param/Expression/lib_Core_6C48F7A8", "B", IntToText(libCore_gv_data_MaxRequiredRewards_C));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_6C48F7A8"), true);
        return ;
    }
    else {
    }
    libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_requiredRewardCount = lv_requiredRewardCount;
    autoC48F836E_ae = lv_requiredRewardCount;
    autoC48F836E_ai = 1;
    lv_itReward = 1;
    for ( ; ( (autoC48F836E_ai >= 0 && lv_itReward <= autoC48F836E_ae) || (autoC48F836E_ai <= 0 && lv_itReward >= autoC48F836E_ae) ) ; lv_itReward += autoC48F836E_ai ) {
        libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_requiredRewardArray[lv_itReward] = (CatalogFieldValueGet(c_gameCatalogMount, lp_mountLink, "RequiredRewardArray[" + IntToString((lv_itReward - 1)) + "]", c_playerAny));
    }
    lv_actorMessageCount = CatalogFieldValueCount(c_gameCatalogMount, lp_mountLink, "CreationActorMessageArray", c_playerAny);
    if ((lv_actorMessageCount > libCore_gv_dataMountsMaxActorMessageCount)) {
        TextExpressionSetToken("Param/Expression/lib_Core_E090B781", "A", StringToText((lp_mountLink)));
        TextExpressionSetToken("Param/Expression/lib_Core_E090B781", "B", IntToText(libCore_gv_dataMountsMaxActorMessageCount));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_E090B781"), true);
        return ;
    }
    else {
    }
    libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_actorMessageCount = lv_actorMessageCount;
    autoEADBEAC8_ae = lv_actorMessageCount;
    autoEADBEAC8_ai = 1;
    lv_itActorMessage = 1;
    for ( ; ( (autoEADBEAC8_ai >= 0 && lv_itActorMessage <= autoEADBEAC8_ae) || (autoEADBEAC8_ai <= 0 && lv_itActorMessage >= autoEADBEAC8_ae) ) ; lv_itActorMessage += autoEADBEAC8_ai ) {
        if ((CatalogFieldValueGetAsInt(c_gameCatalogMount, lp_mountLink, "CreationActorMessageArray[" + IntToString((lv_itActorMessage - 1)) + "].Context", c_playerAny) != (c_variationContextHeroCutscene))) {
            libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_actorMessageArray[lv_itActorMessage] = CatalogFieldValueGet(c_gameCatalogMount, lp_mountLink, "CreationActorMessageArray[" + IntToString((lv_itActorMessage - 1)) + "].Send", c_playerAny);
        }
        else {
        }
    }
    libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_mountSound = (CatalogFieldValueGet(c_gameCatalogMount, lp_mountLink, "VOArray[Mounted]", c_playerAny));
    libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_dismountSound = (CatalogFieldValueGet(c_gameCatalogMount, lp_mountLink, "VOArray[Dismounted]", c_playerAny));
    libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_loopingSound = (CatalogFieldValueGet(c_gameCatalogMount, lp_mountLink, "VOArray[Looping]", c_playerAny));
    libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_movingSound = (CatalogFieldValueGet(c_gameCatalogMount, lp_mountLink, "VOArray[Moving]", c_playerAny));
    libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_stationarySound = (CatalogFieldValueGet(c_gameCatalogMount, lp_mountLink, "VOArray[Stationary]", c_playerAny));
    libCore_gv_dataMountsMountData[libCore_gv_dataMountsMountCount].lv_category = CatalogFieldValueGet(c_gameCatalogMount, lp_mountLink, "MountCategory", c_playerAny);
    autoB5384E20_ae = (CatalogFieldValueCount(c_gameCatalogMount, lp_mountLink, "VariationArray", c_playerAny) - 1);
    autoB5384E20_ai = 1;
    lv_itVariation = 0;
    for ( ; ( (autoB5384E20_ai >= 0 && lv_itVariation <= autoB5384E20_ae) || (autoB5384E20_ai <= 0 && lv_itVariation >= autoB5384E20_ae) ) ; lv_itVariation += autoB5384E20_ai ) {
        libCore_gf_DataMountsAddMountPlusVariationsToMountList((CatalogFieldValueGet(c_gameCatalogMount, lp_mountLink, "VariationArray[" + IntToString(lv_itVariation) + "]", c_playerAny)), lp_mountModelScale, lp_walkAnimMoveSpeed, lp_poseAnimGroup);
    }
}

void libCore_gf_SendMountActorMessagesToActor (int lp_mountIndex, actor lp_actor) {
    int auto3868F64B_ae;
    int auto3868F64B_ai;

    // Variable Declarations
    int lv_itActorMessage;

    // Variable Initialization

    // Implementation
    auto3868F64B_ae = libCore_gv_dataMountsMountData[lp_mountIndex].lv_actorMessageCount;
    auto3868F64B_ai = 1;
    lv_itActorMessage = 1;
    for ( ; ( (auto3868F64B_ai >= 0 && lv_itActorMessage <= auto3868F64B_ae) || (auto3868F64B_ai <= 0 && lv_itActorMessage >= auto3868F64B_ae) ) ; lv_itActorMessage += auto3868F64B_ai ) {
        ActorSend(lp_actor, (libCore_gv_dataMountsMountData[lp_mountIndex].lv_actorMessageArray[lv_itActorMessage]));
    }
}

fixed libCore_gf_HeroDeathTime (int lp_player, int lp_level) {
    // Variable Declarations
    fixed lv_deathTime;

    // Variable Initialization

    // Implementation
    lv_deathTime = libCore_gv_bALDeathTimes[lp_level];
    if ((libCore_gv_sYSDeathTimerCap > 0.0)) {
        lv_deathTime = MinF(lv_deathTime, libCore_gv_sYSDeathTimerCap);
    }
    else {
    }
    if ((lp_player == libCore_gv_cOMPUTER_Neutral)) {
        return lv_deathTime;
    }
    else {
    }
    if ((lp_player == 1) && (libCore_gv_sYSGameMode == libCore_ge_GameModes_Tutorial1)) {
        lv_deathTime = MinF(lv_deathTime, 15.0);
    }
    else if ((lp_player == 1) && (libCore_gv_sYSGameMode == libCore_ge_GameModes_Tutorial2)) {
        lv_deathTime = MinF(lv_deathTime, 15.0);
    }
    else if ((lp_player == 1) && (libStEx_gf_InTutorial03() == true)) {
        lv_deathTime = MinF(lv_deathTime, 20.0);
    }
    else if ((libStEx_gf_GameIsSinglePlayer() == true) && (libStEx_gf_InPracticeMode() == true) && (PlayerType(lp_player) == c_playerTypeUser)) {
        lv_deathTime = MinF(lv_deathTime, 30.0);
    }
    return lv_deathTime;
}

void libCore_gf_RegisterSegregationTrigger (int lp_type, trigger lp_trigger) {
    int autoC217AED1_ae;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    autoC217AED1_ae = libCore_gv_segregationTriggerCountPerType;
    lv_index = 1;
    for ( ; lv_index <= autoC217AED1_ae ; lv_index += 1 ) {
        if ((libCore_gv_segregationTriggers[(lp_type)][lv_index] == null)) {
            libCore_gv_segregationTriggers[(lp_type)][lv_index] = lp_trigger;
            return ;
        }
        else {
        }
    }
    TextExpressionSetToken("Param/Expression/lib_Core_FB85844B", "A", StringToText(libCore_ge_SegregationTriggerTypes_Ident(lp_type)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_FB85844B"), true);
}

void libCore_gf_CallRegisteredSegregationTriggers (int lp_type) {
    int autoD01536E6_ae;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    autoD01536E6_ae = libCore_gv_segregationTriggerCountPerType;
    lv_index = 1;
    for ( ; lv_index <= autoD01536E6_ae ; lv_index += 1 ) {
        if ((libCore_gv_segregationTriggers[(lp_type)][lv_index] != null)) {
            TriggerExecute(libCore_gv_segregationTriggers[(lp_type)][lv_index], true, true);
        }
        else {
        }
    }
    libCore_gv_segTriggerPlayer = 0;
    libCore_gv_segTriggerUnit = null;
    libCore_gv_segTriggerPoint = null;
    libCore_gv_segTriggerIndex = 0;
}

int libCore_gf_DataSkinsGetSkinIndexFromSkinLink (string lp_skinLink) {
    int auto07D3F43F_ae;
    int auto07D3F43F_ai;

    // Variable Declarations
    int lv_itSkin;

    // Variable Initialization

    // Implementation
    auto07D3F43F_ae = libCore_gv_dataSkinsSkinCount;
    auto07D3F43F_ai = 1;
    lv_itSkin = 1;
    for ( ; ( (auto07D3F43F_ai >= 0 && lv_itSkin <= auto07D3F43F_ae) || (auto07D3F43F_ai <= 0 && lv_itSkin >= auto07D3F43F_ae) ) ; lv_itSkin += auto07D3F43F_ai ) {
        if ((lp_skinLink == libCore_gv_dataSkinsSkinData[lv_itSkin].lv_skinID)) {
            return lv_itSkin;
        }
        else {
        }
    }
    return 0;
}

bool libCore_gf_DataSkinsIsSkinValidForHero (int lp_heroIndex, int lp_skinIndex) {
    int autoB7F44AA0_ae;
    int autoB7F44AA0_ai;

    // Variable Declarations
    int lv_itSkin;
    string lv_skinLink;

    // Variable Initialization

    // Implementation
    lv_skinLink = libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_skinID;
    autoB7F44AA0_ae = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_skinCount;
    autoB7F44AA0_ai = 1;
    lv_itSkin = 1;
    for ( ; ( (autoB7F44AA0_ai >= 0 && lv_itSkin <= autoB7F44AA0_ae) || (autoB7F44AA0_ai <= 0 && lv_itSkin >= autoB7F44AA0_ae) ) ; lv_itSkin += autoB7F44AA0_ai ) {
        if ((libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_skinArray[lv_itSkin] == lv_skinLink)) {
            return true;
        }
        else {
        }
    }
    return false;
}

void libCore_gf_SendSkinActorMessagesToUnit (string lp_skin, unit lp_unit) {
    int auto177D448F_ae;
    int auto177D448F_ai;

    // Variable Declarations
    int lv_itActorMessage;
    int lv_skinIndex;
    actor lv_unitActor;

    // Variable Initialization

    // Implementation
    lv_skinIndex = libCore_gf_DataSkinsGetSkinIndexFromSkinLink(lp_skin);
    lv_unitActor = libNtve_gf_MainActorofUnit(lp_unit);
    auto177D448F_ae = libCore_gv_dataSkinsSkinData[lv_skinIndex].lv_actorMessageCount;
    auto177D448F_ai = 1;
    lv_itActorMessage = 1;
    for ( ; ( (auto177D448F_ai >= 0 && lv_itActorMessage <= auto177D448F_ae) || (auto177D448F_ai <= 0 && lv_itActorMessage >= auto177D448F_ae) ) ; lv_itActorMessage += auto177D448F_ai ) {
        ActorSend(lv_unitActor, (libCore_gv_dataSkinsSkinData[lv_skinIndex].lv_actorMessageArray[lv_itActorMessage]));
    }
}

int libCore_gf_TalentsTalentIndexFromTalentLink (string lp_talentLink) {
    int autoBD6E9136_ae;

    // Variable Declarations
    int lv_itTalent;

    // Variable Initialization

    // Implementation
    autoBD6E9136_ae = libCore_gv_talents_TalentEntryCount;
    lv_itTalent = 1;
    for ( ; lv_itTalent <= autoBD6E9136_ae ; lv_itTalent += 1 ) {
        if ((libCore_gv_talents_TalentData[lv_itTalent].lv_talentCatalogLink == lp_talentLink)) {
            return lv_itTalent;
        }
        else {
        }
    }
    return 0;
}

int libCore_gf_TalentsTalentProfileIndexFromTalentProfileLink (string lp_talentProfileLink) {
    int auto3A7839A3_ae;
    int auto3A7839A3_ai;

    // Variable Declarations
    int lv_itTalentProfile;

    // Variable Initialization

    // Implementation
    auto3A7839A3_ae = libCore_gv_talents_TalentProfileCount;
    auto3A7839A3_ai = 1;
    lv_itTalentProfile = 1;
    for ( ; ( (auto3A7839A3_ai >= 0 && lv_itTalentProfile <= auto3A7839A3_ae) || (auto3A7839A3_ai <= 0 && lv_itTalentProfile >= auto3A7839A3_ae) ) ; lv_itTalentProfile += auto3A7839A3_ai ) {
        if ((libCore_gv_talents_TalentProfiles[lv_itTalentProfile].lv_talentProfileCatalogLink == lp_talentProfileLink)) {
            return lv_itTalentProfile;
        }
        else {
        }
    }
    return 0;
}

string libCore_gf_InitialXPDataTableName (string lp_unitType) {
    // Implementation
    return ("InitialXP: " + (lp_unitType));
}

fixed libCore_gf_DataXPXPForUnit (unit lp_unit) {
    // Variable Declarations
    int lv_itUnit;
    fixed lv_initialXP;
    fixed lv_supplyXP;
    fixed lv_xPAmount;
    string lv_unitType;

    // Variable Initialization

    // Implementation
    lv_unitType = UnitGetType(lp_unit);
    lv_initialXP = DataTableGetInt(true, libCore_gf_InitialXPDataTableName(lv_unitType));
    lv_supplyXP = UnitGetCustomValue(lp_unit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_XPBuffAmount));
    if ((libSprt_gv_dEBUGXPTextEnabled == true)) {
        TextExpressionSetToken("Param/Expression/lib_Core_A66AE1A6", "A", StringExternal("Param/Value/lib_Core_B8BF50F7"));
        TextExpressionSetToken("Param/Expression/lib_Core_A66AE1A6", "B", FixedToText(lv_initialXP, c_fixedPrecisionAny));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_A66AE1A6"), true);
        TextExpressionSetToken("Param/Expression/lib_Core_63A747E0", "A", StringExternal("Param/Value/lib_Core_FE2CB34F"));
        TextExpressionSetToken("Param/Expression/lib_Core_63A747E0", "B", FixedToText(lv_supplyXP, c_fixedPrecisionAny));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_63A747E0"), true);
    }
    else {
    }
    lv_xPAmount += (lv_initialXP + lv_supplyXP);
    return lv_xPAmount;
}

int libCore_gf_DataXPLevelGapBetweenHeroes (int lp_awardPlayer, unit lp_deadUnit) {
    // Variable Declarations
    int lv_levelOfAwardPlayer;
    int lv_deadUnitOwner;
    int lv_levelOfDeadPlayer;

    // Variable Initialization

    // Implementation
    lv_levelOfAwardPlayer = UnitLevel(libGame_gv_players[lp_awardPlayer].lv_heroUnit);
    lv_deadUnitOwner = UnitGetOwner(lp_deadUnit);
    if ((lv_deadUnitOwner > libCore_gv_bALMaxEnginePlayerCount)) {
        TextExpressionSetToken("Param/Expression/lib_Core_A1B06F31", "A", IntToText(lp_awardPlayer));
        TextExpressionSetToken("Param/Expression/lib_Core_A1B06F31", "B", UnitTypeGetName(UnitGetType(lp_deadUnit)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_A1B06F31"), true);
        return 0;
    }
    else {
    }
    lv_levelOfDeadPlayer = UnitLevel(libGame_gv_players[lv_deadUnitOwner].lv_heroUnit);
    return (lv_levelOfDeadPlayer - lv_levelOfAwardPlayer);
}

fixed libCore_gf_DataXPGetGranularBountyXPModifier (unit lp_deadHero, unit lp_playerHero) {
    // Variable Declarations
    int lv_deadHeroLevel;
    int lv_playerHeroLevel;
    int lv_playerTeam;
    int lv_enemyTeam;
    int lv_levelDifferenceInteger;
    fixed lv_levelDifferenceDeciPercentage;
    fixed lv_levelDifferenceCentiPercentageMod;
    bool lv_isNegative;
    fixed lv_experienceLevelBaseXP;
    fixed lv_experienceLevelTotalXP;
    int lv_experienceLevelBase1XP;
    fixed lv_levelDifferenceCentiPercentagePreCalc;
    fixed lv_levelDifferenceCentiPercentage;
    fixed lv_totalMod;
    fixed lv_xPMath;

    // Variable Initialization

    // Implementation
    if ((libMapM_gf_PrimaryMapMechanic() == libMapM_ge_MapMechanicType_None)) {
        return 1.0;
    }
    else {
    }
    if (((UnitGetOwner(lp_playerHero) < 1) || (UnitGetOwner(lp_playerHero) > libCore_gv_bALMaxPlayers))) {
        TextExpressionSetToken("Param/Expression/lib_Core_7701604A", "A", IntToText(UnitGetOwner(lp_playerHero)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_7701604A"), true);
        return 1.0;
    }
    else {
    }
    lv_deadHeroLevel = UnitXPGetCurrentLevel(libGame_gv_players[UnitGetOwner(lp_deadHero)].lv_heroUnit, "HeroDummyVeterancy");
    if ((libCore_gv_dataXPGranularBountyXPMathDisplayEnabled == true)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Core_A5C91335") + IntToText(lv_deadHeroLevel)), true);
    }
    else {
    }
    lv_playerHeroLevel = UnitXPGetCurrentLevel(libGame_gv_players[UnitGetOwner(lp_playerHero)].lv_heroUnit, "HeroDummyVeterancy");
    if ((libCore_gv_dataXPGranularBountyXPMathDisplayEnabled == true)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Core_1FD808F0") + IntToText(lv_playerHeroLevel)), true);
    }
    else {
    }
    lv_playerTeam = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_playerHero));
    lv_enemyTeam = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_deadHero));
    lv_levelDifferenceInteger = (libGame_gv_teams[lv_playerTeam].lv_teamLevel - libGame_gv_teams[lv_enemyTeam].lv_teamLevel);
    if ((libCore_gv_dataXPGranularBountyXPMathDisplayEnabled == true)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Core_0C5A7747") + IntToText(lv_levelDifferenceInteger)), true);
    }
    else {
    }
    if ((lv_levelDifferenceInteger == 0)) {
        return 1.0;
    }
    else if ((lv_levelDifferenceInteger == 1)) {
        lv_levelDifferenceDeciPercentage = -0.1;
        lv_levelDifferenceCentiPercentageMod = 1.0;
        lv_isNegative = true;
        lv_experienceLevelBaseXP = libCore_gf_GetTotalXPForLevel(lv_playerHeroLevel);
        lv_experienceLevelTotalXP = UnitXPGetCurrentXP(libGame_gv_players[UnitGetOwner(lp_playerHero)].lv_heroUnit, "HeroDummyVeterancy");
        lv_experienceLevelBase1XP = (lv_playerHeroLevel + 1);
    }
    else if ((lv_levelDifferenceInteger == -1)) {
        lv_levelDifferenceDeciPercentage = 0.1;
        lv_levelDifferenceCentiPercentageMod = 1.0;
        lv_experienceLevelBaseXP = libCore_gf_GetTotalXPForLevel(lv_deadHeroLevel);
        lv_experienceLevelTotalXP = UnitXPGetCurrentXP(libGame_gv_players[UnitGetOwner(lp_deadHero)].lv_heroUnit, "HeroDummyVeterancy");
        lv_experienceLevelBase1XP = (lv_deadHeroLevel + 1);
    }
    else if ((lv_levelDifferenceInteger == 2)) {
        lv_levelDifferenceDeciPercentage = -0.3;
        lv_levelDifferenceCentiPercentageMod = 2.0;
        lv_isNegative = true;
        lv_experienceLevelBaseXP = libCore_gf_GetTotalXPForLevel(lv_playerHeroLevel);
        lv_experienceLevelTotalXP = UnitXPGetCurrentXP(libGame_gv_players[UnitGetOwner(lp_playerHero)].lv_heroUnit, "HeroDummyVeterancy");
        lv_experienceLevelBase1XP = (lv_playerHeroLevel + 1);
    }
    else if ((lv_levelDifferenceInteger == -2)) {
        lv_levelDifferenceDeciPercentage = 0.3;
        lv_levelDifferenceCentiPercentageMod = 2.0;
        lv_experienceLevelBaseXP = libCore_gf_GetTotalXPForLevel(lv_deadHeroLevel);
        lv_experienceLevelTotalXP = UnitXPGetCurrentXP(libGame_gv_players[UnitGetOwner(lp_deadHero)].lv_heroUnit, "HeroDummyVeterancy");
        lv_experienceLevelBase1XP = (lv_deadHeroLevel + 1);
    }
    else if ((lv_levelDifferenceInteger == 3)) {
        lv_levelDifferenceDeciPercentage = -0.6;
        lv_levelDifferenceCentiPercentageMod = 3.0;
        lv_isNegative = true;
        lv_experienceLevelBaseXP = libCore_gf_GetTotalXPForLevel(lv_playerHeroLevel);
        lv_experienceLevelTotalXP = UnitXPGetCurrentXP(libGame_gv_players[UnitGetOwner(lp_playerHero)].lv_heroUnit, "HeroDummyVeterancy");
        lv_experienceLevelBase1XP = (lv_playerHeroLevel + 1);
    }
    else if ((lv_levelDifferenceInteger == -3)) {
        lv_levelDifferenceDeciPercentage = 0.6;
        lv_levelDifferenceCentiPercentageMod = 3.0;
        lv_experienceLevelBaseXP = libCore_gf_GetTotalXPForLevel(lv_deadHeroLevel);
        lv_experienceLevelTotalXP = UnitXPGetCurrentXP(libGame_gv_players[UnitGetOwner(lp_deadHero)].lv_heroUnit, "HeroDummyVeterancy");
        lv_experienceLevelBase1XP = (lv_deadHeroLevel + 1);
    }
    else if ((lv_levelDifferenceInteger >= 4)) {
        return 0.05;
    }
    else if ((lv_levelDifferenceInteger <= -4)) {
        return 2.0;
    }
    if ((libCore_gv_dataXPGranularBountyXPMathDisplayEnabled == true)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Core_97E78CDB") + FixedToText(lv_levelDifferenceDeciPercentage, c_fixedPrecisionAny)), true);
    }
    else {
    }
    lv_xPMath = (libCore_gf_GetTotalXPForLevel(lv_experienceLevelBase1XP) - lv_experienceLevelBaseXP);
    if ((lv_xPMath != 0.0)) {
        lv_levelDifferenceCentiPercentagePreCalc = ((lv_experienceLevelTotalXP - lv_experienceLevelBaseXP) / (libCore_gf_GetTotalXPForLevel(lv_experienceLevelBase1XP) - lv_experienceLevelBaseXP));
    }
    else {
        lv_levelDifferenceCentiPercentagePreCalc = 0.0;
    }
    if ((libCore_gv_dataXPGranularBountyXPMathDisplayEnabled == true)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Core_8BF5700F") + FixedToText(lv_levelDifferenceCentiPercentagePreCalc, c_fixedPrecisionAny)), true);
    }
    else {
    }
    lv_levelDifferenceCentiPercentage = (0.1 * (lv_levelDifferenceCentiPercentagePreCalc * lv_levelDifferenceCentiPercentageMod));
    if ((libCore_gv_dataXPGranularBountyXPMathDisplayEnabled == true)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Core_872F4F0E") + FixedToText(lv_levelDifferenceCentiPercentage, c_fixedPrecisionAny)), true);
    }
    else {
    }
    if ((lv_isNegative == true)) {
        lv_totalMod = (1.0 + (lv_levelDifferenceDeciPercentage - lv_levelDifferenceCentiPercentage));
    }
    else {
        lv_totalMod = (1.0 + (lv_levelDifferenceDeciPercentage + lv_levelDifferenceCentiPercentage));
    }
    if ((libCore_gv_dataXPGranularBountyXPMathDisplayEnabled == true)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Core_C63CD5C4") + FixedToText(lv_totalMod, c_fixedPrecisionAny)), true);
    }
    else {
    }
    return lv_totalMod;
}

fixed libCore_gf_DataXPGetMoreGranularBountyXPModifier (unit lp_deadHero, unit lp_playerHero) {
    int auto5F2F66E5_val;

    // Variable Declarations
    int lv_deadHeroWholeLevel;
    fixed lv_deadHeroLevelProgress;
    fixed lv_deadHeroLevelCombined;
    int lv_playerHeroWholeLevel;
    fixed lv_playerHeroLevelProgress;
    fixed lv_playerHeroLevelCombined;
    int lv_playerTeam;
    int lv_enemyTeam;
    fixed lv_xPMath;
    fixed lv_levelDifferenceReal;
    fixed lv_levelDifferenceTrunc;
    fixed lv_levelDifferenceModulo;
    bool lv_isNegative;
    fixed lv_experienceLevelBaseXP;
    fixed lv_experienceLevelTotalXP;
    int lv_experienceLevelBase1XP;
    fixed lv_levelDifferenceModuloPostCalc;
    fixed lv_truncMod;
    fixed lv_moduloMod;
    fixed lv_combinedMod;
    fixed lv_finalMod;
    bool lv_startingExperience;

    // Variable Initialization

    // Implementation
    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_TryMe)) {
        return 1.0;
    }
    else {
    }
    if (((libCore_gv_sYSGameMode == libCore_ge_GameModes_Tutorial1) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_Tutorial2) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_Tutorial3))) {
        lv_startingExperience = true;
    }
    else {
    }
    if (((UnitGetOwner(lp_playerHero) < 1) || (UnitGetOwner(lp_playerHero) > libCore_gv_bALMaxPlayers))) {
        if ((libCore_gv_sYSGameMode != libCore_ge_GameModes_Tutorial1)) {
            TextExpressionSetToken("Param/Expression/lib_Core_596ADF72", "A", IntToText(UnitGetOwner(lp_playerHero)));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_596ADF72"), true);
        }
        else {
        }
        return 1.0;
    }
    else {
    }
    lv_deadHeroWholeLevel = UnitXPGetCurrentLevel(libGame_gv_players[UnitGetOwner(lp_deadHero)].lv_heroUnit, "HeroDummyVeterancy");
    lv_experienceLevelBaseXP = libCore_gf_GetTotalXPForLevel(lv_deadHeroWholeLevel);
    lv_experienceLevelTotalXP = UnitXPGetCurrentXP(libGame_gv_players[UnitGetOwner(lp_deadHero)].lv_heroUnit, "HeroDummyVeterancy");
    lv_experienceLevelBase1XP = (lv_deadHeroWholeLevel + 1);
    lv_xPMath = (libCore_gf_GetTotalXPForLevel(lv_experienceLevelBase1XP) - lv_experienceLevelBaseXP);
    if ((lv_xPMath != 0.0)) {
        lv_deadHeroLevelProgress = ((lv_experienceLevelTotalXP - lv_experienceLevelBaseXP) / (libCore_gf_GetTotalXPForLevel(lv_experienceLevelBase1XP) - lv_experienceLevelBaseXP));
    }
    else {
        lv_deadHeroLevelProgress = 0.0;
    }
    lv_deadHeroLevelCombined = (IntToFixed(lv_deadHeroWholeLevel) + lv_deadHeroLevelProgress);
    if ((libCore_gv_dataXPGranularBountyXPMathDisplayEnabled == true)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Core_983035AE") + FixedToText(lv_deadHeroLevelCombined, 3)), true);
    }
    else {
    }
    lv_playerHeroWholeLevel = UnitXPGetCurrentLevel(libGame_gv_players[UnitGetOwner(lp_playerHero)].lv_heroUnit, "HeroDummyVeterancy");
    lv_experienceLevelBaseXP = libCore_gf_GetTotalXPForLevel(lv_playerHeroWholeLevel);
    lv_experienceLevelTotalXP = UnitXPGetCurrentXP(libGame_gv_players[UnitGetOwner(lp_playerHero)].lv_heroUnit, "HeroDummyVeterancy");
    lv_experienceLevelBase1XP = (lv_playerHeroWholeLevel + 1);
    lv_xPMath = (libCore_gf_GetTotalXPForLevel(lv_experienceLevelBase1XP) - lv_experienceLevelBaseXP);
    if ((lv_xPMath != 0.0)) {
        lv_playerHeroLevelProgress = ((lv_experienceLevelTotalXP - lv_experienceLevelBaseXP) / (libCore_gf_GetTotalXPForLevel(lv_experienceLevelBase1XP) - lv_experienceLevelBaseXP));
    }
    else {
        lv_playerHeroLevelProgress = 0.0;
    }
    lv_playerHeroLevelCombined = (IntToFixed(lv_playerHeroWholeLevel) + lv_playerHeroLevelProgress);
    if ((libCore_gv_dataXPGranularBountyXPMathDisplayEnabled == true)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Core_5631D66E") + FixedToText(lv_playerHeroLevelCombined, 3)), true);
    }
    else {
    }
    lv_playerTeam = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_playerHero));
    lv_enemyTeam = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_deadHero));
    lv_levelDifferenceReal = (lv_deadHeroLevelCombined - lv_playerHeroLevelCombined);
    if ((lv_startingExperience == true)) {
        auto5F2F66E5_val = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_deadHero));
        if (auto5F2F66E5_val == libGame_gv_teamChaosIndex_C) {
            if ((lv_levelDifferenceReal < 0.0)) {
                return 1.0;
            }
            else {
            }
        }
        else if (auto5F2F66E5_val == libGame_gv_teamOrderIndex_C) {
            if ((lv_levelDifferenceReal > 0.0)) {
                return 1.0;
            }
            else {
            }
        }
        else {
        }
    }
    else {
    }
    if ((libCore_gv_dataXPGranularBountyXPMathDisplayEnabled == true)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Core_E14A0605") + FixedToText(lv_levelDifferenceReal, 3)), true);
    }
    else {
    }
    if ((lv_levelDifferenceReal < 0.0)) {
        lv_isNegative = true;
    }
    else {
    }
    if ((lv_levelDifferenceReal > -1.0) && (lv_levelDifferenceReal < 1.0)) {
        lv_levelDifferenceTrunc = 0.0;
    }
    else {
        lv_levelDifferenceTrunc = AbsF(Trunc(lv_levelDifferenceReal));
    }
    lv_levelDifferenceModulo = AbsF(ModF(lv_levelDifferenceReal, 1.0));
    lv_levelDifferenceModuloPostCalc = (lv_levelDifferenceModulo * 0.1);
    if ((lv_levelDifferenceTrunc == 0.0)) {
        lv_truncMod = 0.0;
        lv_moduloMod = 1.0;
    }
    else if ((lv_levelDifferenceTrunc == 1)) {
        lv_truncMod = 0.1;
        lv_moduloMod = 2.0;
    }
    else if ((lv_levelDifferenceTrunc == 2.0)) {
        lv_truncMod = 0.3;
        lv_moduloMod = 3.0;
    }
    else if ((lv_levelDifferenceTrunc == 3.0)) {
        lv_truncMod = 0.6;
        lv_moduloMod = 4.0;
    }
    else if ((lv_levelDifferenceTrunc >= 4.0)) {
        lv_truncMod = 1.0;
        lv_moduloMod = 0.0;
    }
    if ((libCore_gv_dataXPGranularBountyXPMathDisplayEnabled == true)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Core_2FAE8198") + FixedToText(lv_truncMod, 3)), true);
    }
    else {
    }
    if ((libCore_gv_dataXPGranularBountyXPMathDisplayEnabled == true)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Core_91E4851A") + FixedToText((lv_levelDifferenceModuloPostCalc * lv_moduloMod), 3)), true);
    }
    else {
    }
    lv_combinedMod = (lv_truncMod + (lv_levelDifferenceModuloPostCalc * lv_moduloMod));
    if ((lv_isNegative == true)) {
        lv_combinedMod = (1.0 - lv_combinedMod);
    }
    else {
        lv_combinedMod = (lv_combinedMod + 1.0);
    }
    if ((libCore_gv_dataXPGranularBountyXPMathDisplayEnabled == true)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Core_68E57718") + FixedToText(lv_combinedMod, 3)), true);
    }
    else {
    }
    if ((lv_combinedMod >= 0.05) && (lv_combinedMod <= 2.0)) {
        lv_finalMod = lv_combinedMod;
    }
    else if ((lv_combinedMod > 2.0)) {
        lv_finalMod = 2.0;
    }
    else if ((lv_combinedMod < 0.05)) {
        lv_finalMod = 0.05;
    }
    if ((libCore_gv_dataXPGranularBountyXPMathDisplayEnabled == true)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Core_788F8763") + FixedToText(lv_finalMod, 3)), true);
    }
    else {
    }
    return lv_finalMod;
}

fixed libCore_gf_DataXPXPForHero (int lp_awardPlayer, unit lp_deadUnit) {
    // Variable Declarations
    unit lv_heroUnit;
    int lv_levelOfDeadPlayer;
    int lv_levelGap;
    fixed lv_baseXP;
    fixed lv_levelGapMultiplier;
    fixed lv_finalXP;

    // Variable Initialization
    lv_levelGapMultiplier = 1.0;

    // Implementation
    lv_heroUnit = libGame_gv_players[UnitGetOwner(lp_deadUnit)].lv_heroUnit;
    lv_levelOfDeadPlayer = UnitLevel(lv_heroUnit);
    lv_levelGap = libCore_gf_DataXPLevelGapBetweenHeroes(lp_awardPlayer, lv_heroUnit);
    if ((UnitHasBehavior2(lp_deadUnit, "LowValueHero") == true)) {
        lv_baseXP = (libCore_gv_data_XP_MurkyValuePerLevel_C * IntToFixed((lv_levelOfDeadPlayer + libCore_gv_data_XP_HeroLevelModifier_C)));
    }
    else {
        if ((UnitGetType(lp_deadUnit) == "MurkyRespawnEgg")) {
            lv_baseXP = (libCore_gv_data_XP_MurkyEggValuePerLevel_C * IntToFixed((lv_levelOfDeadPlayer + libCore_gv_data_XP_HeroLevelModifier_C)));
        }
        else {
            lv_baseXP = (libCore_gv_data_XP_HeroValuePerLevel_C * IntToFixed((lv_levelOfDeadPlayer + libCore_gv_data_XP_HeroLevelModifier_C)));
            if ((libCore_gv_dataXPGranularBountyXPMathDisplayEnabled == true)) {
                TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Core_C711DF88") + FixedToText(lv_baseXP, c_fixedPrecisionAny)), true);
            }
            else {
            }
        }
    }
    lv_finalXP = (lv_baseXP * libCore_gf_DataXPGetMoreGranularBountyXPModifier(lp_deadUnit, libGame_gv_players[lp_awardPlayer].lv_heroUnit));
    if ((libCore_gv_dataXPGranularBountyXPMathDisplayEnabled == true)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Core_17C272A5") + FixedToText(lv_finalXP, c_fixedPrecisionAny)), true);
    }
    else {
    }
    return lv_finalXP;
}

void libCore_gf_IncludeModInitialization (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libCore_gv_eventID_IncludeModInit_C);
}

void libCore_gf_SendEventIncludeModInitialization () {
    // Implementation
    TriggerSendEvent(libCore_gv_eventID_IncludeModInit_C);
}

bool libCore_gf_MetagameIsHeroInRotationForPlayer (int lp_player, int lp_heroIndex) {
    int auto1D5ED9EA_ae;
    int auto1D5ED9EA_ai;
    int autoC75C26EA_ae;
    int autoC75C26EA_ai;

    // Variable Declarations
    int lv_itRotationReward;
    int lv_itRotationSlot;
    int lv_heroRotationSlotsAvailable;

    // Variable Initialization

    // Implementation
    lv_heroRotationSlotsAvailable = libCore_gv_metagame_DefaultRotationSlots_C;
    auto1D5ED9EA_ae = (CatalogFieldValueCount(c_gameCatalogConfig, "HeroList", "FreeToPlayRewardArray", c_playerAny) - 1);
    auto1D5ED9EA_ai = 1;
    lv_itRotationReward = 0;
    for ( ; ( (auto1D5ED9EA_ai >= 0 && lv_itRotationReward <= auto1D5ED9EA_ae) || (auto1D5ED9EA_ai <= 0 && lv_itRotationReward >= auto1D5ED9EA_ae) ) ; lv_itRotationReward += auto1D5ED9EA_ai ) {
        if ((PlayerHasReward(lp_player, (CatalogFieldValueGet(c_gameCatalogConfig, "HeroList", "FreeToPlayRewardArray[" + IntToString(lv_itRotationReward) + "]", lp_player))) == true)) {
            lv_heroRotationSlotsAvailable += 1;
        }
        else {
        }
    }
    autoC75C26EA_ae = lv_heroRotationSlotsAvailable;
    autoC75C26EA_ai = 1;
    lv_itRotationSlot = 1;
    for ( ; ( (autoC75C26EA_ai >= 0 && lv_itRotationSlot <= autoC75C26EA_ae) || (autoC75C26EA_ai <= 0 && lv_itRotationSlot >= autoC75C26EA_ae) ) ; lv_itRotationSlot += autoC75C26EA_ai ) {
        if ((libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_heroCatalogLink == (CatalogFieldValueGet(c_gameCatalogConfig, "HeroList", "FreeToPlayHeroArray[" + IntToString((lv_itRotationSlot - 1)) + "]", c_playerAny)))) {
            return true;
        }
        else {
        }
    }
    return false;
}

bool libCore_gf_MetagameDoesPlayerHaveAccessToHero (int lp_player, int lp_heroIndex) {
    int autoD598ECC5_ae;
    int autoD598ECC5_ai;

    // Variable Declarations
    int lv_itRequiredReward;

    // Variable Initialization

    // Implementation
    if (((libCore_gv_sYSGameMode == libCore_ge_GameModes_TryMe) || (PlayerType(lp_player) == c_playerTypeComputer) || (libCore_gf_MetagameIsHeroInRotationForPlayer(lp_player, lp_heroIndex) == true) || ((GameIsPractice() == true) && ((libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_heroCatalogLink) == CatalogFieldValueGet(c_gameCatalogConfig, "HeroList", "FreeToPlayPracticeHero", c_playerAny))) || (libCore_gv_dEBUGGameIsOnline == false))) {
        return true;
    }
    else {
    }
    autoD598ECC5_ae = libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_requiredRewardCount;
    autoD598ECC5_ai = 1;
    lv_itRequiredReward = 1;
    for ( ; ( (autoD598ECC5_ai >= 0 && lv_itRequiredReward <= autoD598ECC5_ae) || (autoD598ECC5_ai <= 0 && lv_itRequiredReward >= autoD598ECC5_ae) ) ; lv_itRequiredReward += autoD598ECC5_ai ) {
        if ((PlayerHasReward(lp_player, libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_requiredRewardArray[lv_itRequiredReward]) == false)) {
            return false;
        }
        else {
        }
    }
    return true;
}

bool libCore_gf_MetagameDoesPlayerHaveAccessToSkin (int lp_player, int lp_skinIndex) {
    int autoA3B6E169_ae;
    int autoA3B6E169_ai;

    // Variable Declarations
    int lv_itRequiredReward;

    // Variable Initialization

    // Implementation
    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_TryMe)) {
        return true;
    }
    else {
    }
    autoA3B6E169_ae = libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_requiredRewardCount;
    autoA3B6E169_ai = 1;
    lv_itRequiredReward = 1;
    for ( ; ( (autoA3B6E169_ai >= 0 && lv_itRequiredReward <= autoA3B6E169_ae) || (autoA3B6E169_ai <= 0 && lv_itRequiredReward >= autoA3B6E169_ae) ) ; lv_itRequiredReward += autoA3B6E169_ai ) {
        if ((PlayerHasReward(lp_player, libCore_gv_dataSkinsSkinData[lp_skinIndex].lv_requiredRewardArray[lv_itRequiredReward]) == false)) {
            return false;
        }
        else {
        }
    }
    return true;
}

bool libCore_gf_MetagameDoesPlayerHaveAccessToMount (int lp_player, int lp_mountIndex) {
    int auto7AC9FAB6_ae;
    int auto7AC9FAB6_ai;

    // Variable Declarations
    int lv_itRequiredReward;

    // Variable Initialization

    // Implementation
    if (((libCore_gv_sYSGameMode == libCore_ge_GameModes_TryMe) || (libCore_gv_dataMountsMountData[lp_mountIndex].lv_isFree == true))) {
        return true;
    }
    else {
    }
    auto7AC9FAB6_ae = libCore_gv_dataMountsMountData[lp_mountIndex].lv_requiredRewardCount;
    auto7AC9FAB6_ai = 1;
    lv_itRequiredReward = 1;
    for ( ; ( (auto7AC9FAB6_ai >= 0 && lv_itRequiredReward <= auto7AC9FAB6_ae) || (auto7AC9FAB6_ai <= 0 && lv_itRequiredReward >= auto7AC9FAB6_ae) ) ; lv_itRequiredReward += auto7AC9FAB6_ai ) {
        if ((PlayerHasReward(lp_player, libCore_gv_dataMountsMountData[lp_mountIndex].lv_requiredRewardArray[lv_itRequiredReward]) == false)) {
            return false;
        }
        else {
        }
    }
    return true;
}

void libCore_gf_ExecuteEffectAtRandomPointsWithinCircle (string lp_effect, unit lp_casterUnit, int lp_numberOfExecutions, fixed lp_radius, point lp_centerPoint, bool lp_pointsMustBePathable) {
    int autoDCCBECF5_ae;
    int autoDCCBECF5_ai;
    int autoB5F7F78A_ae;
    int autoB5F7F78A_ai;

    // Variable Declarations
    const int lv_maxLoopCount = 50;
    int lv_i;
    region lv_region;
    point[51] lv_executionPoints;
    int lv_numberOfValidPoints;
    int lv_loopCount;
    bool lv_pointValid;
    point lv_testPoint;
    int lv_pointIndex;

    // Variable Initialization

    // Implementation
    lv_region = RegionCircle(lp_centerPoint, lp_radius);
    autoDCCBECF5_ae = lp_numberOfExecutions;
    autoDCCBECF5_ai = 1;
    lv_i = 1;
    for ( ; ( (autoDCCBECF5_ai >= 0 && lv_i <= autoDCCBECF5_ae) || (autoDCCBECF5_ai <= 0 && lv_i >= autoDCCBECF5_ae) ) ; lv_i += autoDCCBECF5_ai ) {
        lv_loopCount = 0;
        lv_pointValid = false;
        while ((lv_pointValid == false)) {
            lv_loopCount += 1;
            if ((lv_loopCount == lv_maxLoopCount)) {
                break;
            }
            else {
            }
            lv_testPoint = RegionRandomPoint(lv_region);
            if (((lp_pointsMustBePathable == false) || (PointPathingPassable(lv_testPoint) == true))) {
                lv_numberOfValidPoints += 1;
                lv_executionPoints[lv_numberOfValidPoints] = lv_testPoint;
                lv_pointValid = true;
            }
            else {
            }
        }
    }
    autoB5F7F78A_ae = lp_numberOfExecutions;
    autoB5F7F78A_ai = 1;
    lv_i = 1;
    for ( ; ( (autoB5F7F78A_ai >= 0 && lv_i <= autoB5F7F78A_ae) || (autoB5F7F78A_ai <= 0 && lv_i >= autoB5F7F78A_ae) ) ; lv_i += autoB5F7F78A_ai ) {
        lv_pointIndex = (ModI(lv_i, lv_numberOfValidPoints) + 1);
        UnitCreateEffectPoint(lp_casterUnit, lp_effect, lv_executionPoints[lv_pointIndex]);
    }
}

fixed libCore_gf_GetWeaponDamageForUnit (unit lp_unit) {
    int auto91D56C1A_ae;
    int auto91D56C1A_ai;

    // Variable Declarations
    int lv_itWeapon;

    // Variable Initialization

    // Implementation
    auto91D56C1A_ae = UnitWeaponCount(lp_unit);
    auto91D56C1A_ai = 1;
    lv_itWeapon = 1;
    for ( ; ( (auto91D56C1A_ai >= 0 && lv_itWeapon <= auto91D56C1A_ae) || (auto91D56C1A_ai <= 0 && lv_itWeapon >= auto91D56C1A_ae) ) ; lv_itWeapon += auto91D56C1A_ai ) {
        if ((UnitWeaponGet(lp_unit, lv_itWeapon) != null) && (UnitWeaponIsEnabled(lp_unit, lv_itWeapon) == true)) {
            return UnitWeaponDamage(lp_unit, lv_itWeapon, c_unitAttributeNone, false);
        }
        else {
        }
    }
    return 0.0;
}

fixed libCore_gf_GetWeaponAttackSpeedForUnit (unit lp_unit) {
    int auto3CC89007_ae;
    int auto3CC89007_ai;

    // Variable Declarations
    int lv_itWeapon;

    // Variable Initialization

    // Implementation
    auto3CC89007_ae = UnitWeaponCount(lp_unit);
    auto3CC89007_ai = 1;
    lv_itWeapon = 1;
    for ( ; ( (auto3CC89007_ai >= 0 && lv_itWeapon <= auto3CC89007_ae) || (auto3CC89007_ai <= 0 && lv_itWeapon >= auto3CC89007_ae) ) ; lv_itWeapon += auto3CC89007_ai ) {
        if ((UnitWeaponGet(lp_unit, lv_itWeapon) != null) && (UnitWeaponIsEnabled(lp_unit, lv_itWeapon) == true)) {
            return UnitWeaponSpeedMultiplier(lp_unit, lv_itWeapon);
        }
        else {
        }
    }
    return 0.0;
}

int libCore_gf_CalculateGameLoopsFromReal (fixed lp_duration) {
    // Variable Declarations
    fixed lv_durationRealMod;
    int lv_durationLoops;

    // Variable Initialization

    // Implementation
    lv_durationRealMod = ModF(lp_duration, 0.0625);
    lv_durationLoops = FixedToInt((lp_duration / 0.0625));
    if ((lv_durationRealMod > 0.0)) {
        lv_durationLoops += 1;
    }
    else {
    }
    return lv_durationLoops;
}

text libCore_gf_ConvertPointToText (point lp_point) {
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_Core_80E5CA2E", "A", FixedToText(PointGetX(lp_point), 2));
    TextExpressionSetToken("Param/Expression/lib_Core_80E5CA2E", "B", FixedToText(PointGetY(lp_point), 2));
    return TextExpressionAssemble("Param/Expression/lib_Core_80E5CA2E");
}

string libCore_gf_GetTimeStamp (fixed lp_time) {
    // Variable Declarations
    fixed lv_elapsedTime;
    fixed lv_minutesElapsed;
    fixed lv_secondsElapsed;
    fixed lv_loopsElapsed;
    string lv_tempString;
    string lv_timeElapsedString;

    // Variable Initialization
    lv_tempString = "";
    lv_timeElapsedString = "";

    // Implementation
    lv_elapsedTime = lp_time;
    lv_loopsElapsed = (ModF(lv_elapsedTime, 1.0) * 16.0);
    lv_elapsedTime -= (lv_loopsElapsed / 16.0);
    if ((lv_loopsElapsed < 10.0)) {
        lv_tempString = ("0" + FixedToString(lv_loopsElapsed, 0));
    }
    else {
        lv_tempString = FixedToString(lv_loopsElapsed, 0);
    }
    lv_timeElapsedString = lv_tempString;
    lv_secondsElapsed = ModF(lv_elapsedTime, 60.0);
    lv_elapsedTime -= lv_secondsElapsed;
    if ((lv_secondsElapsed < 10.0)) {
        lv_tempString = ("0" + FixedToString(lv_secondsElapsed, 0));
    }
    else {
        lv_tempString = FixedToString(lv_secondsElapsed, 0);
    }
    lv_timeElapsedString = (lv_tempString + ":" + lv_timeElapsedString);
    lv_minutesElapsed = (lv_elapsedTime / 60.0);
    if ((lv_minutesElapsed < 10.0)) {
        lv_tempString = ("0" + FixedToString(lv_minutesElapsed, 0));
    }
    else {
        lv_tempString = FixedToString(lv_minutesElapsed, 0);
    }
    lv_timeElapsedString = (lv_tempString + ":" + lv_timeElapsedString);
    return lv_timeElapsedString;
}

point libCore_gf_AdvancePointinDirection (point lp_point, point lp_dir, fixed lp_distance) {
    // Variable Declarations
    fixed lv_xVal;
    fixed lv_yVal;

    // Variable Initialization

    // Implementation
    lv_xVal = (PointGetX(lp_point) + (PointGetX(lp_dir) * lp_distance));
    lv_yVal = (PointGetY(lp_point) + (PointGetY(lp_dir) * lp_distance));
    return Point(lv_xVal, lv_yVal);
}

color libCore_gf_GetAllianceColorFromGameUIData (string lp_overrideColor, int lp_player) {
    // Variable Declarations
    color lv_neutralColor;
    string lv_fullColorString;
    int lv_commaPosition;
    string lv_rString;
    string lv_gString;
    string lv_bString;
    fixed lv_r;
    fixed lv_g;
    fixed lv_b;

    // Variable Initialization
    lv_neutralColor = Color(0,0,0);
    lv_fullColorString = "";
    lv_rString = "";
    lv_gString = "";
    lv_bString = "";

    // Implementation
    lv_fullColorString = CatalogFieldValueGet(c_gameCatalogGameUI, "Dflt", ("OverrideColors[" + lp_overrideColor + "].Value[0]"), lp_player);
    lv_commaPosition = StringFind(lv_fullColorString, ",", c_stringCase);
    lv_rString = StringSub(lv_fullColorString, 1, (lv_commaPosition - 1));
    lv_fullColorString = StringSub(lv_fullColorString, (lv_commaPosition + 1), StringLength(lv_fullColorString));
    lv_commaPosition = StringFind(lv_fullColorString, ",", c_stringCase);
    lv_gString = StringSub(lv_fullColorString, 1, (lv_commaPosition - 1));
    lv_fullColorString = StringSub(lv_fullColorString, (lv_commaPosition + 1), StringLength(lv_fullColorString));
    lv_commaPosition = StringFind(lv_fullColorString, ",", c_stringCase);
    lv_bString = StringSub(lv_fullColorString, 1, (lv_commaPosition - 1));
    lv_r = (StringToFixed(lv_rString) * 100.0);
    lv_g = (StringToFixed(lv_gString) * 100.0);
    lv_b = (StringToFixed(lv_bString) * 100.0);
    return Color(lv_r, lv_g, lv_b);
}

int libCore_gf_GetNumberOfRanksOfAnAbilityAHeroHasLearned (unit lp_heroUnit, int lp_abilIndex) {
    int auto60726184_ae;
    int auto60726184_ai;

    // Variable Declarations
    int lv_i;
    string[4] lv_behaviorArray;

    // Variable Initialization

    // Implementation
    auto60726184_ae = 3;
    auto60726184_ai = 1;
    lv_i = 0;
    for ( ; ( (auto60726184_ai >= 0 && lv_i <= auto60726184_ae) || (auto60726184_ai <= 0 && lv_i >= auto60726184_ae) ) ; lv_i += auto60726184_ai ) {
        lv_behaviorArray[lv_i] = "Ability" + IntToString(lv_i + 1);
    }
    return UnitBehaviorCount(lp_heroUnit, lv_behaviorArray[lp_abilIndex]);
}

string libCore_gf_GetModelLinkForUnitType (string lp_unitType) {
    // Variable Declarations
    string lv_unitTypeString;

    // Variable Initialization
    lv_unitTypeString = "";

    // Implementation
    lv_unitTypeString = (lp_unitType);
    return (CatalogFieldValueGet(c_gameCatalogActor, (lv_unitTypeString), "Model", c_playerAny));
}

int libCore_gf_GetHeroIndexForUnitType (string lp_heroType) {
    int auto9F1BE3ED_ae;
    int auto9F1BE3ED_ai;
    int auto2C6324CF_ae;
    int auto2C6324CF_ai;

    // Variable Declarations
    int lv_itHero;
    int lv_itAlternateHero;
    int lv_heroIndex;

    // Variable Initialization

    // Implementation
    auto9F1BE3ED_ae = libCore_gv_dataHeroesNumberOfHeroes;
    auto9F1BE3ED_ai = 1;
    lv_itHero = 1;
    for ( ; ( (auto9F1BE3ED_ai >= 0 && lv_itHero <= auto9F1BE3ED_ae) || (auto9F1BE3ED_ai <= 0 && lv_itHero >= auto9F1BE3ED_ae) ) ; lv_itHero += auto9F1BE3ED_ai ) {
        if ((lp_heroType == libCore_gv_dataHeroesHeroData[lv_itHero].lv_unitType)) {
            lv_heroIndex = lv_itHero;
            break;
        }
        else {
            if ((libCore_gv_dataHeroesHeroData[lv_itHero].lv_numberOfAlternateUnitTypes > 0)) {
                auto2C6324CF_ae = libCore_gv_dataHeroesHeroData[lv_itHero].lv_numberOfAlternateUnitTypes;
                auto2C6324CF_ai = 1;
                lv_itAlternateHero = 1;
                for ( ; ( (auto2C6324CF_ai >= 0 && lv_itAlternateHero <= auto2C6324CF_ae) || (auto2C6324CF_ai <= 0 && lv_itAlternateHero >= auto2C6324CF_ae) ) ; lv_itAlternateHero += auto2C6324CF_ai ) {
                    if ((lp_heroType == libCore_gv_dataHeroesHeroData[lv_itHero].lv_alternateUnitTypes[lv_itAlternateHero])) {
                        lv_heroIndex = lv_itHero;
                        break;
                    }
                    else {
                    }
                }
            }
            else {
            }
        }
    }
    return lv_heroIndex;
}

int libCore_gf_GetAbilityIndexForAbilityLink (int lp_heroIndex, string lp_abilLink) {
    int auto23DF0436_ae;
    int auto23DF0436_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto23DF0436_ae = libCore_gv_dataHeroesMaxAbilitiesPerHero;
    auto23DF0436_ai = 1;
    lv_i = 1;
    for ( ; ( (auto23DF0436_ai >= 0 && lv_i <= auto23DF0436_ae) || (auto23DF0436_ai <= 0 && lv_i >= auto23DF0436_ae) ) ; lv_i += auto23DF0436_ai ) {
        if ((libCore_gv_dataHeroesHeroData[lp_heroIndex].lv_abilities[lv_i].lv_ability == lp_abilLink)) {
            return lv_i;
        }
        else {
        }
    }
    return 0;
}

bool libCore_gf_TestLocationClosertoFactionSide (point lp_location, int lp_faction, fixed lp_modifier) {
    // Variable Declarations
    fixed lv_homeDist;
    fixed lv_enemyDist;

    // Variable Initialization

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_homeDist = DistanceBetweenPoints(UnitGetPosition(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core), lp_location);
        lv_enemyDist = DistanceBetweenPoints(UnitGetPosition(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core), lp_location);
    }
    else {
        lv_homeDist = DistanceBetweenPoints(UnitGetPosition(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core), lp_location);
        lv_enemyDist = DistanceBetweenPoints(UnitGetPosition(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core), lp_location);
    }
    if (((lv_homeDist * 2.0) <= (lp_modifier * (lv_homeDist + lv_enemyDist)))) {
        return true;
    }
    else {
        return false;
    }
}

fixed libCore_gf_StandalizedAngle (fixed lp_angle) {
    // Variable Declarations
    fixed lv_result;

    // Variable Initialization

    // Implementation
    lv_result = ModF(lp_angle, 360.0);
    if ((lv_result > 180.0)) {
        lv_result = (lv_result - 360.0);
    }
    else {
        if ((lv_result <= -180.0)) {
            lv_result = (lv_result + 360.0);
        }
        else {
        }
    }
    return lv_result;
}

fixed libCore_gf_StandalizedAngleDifference (fixed lp_angle1, fixed lp_angle2) {
    // Variable Declarations
    fixed lv_diff;

    // Variable Initialization

    // Implementation
    lv_diff = ModF(AbsF((lp_angle1 - lp_angle2)), 360.0);
    if ((lv_diff > 180.0)) {
        lv_diff = AbsF((lv_diff - 360.0));
    }
    else {
    }
    return lv_diff;
}

bool libCore_gf_IsAbilityOnCooldown (unit lp_unit, string lp_ability) {
    // Variable Declarations
    fixed lv_time;
    string lv_cooldownLink;
    string lv_chargeLink;
    fixed lv_chargeUsed;

    // Variable Initialization

    // Implementation
    lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Cost[" + IntToString(0) + "].Cooldown.Link", c_playerAny);
    lv_time = UnitGetCooldown(lp_unit, lv_cooldownLink);
    if ((lv_time > 0.0)) {
        return true;
    }
    else {
        lv_chargeLink = CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Cost[" + IntToString(0) + "].Charge.Link", c_playerAny);
        lv_chargeUsed = UnitGetChargeUsed(lp_unit, lv_chargeLink);
        if ((lv_chargeUsed > 0.0)) {
            lv_time = UnitGetChargeRegen(lp_unit, lv_chargeLink);
        }
        else {
        }
    }
    return (lv_time > 0.0);
}

fixed libCore_gf_GetTotalHPForUnitIncludingAllShields (unit lp_unit) {
    // Implementation
    return (UnitGetPropertyFixed(lp_unit, c_unitPropLife, c_unitPropCurrent)+UnitGetPropertyFixed(lp_unit, c_unitPropShields, c_unitPropCurrent)+UnitBehaviorDamageModifyRemaining(lp_unit, null));
}

fixed libCore_gf_GetTotalXPForLevel (int lp_level) {
    // Implementation
    if (((lp_level > libCore_gv_bALMaxLevel) || (lp_level < 1))) {
        return 0.0;
    }
    else {
        return libCore_gv_dataXPLevelXPValues[lp_level];
    }
}

int libCore_gf_GetPlayerIDfromTeamSlot (int lp_slot, int lp_team) {
    int auto0AFF2404_ae;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    auto0AFF2404_ae = libCore_gv_bALMaxPlayers;
    lv_itPlayer = 1;
    for ( ; lv_itPlayer <= auto0AFF2404_ae ; lv_itPlayer += 1 ) {
        if ((libGame_gv_players[lv_itPlayer].lv_teamPlayerSlot == lp_slot) && (libGame_gf_TeamNumberOfPlayer(lv_itPlayer) == lp_team)) {
            return lv_itPlayer;
        }
        else {
        }
    }
    return 0;
}

void libCore_gf_SendActorMessageToDoodadsInRegion (string lp_message, region lp_target, string lp_doodadType) {
    // Variable Declarations
    actor lv_actorRegion;
    string lv_termsString;

    // Variable Initialization
    lv_termsString = "";

    // Implementation
    ActorRegionCreate(null, "TriggerRegion", lp_target);
    lv_actorRegion = libNtve_gf_ActorLastCreated();
    if ((lp_doodadType != null)) {
        lv_termsString = ("ScopeContains " + lp_doodadType);
    }
    else {
    }
    ActorRegionSend(lv_actorRegion, c_actorIntersectAgainstRadiusContact, lp_message, "Doodad", lv_termsString);
    ActorScopeKill(ActorScopeFromActor(lv_actorRegion));
}

void libCore_gf_ClearAllNonpermanentBehaviorsonUnit (unit lp_targetUnit) {
    int auto6DC7FEE5_ae;
    int auto6DC7FEE5_ai;

    // Variable Declarations
    int lv_itBehavior;

    // Variable Initialization

    // Implementation
    auto6DC7FEE5_ae = 1;
    auto6DC7FEE5_ai = -1;
    lv_itBehavior = UnitBehaviorCountAll(lp_targetUnit);
    for ( ; ( (auto6DC7FEE5_ai >= 0 && lv_itBehavior <= auto6DC7FEE5_ae) || (auto6DC7FEE5_ai <= 0 && lv_itBehavior >= auto6DC7FEE5_ae) ) ; lv_itBehavior += auto6DC7FEE5_ai ) {
        if ((CatalogFieldValueGetAsInt(c_gameCatalogBehavior, UnitBehaviorGet(lp_targetUnit, lv_itBehavior), "BehaviorFlags[" + IntToString(0) + "]", c_playerAny) != 1)) {
            UnitBehaviorRemove(lp_targetUnit, UnitBehaviorGet(lp_targetUnit, lv_itBehavior), c_unitBehaviorCountAll);
        }
        else {
        }
    }
}

bool libCore_gf_LoadBankValueIfExistsAsBoolean (bool lp_variable, bank lp_bank, string lp_key, string lp_section) {
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == true)) {
        return BankValueGetAsFlag(lp_bank, lp_section, lp_key);
    }
    else {
        return lp_variable;
    }
}

int libCore_gf_LoadBankValueIfExistsAsInteger (int lp_variable, bank lp_bank, string lp_key, string lp_section) {
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == true)) {
        return BankValueGetAsInt(lp_bank, lp_section, lp_key);
    }
    else {
        return lp_variable;
    }
}

fixed libCore_gf_LoadBankValueIfExistsAsReal (fixed lp_variable, bank lp_bank, string lp_key, string lp_section) {
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == true)) {
        return BankValueGetAsFixed(lp_bank, lp_section, lp_key);
    }
    else {
        return lp_variable;
    }
}

string libCore_gf_LoadBankValueIfExistsAsString (string lp_variable, bank lp_bank, string lp_key, string lp_section) {
    // Implementation
    if ((BankKeyExists(lp_bank, lp_section, lp_key) == true)) {
        return BankValueGetAsString(lp_bank, lp_section, lp_key);
    }
    else {
        return lp_variable;
    }
}

void libCore_gf_CreateMinimapPingStorm (playergroup lp_players, string lp_pingData, point lp_position, color lp_color, fixed lp_duration) {
    // Implementation
    PingCreateFromData(lp_players, lp_pingData, lp_position);
    if ((lp_color != ColorWithAlpha(0,0,0,0))) {
        PingSetColor(PingLastCreated(), lp_color);
    }
    else {
    }
    if ((lp_duration != -1)) {
        PingSetDuration(PingLastCreated(), lp_duration);
    }
    else {
    }
}

string libCore_gf_ZS_ReticleModelOfStyle (int lp_type, int lp_size) {
    int autoA0502110_val;
    int autoF013B30C_val;
    int auto0C52B5A0_val;
    int auto21E76831_val;

    // Variable Declarations
    string lv_model;

    // Variable Initialization

    // Implementation
    autoA0502110_val = lp_size;
    if (autoA0502110_val == libCore_ge_ReticleSize_Large) {
        autoF013B30C_val = lp_type;
        if (autoF013B30C_val == libCore_ge_ReticleType_BonusObjective) {
            lv_model = "Storm_UI_Briefing_UnitSelect";
        }
        else if (autoF013B30C_val == libCore_ge_ReticleType_Enemy) {
            lv_model = "Storm_UI_Briefing_UnitSelect";
        }
        else if (autoF013B30C_val == libCore_ge_ReticleType_MainObjective) {
            lv_model = "Storm_UI_Briefing_UnitSelect";
        }
        else {
        }
    }
    else if (autoA0502110_val == libCore_ge_ReticleSize_Medium) {
        auto0C52B5A0_val = lp_type;
        if (auto0C52B5A0_val == libCore_ge_ReticleType_BonusObjective) {
            lv_model = "Storm_UI_Briefing_UnitSelect";
        }
        else if (auto0C52B5A0_val == libCore_ge_ReticleType_Enemy) {
            lv_model = "Storm_UI_Briefing_UnitSelect";
        }
        else if (auto0C52B5A0_val == libCore_ge_ReticleType_MainObjective) {
            lv_model = "Storm_UI_Briefing_UnitSelect";
        }
        else {
        }
    }
    else if (autoA0502110_val == libCore_ge_ReticleSize_Small) {
        auto21E76831_val = lp_type;
        if (auto21E76831_val == libCore_ge_ReticleType_BonusObjective) {
            lv_model = "Storm_UI_Briefing_UnitSelect";
        }
        else if (auto21E76831_val == libCore_ge_ReticleType_Enemy) {
            lv_model = "Storm_UI_Briefing_UnitSelect";
        }
        else if (auto21E76831_val == libCore_ge_ReticleType_MainObjective) {
            lv_model = "Storm_UI_Briefing_UnitSelect";
        }
        else {
        }
    }
    else {
    }
    return lv_model;
}

string libCore_gf_ZS_ReticleTextFontOfStyle (int lp_type) {
    int auto5627CFC0_val;

    // Variable Declarations
    string lv_fontStyle;

    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    auto5627CFC0_val = lp_type;
    if (auto5627CFC0_val == libCore_ge_ReticleType_BonusObjective) {
        lv_fontStyle = "ReticleBonusObjective";
    }
    else if (auto5627CFC0_val == libCore_ge_ReticleType_Enemy) {
        lv_fontStyle = "ReticleEnemy";
    }
    else if (auto5627CFC0_val == libCore_ge_ReticleType_MainObjective) {
        lv_fontStyle = "ReticleMainObjective";
    }
    else {
    }
    return lv_fontStyle;
}

void libCore_gf__CreateReticleEffect (int lp_type, int lp_size, point lp_location) {
    int auto6033BF13_val;
    int auto652E26F1_val;

    // Variable Declarations
    string lv_model;

    // Variable Initialization

    // Implementation
    lv_model = libCore_gf_ZS_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }
    else {
    }
    libNtve_gf_CreateModelAtPoint(lv_model, lp_location);
    auto6033BF13_val = lp_size;
    if (auto6033BF13_val == libCore_ge_ReticleSize_Large) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.500000");
    }
    else if (auto6033BF13_val == libCore_ge_ReticleSize_Medium) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.200000");
    }
    else if (auto6033BF13_val == libCore_ge_ReticleSize_Small) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 0.900000");
    }
    else {
    }
    auto652E26F1_val = lp_type;
    if (auto652E26F1_val == libCore_ge_ReticleType_MainObjective) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor 0,255,0");
    }
    else if (auto652E26F1_val == libCore_ge_ReticleType_BonusObjective) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor 255,255,0");
    }
    else if (auto652E26F1_val == libCore_ge_ReticleType_Enemy) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor 255,0,0");
    }
    else {
    }
}

void libCore_gf__AttachReticleEffect (int lp_type, int lp_size, unit lp_target, string lp_attachPoint) {
    int auto09B9443F_val;
    int auto66D2BF36_val;

    // Variable Declarations
    string lv_model;

    // Variable Initialization

    // Implementation
    lv_model = libCore_gf_ZS_ReticleModelOfStyle(lp_type, lp_size);
    if ((lv_model == null)) {
        return ;
    }
    else {
    }
    libNtve_gf_AttachModelToUnit(lp_target, lv_model, lp_attachPoint);
    auto09B9443F_val = lp_size;
    if (auto09B9443F_val == libCore_ge_ReticleSize_Large) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.500000");
    }
    else if (auto09B9443F_val == libCore_ge_ReticleSize_Medium) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale 1.200000");
    }
    else if (auto09B9443F_val == libCore_ge_ReticleSize_Small) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetScale");
    }
    else {
    }
    auto66D2BF36_val = lp_type;
    if (auto66D2BF36_val == libCore_ge_ReticleType_MainObjective) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor 0,255,0");
    }
    else if (auto66D2BF36_val == libCore_ge_ReticleType_BonusObjective) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor 255,255,0");
    }
    else if (auto66D2BF36_val == libCore_ge_ReticleType_Enemy) {
        ActorSend(libNtve_gf_ActorLastCreated(), "SetTintColor 255,0,0");
    }
    else {
    }
}

void libCore_gf_CreateReticleEffectAndTextTagAtPoint (int lp_type, int lp_size, text lp_text, point lp_location) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    libCore_gf__CreateReticleEffect(lp_type, lp_size, lp_location);
    if (((lp_text != null) == false)) {
        return ;
    }
    else {
    }
    lv_fontStyle = libCore_gf_ZS_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/lib_Core_05F16B54", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/lib_Core_05F16B54", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_Core_05F16B54"), 24, lp_location, 0.0, true, true, PlayerGroupSingle(1));
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

void libCore_gf_AttachReticleEffectAndTextTagOnUnit (int lp_type, int lp_size, text lp_text, unit lp_target, string lp_attachPoint) {
    // Variable Declarations
    string lv_model;
    string lv_fontStyle;

    // Variable Initialization
    lv_fontStyle = "SwarmReticleZergMainObjective";

    // Implementation
    libCore_gf__AttachReticleEffect(lp_type, lp_size, lp_target, lp_attachPoint);
    if (((lp_text != null) == false)) {
        return ;
    }
    else {
    }
    lv_fontStyle = libCore_gf_ZS_ReticleTextFontOfStyle(lp_type);
    TextExpressionSetToken("Param/Expression/lib_Core_A36D8E74", "Style", StringToText((lv_fontStyle)));
    TextExpressionSetToken("Param/Expression/lib_Core_A36D8E74", "A", lp_text);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_Core_A36D8E74"), 24, UnitGetPosition(lp_target), 0.0, true, true, PlayerGroupSingle(1));
    TextTagAttachToUnit(TextTagLastCreated(), lp_target, 0.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
}

string libCore_gf__UnitDataName (int lp_type, unit lp_unit, int lp_index) {
    int auto240754E1_val;

    // Variable Declarations
    string lv_name;

    // Variable Initialization
    lv_name = "";

    // Implementation
    auto240754E1_val = lp_type;
    if (auto240754E1_val == libCore_ge__UnitDataType_Actor) {
        lv_name = "UDACTOR_";
    }
    else if (auto240754E1_val == libCore_ge__UnitDataType_Integer) {
        lv_name = "UDINTEGER_";
    }
    else if (auto240754E1_val == libCore_ge__UnitDataType_Ping) {
        lv_name = "UDPING_";
    }
    else if (auto240754E1_val == libCore_ge__UnitDataType_Point) {
        lv_name = "UDPOINT_";
    }
    else if (auto240754E1_val == libCore_ge__UnitDataType_Region) {
        lv_name = "UDREGION_";
    }
    else if (auto240754E1_val == libCore_ge__UnitDataType_TextTag) {
        lv_name = "UDTEXTTAG_";
    }
    else if (auto240754E1_val == libCore_ge__UnitDataType_Unit) {
        lv_name = "UDUNIT_";
    }
    else if (auto240754E1_val == libCore_ge__UnitDataType_UnitGroup) {
        lv_name = "UDUNITGROUP_";
    }
    else {
    }
    lv_name = (lv_name + IntToString(UnitGetTag(lp_unit)) + "_" + IntToString(lp_index));
    return lv_name;
}

void libCore_gf_StoreActorForUnit (unit lp_unit, int lp_index, actor lp_actor) {
    // Implementation
    DataTableSetActor(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Actor, lp_unit, lp_index), lp_actor);
}

actor libCore_gf_ActorStoredForUnit (unit lp_unit, int lp_index) {
    // Implementation
    return DataTableGetActor(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Actor, lp_unit, lp_index));
}

void libCore_gf_StoreTextTagForUnit (unit lp_unit, int lp_index, int lp_textTag) {
    // Implementation
    libNtve_gf_SaveDataTableValueTextTag(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_TextTag, lp_unit, lp_index), lp_textTag);
}

int libCore_gf_TextTagStoredForUnit (unit lp_unit, int lp_index) {
    // Implementation
    return libNtve_gf_ValueFromDataTableTextTag(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_TextTag, lp_unit, lp_index));
}

void libCore_gf_StorePointForUnit (unit lp_unit, int lp_index, point lp_point) {
    // Implementation
    DataTableSetPoint(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Point, lp_unit, lp_index), lp_point);
}

point libCore_gf_PointStoredForUnit (unit lp_unit, int lp_index) {
    // Implementation
    return DataTableGetPoint(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Point, lp_unit, lp_index));
}

void libCore_gf_StoreRegionForUnit (unit lp_unit, int lp_index, region lp_region) {
    // Implementation
    DataTableSetRegion(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Point, lp_unit, lp_index), lp_region);
}

region libCore_gf_RegionStoredForUnit (unit lp_unit, int lp_index) {
    // Implementation
    return DataTableGetRegion(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Point, lp_unit, lp_index));
}

void libCore_gf_StorePingForUnit (unit lp_unit, int lp_index, int lp_ping) {
    // Implementation
    DataTableSetPing(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Ping, lp_unit, lp_index), lp_ping);
}

int libCore_gf_PingStoredForUnit (unit lp_unit, int lp_index) {
    // Implementation
    return DataTableGetPing(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Ping, lp_unit, lp_index));
}

void libCore_gf_StoreIntegerForUnit (unit lp_unit, int lp_index, int lp_value) {
    // Implementation
    DataTableSetInt(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Integer, lp_unit, lp_index), lp_value);
}

int libCore_gf_IntegerStoredForUnit (unit lp_unit, int lp_index) {
    // Implementation
    return DataTableGetInt(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Integer, lp_unit, lp_index));
}

void libCore_gf_StoreUnitForUnit (unit lp_unit, int lp_index, unit lp_value) {
    // Implementation
    DataTableSetUnit(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Unit, lp_unit, lp_index), lp_value);
}

unit libCore_gf_UnitStoredForUnit (unit lp_unit, int lp_index) {
    // Implementation
    return DataTableGetUnit(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_Unit, lp_unit, lp_index));
}

void libCore_gf_StoreUnitGroupForUnit (unit lp_unit, int lp_index, unitgroup lp_value) {
    // Implementation
    DataTableSetUnitGroup(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_UnitGroup, lp_unit, lp_index), lp_value);
}

unitgroup libCore_gf_UnitGroupStoredForUnit (unit lp_unit, int lp_index) {
    // Implementation
    return DataTableGetUnitGroup(true, libCore_gf__UnitDataName(libCore_ge__UnitDataType_UnitGroup, lp_unit, lp_index));
}

void libCore_gf_PlayTransmissionCueSound (playergroup lp_playerGroup) {
    // Implementation
    SoundPlayForPlayer(SoundLink("Dialogue_TransmissionStart", 0), c_maxPlayers, lp_playerGroup, 100.0, 0.0);
    Wait(0.25, c_timeReal);
}

void libCore_gf_SetAllSoundChannelVolumesStandardTiming (int lp_mode, playergroup lp_players) {
    // Implementation
    if ((lp_mode == libNtve_ge_VolumeChannelMode_Game)) {
        libNtve_gf_SetAllSoundChannelVolumes(lp_mode, lp_players, 2.5);
        SoundChannelSetVolume(lp_players, c_soundCategoryVoice, 100.0, 0.5);
        SoundChannelSetVolume(PlayerGroupAll(), c_soundCategoryUI, 100.0, 0.5);
    }
    else {
        libNtve_gf_SetAllSoundChannelVolumes(lp_mode, lp_players, 1.0);
        SoundChannelSetVolume(lp_players, c_soundCategoryVoice, 0.0, 0.25);
    }
}

bool libCore_gf_PlayerGroupOverlap (playergroup lp_group1, playergroup lp_group2) {
    playergroup auto2201786C_g;
    int auto2201786C_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    auto2201786C_g = lp_group1; 
    auto2201786C_p = 1;
    for ( ; auto2201786C_p <= PlayerGroupCount(auto2201786C_g) ; auto2201786C_p += BoolToInt(lv_itPlayer == PlayerGroupPlayer(auto2201786C_g, auto2201786C_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto2201786C_g, auto2201786C_p);
        if ((PlayerGroupHasPlayer(lp_group2, lv_itPlayer) == true)) {
            return true;
        }
        else {
        }
    }
    return false;
}

int libCore_gf_TransmissionOwningPlayerFromPlayerGroup (playergroup lp_toPlayers) {
    // Implementation
    if ((libCore_gf_PlayerGroupOverlap(libGame_gf_PlayersOnTeamHeroes(2, false), lp_toPlayers) == true) && (libCore_gf_PlayerGroupOverlap(libGame_gf_PlayersOnTeamHeroes(2, false), lp_toPlayers) == true)) {
        return (c_maxPlayers);
    }
    else {
    }
    if ((libCore_gf_PlayerGroupOverlap(libGame_gf_PlayersOnTeamHeroes(1, false), lp_toPlayers) == true)) {
        return libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
    }
    if ((libCore_gf_PlayerGroupOverlap(libGame_gf_PlayersOnTeamHeroes(2, false), lp_toPlayers) == true)) {
        return libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
    }
    if ((PlayerGroupHasPlayer(lp_toPlayers, libCore_gv_oBSERVER_ObserverUIPlayer) == true)) {
        return libCore_gv_oBSERVER_ObserverUIPlayer;
    }
    else {
    }
    return (c_maxPlayers);
}

void libCore_gf_SendTransmissionCampaign (unit lp_unit, string lp_conversationLine, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption) {
    // Variable Declarations
    soundlink lv_sound;

    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);

    // Implementation
    lv_sound = SoundLink(ConversationDataGetSound(lp_conversationLine, true), c_soundIndexAny);
    if ((lv_sound == null)) {
        return ;
    }
    else {
    }
    libCore_gf_ZS_SendTransmissionCampaignInternal(false, lp_unit, null, lv_sound, null, null, lp_durationType, lp_duration, lp_waitUntilDone, lp_keepPortraitVisible, lp_cueSoundOption, CatalogFieldValueGet(c_gameCatalogSound, ConversationDataGetSound(lp_conversationLine, true), "AssetArray[" + IntToString(0) + "].PortraitActor", c_playerAny));
}

void libCore_gf_SendTransmissionCampaignPlaceHolder (unit lp_unit, string lp_model, text lp_speaker, text lp_message, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible2, int lp_cueSoundOption2) {
    // Variable Declarations
    soundlink lv_sound;

    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);

    // Implementation
    lv_sound = SoundLink("PlaceholderSoundFile", c_soundIndexAny);
    TextExpressionSetToken("Param/Expression/lib_Core_F4BD8250", "A", lp_message);
    libCore_gf_ZS_SendTransmissionCampaignInternal(true, lp_unit, lp_model, lv_sound, lp_speaker, TextExpressionAssemble("Param/Expression/lib_Core_F4BD8250"), c_transmissionDurationSet, lp_duration, lp_waitUntilDone, lp_keepPortraitVisible2, lp_cueSoundOption2, "");
}

void libCore_gf_TurnTransmissionOptionsOnOffCampaign (int lp_option, bool lp_onOff) {
    int auto2C2547CF_val;

    // Implementation
    auto2C2547CF_val = lp_option;
    if (auto2C2547CF_val == libCore_ge_TransmissionOptions_ChatBubble) {
        libCore_gv_zS_SendTransmissionCampaignChatBubbleOn = lp_onOff;
    }
    else {
    }
}

void libCore_gf_ZS_SendTransmissionCampaignInternal (bool lp_isPlaceHolder, unit lp_unit, string lp_model, soundlink lp_sound, text lp_speaker, text lp_message, int lp_durationType, fixed lp_duration, bool lp_waitUntilDone, int lp_keepPortraitVisible, int lp_cueSoundOption, string lp_portraitActor) {
    // Variable Declarations
    int lv_portrait;
    transmissionsource lv_source;
    int lv_localIndex;
    unit lv_oldSpeaker;
    trigger lv_oldTrigger;
    actor lv_talkBubble;
    actor lv_talkRing;
    int lv_ping;
    bool lv_flashOption;

    // Variable Initialization
    lv_portrait = c_invalidPortraitId;
    lv_source = TransmissionSource();
    lv_ping = c_invalidPingId;
    lv_flashOption = true;

    // Implementation
    if ((lp_sound == null)) {
        return ;
    }
    else {
    }
    libCore_gv_zS_SendTransmissionCampaignIndex += 1;
    lv_localIndex = libCore_gv_zS_SendTransmissionCampaignIndex;
    lv_oldSpeaker = libCore_gv_zS_SendTransmissionCampaignSpeaker;
    libCore_gv_zS_SendTransmissionCampaignSpeaker = lp_unit;
    lv_oldTrigger = libCore_gv_zS_SendTransmissionCampaignTrigger;
    libCore_gv_zS_SendTransmissionCampaignTrigger = TriggerGetCurrent();
    if ((lp_keepPortraitVisible != libCore_ge_TransmissionPortraitOptioins_DontShowPortrait) && ((lp_model != null) || ((lp_model == null) && (SoundPortraitModel(lp_sound) != null)) || ((lp_isPlaceHolder == true) && (lp_unit != null)))) {
        if ((libNtve_gf_PlayerInCinematicMode(1) == false) && (libNtve_gf_PlayerInStoryMode(1) == false)) {
            lv_portrait = PortraitGetGame();
        }
        else {
            lv_portrait = c_invalidPortraitId;
        }
    }
    else {
        lv_portrait = c_invalidPortraitId;
    }
    if ((lv_portrait != c_invalidPortraitId)) {
        if ((lp_unit != null)) {
            if ((PlayerGroupHasPlayer(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, true), UnitGetOwner(lp_unit)) == true)) {
                PortraitSetTeamColor(lv_portrait, libNtve_gf_ConvertPlayerColorToColor(2));
            }
            else if ((PlayerGroupHasPlayer(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, true), UnitGetOwner(lp_unit)) == true)) {
                PortraitSetTeamColor(lv_portrait, libNtve_gf_ConvertPlayerColorToColor(1));
            }
            else if (true) {
                PortraitSetTeamColor(lv_portrait, libNtve_gf_ConvertPlayerColorToColor(0));
            }
        }
        else {
            PortraitSetTeamColor(lv_portrait, libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(0, false)));
        }
    }
    else {
    }
    if (((lp_cueSoundOption == libCore_ge_TransmissionCueSoundOptions_PlayCueSound) || ((lp_cueSoundOption == libCore_ge_TransmissionCueSoundOptions_DefaultCueSoundBehavior) && (libNtve_gf_PlayerInCinematicMode(1) == false) && (lv_portrait != c_invalidPortraitId) && (PortraitVisible(libCore_gv_zS_SendTransmissionCampaignPortrait, 1) == false)))) {
        libCore_gf_PlayTransmissionCueSound(PlayerGroupAll());
    }
    else {
    }
    libCore_gv_zS_SendTransmissionCampaignPortrait = lv_portrait;
    if ((libCore_gv_zS_SendTransmissionCampaignPortrait != c_invalidPortraitId)) {
        PortraitSetVisible(libCore_gv_zS_SendTransmissionCampaignPortrait, PlayerGroupAll(), true, false);
    }
    else {
    }
    libCore_gv_zS_SendTransmissionCampaignPlayingTick = 3;
    if ((lp_unit == null)) {
        if ((lv_portrait == c_invalidPortraitId)) {
            lv_source = TransmissionSource();
        }
        else {
            if ((lp_model == null)) {
                lv_source = TransmissionSourceFromModel(null);
            }
            else {
                lv_source = TransmissionSourceFromModel(lp_model);
            }
        }
    }
    else {
        if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
            lv_flashOption = false;
        }
        else {
            lv_flashOption = true;
        }
        if ((lp_isPlaceHolder == false)) {
            lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, false, "Talk");
        }
        else {
            if ((lp_model == null)) {
                if ((UnitGetOwner(EventUnit()) == 1)) {
                    lv_source = TransmissionSourceFromUnit(lp_unit, lv_flashOption, false, "Talk");
                }
                else {
                }
            }
            else {
                lv_source = TransmissionSourceFromModel(lp_model);
            }
            lv_source = TransmissionSourceFromModel(lp_model);
        }
    }
    if ((lp_unit != null) && (lp_unit != lv_oldSpeaker) && (UnitIsAlive(lp_unit) == true)) {
        if ((libCore_gv_zS_SendTransmissionCampaignChatBubbleOn == true)) {
            if ((libNtve_gf_PlayerInCinematicMode(1) == true)) {
                ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness StormTalkIconBubble {Overhead 0} 0.000000,0.000000,0.600000");
                lv_talkBubble = ActorFrom("::LastCreatedActual");
                ActorSend(lv_talkBubble, "AnimPlay Default Birth PlayForever,NonLooping");
            }
            else {
                ActorSend(libNtve_gf_MainActorofUnit(lp_unit), "AttachModelOffset ModelAdditionHarness StormTalkIconBubble {Overhead 0} 0.000000,0.000000,1.8");
                lv_talkBubble = ActorFrom("::LastCreatedActual");
                ActorSend(lv_talkBubble, "AnimPlay Default Birth PlayForever,NonLooping");
            }
            libNtve_gf_AttachModelToUnit(lp_unit, "StormTalkIconRing", "Ref_Origin");
            lv_talkRing = libNtve_gf_ActorLastCreated();
            ActorSend(lv_talkRing, "AnimPlay Default Birth PlayForever,NonLooping");
        }
        else {
        }
    }
    else {
    }
    TransmissionSendForPlayer(PlayerGroupAll(), lv_source, lv_portrait, lp_portraitActor, "Talk", lp_sound, lp_speaker, lp_message, lp_duration, lp_durationType, lp_waitUntilDone, c_maxPlayers);
    if ((lp_waitUntilDone == false)) {
        libCore_gf_ZS_SendTransmissionCampaignCleanUp(TransmissionLastSent(), lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_talkRing, lv_ping, lv_localIndex);
    }
    else {
        libCore_gf_ZS_SendTransmissionCampaignCleanUp(c_invalidTransmissionId, lp_keepPortraitVisible, lv_portrait, lv_talkBubble, lv_talkRing, lv_ping, lv_localIndex);
    }
}

trigger auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_Trigger = null;
int auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_lp_transmission;
int auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
int auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_lp_portrait;
actor auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_lp_talkIcon;
actor auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_lp_talkRing;
int auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_lp_ping;
int auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_lp_localIndex;

void libCore_gf_ZS_SendTransmissionCampaignCleanUp (int lp_transmission, int lp_keepPortraitVisible, int lp_portrait, actor lp_talkIcon, actor lp_talkRing, int lp_ping, int lp_localIndex) {
    auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_lp_transmission = lp_transmission;
    auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible = lp_keepPortraitVisible;
    auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_lp_portrait = lp_portrait;
    auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_lp_talkIcon = lp_talkIcon;
    auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_lp_talkRing = lp_talkRing;
    auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_lp_ping = lp_ping;
    auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_lp_localIndex = lp_localIndex;

    if (auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_Trigger == null) {
        auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_Trigger = TriggerCreate("auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_TriggerFunc");
    }

    TriggerExecute(auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_Trigger, false, false);
}

bool auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_TriggerFunc (bool testConds, bool runActions) {
    int lp_transmission = auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_lp_transmission;
    int lp_keepPortraitVisible = auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_lp_keepPortraitVisible;
    int lp_portrait = auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_lp_portrait;
    actor lp_talkIcon = auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_lp_talkIcon;
    actor lp_talkRing = auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_lp_talkRing;
    int lp_ping = auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_lp_ping;
    int lp_localIndex = auto_libCore_gf_ZS_SendTransmissionCampaignCleanUp_lp_localIndex;

    // Implementation
    if ((lp_transmission != c_invalidTransmissionId)) {
        TransmissionWait(lp_transmission, 0.0);
    }
    else {
    }
    Wait(0.75, c_timeReal);
    if ((lp_localIndex != libCore_gv_zS_SendTransmissionCampaignIndex)) {
        if ((libCore_gv_zS_SendTransmissionCampaignPortrait != lp_portrait) && (lp_portrait != c_invalidPortraitId) && (lp_keepPortraitVisible == libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter) && (lp_portrait != PortraitGetGame())) {
            PortraitSetModel(lp_portrait, "MissingPortrait", false);
            PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
        }
        else {
        }
        return true;
    }
    else {
    }
    libCore_gv_zS_SendTransmissionCampaignIndex = 0;
    libCore_gv_zS_SendTransmissionCampaignSpeaker = null;
    TriggerExecute(libCore_gt__SendTransmissionTick, true, false);
    if ((lp_keepPortraitVisible == libCore_ge_TransmissionPortraitOptioins_HidePortraitAfter) && (lp_portrait != c_invalidPortraitId) && (lp_portrait != PortraitGetGame())) {
        PortraitSetModel(lp_portrait, "MissingPortrait", false);
        PortraitSetVisible(lp_portrait, PlayerGroupAll(), false, false);
    }
    else {
    }
    if ((lp_talkIcon != null)) {
        libNtve_gf_KillModel(lp_talkIcon);
    }
    else {
    }
    if ((lp_talkRing != null)) {
        libNtve_gf_KillModel(lp_talkRing);
    }
    else {
    }
    if ((lp_ping != c_invalidPingId)) {
        PingDestroy(lp_ping);
    }
    else {
    }
    return true;
}

void libCore_gf_HideCampaignTransmissionPortrait () {
    // Implementation
    libNtve_gf_HideAllCinematicPortraits(PlayerGroupAll());
}

fixed libCore_gf_ConvesationLineDuration (string lp_conversationLine) {
    // Variable Declarations
    soundlink lv_sound;

    // Variable Initialization
    lv_sound = SoundLink("EditorDefaultSound", -1);

    // Implementation
    lv_sound = SoundLink(ConversationDataGetSound(lp_conversationLine, true), c_soundIndexAny);
    return SoundLengthSync(lv_sound);
}

void libCore_gf_AutoRevealRegion (region lp_visibilityRegion, region lp_triggeringRegion, int lp_player) {
    // Implementation
    if ((libCore_gv_autoRevealers.lv_count >= 64)) {
        return ;
    }
    else {
    }
    VisRevealerCreate(lp_player, lp_visibilityRegion);
    libCore_gv_autoRevealers.lv_revealers[libCore_gv_autoRevealers.lv_count] = VisRevealerLastCreated();
    VisRevealerEnable(VisRevealerLastCreated(), false);
    libCore_gv_autoRevealers.lv_triggeringRegions[libCore_gv_autoRevealers.lv_count] = lp_triggeringRegion;
    libCore_gv_autoRevealers.lv_triggeringPlayers[libCore_gv_autoRevealers.lv_count] = lp_player;
    libCore_gv_autoRevealers.lv_count += 1;
    TriggerExecute(libCore_gt_AutoRevealRegionController, true, false);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Data - Announcer VO - Map Data Fields
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataAnnouncerVOMapDataFields_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_GetReadyForBattle, "HeroSelect");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_BattleStartingIn, "CountdownRemain");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_Countdown10, "Countdown10sec");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_Countdown5, "Countdown5sec");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_Countdown4, "Countdown4sec");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_Countdown3, "Countdown3sec");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_Countdown2, "Countdown2sec");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_Countdown1, "Countdown1sec");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_LetTheBattleBegin, "GameStart");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_YouHaveBeenKilled, "HeroSlain");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_AllyKilled, "AllySlain");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_EnemyKilledNonparticipants, "EnemySlain");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_EnemyKilledParticipants, "HeroKill");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_HeroKilledObserver, "Kill_Observer");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_DoubleKill, "DoubleKill");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_TripleKill, "TripleKill");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_QuadraKill, "FourKill");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_PentaKill, "PentaKill");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_TeamKill, "TeamKill");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_BlueTeamKilled, "TeamKill_Blue");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_RedTeamKilled, "TeamKill_Red");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_AllyFirstBlood, "FirstBloodAlly");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_EnemyFirstBlood, "FirstBloodEnemy");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_BlueTeamFirstBlood, "FirstBlood_Blue");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_RedTeamFirstBlood, "FirstBlood_Red");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_KillingSpreeStart, "SpreeStart");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_KillingSpreeEndYou, "SpreeEnd");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade1Mayhem, "SpreeFirstUpgrade");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade2Untouchable, "SpreeThirdUpgrade");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade3HeroOfTheStorm, "SpreeMax");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade4AllStarDEP, "SpreeMax");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_APlayerHasLeftTheGame, "PlayerAbandon");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_APlayerHasRejoinedTheGame, "PlayerRejoin");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_GravestoneRevive, "Revive");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_AlliedOutpostDestroyed, "OutpostLost");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_EnemyOutpostDestroyed, "OutpostDestroy");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_AlliedKeepDestroyed, "KeepLost");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_EnemyKeepDestroyed, "KeepDestroy");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_RedTeamDestroysTown, "OutpostDestroy_Red");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_BlueTeamDestroysTown, "OutpostDestroy_Blue");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_AlliedCoreUnderAttack, "CastleAttackAlly");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_BlueTeamCoreUnderAttack, "CastleAttack_Blue");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_RedTeamCoreUnderAttack, "CastleAttack_Red");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_Victory, "EndingWin");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_Defeat, "EndingLose");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_BlueTeamWins, "Ending_Blue");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_RedTeamWins, "Ending_Red");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_AlliesCaptureMercCamp, "MercCapture");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_EnemiesCaptureMercCamp, "MercCapture");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_BlueTeamCapturesMercCamp, "MercCapture_Blue");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_RedTeamCapturesMercCamp, "MercCapture_Red");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_LevelUp, "LevelAnnounce");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_TalentUnlocked, "TalentUnlock");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_GamePaused, "GamePaused");
    libCore_gf_DataAnnouncerVOMapDataField(libCore_ge_AnnouncerVOEvents_GameResumed, "GameResumed");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataAnnouncerVOMapDataFields_Init () {
    libCore_gt_DataAnnouncerVOMapDataFields = TriggerCreate("libCore_gt_DataAnnouncerVOMapDataFields_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Artifact Data Initialization
//--------------------------------------------------------------------------------------------------
bool libCore_gt_ArtifactDataInitialization_Func (bool testConds, bool runActions) {
    int autoD8B2BCB0_ae;
    int autoD8B2BCB0_ai;
    string autoBCA691FD_val;
    int auto33885BCD_ae;
    int auto33885BCD_ai;
    int autoD5F47685_ae;
    int autoD5F47685_ai;

    // Variable Declarations
    string lv_artifactID;
    string lv_artifactTalentID;
    int lv_rankCount;
    int lv_behaviorCount;
    string lv_artifactCatalogEntry;
    int lv_itArtifactIndex;
    int lv_itRank;
    int lv_itBehavior;

    // Variable Initialization
    lv_artifactID = "";
    lv_artifactTalentID = "";

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_artifacts_ArtifactEntryCount = CatalogEntryCount(c_gameCatalogArtifact);
    if ((libCore_gv_artifacts_ArtifactEntryCount > libCore_gv_artifacts_MaxArtifactEntryCount)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Core_57717A6E"), true);
        libCore_gv_artifacts_ArtifactEntryCount = libCore_gv_artifacts_MaxArtifactEntryCount;
    }
    else {
    }
    autoD8B2BCB0_ae = libCore_gv_artifacts_ArtifactEntryCount;
    autoD8B2BCB0_ai = 1;
    lv_itArtifactIndex = 1;
    for ( ; ( (autoD8B2BCB0_ai >= 0 && lv_itArtifactIndex <= autoD8B2BCB0_ae) || (autoD8B2BCB0_ai <= 0 && lv_itArtifactIndex >= autoD8B2BCB0_ae) ) ; lv_itArtifactIndex += autoD8B2BCB0_ai ) {
        lv_artifactCatalogEntry = CatalogEntryGet(c_gameCatalogArtifact, lv_itArtifactIndex);
        lv_artifactID = (lv_artifactCatalogEntry);
        libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_artifactCatalogLink = (lv_artifactID);
        libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_artifactTalentCatalogLink = (CatalogFieldValueGet(c_gameCatalogArtifact, lv_artifactID, "Talent", c_playerAny));
        autoBCA691FD_val = CatalogFieldValueGet(c_gameCatalogArtifact, lv_artifactID, "Type", c_playerAny);
        if (autoBCA691FD_val == "Gem") {
            libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_tier = libCore_ge_ArtifactTier_Gem;
        }
        else if (autoBCA691FD_val == "Glyph") {
            libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_tier = libCore_ge_ArtifactTier_Glyph;
        }
        else if (autoBCA691FD_val == "Trinket") {
            libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_tier = libCore_ge_ArtifactTier_Trinket;
        }
        else {
        }
        lv_artifactTalentID = (libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_artifactTalentCatalogLink);
        lv_rankCount = CatalogFieldValueCount(c_gameCatalogTalent, lv_artifactTalentID, "RankArray", c_playerAny);
        if ((lv_rankCount > libCore_gv_artifacts_MaxArtifactRank_C)) {
            TextExpressionSetToken("Param/Expression/lib_Core_10AF61AD", "A", StringToText(lv_artifactTalentID));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_10AF61AD"), true);
            lv_rankCount = libCore_gv_artifacts_MaxArtifactRank_C;
            continue;
        }
        else {
        }
        auto33885BCD_ae = lv_rankCount;
        auto33885BCD_ai = 1;
        lv_itRank = 1;
        for ( ; ( (auto33885BCD_ai >= 0 && lv_itRank <= auto33885BCD_ae) || (auto33885BCD_ai <= 0 && lv_itRank >= auto33885BCD_ae) ) ; lv_itRank += auto33885BCD_ai ) {
            libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_rankData[lv_itRank].lv_item = (CatalogFieldValueGet(c_gameCatalogTalent, lv_artifactTalentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].Item", c_playerAny));
            libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_rankData[lv_itRank].lv_upgrade = (CatalogFieldValueGet(c_gameCatalogTalent, lv_artifactTalentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].Upgrade", c_playerAny));
            libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_rankData[lv_itRank].lv_abilityPower = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_artifactTalentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].AbilityPower", c_playerAny));
            libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_rankData[lv_itRank].lv_cooldownReduction = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_artifactTalentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].CooldownReduction", c_playerAny));
            libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_rankData[lv_itRank].lv_attackDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_artifactTalentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].AttackDamage", c_playerAny));
            libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_rankData[lv_itRank].lv_siegeDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_artifactTalentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].SiegeDamage", c_playerAny));
            libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_rankData[lv_itRank].lv_lifesteal = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_artifactTalentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].LifeLeech", c_playerAny));
            libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_rankData[lv_itRank].lv_increaseAttackSpeed = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_artifactTalentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].AttackSpeed", c_playerAny));
            libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_rankData[lv_itRank].lv_increaseMovementSpeed = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_artifactTalentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].MovementSpeed", c_playerAny));
            libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_rankData[lv_itRank].lv_hitPoints = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_artifactTalentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].Life", c_playerAny));
            libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_rankData[lv_itRank].lv_shields = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_artifactTalentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].Shields", c_playerAny));
            libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_rankData[lv_itRank].lv_mana = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_artifactTalentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].Energy", c_playerAny));
            libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_rankData[lv_itRank].lv_hitPointRegen = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_artifactTalentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].LifeRegenRate", c_playerAny));
            libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_rankData[lv_itRank].lv_hitPointRegenFraction = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_artifactTalentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].LifeRegenRateFraction", c_playerAny));
            libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_rankData[lv_itRank].lv_manaRegen = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_artifactTalentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].EnergyRegenRate", c_playerAny));
            libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_rankData[lv_itRank].lv_amplifedHealing = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_artifactTalentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].AmplifiedHealing", c_playerAny));
            libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_rankData[lv_itRank].lv_cCReduction = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_artifactTalentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].CrowdControlReduction", c_playerAny));
            libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_rankData[lv_itRank].lv_deathTimeReduction = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_artifactTalentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].DeathTimerReduction", c_playerAny));
            libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_rankData[lv_itRank].lv_increaseMountSpeed = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_artifactTalentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].MountSpeed", c_playerAny));
            lv_behaviorCount = CatalogFieldValueCount(c_gameCatalogTalent, lv_artifactTalentID, "RankArray[" + IntToString(lv_itRank - 1) + "].BehaviorArray", c_playerAny);
            if ((lv_behaviorCount > libCore_gv_talents_MaxTalentBehaviorsPerRank_C)) {
                TextExpressionSetToken("Param/Expression/lib_Core_94ED66AE", "A", StringToText(lv_artifactTalentID));
                TextExpressionSetToken("Param/Expression/lib_Core_94ED66AE", "B", IntToText((lv_itRank - 1)));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_94ED66AE"), true);
                lv_behaviorCount = libCore_gv_talents_MaxTalentBehaviorsPerRank_C;
                continue;
            }
            else {
            }
            libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_rankData[lv_itRank].lv_behaviorCount = lv_behaviorCount;
            autoD5F47685_ae = lv_behaviorCount;
            autoD5F47685_ai = 1;
            lv_itBehavior = 1;
            for ( ; ( (autoD5F47685_ai >= 0 && lv_itBehavior <= autoD5F47685_ae) || (autoD5F47685_ai <= 0 && lv_itBehavior >= autoD5F47685_ae) ) ; lv_itBehavior += autoD5F47685_ai ) {
                libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_rankData[lv_itRank].lv_behaviors[0] = (CatalogFieldValueGet(c_gameCatalogTalent, lv_artifactTalentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].BehaviorArray[" + IntToString((lv_itBehavior - 1)) + "]", c_playerAny));
            }
        }
        libCore_gv_artifacts_ArtifactData[lv_itArtifactIndex].lv_rankCount = lv_rankCount;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_ArtifactDataInitialization_Init () {
    libCore_gt_ArtifactDataInitialization = TriggerCreate("libCore_gt_ArtifactDataInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Vehicle Level Up Scaling - DragonKnight
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataVehicleLevelUpScalingDragonKnight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vehicleIndex;
    int lv_abilityIndex;
    int lv_changeIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vehicleIndex = (libCore_ge_VehicleUnitTypes_DragonKnight);
    lv_abilityIndex = 0;
    lv_changeIndex = 0;
    lv_changeIndex += 1;
    libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_catalog[lv_abilityIndex][lv_changeIndex] = c_gameCatalogEffect;
    libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_entry[lv_abilityIndex][lv_changeIndex] = "VehicleDragonKnightBullRushDamage";
    libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_field[lv_abilityIndex][lv_changeIndex] = "Amount";
    libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_valueAddedPerLevel[lv_abilityIndex][lv_changeIndex] = 20.0;
    lv_changeIndex += 1;
    libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_catalog[lv_abilityIndex][lv_changeIndex] = c_gameCatalogEffect;
    libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_entry[lv_abilityIndex][lv_changeIndex] = "VehicleDragonKnightDeathKnockbackDamage";
    libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_field[lv_abilityIndex][lv_changeIndex] = "Amount";
    libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_valueAddedPerLevel[lv_abilityIndex][lv_changeIndex] = 15.0;
    lv_changeIndex += 1;
    libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_catalog[lv_abilityIndex][lv_changeIndex] = c_gameCatalogEffect;
    libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_entry[lv_abilityIndex][lv_changeIndex] = "DragonFireBreathDamage";
    libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_field[lv_abilityIndex][lv_changeIndex] = "Amount";
    libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_valueAddedPerLevel[lv_abilityIndex][lv_changeIndex] = 15.0;
    lv_changeIndex += 1;
    libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_catalog[lv_abilityIndex][lv_changeIndex] = c_gameCatalogEffect;
    libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_entry[lv_abilityIndex][lv_changeIndex] = "VehicleDragonDragonFireBreathNapalmDamage";
    libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_field[lv_abilityIndex][lv_changeIndex] = "Amount";
    libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_valueAddedPerLevel[lv_abilityIndex][lv_changeIndex] = 1.0;
    lv_changeIndex += 1;
    libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_catalog[lv_abilityIndex][lv_changeIndex] = c_gameCatalogEffect;
    libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_entry[lv_abilityIndex][lv_changeIndex] = "DragonRoarHeal";
    libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_field[lv_abilityIndex][lv_changeIndex] = "RechargeVitalRate";
    libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_valueAddedPerLevel[lv_abilityIndex][lv_changeIndex] = 10.0;
    libGame_gv_dataHeroesVehicleLevelUpData[lv_vehicleIndex].lv_numberOfFieldChanges[lv_abilityIndex] = lv_changeIndex;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataVehicleLevelUpScalingDragonKnight_Init () {
    libCore_gt_DataVehicleLevelUpScalingDragonKnight = TriggerCreate("libCore_gt_DataVehicleLevelUpScalingDragonKnight_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Heroes - Hero Class Data
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataHeroesHeroClassData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_index = (c_heroRoleWarrior);
    libCore_gv_dataHeroesHeroClassData[lv_index].lv_name = StringExternal("Param/Value/lib_Core_4E8D9836");
    libCore_gv_dataHeroesHeroClassData[lv_index].lv_description = StringExternal("Param/Value/lib_Core_0926F6A8");
    libCore_gv_dataHeroesHeroClassData[lv_index].lv_icon = "Assets\\Textures\\storm_ui_icon_spec_tank.dds";
    lv_index = (c_heroRoleDamage);
    libCore_gv_dataHeroesHeroClassData[lv_index].lv_name = StringExternal("Param/Value/lib_Core_80E378AE");
    libCore_gv_dataHeroesHeroClassData[lv_index].lv_description = StringExternal("Param/Value/lib_Core_FE2FB805");
    libCore_gv_dataHeroesHeroClassData[lv_index].lv_icon = "Assets\\Textures\\storm_ui_icon_spec_damage.dds";
    lv_index = (c_heroRoleSupport);
    libCore_gv_dataHeroesHeroClassData[lv_index].lv_name = StringExternal("Param/Value/lib_Core_8E134A08");
    libCore_gv_dataHeroesHeroClassData[lv_index].lv_description = StringExternal("Param/Value/lib_Core_23F58B72");
    libCore_gv_dataHeroesHeroClassData[lv_index].lv_icon = "Assets\\Textures\\storm_ui_icon_spec_support.dds";
    lv_index = (c_heroRoleSpecialist);
    libCore_gv_dataHeroesHeroClassData[lv_index].lv_name = StringExternal("Param/Value/lib_Core_43154F2A");
    libCore_gv_dataHeroesHeroClassData[lv_index].lv_description = StringExternal("Param/Value/lib_Core_D02F84F3");
    libCore_gv_dataHeroesHeroClassData[lv_index].lv_icon = "Assets\\Textures\\storm_ui_icon_spec_siege.dds";
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataHeroesHeroClassData_Init () {
    libCore_gt_DataHeroesHeroClassData = TriggerCreate("libCore_gt_DataHeroesHeroClassData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Heroes - Hero Data
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataHeroesHeroData_Func (bool testConds, bool runActions) {
    int auto4FFE58C7_ae;
    int auto4FFE58C7_ai;
    int auto29BADEBA_ae;
    int auto29BADEBA_ai;
    int autoA819C035_ae;
    int autoA819C035_ai;
    int auto18AA4AFE_ae;
    int auto18AA4AFE_ai;
    int auto281C3A5D_ae;
    int auto281C3A5D_ai;
    int autoA808C219_ae;
    int autoA808C219_ai;
    int auto2F438DDA_ae;
    int auto2F438DDA_ai;
    int autoBEEDB3E7_ae;
    int autoBEEDB3E7_ai;
    int auto901BADF7_ae;
    int auto901BADF7_ai;
    int auto436418E4_ae;
    int auto436418E4_ai;
    int autoA9CAB4A1_ae;
    int autoA9CAB4A1_ai;

    // Variable Declarations
    int lv_numberOfBasicAbilities;
    string lv_heroID;
    string lv_unitType;
    int lv_classInt;
    int lv_universeInt;
    int lv_genderInt;
    int lv_requiredRewardCount;
    int lv_introCutsceneSizeInt;
    string lv_buttonID;
    string lv_fileString;
    int lv_talentCount;
    int lv_talentButtonIndex;
    int lv_talentIndex;
    int lv_tier;
    int lv_column;
    int lv_talentProfileCount;
    int lv_numberOfLevelUpAbils;
    int lv_numberOfLevelUpAbilMods;
    int lv_catalogInt;
    int lv_i;
    int lv_itAbility;
    int lv_k;
    int lv_itLevelUpAbility;
    int lv_itLevelUpAbilityMod;
    int lv_itHeroIndex;
    int lv_itRequiredReward;
    int lv_itTalentButton;
    int lv_itMutuallyExclusiveTalent;
    int lv_itPrerequisiteTalent;
    int lv_itTalentProfile;
    int lv_itSkin;
    int lv_itMount;
    int lv_itMountCategory;
    int lv_itAlternateHero;

    // Variable Initialization
    lv_heroID = "";
    lv_buttonID = "";
    lv_fileString = "";

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_heroes_RandomHeroID = (CatalogFieldValueGet(c_gameCatalogConfig, "HeroList", "RandomHero", c_playerAny));
    lv_numberOfBasicAbilities = ((libCore_gv_dataHeroesMaxAbilitiesPerHero - libCore_gv_dataTalentsNumberOfUltChoicesPerHero) - libCore_gv_dataHeroesMaxTraitAbilitiesPerHero);
    libCore_gv_dataHeroesNumberOfHeroes = CatalogFieldValueCount(c_gameCatalogConfig, "HeroList", "HeroArray", c_playerAny);
    auto4FFE58C7_ae = libCore_gv_dataHeroesNumberOfHeroes;
    auto4FFE58C7_ai = 1;
    lv_itHeroIndex = 1;
    for ( ; ( (auto4FFE58C7_ai >= 0 && lv_itHeroIndex <= auto4FFE58C7_ae) || (auto4FFE58C7_ai <= 0 && lv_itHeroIndex >= auto4FFE58C7_ae) ) ; lv_itHeroIndex += auto4FFE58C7_ai ) {
        lv_heroID = CatalogFieldValueGet(c_gameCatalogConfig, "HeroList", "HeroArray[" + IntToString((lv_itHeroIndex - 1)) + "]", c_playerAny);
        lv_unitType = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroID, "Unit", c_playerAny));
        if ((CatalogEntryIsValid(c_gameCatalogUnit, lv_unitType) == false)) {
            TextExpressionSetToken("Param/Expression/lib_Core_EB752F23", "A", StringToText(lv_heroID));
            TextExpressionSetToken("Param/Expression/lib_Core_EB752F23", "B", StringToText((lv_unitType)));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_EB752F23"), true);
            continue;
        }
        else {
        }
        if ((lv_unitType != null)) {
            libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_heroCatalogLink = (lv_heroID);
            libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_unitType = lv_unitType;
            libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_name = UnitTypeGetName(lv_unitType);
            lv_classInt = CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroID, "Role", c_playerAny);
            libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_class = lv_classInt;
            lv_universeInt = CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroID, "Universe", c_playerAny);
            libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_universe = lv_universeInt;
            lv_genderInt = CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroID, "Gender", c_playerAny);
            libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_gender = lv_genderInt;
            lv_requiredRewardCount = CatalogFieldValueCount(c_gameCatalogHero, lv_heroID, "RequiredRewardArray", c_playerAny);
            if ((lv_requiredRewardCount > libCore_gv_data_MaxRequiredRewards_C)) {
                TextExpressionSetToken("Param/Expression/lib_Core_DD38D11B", "A", StringToText(lv_heroID));
                TextExpressionSetToken("Param/Expression/lib_Core_DD38D11B", "B", IntToText(libCore_gv_data_MaxRequiredRewards_C));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_DD38D11B"), true);
                continue;
            }
            else {
            }
            auto29BADEBA_ae = lv_requiredRewardCount;
            auto29BADEBA_ai = 1;
            lv_itRequiredReward = 1;
            for ( ; ( (auto29BADEBA_ai >= 0 && lv_itRequiredReward <= auto29BADEBA_ae) || (auto29BADEBA_ai <= 0 && lv_itRequiredReward >= auto29BADEBA_ae) ) ; lv_itRequiredReward += auto29BADEBA_ai ) {
                libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_requiredRewardArray[lv_itRequiredReward] = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroID, "RequiredRewardArray[" + IntToString((lv_itRequiredReward - 1)) + "]", c_playerAny));
            }
            libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_requiredRewardCount = lv_requiredRewardCount;
            libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_isMelee = (CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroID, "Melee", c_playerAny) != 0);
            libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_description = StringExternal(CatalogFieldValueGet(c_gameCatalogHero, lv_heroID, "Description", c_playerAny));
            libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_portrait = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroID, "Portrait", c_playerAny));
            libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_leaderboardImage = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroID, "LeaderboardImage", c_playerAny));
            libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_heroSelectScreenButtonPortrait = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroID, "SelectScreenButtonImage", c_playerAny));
            libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_heroSelectScreenBackgroundImage = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroID, "SelectScreenBackgroundImage", c_playerAny));
            lv_introCutsceneSizeInt = CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroID, "IntroCutsceneSize", c_playerAny);
            libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_introCutsceneSize = lv_introCutsceneSizeInt;
            libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_isFlyer = (CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroID, "Flags[Flyer]", c_playerAny) == 1);
            libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_dEBUGPlayable = (CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroID, "Flags[Playable]", c_playerAny) == 1);
            if ((CatalogFieldValueCount(c_gameCatalogHero, lv_heroID, "AlternateUnitArray", c_playerAny) > libCore_gv_dataHeroesMaxAlternateHeroes)) {
                TextExpressionSetToken("Param/Expression/lib_Core_7C4C0D70", "A", StringToText(lv_heroID));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_7C4C0D70"), true);
                libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_numberOfAlternateUnitTypes = libCore_gv_dataHeroesMaxAlternateHeroes;
            }
            else {
                libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_numberOfAlternateUnitTypes = CatalogFieldValueCount(c_gameCatalogHero, lv_heroID, "AlternateUnitArray", c_playerAny);
            }
            autoA819C035_ae = libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_numberOfAlternateUnitTypes;
            autoA819C035_ai = 1;
            lv_itAlternateHero = 1;
            for ( ; ( (autoA819C035_ai >= 0 && lv_itAlternateHero <= autoA819C035_ae) || (autoA819C035_ai <= 0 && lv_itAlternateHero >= autoA819C035_ae) ) ; lv_itAlternateHero += autoA819C035_ai ) {
                libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_alternateUnitTypes[lv_itAlternateHero] = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroID, "AlternateUnitArray[" + IntToString((lv_itAlternateHero - 1)) + "]", c_playerAny));
            }
            if ((CatalogFieldValueCount(c_gameCatalogHero, lv_heroID, "HeroAbilArray", c_playerAny) < libCore_gv_dataHeroesMaxBasicAbilitiesPerHero)) {
                TextExpressionSetToken("Param/Expression/lib_Core_F480438E", "A", StringToText(lv_heroID));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_F480438E"), true);
                continue;
            }
            else {
            }
            libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_numberOfAbilities = CatalogFieldValueCount(c_gameCatalogHero, lv_heroID, "HeroAbilArray", c_playerAny);
            if ((libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_numberOfAbilities > libCore_gv_dataHeroesMaxAbilitiesPerHero)) {
                TextExpressionSetToken("Param/Expression/lib_Core_FF9AC70D", "A", StringToText(lv_heroID));
                TextExpressionSetToken("Param/Expression/lib_Core_FF9AC70D", "B", IntToText(libCore_gv_dataHeroesMaxAbilitiesPerHero));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_FF9AC70D"), true);
                continue;
            }
            else {
            }
            auto18AA4AFE_ae = libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_numberOfAbilities;
            auto18AA4AFE_ai = 1;
            lv_itAbility = 1;
            for ( ; ( (auto18AA4AFE_ai >= 0 && lv_itAbility <= auto18AA4AFE_ae) || (auto18AA4AFE_ai <= 0 && lv_itAbility >= auto18AA4AFE_ae) ) ; lv_itAbility += auto18AA4AFE_ai ) {
                libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_abilities[lv_itAbility].lv_ability = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroID, "HeroAbilArray[" + IntToString((lv_itAbility - 1)) + "].Abil", c_playerAny));
                libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_abilities[lv_itAbility].lv_isAffectedByCooldownReduction = (CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroID, "HeroAbilArray[" + IntToString((lv_itAbility - 1)) + "].Flags[" + IntToString(2) + "]", c_playerAny) == 1);
                libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_abilities[lv_itAbility].lv_isHeroic = (CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroID, "HeroAbilArray[" + IntToString((lv_itAbility - 1)) + "].Flags[" + IntToString(4) + "]", c_playerAny) == 1);
                libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_abilities[lv_itAbility].lv_isTrait = (CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroID, "HeroAbilArray[" + IntToString((lv_itAbility - 1)) + "].Flags[" + IntToString(5) + "]", c_playerAny) == 1);
                libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_abilities[lv_itAbility].lv_usesCharges = (CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroID, "HeroAbilArray[" + IntToString((lv_itAbility - 1)) + "].Flags[" + IntToString(1) + "]", c_playerAny) == 1);
                libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_abilities[lv_itAbility].lv_isAffectedByOverdrive = (CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroID, "HeroAbilArray[" + IntToString((lv_itAbility - 1)) + "].Flags[" + IntToString(3) + "]", c_playerAny) == 1);
            }
            lv_numberOfLevelUpAbils = CatalogFieldValueCount(c_gameCatalogHero, lv_heroID, "LevelScalingArray", c_playerAny);
            libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_levelUpAbilitiesCount = lv_numberOfLevelUpAbils;
            auto281C3A5D_ae = lv_numberOfLevelUpAbils;
            auto281C3A5D_ai = 1;
            lv_itLevelUpAbility = 1;
            for ( ; ( (auto281C3A5D_ai >= 0 && lv_itLevelUpAbility <= auto281C3A5D_ae) || (auto281C3A5D_ai <= 0 && lv_itLevelUpAbility >= auto281C3A5D_ae) ) ; lv_itLevelUpAbility += auto281C3A5D_ai ) {
                lv_numberOfLevelUpAbilMods = CatalogFieldValueCount(c_gameCatalogHero, lv_heroID, "LevelScalingArray[" + IntToString(lv_itLevelUpAbility - 1) + "].Modifications", c_playerAny);
                if ((lv_numberOfLevelUpAbilMods > libCore_gv_dataMaxCatalogChangesPerAbility)) {
                    TextExpressionSetToken("Param/Expression/lib_Core_8B879253", "A", StringToText(lv_heroID));
                    TextExpressionSetToken("Param/Expression/lib_Core_8B879253", "D", IntToText(lv_numberOfLevelUpAbilMods));
                    TextExpressionSetToken("Param/Expression/lib_Core_8B879253", "E", StringToText(CatalogFieldValueGet(c_gameCatalogHero, lv_heroID, "LevelScalingArray[" + IntToString((lv_itLevelUpAbility - 1)) + "].Ability", c_playerAny)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_8B879253"), true);
                    lv_numberOfLevelUpAbilMods = libCore_gv_dataMaxCatalogChangesPerAbility;
                    continue;
                }
                else {
                }
                libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_levelUpModificationData.lv_numberOfFieldChanges[lv_itLevelUpAbility] = lv_numberOfLevelUpAbilMods;
                autoA808C219_ae = lv_numberOfLevelUpAbilMods;
                autoA808C219_ai = 1;
                lv_itLevelUpAbilityMod = 1;
                for ( ; ( (autoA808C219_ai >= 0 && lv_itLevelUpAbilityMod <= autoA808C219_ae) || (autoA808C219_ai <= 0 && lv_itLevelUpAbilityMod >= autoA808C219_ae) ) ; lv_itLevelUpAbilityMod += autoA808C219_ai ) {
                    libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_levelUpModificationData.lv_affectedByAbilityPower[lv_itLevelUpAbility][lv_itLevelUpAbilityMod] = (CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroID, "LevelScalingArray[" + IntToString((lv_itLevelUpAbility - 1)) + "].Modifications[" + IntToString((lv_itLevelUpAbilityMod - 1)) + "].AffectedByAbilityPower", c_playerAny) == 1);
                    libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_levelUpModificationData.lv_affectedByOverdrive[lv_itLevelUpAbility][lv_itLevelUpAbilityMod] = (CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroID, "LevelScalingArray[" + IntToString((lv_itLevelUpAbility - 1)) + "].Modifications[" + IntToString((lv_itLevelUpAbilityMod - 1)) + "].AffectedByOverdrive", c_playerAny) == 1);
                    lv_catalogInt = CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroID, "LevelScalingArray[" + IntToString((lv_itLevelUpAbility - 1)) + "].Modifications[" + IntToString((lv_itLevelUpAbilityMod - 1)) + "].Catalog", c_playerAny);
                    libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_levelUpModificationData.lv_catalog[lv_itLevelUpAbility][lv_itLevelUpAbilityMod] = lv_catalogInt;
                    libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_levelUpModificationData.lv_entry[lv_itLevelUpAbility][lv_itLevelUpAbilityMod] = CatalogFieldValueGet(c_gameCatalogHero, lv_heroID, "LevelScalingArray[" + IntToString((lv_itLevelUpAbility - 1)) + "].Modifications[" + IntToString((lv_itLevelUpAbilityMod - 1)) + "].Entry", c_playerAny);
                    libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_levelUpModificationData.lv_field[lv_itLevelUpAbility][lv_itLevelUpAbilityMod] = CatalogFieldValueGet(c_gameCatalogHero, lv_heroID, "LevelScalingArray[" + IntToString((lv_itLevelUpAbility - 1)) + "].Modifications[" + IntToString((lv_itLevelUpAbilityMod - 1)) + "].Field", c_playerAny);
                    libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_levelUpModificationData.lv_fieldIsInteger[lv_itLevelUpAbility][lv_itLevelUpAbilityMod] = (CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroID, "LevelScalingArray[" + IntToString((lv_itLevelUpAbility - 1)) + "].Modifications[" + IntToString((lv_itLevelUpAbilityMod - 1)) + "].FieldIsInteger", c_playerAny) == 1);
                    libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_levelUpModificationData.lv_valueAddedPerLevel[lv_itLevelUpAbility][lv_itLevelUpAbilityMod] = StringToFixed(CatalogFieldValueGet(c_gameCatalogHero, lv_heroID, "LevelScalingArray[" + IntToString((lv_itLevelUpAbility - 1)) + "].Modifications[" + IntToString((lv_itLevelUpAbilityMod - 1)) + "].Value", c_playerAny));
                }
            }
            libCore_gv_dataHeroesHeroClassData[lv_classInt].lv_numberOfHeroesInTheClass += 1;
            libCore_gv_dataHeroesHeroClassData[lv_classInt].lv_heroesInTheClass[libCore_gv_dataHeroesHeroClassData[lv_classInt].lv_numberOfHeroesInTheClass] = lv_itHeroIndex;
            lv_talentCount = CatalogFieldValueCount(c_gameCatalogHero, lv_heroID, "TalentTreeArray", c_playerAny);
            if ((lv_talentCount > libCore_gv_talents_MaxTalentsPerHero_C)) {
                TextExpressionSetToken("Param/Expression/lib_Core_90F15EA4", "A", StringToText(lv_heroID));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_90F15EA4"), true);
                continue;
            }
            else {
            }
            auto2F438DDA_ae = lv_talentCount;
            auto2F438DDA_ai = 1;
            lv_itTalentButton = 1;
            for ( ; ( (auto2F438DDA_ai >= 0 && lv_itTalentButton <= auto2F438DDA_ae) || (auto2F438DDA_ai <= 0 && lv_itTalentButton >= auto2F438DDA_ae) ) ; lv_itTalentButton += auto2F438DDA_ai ) {
                lv_tier = CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroID, "TalentTreeArray[" + IntToString((lv_itTalentButton - 1)) + "].Tier", c_playerAny);
                lv_column = CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroID, "TalentTreeArray[" + IntToString((lv_itTalentButton - 1)) + "].Column", c_playerAny);
                lv_talentIndex = libCore_gf_TalentsTalentIndexFromTalentLink((CatalogFieldValueGet(c_gameCatalogHero, lv_heroID, "TalentTreeArray[" + IntToString((lv_itTalentButton - 1)) + "].Talent", c_playerAny)));
                lv_talentButtonIndex = libCore_gf_DataHeroesExistingTalentButtonIndexForColumnAndTier(lv_itHeroIndex, lv_tier, lv_column);
                if ((lv_talentButtonIndex == 0)) {
                    libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_talentCount += 1;
                    lv_talentButtonIndex = libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_talentCount;
                }
                else {
                    libCore_gf_DataHeroesRemoveButtonFromTalentToButtonMapping(lv_itHeroIndex, lv_talentButtonIndex);
                    if ((lv_talentIndex == 0)) {
                        libCore_gf_DataHeroesRemoveTalentFromHeroTalentArray(lv_itHeroIndex, lv_talentButtonIndex);
                        continue;
                    }
                    else {
                    }
                }
                libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_talentBucket[lv_talentButtonIndex].lv_talentIndex = lv_talentIndex;
                libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_talentToButtonMap[lv_talentIndex] = lv_talentButtonIndex;
                if (((lv_tier < 0) || (lv_tier > libCore_gv_talentsBucket_MaxTiers_C))) {
                    TextExpressionSetToken("Param/Expression/lib_Core_B9CDE19B", "A", StringToText(lv_heroID));
                    TextExpressionSetToken("Param/Expression/lib_Core_B9CDE19B", "B", IntToText((lv_talentButtonIndex - 1)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_B9CDE19B"), true);
                }
                else {
                }
                libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_talentBucket[lv_talentButtonIndex].lv_tier = lv_tier;
                if (((lv_column < 0) || (lv_column > libCore_gv_talentsBucket_MaxTalentsPerTier_C))) {
                    TextExpressionSetToken("Param/Expression/lib_Core_FE68FF85", "A", StringToText(lv_heroID));
                    TextExpressionSetToken("Param/Expression/lib_Core_FE68FF85", "B", IntToText((lv_talentButtonIndex - 1)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_FE68FF85"), true);
                }
                else {
                }
                libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_talentBucket[lv_talentButtonIndex].lv_column = lv_column;
                lv_talentProfileCount = CatalogFieldValueCount(c_gameCatalogHero, lv_heroID, "TalentProfileArray", c_playerAny);
                if ((lv_talentProfileCount > libCore_gv_talents_MaxDefaultTalentProfilesPerHero_C)) {
                    TextExpressionSetToken("Param/Expression/lib_Core_115E61FE", "A", StringToText(lv_heroID));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_115E61FE"), true);
                    continue;
                }
                else {
                }
                libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_talentProfileCount = lv_talentProfileCount;
                autoBEEDB3E7_ae = lv_talentProfileCount;
                autoBEEDB3E7_ai = 1;
                lv_itTalentProfile = 1;
                for ( ; ( (autoBEEDB3E7_ai >= 0 && lv_itTalentProfile <= autoBEEDB3E7_ae) || (autoBEEDB3E7_ai <= 0 && lv_itTalentProfile >= autoBEEDB3E7_ae) ) ; lv_itTalentProfile += autoBEEDB3E7_ai ) {
                    libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_talentProfiles[lv_itTalentProfile] = libCore_gf_TalentsTalentProfileIndexFromTalentProfileLink((CatalogFieldValueGet(c_gameCatalogHero, lv_heroID, "TalentProfileArray[" + IntToString((lv_itTalentProfile - 1)) + "]", c_playerAny)));
                }
            }
            libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_usesMounts = (CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroID, "Flags[UsesMount]", c_playerAny) != 0);
            libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_allowedMountCategoryCount = CatalogFieldValueCount(c_gameCatalogHero, lv_heroID, "AllowedMountCategoryArray", c_playerAny);
            if ((libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_allowedMountCategoryCount > libCore_gv_data_MaxHeroAllowedMountCategories_C)) {
                TextExpressionSetToken("Param/Expression/lib_Core_7CAFB80E", "A", StringToText(lv_heroID));
                TextExpressionSetToken("Param/Expression/lib_Core_7CAFB80E", "B", IntToText(libCore_gv_data_MaxHeroAllowedMountCategories_C));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_7CAFB80E"), true);
                libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_allowedMountCategoryCount = libCore_gv_data_MaxHeroAllowedMountCategories_C;
            }
            else {
            }
            auto901BADF7_ae = libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_allowedMountCategoryCount;
            auto901BADF7_ai = 1;
            lv_itMountCategory = 1;
            for ( ; ( (auto901BADF7_ai >= 0 && lv_itMountCategory <= auto901BADF7_ae) || (auto901BADF7_ai <= 0 && lv_itMountCategory >= auto901BADF7_ae) ) ; lv_itMountCategory += auto901BADF7_ai ) {
                libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_allowedMountCategories[lv_itMountCategory] = CatalogFieldValueGet(c_gameCatalogHero, lv_heroID, "AllowedMountCategoryArray[" + IntToString((lv_itMountCategory - 1)) + "]", c_playerAny);
            }
            libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_defaultMount = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroID, "DefaultMount", c_playerAny));
            libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_skinCount += 1;
            libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_skinArray[libCore_gv_dataHeroesHeroData[lv_itHeroIndex].lv_skinCount] = "Default";
            auto436418E4_ae = (CatalogFieldValueCount(c_gameCatalogHero, lv_heroID, "SkinArray", c_playerAny) - 1);
            auto436418E4_ai = 1;
            lv_itSkin = 0;
            for ( ; ( (auto436418E4_ai >= 0 && lv_itSkin <= auto436418E4_ae) || (auto436418E4_ai <= 0 && lv_itSkin >= auto436418E4_ae) ) ; lv_itSkin += auto436418E4_ai ) {
                libCore_gf_DataHeroesAddSkinPlusVariationsToHero(lv_itHeroIndex, (CatalogFieldValueGet(c_gameCatalogHero, lv_heroID, "SkinArray[" + IntToString(lv_itSkin) + "]", c_playerAny)));
            }
            autoA9CAB4A1_ae = (CatalogFieldValueCount(c_gameCatalogHero, lv_heroID, "VariationArray", c_playerAny) - 1);
            autoA9CAB4A1_ai = 1;
            lv_itSkin = 0;
            for ( ; ( (autoA9CAB4A1_ai >= 0 && lv_itSkin <= autoA9CAB4A1_ae) || (autoA9CAB4A1_ai <= 0 && lv_itSkin >= autoA9CAB4A1_ae) ) ; lv_itSkin += autoA9CAB4A1_ai ) {
                libCore_gf_DataHeroesAddSkinPlusVariationsToHero(lv_itHeroIndex, (CatalogFieldValueGet(c_gameCatalogHero, lv_heroID, "VariationArray[" + IntToString(lv_itSkin) + "]", c_playerAny)));
            }
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataHeroesHeroData_Init () {
    libCore_gt_DataHeroesHeroData = TriggerCreate("libCore_gt_DataHeroesHeroData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Hero VO - Map Data Fields
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataHeroVOMapDataFields_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Revive, "Revive");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Healed, "Healed");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Resurrected, "Resurrected");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Pissed, "Pissed");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_GenericKill, "KillGeneric");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_TeamKilled, "TeamKilled");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Laugh, "Laugh");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_EndEnemyKillingSpree, "EndEnemyKillSpree");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_TalentChosen, "SpecChosen");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Celebrate, "Celebrate");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_WorthIt, "WorthIt");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Comeback, "Comeback");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AIRetreat, "AIRetreat");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AIGoodJob, "AIGoodJob");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AIOnMyWay, "AIOnMyWay");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AIMercCapture, "AIMercCapture");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AICaution, "AICaution");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AIAttack, "AIAttack");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AIUhOh, "AIUhOh");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_AIHeal, "AIHeal");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingAttackHere, "PingAttackHere");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingDefendHere, "PingDefendHere");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingAttackTown, "PingAttackTown");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingDefendTown, "PingDefendTown");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingAttackWatchTower, "PingAttackWatchTower");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingDefendWatchTower, "PingDefendWatchTower");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingAttackCore, "PingAttackCore");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingDefendCore, "PingDefendCore");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingAttackMercCamp, "PingAttackMercCamp");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingKillHero, "PingAttackHero");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingAssistHero, "PingAssistHero");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_PingAssistMe, "PingAssistMe");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_IntroQuestion, "IntroQuestion");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_IntroResponse, "IntroResponse");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_IntroBoast, "IntroBoast");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_IntroAgree, "IntroAgree");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_VOXGetHit, "GetHit");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_VOXGetHitLarge, "GetHitLarge");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_VOXGetHitSmall, "GetHitSmall");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Hello, "Hello");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Thanks, "Thanks");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_WellPlayed, "WellPlayed");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Sorry, "Sorry");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Goodbye, "Goodbye");
    libCore_gf_DataHeroVOMapDataField(libCore_ge_HeroVOEvents_Cheer, "Cheer");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataHeroVOMapDataFields_Init () {
    libCore_gt_DataHeroVOMapDataFields = TriggerCreate("libCore_gt_DataHeroVOMapDataFields_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Hero VO - Initialize Hero VO Data
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataHeroVOInitializeHeroVOData_Func (bool testConds, bool runActions) {
    int auto0B810A80_ae;
    int auto0B810A80_ai;
    int auto81DED13E_ae;
    int auto81DED13E_ai;

    // Variable Declarations
    int lv_playerindex;
    int lv_heroindex;
    int lv_eventindex;
    int lv_lineindex;
    string lv_heroCatalogLink;
    string lv_dataField;

    // Variable Initialization
    lv_dataField = "";

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libCore_gt_DataHeroVOMapDataFields, true, true);
    auto0B810A80_ae = libCore_gv_dataHeroesNumberOfHeroes;
    auto0B810A80_ai = 1;
    lv_heroindex = 1;
    for ( ; ( (auto0B810A80_ai >= 0 && lv_heroindex <= auto0B810A80_ae) || (auto0B810A80_ai <= 0 && lv_heroindex >= auto0B810A80_ae) ) ; lv_heroindex += auto0B810A80_ai ) {
        auto81DED13E_ae = libCore_gv_bALMaxPlayers;
        auto81DED13E_ai = 1;
        lv_playerindex = 1;
        for ( ; ( (auto81DED13E_ai >= 0 && lv_playerindex <= auto81DED13E_ae) || (auto81DED13E_ai <= 0 && lv_playerindex >= auto81DED13E_ae) ) ; lv_playerindex += auto81DED13E_ai ) {
            libCore_gf_DataHeroVOReloadHeroVODataForHero(lv_heroindex, lv_playerindex);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataHeroVOInitializeHeroVOData_Init () {
    libCore_gt_DataHeroVOInitializeHeroVOData = TriggerCreate("libCore_gt_DataHeroVOInitializeHeroVOData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Minion Scaling Data
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataMinionScalingData_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSCustomMinionsEnabled == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gf_DataInitializeScalingDataForMinion("FootmanMinion", libCore_ge_MinionTypes_Footmen, "FootmanMinionScaling");
    libCore_gf_DataInitializeScalingDataForMinion("WizardMinion", libCore_ge_MinionTypes_Wizard, "WizardMinionScaling");
    libCore_gf_DataInitializeScalingDataForMinion("RangedMinion", libCore_ge_MinionTypes_Ranged, "RangedMinionScaling");
    libCore_gf_DataInitializeScalingDataForMinion("CatapultMinion", libCore_ge_MinionTypes_Catapult, "CatapultMinionScaling");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataMinionScalingData_Init () {
    libCore_gt_DataMinionScalingData = TriggerCreate("libCore_gt_DataMinionScalingData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Minion Wave Composition Data
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataMinionWaveCompositionData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_composition;
    int lv_group;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSCustomMinionsEnabled == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_composition = (libCore_ge_MinionWaveCompositions_Standard);
    lv_group = 0;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_name = StringExternal("Param/Value/lib_Core_A78308CE");
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_enabled = true;
    lv_group += 1;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionType[lv_group][libGame_gv_teamOrderIndex_C] = libCore_ge_MinionTypes_Footmen;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionType[lv_group][libGame_gv_teamChaosIndex_C] = libCore_ge_MinionTypes_Footmen;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionCount[lv_group] = 3;
    lv_group += 1;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionType[lv_group][libGame_gv_teamOrderIndex_C] = libCore_ge_MinionTypes_Wizard;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionType[lv_group][libGame_gv_teamChaosIndex_C] = libCore_ge_MinionTypes_Wizard;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionCount[lv_group] = 1;
    lv_group += 1;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionType[lv_group][libGame_gv_teamOrderIndex_C] = libCore_ge_MinionTypes_Ranged;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionType[lv_group][libGame_gv_teamChaosIndex_C] = libCore_ge_MinionTypes_Ranged;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionCount[lv_group] = 3;
    lv_group += 1;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionType[lv_group][libGame_gv_teamOrderIndex_C] = libCore_ge_MinionTypes_Catapult;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionType[lv_group][libGame_gv_teamChaosIndex_C] = libCore_ge_MinionTypes_Catapult;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionCount[lv_group] = 1;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_numberOfGroups = lv_group;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataMinionWaveCompositionData_Init () {
    libCore_gt_DataMinionWaveCompositionData = TriggerCreate("libCore_gt_DataMinionWaveCompositionData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Initialize Mount Data
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataInitializeMountData_Func (bool testConds, bool runActions) {
    int autoEE185B55_ae;
    int autoEE185B55_ai;

    // Variable Declarations
    int lv_itMount;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoEE185B55_ae = CatalogFieldValueCount(c_gameCatalogConfig, "HeroList", "MountArray", c_playerAny);
    autoEE185B55_ai = 1;
    lv_itMount = 1;
    for ( ; ( (autoEE185B55_ai >= 0 && lv_itMount <= autoEE185B55_ae) || (autoEE185B55_ai <= 0 && lv_itMount >= autoEE185B55_ae) ) ; lv_itMount += autoEE185B55_ai ) {
        libCore_gf_DataMountsAddMountPlusVariationsToMountList((CatalogFieldValueGet(c_gameCatalogConfig, "HeroList", "MountArray[" + IntToString((lv_itMount - 1)) + "].Mount", c_playerAny)), StringToFixed(CatalogFieldValueGet(c_gameCatalogConfig, "HeroList", "MountArray[" + IntToString((lv_itMount - 1)) + "].ModelScale", c_playerAny)), StringToFixed(CatalogFieldValueGet(c_gameCatalogConfig, "HeroList", "MountArray[" + IntToString((lv_itMount - 1)) + "].WalkAnimMoveSpeed", c_playerAny)), CatalogFieldValueGet(c_gameCatalogConfig, "HeroList", "MountArray[" + IntToString((lv_itMount - 1)) + "].HeroPoseAnimGroup", c_playerAny));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataInitializeMountData_Init () {
    libCore_gt_DataInitializeMountData = TriggerCreate("libCore_gt_DataInitializeMountData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Death Times
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataDeathTimes_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_bALDeathTimes[1] = 9.0;
    libCore_gv_bALDeathTimes[2] = 10.0;
    libCore_gv_bALDeathTimes[3] = 11.0;
    libCore_gv_bALDeathTimes[4] = 12.0;
    libCore_gv_bALDeathTimes[5] = 13.0;
    libCore_gv_bALDeathTimes[6] = 14.0;
    libCore_gv_bALDeathTimes[7] = 16.0;
    libCore_gv_bALDeathTimes[8] = 18.0;
    libCore_gv_bALDeathTimes[9] = 20.0;
    libCore_gv_bALDeathTimes[10] = 23.0;
    libCore_gv_bALDeathTimes[11] = 26.0;
    libCore_gv_bALDeathTimes[12] = 29.0;
    libCore_gv_bALDeathTimes[13] = 32.0;
    libCore_gv_bALDeathTimes[14] = 36.0;
    libCore_gv_bALDeathTimes[15] = 40.0;
    libCore_gv_bALDeathTimes[16] = 44.0;
    libCore_gv_bALDeathTimes[17] = 50.0;
    libCore_gv_bALDeathTimes[18] = 56.0;
    libCore_gv_bALDeathTimes[19] = 62.0;
    libCore_gv_bALDeathTimes[20] = 65.0;
    libCore_gv_bALDeathTimes[21] = 65.0;
    libCore_gv_bALDeathTimes[22] = 65.0;
    libCore_gv_bALDeathTimes[23] = 65.0;
    libCore_gv_bALDeathTimes[24] = 65.0;
    libCore_gv_bALDeathTimes[25] = 65.0;
    libCore_gv_bALDeathTimes[26] = 65.0;
    libCore_gv_bALDeathTimes[27] = 65.0;
    libCore_gv_bALDeathTimes[28] = 65.0;
    libCore_gv_bALDeathTimes[29] = 65.0;
    libCore_gv_bALDeathTimes[30] = 65.0;
    libCore_gv_bALMaxDeathTime = libCore_gv_bALDeathTimes[libCore_gv_bALMaxLevel];
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataDeathTimes_Init () {
    libCore_gt_DataDeathTimes = TriggerCreate("libCore_gt_DataDeathTimes_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Initialize Skin Data
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataInitializeSkinData_Func (bool testConds, bool runActions) {
    int auto10BE01FC_ae;
    int auto10BE01FC_ai;
    int auto31DFE623_ae;
    int auto31DFE623_ai;
    int auto71C3AD7F_ae;
    int auto71C3AD7F_ai;
    int autoE3A8C6CD_ae;
    int autoE3A8C6CD_ai;

    // Variable Declarations
    int lv_itSkin;
    int lv_itReward;
    int lv_itActorMessage;
    int lv_itMountCategory;
    string lv_skinID;
    int lv_requiredRewardCount;
    int lv_actorMessageCount;

    // Variable Initialization
    lv_skinID = "";

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_dataSkinsSkinCount += 1;
    libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_skinID = ("Default");
    libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_skinName = StringExternal("Param/Value/lib_Core_87E596F0");
    libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_requiredRewardCount = 0;
    auto10BE01FC_ae = CatalogEntryCount(c_gameCatalogSkin);
    auto10BE01FC_ai = 1;
    lv_itSkin = 1;
    for ( ; ( (auto10BE01FC_ai >= 0 && lv_itSkin <= auto10BE01FC_ae) || (auto10BE01FC_ai <= 0 && lv_itSkin >= auto10BE01FC_ae) ) ; lv_itSkin += auto10BE01FC_ai ) {
        lv_skinID = (CatalogEntryGet(c_gameCatalogSkin, lv_itSkin));
        libCore_gv_dataSkinsSkinCount += 1;
        if ((libCore_gv_dataSkinsSkinCount > libCore_gv_dataSkinsMaxSkinCount)) {
            TextExpressionSetToken("Param/Expression/lib_Core_732331AF", "A", IntToText(libCore_gv_dataSkinsMaxSkinCount));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_732331AF"), true);
            return true;
        }
        else {
        }
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_skinID = (lv_skinID);
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_skinName = StringExternal(("Skin/Name/" + lv_skinID));
        lv_requiredRewardCount = CatalogFieldValueCount(c_gameCatalogSkin, lv_skinID, "RequiredRewardArray", c_playerAny);
        if ((lv_requiredRewardCount > libCore_gv_data_MaxRequiredRewards_C)) {
            TextExpressionSetToken("Param/Expression/lib_Core_0A943537", "A", StringToText(lv_skinID));
            TextExpressionSetToken("Param/Expression/lib_Core_0A943537", "B", IntToText(libCore_gv_data_MaxRequiredRewards_C));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_0A943537"), true);
            continue;
        }
        else {
        }
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_requiredRewardCount = lv_requiredRewardCount;
        auto31DFE623_ae = lv_requiredRewardCount;
        auto31DFE623_ai = 1;
        lv_itReward = 1;
        for ( ; ( (auto31DFE623_ai >= 0 && lv_itReward <= auto31DFE623_ae) || (auto31DFE623_ai <= 0 && lv_itReward >= auto31DFE623_ae) ) ; lv_itReward += auto31DFE623_ai ) {
            libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_requiredRewardArray[lv_itReward] = (CatalogFieldValueGet(c_gameCatalogSkin, lv_skinID, "RequiredRewardArray[" + IntToString((lv_itReward - 1)) + "]", c_playerAny));
        }
        lv_actorMessageCount = CatalogFieldValueCount(c_gameCatalogSkin, lv_skinID, "CreationActorMessageArray", c_playerAny);
        if ((lv_actorMessageCount > libCore_gv_dataSkinsMaxActorMessageCount)) {
            TextExpressionSetToken("Param/Expression/lib_Core_0A4BF5B3", "A", StringToText(lv_skinID));
            TextExpressionSetToken("Param/Expression/lib_Core_0A4BF5B3", "B", IntToText(libCore_gv_dataSkinsMaxActorMessageCount));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_0A4BF5B3"), true);
            continue;
        }
        else {
        }
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_actorMessageCount = lv_actorMessageCount;
        auto71C3AD7F_ae = lv_actorMessageCount;
        auto71C3AD7F_ai = 1;
        lv_itActorMessage = 1;
        for ( ; ( (auto71C3AD7F_ai >= 0 && lv_itActorMessage <= auto71C3AD7F_ae) || (auto71C3AD7F_ai <= 0 && lv_itActorMessage >= auto71C3AD7F_ae) ) ; lv_itActorMessage += auto71C3AD7F_ai ) {
            if ((CatalogFieldValueGetAsInt(c_gameCatalogSkin, lv_skinID, "CreationActorMessageArray[" + IntToString((lv_itActorMessage - 1)) + "].Context", c_playerAny) != (c_variationContextHeroCutscene))) {
                libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_actorMessageArray[lv_itActorMessage] = CatalogFieldValueGet(c_gameCatalogSkin, lv_skinID, "CreationActorMessageArray[" + IntToString((lv_itActorMessage - 1)) + "].Send", c_playerAny);
            }
            else {
            }
        }
        libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_allowedMountCategoryCount = CatalogFieldValueCount(c_gameCatalogSkin, lv_skinID, "AdditionalMountCategoryArray", c_playerAny);
        if ((libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_allowedMountCategoryCount > libCore_gv_data_MaxSkinAllowedMountCategories_C)) {
            TextExpressionSetToken("Param/Expression/lib_Core_5A040AB1", "A", StringToText(lv_skinID));
            TextExpressionSetToken("Param/Expression/lib_Core_5A040AB1", "B", IntToText(libCore_gv_data_MaxSkinAllowedMountCategories_C));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_5A040AB1"), true);
            libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_allowedMountCategoryCount = libCore_gv_data_MaxSkinAllowedMountCategories_C;
        }
        else {
        }
        autoE3A8C6CD_ae = libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_allowedMountCategoryCount;
        autoE3A8C6CD_ai = 1;
        lv_itMountCategory = 1;
        for ( ; ( (autoE3A8C6CD_ai >= 0 && lv_itMountCategory <= autoE3A8C6CD_ae) || (autoE3A8C6CD_ai <= 0 && lv_itMountCategory >= autoE3A8C6CD_ae) ) ; lv_itMountCategory += autoE3A8C6CD_ai ) {
            libCore_gv_dataSkinsSkinData[libCore_gv_dataSkinsSkinCount].lv_allowedMountCategories[lv_itMountCategory] = CatalogFieldValueGet(c_gameCatalogSkin, lv_skinID, "AdditionalMountCategoryArray[" + IntToString((lv_itMountCategory - 1)) + "]", c_playerAny);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataInitializeSkinData_Init () {
    libCore_gt_DataInitializeSkinData = TriggerCreate("libCore_gt_DataInitializeSkinData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talents Data Initialization
//--------------------------------------------------------------------------------------------------
bool libCore_gt_TalentsDataInitialization_Func (bool testConds, bool runActions) {
    int auto60754D26_ae;
    int auto60754D26_ai;
    int auto2292373F_ae;
    int auto2292373F_ai;
    int auto10844425_ae;
    int auto10844425_ai;
    int autoC32767C7_ae;
    int autoC32767C7_ai;
    int auto14C6FF65_ae;
    int auto14C6FF65_ai;

    // Variable Declarations
    string lv_talentID;
    string lv_buttonID;
    string lv_masteryAbil;
    int lv_rankCount;
    int lv_behaviorCount;
    string lv_talentCatalogEntry;
    int lv_abilityModCount;
    int lv_abilIndex;
    string lv_selectButton;
    int lv_numberOfFieldChanges;
    int lv_catalogInt;
    int lv_changeTypeInt;
    string lv_originalButton;
    string lv_updatedButton;
    int lv_itTalentIndex;
    int lv_itRank;
    int lv_itBehavior;
    int lv_itAbilityMod;
    int lv_itAbilityModChange;

    // Variable Initialization
    lv_talentID = "";
    lv_buttonID = "";
    lv_masteryAbil = "";
    lv_selectButton = "";
    lv_originalButton = "";
    lv_updatedButton = "";

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_talents_TalentEntryCount = CatalogEntryCount(c_gameCatalogTalent);
    if ((libCore_gv_talents_TalentEntryCount > libCore_gv_talents_MaxTalentEntryCount_C)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Core_2C668218"), true);
        libCore_gv_talents_TalentEntryCount = libCore_gv_talents_MaxTalentEntryCount_C;
    }
    else {
    }
    auto60754D26_ae = libCore_gv_talents_TalentEntryCount;
    auto60754D26_ai = 1;
    lv_itTalentIndex = 1;
    for ( ; ( (auto60754D26_ai >= 0 && lv_itTalentIndex <= auto60754D26_ae) || (auto60754D26_ai <= 0 && lv_itTalentIndex >= auto60754D26_ae) ) ; lv_itTalentIndex += auto60754D26_ai ) {
        lv_talentCatalogEntry = CatalogEntryGet(c_gameCatalogTalent, lv_itTalentIndex);
        lv_talentID = (lv_talentCatalogEntry);
        libCore_gv_talents_TalentData[lv_itTalentIndex].lv_talentCatalogLink = (lv_talentID);
        lv_buttonID = CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "Face", c_playerAny);
        if ((lv_buttonID == "")) {
            TextExpressionSetToken("Param/Expression/lib_Core_D7FB00C7", "A", StringToText(lv_talentID));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_D7FB00C7"), true);
            continue;
        }
        else {
        }
        libCore_gv_talents_TalentData[lv_itTalentIndex].lv_icon = (CatalogFieldValueGet(c_gameCatalogButton, lv_buttonID, "Icon", c_playerAny));
        libCore_gv_talents_TalentData[lv_itTalentIndex].lv_name = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_buttonID, "Name", c_playerAny));
        libCore_gv_talents_TalentData[lv_itTalentIndex].lv_tooltip = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_buttonID, "Tooltip", c_playerAny));
        lv_masteryAbil = CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "MasteryAbility", c_playerAny);
        if ((lv_masteryAbil != "")) {
            libCore_gv_talents_TalentData[lv_itTalentIndex].lv_masteryAbilLink = (lv_masteryAbil);
        }
        else {
        }
        lv_rankCount = CatalogFieldValueCount(c_gameCatalogTalent, lv_talentID, "RankArray", c_playerAny);
        if ((lv_rankCount > libCore_gv_talents_MaxTalentRank_C)) {
            TextExpressionSetToken("Param/Expression/lib_Core_D7C81C99", "A", StringToText(lv_talentID));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_D7C81C99"), false);
            lv_rankCount = libCore_gv_talents_MaxTalentRank_C;
            continue;
        }
        else {
        }
        auto2292373F_ae = lv_rankCount;
        auto2292373F_ai = 1;
        lv_itRank = 1;
        for ( ; ( (auto2292373F_ai >= 0 && lv_itRank <= auto2292373F_ae) || (auto2292373F_ai <= 0 && lv_itRank >= auto2292373F_ae) ) ; lv_itRank += auto2292373F_ai ) {
            libCore_gv_talents_TalentData[lv_itTalentIndex].lv_rankData.lv_item = (CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].Item", c_playerAny));
            libCore_gv_talents_TalentData[lv_itTalentIndex].lv_rankData.lv_upgrade = (CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].Upgrade", c_playerAny));
            libCore_gv_talents_TalentData[lv_itTalentIndex].lv_rankData.lv_abilityPower = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].AbilityPower", c_playerAny));
            libCore_gv_talents_TalentData[lv_itTalentIndex].lv_rankData.lv_cooldownReduction = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].CooldownReduction", c_playerAny));
            libCore_gv_talents_TalentData[lv_itTalentIndex].lv_rankData.lv_attackDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].AttackDamage", c_playerAny));
            libCore_gv_talents_TalentData[lv_itTalentIndex].lv_rankData.lv_siegeDamage = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].SiegeDamage", c_playerAny));
            libCore_gv_talents_TalentData[lv_itTalentIndex].lv_rankData.lv_lifesteal = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].LifeLeech", c_playerAny));
            libCore_gv_talents_TalentData[lv_itTalentIndex].lv_rankData.lv_increaseAttackSpeed = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].AttackSpeed", c_playerAny));
            libCore_gv_talents_TalentData[lv_itTalentIndex].lv_rankData.lv_increaseMovementSpeed = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].MovementSpeed", c_playerAny));
            libCore_gv_talents_TalentData[lv_itTalentIndex].lv_rankData.lv_hitPoints = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].Life", c_playerAny));
            libCore_gv_talents_TalentData[lv_itTalentIndex].lv_rankData.lv_shields = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].Shields", c_playerAny));
            libCore_gv_talents_TalentData[lv_itTalentIndex].lv_rankData.lv_mana = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].Energy", c_playerAny));
            libCore_gv_talents_TalentData[lv_itTalentIndex].lv_rankData.lv_hitPointRegen = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].LifeRegenRate", c_playerAny));
            libCore_gv_talents_TalentData[lv_itTalentIndex].lv_rankData.lv_hitPointRegenFraction = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].LifeRegenRateFraction", c_playerAny));
            libCore_gv_talents_TalentData[lv_itTalentIndex].lv_rankData.lv_manaRegen = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].EnergyRegenRate", c_playerAny));
            lv_buttonID = CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].Face", c_playerAny);
            if ((lv_buttonID == "")) {
                TextExpressionSetToken("Param/Expression/lib_Core_72FA9D83", "A", StringToText(lv_talentID));
                TextExpressionSetToken("Param/Expression/lib_Core_72FA9D83", "B", IntToText((lv_itRank - 1)));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_72FA9D83"), true);
            }
            else {
                libCore_gv_talents_TalentData[lv_itTalentIndex].lv_icon = (CatalogFieldValueGet(c_gameCatalogButton, lv_buttonID, "Icon", c_playerAny));
                libCore_gv_talents_TalentData[lv_itTalentIndex].lv_name = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_buttonID, "Name", c_playerAny));
                libCore_gv_talents_TalentData[lv_itTalentIndex].lv_tooltip = StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_buttonID, "Tooltip", c_playerAny));
            }
            lv_behaviorCount = CatalogFieldValueCount(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString(lv_itRank - 1) + "].BehaviorArray", c_playerAny);
            if ((lv_behaviorCount > libCore_gv_talents_MaxTalentBehaviorsPerRank_C)) {
                TextExpressionSetToken("Param/Expression/lib_Core_95D7BB64", "A", StringToText(lv_talentID));
                TextExpressionSetToken("Param/Expression/lib_Core_95D7BB64", "B", IntToText((lv_itRank - 1)));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_95D7BB64"), true);
                continue;
            }
            else {
            }
            libCore_gv_talents_TalentData[lv_itTalentIndex].lv_rankData.lv_behaviorCount = lv_behaviorCount;
            auto10844425_ae = lv_behaviorCount;
            auto10844425_ai = 1;
            lv_itBehavior = 1;
            for ( ; ( (auto10844425_ai >= 0 && lv_itBehavior <= auto10844425_ae) || (auto10844425_ai <= 0 && lv_itBehavior >= auto10844425_ae) ) ; lv_itBehavior += auto10844425_ai ) {
                libCore_gv_talents_TalentData[lv_itTalentIndex].lv_rankData.lv_behaviors[lv_itBehavior] = (CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString((lv_itRank - 1)) + "].BehaviorArray[" + IntToString((lv_itBehavior - 1)) + "]", c_playerAny));
            }
            libCore_gv_talents_TalentData[lv_itTalentIndex].lv_abilityModifications = CatalogFieldValueCount(c_gameCatalogTalent, lv_talentCatalogEntry, "AbilityModificationArray", c_playerAny);
            if ((libCore_gv_talents_TalentData[lv_itTalentIndex].lv_abilityModifications <= 0)) {
                continue;
            }
            else {
                autoC32767C7_ae = libCore_gv_talents_TalentData[lv_itTalentIndex].lv_abilityModifications;
                autoC32767C7_ai = 1;
                lv_itAbilityMod = 1;
                for ( ; ( (autoC32767C7_ai >= 0 && lv_itAbilityMod <= autoC32767C7_ae) || (autoC32767C7_ai <= 0 && lv_itAbilityMod >= autoC32767C7_ae) ) ; lv_itAbilityMod += autoC32767C7_ai ) {
                    lv_numberOfFieldChanges = CatalogFieldValueCount(c_gameCatalogTalent, lv_talentCatalogEntry, "AbilityModificationArray[" + IntToString(lv_itAbilityMod - 1) + "].Modifications", c_playerAny);
                    if ((lv_numberOfFieldChanges > libCore_gv_dataMaxCatalogChangesPerAbility)) {
                        TextExpressionSetToken("Param/Expression/lib_Core_CEF49063", "A", StringToText(lv_talentID));
                        TextExpressionSetToken("Param/Expression/lib_Core_CEF49063", "B", IntToText((lv_itRank - 1)));
                        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_CEF49063"), true);
                        lv_numberOfFieldChanges = libCore_gv_dataMaxCatalogChangesPerAbility;
                        continue;
                    }
                    else {
                    }
                    auto14C6FF65_ae = lv_numberOfFieldChanges;
                    auto14C6FF65_ai = 1;
                    lv_itAbilityModChange = 1;
                    for ( ; ( (auto14C6FF65_ai >= 0 && lv_itAbilityModChange <= auto14C6FF65_ae) || (auto14C6FF65_ai <= 0 && lv_itAbilityModChange >= auto14C6FF65_ae) ) ; lv_itAbilityModChange += auto14C6FF65_ai ) {
                        lv_changeTypeInt = CatalogFieldValueGetAsInt(c_gameCatalogTalent, lv_talentCatalogEntry, "AbilityModificationArray[" + IntToString((lv_itAbilityMod - 1)) + "].Modifications[" + IntToString((lv_itAbilityModChange - 1)) + "].Type", c_playerAny);
                        libCore_gv_talents_TalentData[lv_itTalentIndex].lv_abilityModificationData.lv_changeType[lv_itAbilityMod][lv_itAbilityModChange] = lv_changeTypeInt;
                        lv_catalogInt = CatalogFieldValueGetAsInt(c_gameCatalogTalent, lv_talentCatalogEntry, "AbilityModificationArray[" + IntToString((lv_itAbilityMod - 1)) + "].Modifications[" + IntToString((lv_itAbilityModChange - 1)) + "].Catalog", c_playerAny);
                        libCore_gv_talents_TalentData[lv_itTalentIndex].lv_abilityModificationData.lv_catalog[lv_itAbilityMod][lv_itAbilityModChange] = lv_catalogInt;
                        libCore_gv_talents_TalentData[lv_itTalentIndex].lv_abilityModificationData.lv_field[lv_itAbilityMod][lv_itAbilityModChange] = CatalogFieldValueGet(c_gameCatalogTalent, lv_talentCatalogEntry, "AbilityModificationArray[" + IntToString((lv_itAbilityMod - 1)) + "].Modifications[" + IntToString((lv_itAbilityModChange - 1)) + "].Field", c_playerAny);
                        libCore_gv_talents_TalentData[lv_itTalentIndex].lv_abilityModificationData.lv_fieldIsInteger[lv_itAbilityMod][lv_itAbilityModChange] = (CatalogFieldValueGetAsInt(c_gameCatalogTalent, lv_talentCatalogEntry, "AbilityModificationArray[" + IntToString((lv_itAbilityMod - 1)) + "].Modifications[" + IntToString((lv_itAbilityModChange - 1)) + "].FieldIsInteger", c_playerAny) == 1);
                        libCore_gv_talents_TalentData[lv_itTalentIndex].lv_abilityModificationData.lv_value[lv_itAbilityMod][lv_itAbilityModChange] = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_talentCatalogEntry, "AbilityModificationArray[" + IntToString((lv_itAbilityMod - 1)) + "].Modifications[" + IntToString((lv_itAbilityModChange - 1)) + "].Value", c_playerAny));
                        if ((libCore_gv_talents_TalentData[lv_itTalentIndex].lv_abilityModificationData.lv_changeType[lv_itAbilityMod][lv_itAbilityModChange] == c_talentModificationCatalogReplacement)) {
                            libCore_gv_talents_TalentData[lv_itTalentIndex].lv_abilityModificationData.lv_catalogReplaceFrom[lv_itAbilityMod][lv_itAbilityModChange] = CatalogFieldValueGet(c_gameCatalogTalent, lv_talentCatalogEntry, "AbilityModificationArray[" + IntToString((lv_itAbilityMod - 1)) + "].Modifications[" + IntToString((lv_itAbilityModChange - 1)) + "].Entry", c_playerAny);
                            libCore_gv_talents_TalentData[lv_itTalentIndex].lv_abilityModificationData.lv_catalogChangeTo[lv_itAbilityMod][lv_itAbilityModChange] = CatalogFieldValueGet(c_gameCatalogTalent, lv_talentCatalogEntry, "AbilityModificationArray[" + IntToString((lv_itAbilityMod - 1)) + "].Modifications[" + IntToString((lv_itAbilityModChange - 1)) + "].StringReplacement", c_playerAny);
                        }
                        else {
                            libCore_gv_talents_TalentData[lv_itTalentIndex].lv_abilityModificationData.lv_entry[lv_itAbilityMod][lv_itAbilityModChange] = CatalogFieldValueGet(c_gameCatalogTalent, lv_talentCatalogEntry, "AbilityModificationArray[" + IntToString((lv_itAbilityMod - 1)) + "].Modifications[" + IntToString((lv_itAbilityModChange - 1)) + "].Entry", c_playerAny);
                            libCore_gv_talents_TalentData[lv_itTalentIndex].lv_abilityModificationData.lv_stringReplacementValue[lv_itAbilityMod][lv_itAbilityModChange] = CatalogFieldValueGet(c_gameCatalogTalent, lv_talentCatalogEntry, "AbilityModificationArray[" + IntToString((lv_itAbilityMod - 1)) + "].Modifications[" + IntToString((lv_itAbilityModChange - 1)) + "].StringReplacement", c_playerAny);
                        }
                    }
                    libCore_gv_talents_TalentData[lv_itTalentIndex].lv_abilityModificationData.lv_numberOfFieldChanges[lv_itAbilityMod] = lv_numberOfFieldChanges;
                }
            }
        }
        libCore_gv_talents_TalentData[lv_itTalentIndex].lv_rankCount = lv_rankCount;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_TalentsDataInitialization_Init () {
    libCore_gt_TalentsDataInitialization = TriggerCreate("libCore_gt_TalentsDataInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talents Profile Data Initialization
//--------------------------------------------------------------------------------------------------
bool libCore_gt_TalentsProfileDataInitialization_Func (bool testConds, bool runActions) {
    int auto14307038_ae;
    int auto14307038_ai;
    int auto78CD6C1B_ae;
    int auto78CD6C1B_ai;

    // Variable Declarations
    int lv_itTalentProfileIndex;
    int lv_itTalent;
    string lv_talentProfileID;
    int lv_talentCount;

    // Variable Initialization
    lv_talentProfileID = "";

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_talents_TalentProfileCount = CatalogEntryCount(c_gameCatalogTalentProfile);
    if ((libCore_gv_talents_TalentProfileCount > libCore_gv_talents_MaxTalentProfileEntryCount_C)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Core_78D601A3"), true);
        libCore_gv_talents_TalentProfileCount = libCore_gv_talents_MaxTalentProfileEntryCount_C;
    }
    else {
    }
    auto14307038_ae = libCore_gv_talents_TalentProfileCount;
    auto14307038_ai = 1;
    lv_itTalentProfileIndex = 1;
    for ( ; ( (auto14307038_ai >= 0 && lv_itTalentProfileIndex <= auto14307038_ae) || (auto14307038_ai <= 0 && lv_itTalentProfileIndex >= auto14307038_ae) ) ; lv_itTalentProfileIndex += auto14307038_ai ) {
        lv_talentProfileID = (CatalogEntryGet(c_gameCatalogTalentProfile, lv_itTalentProfileIndex));
        libCore_gv_talents_TalentProfiles[lv_itTalentProfileIndex].lv_talentProfileCatalogLink = (lv_talentProfileID);
        libCore_gv_talents_TalentProfiles[lv_itTalentProfileIndex].lv_name = StringExternal(CatalogFieldValueGet(c_gameCatalogTalentProfile, lv_talentProfileID, "Name", c_playerAny));
        libCore_gv_talents_TalentProfiles[lv_itTalentProfileIndex].lv_hidden = (CatalogFieldValueGetAsInt(c_gameCatalogTalentProfile, lv_talentProfileID, "Flags[Hidden]", c_playerAny) != 0);
        lv_talentCount = CatalogFieldValueCount(c_gameCatalogTalentProfile, lv_talentProfileID, "Talents", c_playerAny);
        if ((lv_talentCount > libCore_gv_talents_MaxTalentPoints_C)) {
            TextExpressionSetToken("Param/Expression/lib_Core_8159FAB5", "A", StringToText(lv_talentProfileID));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Core_8159FAB5"), true);
            continue;
        }
        else {
        }
        libCore_gv_talents_TalentProfiles[lv_itTalentProfileIndex].lv_talentCount = lv_talentCount;
        auto78CD6C1B_ae = lv_talentCount;
        auto78CD6C1B_ai = 1;
        lv_itTalent = 1;
        for ( ; ( (auto78CD6C1B_ai >= 0 && lv_itTalent <= auto78CD6C1B_ae) || (auto78CD6C1B_ai <= 0 && lv_itTalent >= auto78CD6C1B_ae) ) ; lv_itTalent += auto78CD6C1B_ai ) {
            libCore_gv_talents_TalentProfiles[lv_itTalentProfileIndex].lv_talents[lv_itTalent] = libCore_gf_TalentsTalentIndexFromTalentLink((CatalogFieldValueGet(c_gameCatalogTalentProfile, lv_talentProfileID, "Talents[" + IntToString((lv_itTalent - 1)) + "]", c_playerAny)));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_TalentsProfileDataInitialization_Init () {
    libCore_gt_TalentsProfileDataInitialization = TriggerCreate("libCore_gt_TalentsProfileDataInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talents Points Per Level Initialization
//--------------------------------------------------------------------------------------------------
bool libCore_gt_TalentsPointsPerLevelInitialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_bALTalentPoints[1] = 1;
    libCore_gv_bALTalentPoints[2] = 1;
    libCore_gv_bALTalentPoints[3] = 1;
    libCore_gv_bALTalentPoints[4] = 1;
    libCore_gv_bALTalentPoints[5] = 1;
    libCore_gv_bALTalentPoints[6] = 1;
    libCore_gv_bALTalentPoints[7] = 1;
    libCore_gv_bALTalentPoints[8] = 1;
    libCore_gv_bALTalentPoints[9] = 1;
    libCore_gv_bALTalentPoints[10] = 1;
    libCore_gv_bALTalentPoints[11] = 1;
    libCore_gv_bALTalentPoints[12] = 1;
    libCore_gv_bALTalentPoints[13] = 1;
    libCore_gv_bALTalentPoints[14] = 1;
    libCore_gv_bALTalentPoints[15] = 1;
    libCore_gv_bALTalentPoints[16] = 1;
    libCore_gv_bALTalentPoints[17] = 1;
    libCore_gv_bALTalentPoints[18] = 1;
    libCore_gv_bALTalentPoints[19] = 1;
    libCore_gv_bALTalentPoints[20] = 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_TalentsPointsPerLevelInitialization_Init () {
    libCore_gt_TalentsPointsPerLevelInitialization = TriggerCreate("libCore_gt_TalentsPointsPerLevelInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talents Bucket Tier Levels Data Initialization
//--------------------------------------------------------------------------------------------------
bool libCore_gt_TalentsBucketTierLevelsDataInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pickCount;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pickCount = libCore_gv_talentsBucket_MaxPicksPerTier_DEBUG_C;
    libCore_gv_talentsBucket_TierLevels[1].lv_picks = lv_pickCount;
    libCore_gv_talentsBucket_TierLevels[1].lv_level = 1;
    libCore_gv_talentsBucket_TierLevels[1].lv_tierType = libCore_ge_TalentBucketTierType_NormalTalent;
    libCore_gv_talentsBucket_TierLevels[2].lv_picks = lv_pickCount;
    libCore_gv_talentsBucket_TierLevels[2].lv_level = 4;
    libCore_gv_talentsBucket_TierLevels[2].lv_tierType = libCore_ge_TalentBucketTierType_NormalTalent;
    libCore_gv_talentsBucket_TierLevels[3].lv_picks = lv_pickCount;
    libCore_gv_talentsBucket_TierLevels[3].lv_level = 7;
    libCore_gv_talentsBucket_TierLevels[3].lv_tierType = libCore_ge_TalentBucketTierType_NormalTalent;
    libCore_gv_talentsBucket_TierLevels[4].lv_picks = libCore_gv_talentsBucket_MaxHeroicPicks_C;
    libCore_gv_talentsBucket_TierLevels[4].lv_level = 10;
    libCore_gv_talentsBucket_TierLevels[4].lv_tierType = libCore_ge_TalentBucketTierType_HeroicAbility;
    libCore_gv_talentsBucket_TierLevels[5].lv_picks = lv_pickCount;
    libCore_gv_talentsBucket_TierLevels[5].lv_level = 13;
    libCore_gv_talentsBucket_TierLevels[5].lv_tierType = libCore_ge_TalentBucketTierType_NormalTalent;
    libCore_gv_talentsBucket_TierLevels[6].lv_picks = lv_pickCount;
    libCore_gv_talentsBucket_TierLevels[6].lv_level = 16;
    libCore_gv_talentsBucket_TierLevels[6].lv_tierType = libCore_ge_TalentBucketTierType_NormalTalent;
    libCore_gv_talentsBucket_TierLevels[7].lv_picks = lv_pickCount;
    libCore_gv_talentsBucket_TierLevels[7].lv_level = 20;
    libCore_gv_talentsBucket_TierLevels[7].lv_tierType = libCore_ge_TalentBucketTierType_StormTalent;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_TalentsBucketTierLevelsDataInitialization_Init () {
    libCore_gt_TalentsBucketTierLevelsDataInitialization = TriggerCreate("libCore_gt_TalentsBucketTierLevelsDataInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent A/B Choice Data Initialization
//--------------------------------------------------------------------------------------------------
bool libCore_gt_TalentABChoiceDataInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_choiceIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_choiceIndex = (libCore_ge_ABChoiceNames_CombatStyle);
    libCore_gv_aBChoices[lv_choiceIndex].lv_unlockLevel = 3;
    libCore_gv_aBChoices[lv_choiceIndex].lv_numberOfButtons = 2;
    libCore_gv_aBChoices[lv_choiceIndex].lv_choiceText = StringExternal("Param/Value/lib_Core_2CA4606C");
    lv_choiceIndex = (libCore_ge_ABChoiceNames_HeroicAbility);
    libCore_gv_aBChoices[lv_choiceIndex].lv_unlockLevel = 9;
    libCore_gv_aBChoices[lv_choiceIndex].lv_numberOfButtons = 2;
    libCore_gv_aBChoices[lv_choiceIndex].lv_choiceText = StringExternal("Param/Value/lib_Core_65C21F31");
    lv_choiceIndex = (libCore_ge_ABChoiceNames_Mastery);
    libCore_gv_aBChoices[lv_choiceIndex].lv_unlockLevel = 6;
    libCore_gv_aBChoices[lv_choiceIndex].lv_numberOfButtons = 3;
    libCore_gv_aBChoices[lv_choiceIndex].lv_choiceText = StringExternal("Param/Value/lib_Core_30F1900C");
    libCore_gv_aBChoices[lv_choiceIndex].lv_appliesMasteryModifications = true;
    lv_choiceIndex = (libCore_ge_ABChoiceNames_Mount);
    libCore_gv_aBChoices[lv_choiceIndex].lv_unlockLevel = 26;
    libCore_gv_aBChoices[lv_choiceIndex].lv_numberOfButtons = 2;
    libCore_gv_aBChoices[lv_choiceIndex].lv_choiceText = StringExternal("Param/Value/lib_Core_F1FEC480");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_TalentABChoiceDataInitialization_Init () {
    libCore_gt_TalentABChoiceDataInitialization = TriggerCreate("libCore_gt_TalentABChoiceDataInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: XP Value Initialization For Unit
//--------------------------------------------------------------------------------------------------
bool libCore_gt_XPValueInitializationForUnit_Func (bool testConds, bool runActions) {
    int auto2FCD0CEE_ae;

    // Variable Declarations
    int lv_i;
    int lv_increment;
    string lv_unitType;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto2FCD0CEE_ae = CatalogEntryCount(c_gameCatalogUnit);
    lv_i = 1;
    for ( ; lv_i <= auto2FCD0CEE_ae ; lv_i += 1 ) {
        lv_unitType = UnitTypeFromString((CatalogEntryGet(c_gameCatalogUnit, lv_i)));
        if ((StringToInt(CatalogFieldValueGet(c_gameCatalogUnit, lv_unitType, "KillXP", c_playerAny)) > 0)) {
            DataTableSetInt(true, libCore_gf_InitialXPDataTableName(lv_unitType), CatalogFieldValueGetAsInt(c_gameCatalogUnit, lv_unitType, "KillXP", c_playerAny));
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_XPValueInitializationForUnit_Init () {
    libCore_gt_XPValueInitializationForUnit = TriggerCreate("libCore_gt_XPValueInitializationForUnit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Enable Granular Bounty XP Math Display
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataEnableGranularBountyXPMathDisplay_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_dataXPGranularBountyXPMathDisplayEnabled = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataEnableGranularBountyXPMathDisplay_Init () {
    libCore_gt_DataEnableGranularBountyXPMathDisplay = TriggerCreate("libCore_gt_DataEnableGranularBountyXPMathDisplay_Func");
    TriggerAddEventChatMessage(libCore_gt_DataEnableGranularBountyXPMathDisplay, c_playerAny, "-showxpmath", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - XP - Initialize Level XP Values
//--------------------------------------------------------------------------------------------------
bool libCore_gt_DataXPInitializeLevelXPValues_Func (bool testConds, bool runActions) {
    int auto546944EC_ae;
    int auto546944EC_ai;

    // Variable Declarations
    int lv_level;
    fixed lv_totalXP;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto546944EC_ae = libCore_gv_bALMaxLevel;
    auto546944EC_ai = 1;
    lv_level = 1;
    for ( ; ( (auto546944EC_ai >= 0 && lv_level <= auto546944EC_ae) || (auto546944EC_ai <= 0 && lv_level >= auto546944EC_ae) ) ; lv_level += auto546944EC_ai ) {
        lv_totalXP += StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "HeroXPCurve", "VeterancyLevelArray[" + IntToString((lv_level - 1)) + "].MinVeterancyXP", c_playerAny));
        libCore_gv_dataXPLevelXPValues[lv_level] = lv_totalXP;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_DataXPInitializeLevelXPValues_Init () {
    libCore_gt_DataXPInitializeLevelXPValues = TriggerCreate("libCore_gt_DataXPInitializeLevelXPValues_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Storm Mod
//--------------------------------------------------------------------------------------------------
bool libCore_gt_InitializeStormMod_Func (bool testConds, bool runActions) {
    int auto636F45C9_ae;
    int auto636F45C9_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libSprt_gv_performanceTestPerformanceTestRunning = GameIsExaminable();
    libCore_gv_dEBUGGameIsOnline = GameIsOnline();
    GameSetSpeedValue(c_gameSpeedNormal);
    GameSetSpeedLocked(true);
    TimerStart(libGame_gv_gobalTimer, c_timerDurationInfinite, false, c_timeGame);
    GameSetPauseable(false);
    SetScoreTimer(libGame_gv_gameTimer);
    UnitEventSetNullVariableInvalid(true);
    TriggerExecute(libCore_gt_InitializeDataMiningAndDebugOutput, true, false);
    TriggerExecute(libCore_gt_InitializeData, true, false);
    TriggerExecute(libGame_gt_InitializeBanks, true, false);
    TriggerExecute(libGame_gt_InitializePlayers, true, false);
    TriggerExecute(libGame_gt_InitializeGameSystems, true, false);
    TriggerExecute(libUIUI_gt_InitializeUI, true, false);
    TriggerExecute(libMapM_gt_InitializeMapMechanics, true, false);
    TriggerExecute(libGame_gt_InitializeVisibility, true, false);
    libCore_gf_SendEventIncludeModInitialization();
    if ((libCore_gv_dEBUGErrorDuringInitialization == true)) {
        return true;
    }
    else {
    }
    TriggerExecute(libCore_gt_InitializeMiscStuff, true, false);
    if ((GameTestConfigType() == 1)) {
        return true;
    }
    else {
    }
    if ((GameTestConfigType() == 2)) {
        TriggerExecute(libSprt_gt_PerformanceTestSpawnHeroesForHeroesPerformanceTestMap, true, false);
    }
    else {
    }
    if ((GameTestConfigType() == 10)) {
        TriggerExecute(libSprt_gt_AutomatedBuildTest, true, false);
    }
    else {
    }
    if ((libSprt_gv_performanceTestPerformanceTestRunning == true)) {
        TriggerExecute(libSprt_gt_PerformanceTestRunPerformanceTest, true, false);
    }
    else {
    }
    libSprt_gf_DataMiningSendStartGameEvents();
    if ((libCore_gv_sYSStartGame == true)) {
        auto636F45C9_ae = libCore_gv_bALMaxPlayers;
        auto636F45C9_ai = 1;
        lv_itPlayer = 1;
        for ( ; ( (auto636F45C9_ai >= 0 && lv_itPlayer <= auto636F45C9_ae) || (auto636F45C9_ai <= 0 && lv_itPlayer >= auto636F45C9_ae) ) ; lv_itPlayer += auto636F45C9_ai ) {
            libUIUI_gf_UIHeroConsoleShowHideForPlayer(false, lv_itPlayer);
            UISetMode(libCore_gv_playerGroupFromPlayer[lv_itPlayer], c_uiModeFullscreen, c_transitionDurationImmediate);
        }
    }
    else {
    }
    Wait(0.125, c_timeGame);
    if ((libCore_gv_sYSStartGame == true)) {
        TriggerExecute(libGame_gt_StartGame, true, false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_InitializeStormMod_Init () {
    libCore_gt_InitializeStormMod = TriggerCreate("libCore_gt_InitializeStormMod_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Data Mining And Debug Output
//--------------------------------------------------------------------------------------------------
bool libCore_gt_InitializeDataMiningAndDebugOutput_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugSetTypeFile(1, (libCore_gv_debugPathDebugOutput + ".txt"));
    TriggerDebugSetTypeFile(2, (libCore_gv_debugPathScoreValueLog + ".txt"));
    TriggerDebugSetTypeFile(3, (libCore_gv_debugPathEncouragementDataTrackingLog + ".txt"));
    TriggerDebugSetTypeFile(5, (libSprt_gv_performanceTestFPSLogFile + ".txt"));
    TriggerDebugSetTypeFile(6, (libCore_gv_debugPathDeathTimerRenderPrioritiesLog + ".txt"));
    if ((libCore_gv_dEBUGDebuggingEnabled == false)) {
        TriggerDebugOutputEnable(false);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_InitializeDataMiningAndDebugOutput_Init () {
    libCore_gt_InitializeDataMiningAndDebugOutput = TriggerCreate("libCore_gt_InitializeDataMiningAndDebugOutput_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Data
//--------------------------------------------------------------------------------------------------
bool libCore_gt_InitializeData_Func (bool testConds, bool runActions) {
    int autoFE901BA2_ae;
    int autoFE901BA2_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_mAPMapTileset = GameTerrainSet();
    libCore_gv_mAPMapLight = (CatalogFieldValueGet(c_gameCatalogTerrain, libCore_gv_mAPMapTileset, "Lighting", c_playerAny));
    libGame_gf_SetStormMapLighting(libCore_gv_mAPMapLight, PlayerGroupAll(), 0.0);
    CatalogFieldValueSet(c_gameCatalogUnit, "XelNagaWatchTower", "EnergyMax", libCore_gv_cOMPUTER_TeamOrder, FixedToString((libCore_gv_data_WatchTower_CaptureTime_C * 16.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "XelNagaWatchTower", "EnergyMax", libCore_gv_cOMPUTER_TeamChaos, FixedToString((libCore_gv_data_WatchTower_CaptureTime_C * 16.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "XelNagaWatchTower", "EnergyMax", libCore_gv_cOMPUTER_Neutral, FixedToString((libCore_gv_data_WatchTower_CaptureTime_C * 16.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownMercCampCaptureBeacon", "EnergyMax", libCore_gv_cOMPUTER_TeamOrder, FixedToString((libCore_gv_data_WatchTower_CaptureTime_C * 16.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownMercCampCaptureBeacon", "EnergyMax", libCore_gv_cOMPUTER_TeamChaos, FixedToString((libCore_gv_data_WatchTower_CaptureTime_C * 16.0), 0));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownMercCampCaptureBeacon", "EnergyMax", libCore_gv_cOMPUTER_Neutral, FixedToString((libCore_gv_data_WatchTower_CaptureTime_C * 16.0), 0));
    libCore_gv_cOLORPlayerColor = libCore_gf_GetAllianceColorFromGameUIData("Self", c_playerAny);
    libCore_gv_cOLORAllyColor = libCore_gf_GetAllianceColorFromGameUIData("Ally", c_playerAny);
    libCore_gv_cOLOREnemyColor = libCore_gf_GetAllianceColorFromGameUIData("Hostile", c_playerAny);
    libCore_gv_cOLORNeutralColor = libCore_gf_GetAllianceColorFromGameUIData("Neutral", c_playerAny);
    TechTreeUpgradeAddLevel(libCore_gv_cOMPUTER_Hostile, "CreepColor", 1);
    libCore_gv_cOLORJungleCreepColor = libCore_gf_GetAllianceColorFromGameUIData("Hostile", libCore_gv_cOMPUTER_Hostile);
    autoFE901BA2_ae = libCore_gv_bALMaxEnginePlayerCount;
    autoFE901BA2_ai = 1;
    lv_itPlayer = 0;
    for ( ; ( (autoFE901BA2_ai >= 0 && lv_itPlayer <= autoFE901BA2_ae) || (autoFE901BA2_ai <= 0 && lv_itPlayer >= autoFE901BA2_ae) ) ; lv_itPlayer += autoFE901BA2_ai ) {
        libCore_gv_playerGroupFromPlayer[lv_itPlayer] = PlayerGroupSingle(lv_itPlayer);
    }
    TriggerExecute(libCore_gt_TalentsDataInitialization, true, true);
    TriggerExecute(libCore_gt_ArtifactDataInitialization, true, true);
    TriggerExecute(libCore_gt_TalentsBucketTierLevelsDataInitialization, true, true);
    TriggerExecute(libCore_gt_TalentABChoiceDataInitialization, true, true);
    TriggerExecute(libCore_gt_TalentsProfileDataInitialization, true, true);
    TriggerExecute(libCore_gt_DataHeroesHeroClassData, true, true);
    TriggerExecute(libCore_gt_DataHeroesHeroData, true, true);
    TriggerExecute(libMapM_gt_DataJungleCampDefenderData, true, true);
    TriggerExecute(libMapM_gt_DataJungleCampMercData, true, true);
    TriggerExecute(libGame_gt_EncouragementDataInitializeThresholdValues, true, true);
    TriggerExecute(libCore_gt_DataXPInitializeLevelXPValues, true, true);
    TriggerExecute(libCore_gt_XPValueInitializationForUnit, true, false);
    TriggerExecute(libCore_gt_DataInitializeMountData, true, true);
    TriggerExecute(libCore_gt_DataInitializeSkinData, true, true);
    TriggerExecute(libCore_gt_DataAnnouncerVOMapDataFields, true, true);
    TriggerExecute(libCore_gt_DataHeroVOInitializeHeroVOData, true, true);
    TriggerExecute(libCore_gt_DataDeathTimes, true, true);
    TriggerExecute(libCore_gt_TalentsPointsPerLevelInitialization, true, true);
    TriggerExecute(libCore_gt_DataMinionScalingData, true, true);
    TriggerExecute(libCore_gt_DataMinionWaveCompositionData, true, true);
    TriggerExecute(libAIAI_gt_HeroAIInitializeDifficultyLevelData, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_InitializeData_Init () {
    libCore_gt_InitializeData = TriggerCreate("libCore_gt_InitializeData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Misc Stuff
//--------------------------------------------------------------------------------------------------
bool libCore_gt_InitializeMiscStuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(ActorFrom("::Scene"), "SceneHaloSetColor 255,0,0");
    ActorSendAsText(libNtve_gf_MainActorofUnit(libGame_gv_teams[1].lv_core), StringExternal("Param/Value/lib_Core_7B6F68DA"));
    ActorSendAsText(libNtve_gf_MainActorofUnit(libGame_gv_teams[2].lv_core), StringExternal("Param/Value/lib_Core_1BF06750"));
    if ((libCore_gv_sYSGameMode != libCore_ge_GameModes_Tutorial1)) {
        libSond_gf_SoundtrackPlayMapIntroSoundtrackForAllPlayers();
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_InitializeMiscStuff_Init () {
    libCore_gt_InitializeMiscStuff = TriggerCreate("libCore_gt_InitializeMiscStuff_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: _SendTransmissionTick
//--------------------------------------------------------------------------------------------------
bool libCore_gt__SendTransmissionTick_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libCore_gv_zS_SendTransmissionCampaignIndex == 0) && (libCore_gv_zS_SendTransmissionCampaignPlayingTick > 0)) {
            libCore_gv_zS_SendTransmissionCampaignPlayingTick -= 1;
        }
        else {
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt__SendTransmissionTick_Init () {
    libCore_gt__SendTransmissionTick = TriggerCreate("libCore_gt__SendTransmissionTick_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Auto-Reveal Region Controller
//--------------------------------------------------------------------------------------------------
bool libCore_gt_AutoRevealRegionController_Func (bool testConds, bool runActions) {
    int auto1AB864A5_ae;
    int auto1AB864A5_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        auto1AB864A5_ae = (libCore_gv_autoRevealers.lv_count - 1);
        auto1AB864A5_ai = 1;
        lv_i = 0;
        for ( ; ( (auto1AB864A5_ai >= 0 && lv_i <= auto1AB864A5_ae) || (auto1AB864A5_ai <= 0 && lv_i >= auto1AB864A5_ae) ) ; lv_i += auto1AB864A5_ai ) {
            if ((UnitGroupCount(UnitGroup(null, libCore_gv_autoRevealers.lv_triggeringPlayers[lv_i], libCore_gv_autoRevealers.lv_triggeringRegions[lv_i], UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), c_unitCountAlive) > 0)) {
                VisRevealerEnable(libCore_gv_autoRevealers.lv_revealers[lv_i], true);
            }
            else {
                VisRevealerEnable(libCore_gv_autoRevealers.lv_revealers[lv_i], false);
            }
        }
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libCore_gt_AutoRevealRegionController_Init () {
    libCore_gt_AutoRevealRegionController = TriggerCreate("libCore_gt_AutoRevealRegionController_Func");
}

void libCore_InitTriggers () {
    libCore_gt_DataAnnouncerVOMapDataFields_Init();
    libCore_gt_ArtifactDataInitialization_Init();
    libCore_gt_DataVehicleLevelUpScalingDragonKnight_Init();
    libCore_gt_DataHeroesHeroClassData_Init();
    libCore_gt_DataHeroesHeroData_Init();
    libCore_gt_DataHeroVOMapDataFields_Init();
    libCore_gt_DataHeroVOInitializeHeroVOData_Init();
    libCore_gt_DataMinionScalingData_Init();
    libCore_gt_DataMinionWaveCompositionData_Init();
    libCore_gt_DataInitializeMountData_Init();
    libCore_gt_DataDeathTimes_Init();
    libCore_gt_DataInitializeSkinData_Init();
    libCore_gt_TalentsDataInitialization_Init();
    libCore_gt_TalentsProfileDataInitialization_Init();
    libCore_gt_TalentsPointsPerLevelInitialization_Init();
    libCore_gt_TalentsBucketTierLevelsDataInitialization_Init();
    libCore_gt_TalentABChoiceDataInitialization_Init();
    libCore_gt_XPValueInitializationForUnit_Init();
    libCore_gt_DataEnableGranularBountyXPMathDisplay_Init();
    libCore_gt_DataXPInitializeLevelXPValues_Init();
    libCore_gt_InitializeStormMod_Init();
    libCore_gt_InitializeDataMiningAndDebugOutput_Init();
    libCore_gt_InitializeData_Init();
    libCore_gt_InitializeMiscStuff_Init();
    libCore_gt__SendTransmissionTick_Init();
    libCore_gt_AutoRevealRegionController_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libCore_InitLib_completed = false;

void libCore_InitLib () {
    if (libCore_InitLib_completed) {
        return;
    }

    libCore_InitLib_completed = true;

    libCore_InitLibraries();
    libCore_InitVariables();
    libCore_InitTriggers();
}

include "TriggerLibs/GameLib"
include "TriggerLibs/MapMechanicsLib"
include "TriggerLibs/AILib"
include "TriggerLibs/UILib"
include "TriggerLibs/StartingExperienceLib"
include "TriggerLibs/SoundLib"
include "TriggerLibs/SupportLib"

